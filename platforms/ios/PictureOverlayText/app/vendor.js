(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["vendor"],{

/***/ "../node_modules/@nativescript/core/color/color-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var types = __webpack_require__("../node_modules/@nativescript/core/utils/types.js");
var knownColors = __webpack_require__("../node_modules/@nativescript/core/color/known-colors.js");
var parser_1 = __webpack_require__("../node_modules/@nativescript/core/css/parser.js");
var SHARP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = (function () {
    function Color() {
        if (arguments.length === 1) {
            var arg = arguments[0];
            if (types.isString(arg)) {
                if (isRgbOrRgba(arg)) {
                    this._argb = argbFromRgbOrRgba(arg);
                }
                else if (isHslOrHsla(arg)) {
                    this._argb = argbFromHslOrHsla(arg);
                }
                else if (knownColors.isKnownName(arg)) {
                    var hex = knownColors.getKnownColor(arg);
                    this._name = arg;
                    this._argb = this._argbFromString(hex);
                }
                else if (HEX_REGEX.test(arg)) {
                    var hex = this._normalizeHex(arg);
                    this._argb = this._argbFromString(hex);
                }
                else {
                    throw new Error("Invalid color: " + arg);
                }
            }
            else if (types.isNumber(arg)) {
                this._argb = arg >>> 0;
            }
            else {
                throw new Error("Expected 1 or 4 constructor parameters.");
            }
        }
        else if (arguments.length === 4) {
            this._argb = (arguments[0] & 0xFF) * 0x01000000
                + (arguments[1] & 0xFF) * 0x00010000
                + (arguments[2] & 0xFF) * 0x00000100
                + (arguments[3] & 0xFF) * 0x00000001;
        }
        else {
            throw new Error("Expected 1 or 4 constructor parameters.");
        }
    }
    Object.defineProperty(Color.prototype, "a", {
        get: function () { return (this._argb / 0x01000000) & 0xFF; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "r", {
        get: function () { return (this._argb / 0x00010000) & 0xFF; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "g", {
        get: function () { return (this._argb / 0x00000100) & 0xFF; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "b", {
        get: function () { return (this._argb / 0x00000001) & 0xFF; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "argb", {
        get: function () {
            return this._argb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        get: function () {
            if (this.a === 0xFF) {
                return ("#" + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
            }
            else {
                return ("#" + this._componentToHex(this.a) + this._componentToHex(this.r) + this._componentToHex(this.g) + this._componentToHex(this.b)).toUpperCase();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "ios", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "android", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Color.prototype._argbFromString = function (hex) {
        if (hex.charAt(0) === "#") {
            hex = hex.substr(1);
        }
        if (hex.length === 3) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        else if (hex.length === 4) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
        }
        var intVal = parseInt(hex, 16);
        if (hex.length === 6) {
            intVal = (intVal & 0x00FFFFFF) + 0xFF000000;
        }
        return intVal;
    };
    Color.prototype.equals = function (value) {
        return value && this.argb === value.argb;
    };
    Color.equals = function (value1, value2) {
        if (!value1 && !value2) {
            return true;
        }
        if (!value1 || !value2) {
            return false;
        }
        return value1.equals(value2);
    };
    Color.isValid = function (value) {
        if (types.isNullOrUndefined(value) || value instanceof Color) {
            return true;
        }
        if (!types.isString(value)) {
            return false;
        }
        if (knownColors.isKnownName(value)) {
            return true;
        }
        return HEX_REGEX.test(value) || isRgbOrRgba(value) || isHslOrHsla(value);
    };
    Color.prototype._componentToHex = function (component) {
        var hex = component.toString(16);
        if (hex.length === 1) {
            hex = "0" + hex;
        }
        return hex;
    };
    Color.prototype._normalizeHex = function (hexStr) {
        if (hexStr.charAt(0) === SHARP && hexStr.length === 4) {
            hexStr = hexStr.charAt(0)
                + hexStr.charAt(1) + hexStr.charAt(1)
                + hexStr.charAt(2) + hexStr.charAt(2)
                + hexStr.charAt(3) + hexStr.charAt(3);
        }
        return hexStr;
    };
    Color.prototype.toString = function () {
        return this.hex;
    };
    return Color;
}());
exports.Color = Color;
function isRgbOrRgba(value) {
    var toLower = value.toLowerCase();
    return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === (toLower.length - 1);
}
function isHslOrHsla(value) {
    var toLower = value.toLowerCase();
    return (toLower.indexOf("hsl(") === 0 || toLower.indexOf("hsla(") === 0) && toLower.indexOf(")") === (toLower.length - 1);
}
function parseColorWithAlpha(value) {
    var toLower = value.toLowerCase();
    var parts = toLower.replace(/(rgb|hsl)a?\(/, "")
        .replace(")", "")
        .trim().split(",");
    var f = 255;
    var s = 255;
    var t = 255;
    var a = 255;
    if (parts[0]) {
        f = parseInt(parts[0].trim());
    }
    if (parts[1]) {
        s = parseInt(parts[1].trim());
    }
    if (parts[2]) {
        t = parseInt(parts[2].trim());
    }
    if (parts[3]) {
        a = Math.round(parseFloat(parts[3].trim()) * 255);
    }
    return { f: f, s: s, t: t, a: a };
}
function argbFromRgbOrRgba(value) {
    var _a = parseColorWithAlpha(value), r = _a.f, g = _a.s, b = _a.t, a = _a.a;
    return (a & 0xFF) * 0x01000000
        + (r & 0xFF) * 0x00010000
        + (g & 0xFF) * 0x00000100
        + (b & 0xFF);
}
function argbFromHslOrHsla(value) {
    var _a = parseColorWithAlpha(value), h = _a.f, s = _a.s, l = _a.t, a = _a.a;
    var _b = parser_1.convertHSLToRGBColor(h, s, l), r = _b.r, g = _b.g, b = _b.b;
    return (a & 0xFF) * 0x01000000
        + (r & 0xFF) * 0x00010000
        + (g & 0xFF) * 0x00000100
        + (b & 0xFF);
}
//# sourceMappingURL=color-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/color/color.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var common = __webpack_require__("../node_modules/@nativescript/core/color/color-common.js");
var Color = (function (_super) {
    __extends(Color, _super);
    function Color() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(Color.prototype, "ios", {
        get: function () {
            if (!this._ios) {
                this._ios = UIColor.alloc().initWithRedGreenBlueAlpha(this.r / 255, this.g / 255, this.b / 255, this.a / 255);
            }
            return this._ios;
        },
        enumerable: true,
        configurable: true
    });
    return Color;
}(common.Color));
exports.Color = Color;
//# sourceMappingURL=color.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/color/known-colors.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var _allColors = {};
function registerColor(name, value) {
    _allColors[name.toLowerCase()] = value;
    return value;
}
function isKnownName(name) {
    if (!name) {
        return undefined;
    }
    return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
    if (!name) {
        return undefined;
    }
    return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
exports.Transparent = registerColor("Transparent", "#00000000");
exports.AliceBlue = registerColor("AliceBlue", "#F0F8FF");
exports.AntiqueWhite = registerColor("AntiqueWhite", "#FAEBD7");
exports.Aqua = registerColor("Aqua", "#00FFFF");
exports.Aquamarine = registerColor("Aquamarine", "#7FFFD4");
exports.Azure = registerColor("Azure", "#F0FFFF");
exports.Beige = registerColor("Beige", "#F5F5DC");
exports.Bisque = registerColor("Bisque", "#FFE4C4");
exports.Black = registerColor("Black", "#000000");
exports.BlanchedAlmond = registerColor("BlanchedAlmond", "#FFEBCD");
exports.Blue = registerColor("Blue", "#0000FF");
exports.BlueViolet = registerColor("BlueViolet", "#8A2BE2");
exports.Brown = registerColor("Brown", "#A52A2A");
exports.BurlyWood = registerColor("BurlyWood", "#DEB887");
exports.CadetBlue = registerColor("CadetBlue", "#5F9EA0");
exports.Chartreuse = registerColor("Chartreuse", "#7FFF00");
exports.Chocolate = registerColor("Chocolate", "#D2691E");
exports.Coral = registerColor("Coral", "#FF7F50");
exports.CornflowerBlue = registerColor("CornflowerBlue", "#6495ED");
exports.Cornsilk = registerColor("Cornsilk", "#FFF8DC");
exports.Crimson = registerColor("Crimson", "#DC143C");
exports.Cyan = registerColor("Cyan", "#00FFFF");
exports.DarkBlue = registerColor("DarkBlue", "#00008B");
exports.DarkCyan = registerColor("DarkCyan", "#008B8B");
exports.DarkGoldenRod = registerColor("DarkGoldenRod", "#B8860B");
exports.DarkGray = registerColor("DarkGray", "#A9A9A9");
exports.DarkGreen = registerColor("DarkGreen", "#006400");
exports.DarkKhaki = registerColor("DarkKhaki", "#BDB76B");
exports.DarkMagenta = registerColor("DarkMagenta", "#8B008B");
exports.DarkOliveGreen = registerColor("DarkOliveGreen", "#556B2F");
exports.DarkOrange = registerColor("DarkOrange", "#FF8C00");
exports.DarkOrchid = registerColor("DarkOrchid", "#9932CC");
exports.DarkRed = registerColor("DarkRed", "#8B0000");
exports.DarkSalmon = registerColor("DarkSalmon", "#E9967A");
exports.DarkSeaGreen = registerColor("DarkSeaGreen", "#8FBC8F");
exports.DarkSlateBlue = registerColor("DarkSlateBlue", "#483D8B");
exports.DarkSlateGray = registerColor("DarkSlateGray", "#2F4F4F");
exports.DarkTurquoise = registerColor("DarkTurquoise", "#00CED1");
exports.DarkViolet = registerColor("DarkViolet", "#9400D3");
exports.DeepPink = registerColor("DeepPink", "#FF1493");
exports.DeepSkyBlue = registerColor("DeepSkyBlue", "#00BFFF");
exports.DimGray = registerColor("DimGray", "#696969");
exports.DodgerBlue = registerColor("DodgerBlue", "#1E90FF");
exports.FireBrick = registerColor("FireBrick", "#B22222");
exports.FloralWhite = registerColor("FloralWhite", "#FFFAF0");
exports.ForestGreen = registerColor("ForestGreen", "#228B22");
exports.Fuchsia = registerColor("Fuchsia", "#FF00FF");
exports.Gainsboro = registerColor("Gainsboro", "#DCDCDC");
exports.GhostWhite = registerColor("GhostWhite", "#F8F8FF");
exports.Gold = registerColor("Gold", "#FFD700");
exports.GoldenRod = registerColor("GoldenRod", "#DAA520");
exports.Gray = registerColor("Gray", "#808080");
exports.Green = registerColor("Green", "#008000");
exports.GreenYellow = registerColor("GreenYellow", "#ADFF2F");
exports.HoneyDew = registerColor("HoneyDew", "#F0FFF0");
exports.HotPink = registerColor("HotPink", "#FF69B4");
exports.IndianRed = registerColor("IndianRed", "#CD5C5C");
exports.Indigo = registerColor("Indigo", "#4B0082");
exports.Ivory = registerColor("Ivory", "#FFFFF0");
exports.Khaki = registerColor("Khaki", "#F0E68C");
exports.Lavender = registerColor("Lavender", "#E6E6FA");
exports.LavenderBlush = registerColor("LavenderBlush", "#FFF0F5");
exports.LawnGreen = registerColor("LawnGreen", "#7CFC00");
exports.LemonChiffon = registerColor("LemonChiffon", "#FFFACD");
exports.LightBlue = registerColor("LightBlue", "#ADD8E6");
exports.LightCoral = registerColor("LightCoral", "#F08080");
exports.LightCyan = registerColor("LightCyan", "#E0FFFF");
exports.LightGoldenRodYellow = registerColor("LightGoldenRodYellow", "#FAFAD2");
exports.LightGray = registerColor("LightGray", "#D3D3D3");
exports.LightGreen = registerColor("LightGreen", "#90EE90");
exports.LightPink = registerColor("LightPink", "#FFB6C1");
exports.LightSalmon = registerColor("LightSalmon", "#FFA07A");
exports.LightSeaGreen = registerColor("LightSeaGreen", "#20B2AA");
exports.LightSkyBlue = registerColor("LightSkyBlue", "#87CEFA");
exports.LightSlateGray = registerColor("LightSlateGray", "#778899");
exports.LightSteelBlue = registerColor("LightSteelBlue", "#B0C4DE");
exports.LightYellow = registerColor("LightYellow", "#FFFFE0");
exports.Lime = registerColor("Lime", "#00FF00");
exports.LimeGreen = registerColor("LimeGreen", "#32CD32");
exports.Linen = registerColor("Linen", "#FAF0E6");
exports.Magenta = registerColor("Magenta", "#FF00FF");
exports.Maroon = registerColor("Maroon", "#800000");
exports.MediumAquaMarine = registerColor("MediumAquaMarine", "#66CDAA");
exports.MediumBlue = registerColor("MediumBlue", "#0000CD");
exports.MediumOrchid = registerColor("MediumOrchid", "#BA55D3");
exports.MediumPurple = registerColor("MediumPurple", "#9370DB");
exports.MediumSeaGreen = registerColor("MediumSeaGreen", "#3CB371");
exports.MediumSlateBlue = registerColor("MediumSlateBlue", "#7B68EE");
exports.MediumSpringGreen = registerColor("MediumSpringGreen", "#00FA9A");
exports.MediumTurquoise = registerColor("MediumTurquoise", "#48D1CC");
exports.MediumVioletRed = registerColor("MediumVioletRed", "#C71585");
exports.MidnightBlue = registerColor("MidnightBlue", "#191970");
exports.MintCream = registerColor("MintCream", "#F5FFFA");
exports.MistyRose = registerColor("MistyRose", "#FFE4E1");
exports.Moccasin = registerColor("Moccasin", "#FFE4B5");
exports.NavajoWhite = registerColor("NavajoWhite", "#FFDEAD");
exports.Navy = registerColor("Navy", "#000080");
exports.OldLace = registerColor("OldLace", "#FDF5E6");
exports.Olive = registerColor("Olive", "#808000");
exports.OliveDrab = registerColor("OliveDrab", "#6B8E23");
exports.Orange = registerColor("Orange", "#FFA500");
exports.OrangeRed = registerColor("OrangeRed", "#FF4500");
exports.Orchid = registerColor("Orchid", "#DA70D6");
exports.PaleGoldenRod = registerColor("PaleGoldenRod", "#EEE8AA");
exports.PaleGreen = registerColor("PaleGreen", "#98FB98");
exports.PaleTurquoise = registerColor("PaleTurquoise", "#AFEEEE");
exports.PaleVioletRed = registerColor("PaleVioletRed", "#DB7093");
exports.PapayaWhip = registerColor("PapayaWhip", "#FFEFD5");
exports.PeachPuff = registerColor("PeachPuff", "#FFDAB9");
exports.Peru = registerColor("Peru", "#CD853F");
exports.Pink = registerColor("Pink", "#FFC0CB");
exports.Plum = registerColor("Plum", "#DDA0DD");
exports.PowderBlue = registerColor("PowderBlue", "#B0E0E6");
exports.Purple = registerColor("Purple", "#800080");
exports.RebeccaPurple = registerColor("RebeccaPurple", "#663399");
exports.Red = registerColor("Red", "#FF0000");
exports.RosyBrown = registerColor("RosyBrown", "#BC8F8F");
exports.RoyalBlue = registerColor("RoyalBlue", "#4169E1");
exports.SaddleBrown = registerColor("SaddleBrown", "#8B4513");
exports.Salmon = registerColor("Salmon", "#FA8072");
exports.SandyBrown = registerColor("SandyBrown", "#F4A460");
exports.SeaGreen = registerColor("SeaGreen", "#2E8B57");
exports.SeaShell = registerColor("SeaShell", "#FFF5EE");
exports.Sienna = registerColor("Sienna", "#A0522D");
exports.Silver = registerColor("Silver", "#C0C0C0");
exports.SkyBlue = registerColor("SkyBlue", "#87CEEB");
exports.SlateBlue = registerColor("SlateBlue", "#6A5ACD");
exports.SlateGray = registerColor("SlateGray", "#708090");
exports.Snow = registerColor("Snow", "#FFFAFA");
exports.SpringGreen = registerColor("SpringGreen", "#00FF7F");
exports.SteelBlue = registerColor("SteelBlue", "#4682B4");
exports.Tan = registerColor("Tan", "#D2B48C");
exports.Teal = registerColor("Teal", "#008080");
exports.Thistle = registerColor("Thistle", "#D8BFD8");
exports.Tomato = registerColor("Tomato", "#FF6347");
exports.Turquoise = registerColor("Turquoise", "#40E0D0");
exports.Violet = registerColor("Violet", "#EE82EE");
exports.Wheat = registerColor("Wheat", "#F5DEB3");
exports.White = registerColor("White", "#FFFFFF");
exports.WhiteSmoke = registerColor("WhiteSmoke", "#F5F5F5");
exports.Yellow = registerColor("Yellow", "#FFFF00");
exports.YellowGreen = registerColor("YellowGreen", "#9ACD32");
//# sourceMappingURL=known-colors.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/css-value/reworkcss-value.js":
/***/ (function(module, exports) {


exports.parse = parse;

function parse(str) {
  return new Parser(str).parse();
}

function Parser(str) {
  this.str = str;
}

Parser.prototype.skip = function(m){
  this.str = this.str.slice(m[0].length);
};

Parser.prototype.comma = function(){
  var m = /^, */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return { type: 'comma', string: ',' };
};

Parser.prototype.ident = function(){
  var m = /^([\w-]+) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  return {
    type: 'ident',
    string: m[1]
  }
};

Parser.prototype.int = function(){
  var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = ~~m[2];
  var u = m[3];

  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  }
};

Parser.prototype.float = function(){
  var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
  if (!m) return;
  this.skip(m);
  var n = parseFloat(m[2]);
  var u = m[3];

  return {
    type: 'number',
    string: m[1],
    unit: u || '',
    value: n
  }
};

Parser.prototype.number = function(){
  return this.float() || this.int();
};

Parser.prototype.double = function(){
  var m = /^"([^"]*)" */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: '"',
    string: '"' + m[1] + '"',
    value: m[1]
  }
};

Parser.prototype.single = function(){
  var m = /^'([^']*)' */.exec(this.str);
  if (!m) return m;
  this.skip(m);
  return {
    type: 'string',
    quote: "'",
    string: "'" + m[1] + "'",
    value: m[1]
  }
};

Parser.prototype.string = function(){
  return this.single() || this.double();
};


Parser.prototype.value = function(){
  return this.number()
    || this.ident()
    || this.string()
    || this.comma();
};

Parser.prototype.parse = function(){
  var vals = [];

  while (this.str.length) {
    var obj = this.value();
    if (!obj) throw new Error('failed to parse near `' + this.str.slice(0, 10) + '...`');
    vals.push(obj);
  }

  return vals;
};


/***/ }),

/***/ "../node_modules/@nativescript/core/css/parser.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var urlRegEx = /\s*url\((?:('|")([^\1]*)\1|([^\)]*))\)\s*/gy;
function parseURL(text, start) {
    if (start === void 0) { start = 0; }
    urlRegEx.lastIndex = start;
    var result = urlRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = urlRegEx.lastIndex;
    var value = result[2] || result[3];
    return { start: start, end: end, value: value };
}
exports.parseURL = parseURL;
var hexColorRegEx = /\s*#((?:[0-9A-F]{8})|(?:[0-9A-F]{6})|(?:[0-9A-F]{3}))\s*/giy;
function parseHexColor(text, start) {
    if (start === void 0) { start = 0; }
    hexColorRegEx.lastIndex = start;
    var result = hexColorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = hexColorRegEx.lastIndex;
    var hex = result[1];
    var argb;
    if (hex.length === 8) {
        argb = parseInt("0x" + hex);
    }
    else if (hex.length === 6) {
        argb = parseInt("0xFF" + hex);
    }
    else if (hex.length === 3) {
        argb = parseInt("0xFF" + hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2]);
    }
    return { start: start, end: end, value: argb };
}
exports.parseHexColor = parseHexColor;
function rgbaToArgbNumber(r, g, b, a) {
    if (a === void 0) { a = 1; }
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
        return (Math.round(a * 0xFF) * 0x01000000) + (r * 0x010000) + (g * 0x000100) + b;
    }
    else {
        return null;
    }
}
var rgbColorRegEx = /\s*(rgb\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*\))/gy;
function parseRGBColor(text, start) {
    if (start === void 0) { start = 0; }
    rgbColorRegEx.lastIndex = start;
    var result = rgbColorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = rgbColorRegEx.lastIndex;
    var value = result[1] && rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]));
    return { start: start, end: end, value: value };
}
exports.parseRGBColor = parseRGBColor;
var rgbaColorRegEx = /\s*(rgba\(\s*(\d*)\s*,\s*(\d*)\s*,\s*(\d*)\s*,\s*([01]?\.?\d*)\s*\))/gy;
function parseRGBAColor(text, start) {
    if (start === void 0) { start = 0; }
    rgbaColorRegEx.lastIndex = start;
    var result = rgbaColorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = rgbaColorRegEx.lastIndex;
    var value = rgbaToArgbNumber(parseInt(result[2]), parseInt(result[3]), parseInt(result[4]), parseFloat(result[5]));
    return { start: start, end: end, value: value };
}
exports.parseRGBAColor = parseRGBAColor;
function convertHSLToRGBColor(hue, saturation, lightness) {
    hue /= 60;
    lightness /= 100;
    var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation / 100, X = chroma * (1 - Math.abs(hue % 2 - 1)), _a = { m: lightness - chroma / 2 }, r = _a.m, g = _a.m, b = _a.m;
    if (0 <= hue && hue < 1) {
        r += chroma;
        g += X;
    }
    else if (hue < 2) {
        r += X;
        g += chroma;
    }
    else if (hue < 3) {
        g += chroma;
        b += X;
    }
    else if (hue < 4) {
        g += X;
        b += chroma;
    }
    else if (hue < 5) {
        r += X;
        b += chroma;
    }
    else if (hue < 6) {
        r += chroma;
        b += X;
    }
    return {
        r: Math.round(r * 0xFF),
        g: Math.round(g * 0xFF),
        b: Math.round(b * 0xFF)
    };
}
exports.convertHSLToRGBColor = convertHSLToRGBColor;
function hslaToArgbNumber(h, s, l, a) {
    if (a === void 0) { a = 1; }
    var _a = convertHSLToRGBColor(h, s, l), r = _a.r, g = _a.g, b = _a.b;
    if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255 && a >= 0 && a <= 1) {
        return (Math.round(a * 0xFF) * 0x01000000) + (r * 0x010000) + (g * 0x000100) + b;
    }
    else {
        return null;
    }
}
var hslColorRegEx = /\s*(hsl\(\s*([\d.]*)\s*,\s*([\d.]*)%\s*,\s*([\d.]*)%\s*\))/gy;
function parseHSLColor(text, start) {
    if (start === void 0) { start = 0; }
    hslColorRegEx.lastIndex = start;
    var result = hslColorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = hslColorRegEx.lastIndex;
    var value = result[1] && hslaToArgbNumber(parseFloat(result[2]), parseFloat(result[3]), parseFloat(result[4]));
    return { start: start, end: end, value: value };
}
exports.parseHSLColor = parseHSLColor;
var hslaColorRegEx = /\s*(hsla\(\s*([\d.]*)\s*,\s*([\d.]*)%\s*,\s*([\d.]*)%\s*,\s*([01]?\.?\d*)\s*\))/gy;
function parseHSLAColor(text, start) {
    if (start === void 0) { start = 0; }
    hslaColorRegEx.lastIndex = start;
    var result = hslaColorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = hslaColorRegEx.lastIndex;
    var value = hslaToArgbNumber(parseFloat(result[2]), parseFloat(result[3]), parseFloat(result[4]), parseFloat(result[5]));
    return { start: start, end: end, value: value };
}
exports.parseHSLAColor = parseHSLAColor;
var colors;
(function (colors) {
    colors[colors["transparent"] = 0] = "transparent";
    colors[colors["aliceblue"] = 4293982463] = "aliceblue";
    colors[colors["antiquewhite"] = 4294634455] = "antiquewhite";
    colors[colors["aqua"] = 4278255615] = "aqua";
    colors[colors["aquamarine"] = 4286578644] = "aquamarine";
    colors[colors["azure"] = 4293984255] = "azure";
    colors[colors["beige"] = 4294309340] = "beige";
    colors[colors["bisque"] = 4294960324] = "bisque";
    colors[colors["black"] = 4278190080] = "black";
    colors[colors["blanchedalmond"] = 4294962125] = "blanchedalmond";
    colors[colors["blue"] = 4278190335] = "blue";
    colors[colors["blueviolet"] = 4287245282] = "blueviolet";
    colors[colors["brown"] = 4289014314] = "brown";
    colors[colors["burlywood"] = 4292786311] = "burlywood";
    colors[colors["cadetblue"] = 4284456608] = "cadetblue";
    colors[colors["chartreuse"] = 4286578432] = "chartreuse";
    colors[colors["chocolate"] = 4291979550] = "chocolate";
    colors[colors["coral"] = 4294934352] = "coral";
    colors[colors["cornflowerblue"] = 4284782061] = "cornflowerblue";
    colors[colors["cornsilk"] = 4294965468] = "cornsilk";
    colors[colors["crimson"] = 4292613180] = "crimson";
    colors[colors["cyan"] = 4278255615] = "cyan";
    colors[colors["darkblue"] = 4278190219] = "darkblue";
    colors[colors["darkcyan"] = 4278225803] = "darkcyan";
    colors[colors["darkgoldenrod"] = 4290283019] = "darkgoldenrod";
    colors[colors["darkgray"] = 4289309097] = "darkgray";
    colors[colors["darkgreen"] = 4278215680] = "darkgreen";
    colors[colors["darkgrey"] = 4289309097] = "darkgrey";
    colors[colors["darkkhaki"] = 4290623339] = "darkkhaki";
    colors[colors["darkmagenta"] = 4287299723] = "darkmagenta";
    colors[colors["darkolivegreen"] = 4283788079] = "darkolivegreen";
    colors[colors["darkorange"] = 4294937600] = "darkorange";
    colors[colors["darkorchid"] = 4288230092] = "darkorchid";
    colors[colors["darkred"] = 4287299584] = "darkred";
    colors[colors["darksalmon"] = 4293498490] = "darksalmon";
    colors[colors["darkseagreen"] = 4287609999] = "darkseagreen";
    colors[colors["darkslateblue"] = 4282924427] = "darkslateblue";
    colors[colors["darkslategray"] = 4281290575] = "darkslategray";
    colors[colors["darkslategrey"] = 4281290575] = "darkslategrey";
    colors[colors["darkturquoise"] = 4278243025] = "darkturquoise";
    colors[colors["darkviolet"] = 4287889619] = "darkviolet";
    colors[colors["deeppink"] = 4294907027] = "deeppink";
    colors[colors["deepskyblue"] = 4278239231] = "deepskyblue";
    colors[colors["dimgray"] = 4285098345] = "dimgray";
    colors[colors["dimgrey"] = 4285098345] = "dimgrey";
    colors[colors["dodgerblue"] = 4280193279] = "dodgerblue";
    colors[colors["firebrick"] = 4289864226] = "firebrick";
    colors[colors["floralwhite"] = 4294966000] = "floralwhite";
    colors[colors["forestgreen"] = 4280453922] = "forestgreen";
    colors[colors["fuchsia"] = 4294902015] = "fuchsia";
    colors[colors["gainsboro"] = 4292664540] = "gainsboro";
    colors[colors["ghostwhite"] = 4294506751] = "ghostwhite";
    colors[colors["gold"] = 4294956800] = "gold";
    colors[colors["goldenrod"] = 4292519200] = "goldenrod";
    colors[colors["gray"] = 4286611584] = "gray";
    colors[colors["green"] = 4278222848] = "green";
    colors[colors["greenyellow"] = 4289593135] = "greenyellow";
    colors[colors["grey"] = 4286611584] = "grey";
    colors[colors["honeydew"] = 4293984240] = "honeydew";
    colors[colors["hotpink"] = 4294928820] = "hotpink";
    colors[colors["indianred"] = 4291648604] = "indianred";
    colors[colors["indigo"] = 4283105410] = "indigo";
    colors[colors["ivory"] = 4294967280] = "ivory";
    colors[colors["khaki"] = 4293977740] = "khaki";
    colors[colors["lavender"] = 4293322490] = "lavender";
    colors[colors["lavenderblush"] = 4294963445] = "lavenderblush";
    colors[colors["lawngreen"] = 4286381056] = "lawngreen";
    colors[colors["lemonchiffon"] = 4294965965] = "lemonchiffon";
    colors[colors["lightblue"] = 4289583334] = "lightblue";
    colors[colors["lightcoral"] = 4293951616] = "lightcoral";
    colors[colors["lightcyan"] = 4292935679] = "lightcyan";
    colors[colors["lightgoldenrodyellow"] = 4294638290] = "lightgoldenrodyellow";
    colors[colors["lightgray"] = 4292072403] = "lightgray";
    colors[colors["lightgreen"] = 4287688336] = "lightgreen";
    colors[colors["lightgrey"] = 4292072403] = "lightgrey";
    colors[colors["lightpink"] = 4294948545] = "lightpink";
    colors[colors["lightsalmon"] = 4294942842] = "lightsalmon";
    colors[colors["lightseagreen"] = 4280332970] = "lightseagreen";
    colors[colors["lightskyblue"] = 4287090426] = "lightskyblue";
    colors[colors["lightslategray"] = 4286023833] = "lightslategray";
    colors[colors["lightslategrey"] = 4286023833] = "lightslategrey";
    colors[colors["lightsteelblue"] = 4289774814] = "lightsteelblue";
    colors[colors["lightyellow"] = 4294967264] = "lightyellow";
    colors[colors["lime"] = 4278255360] = "lime";
    colors[colors["limegreen"] = 4281519410] = "limegreen";
    colors[colors["linen"] = 4294635750] = "linen";
    colors[colors["magenta"] = 4294902015] = "magenta";
    colors[colors["maroon"] = 4286578688] = "maroon";
    colors[colors["mediumaquamarine"] = 4284927402] = "mediumaquamarine";
    colors[colors["mediumblue"] = 4278190285] = "mediumblue";
    colors[colors["mediumorchid"] = 4290401747] = "mediumorchid";
    colors[colors["mediumpurple"] = 4287852763] = "mediumpurple";
    colors[colors["mediumseagreen"] = 4282168177] = "mediumseagreen";
    colors[colors["mediumslateblue"] = 4286277870] = "mediumslateblue";
    colors[colors["mediumspringgreen"] = 4278254234] = "mediumspringgreen";
    colors[colors["mediumturquoise"] = 4282962380] = "mediumturquoise";
    colors[colors["mediumvioletred"] = 4291237253] = "mediumvioletred";
    colors[colors["midnightblue"] = 4279834992] = "midnightblue";
    colors[colors["mintcream"] = 4294311930] = "mintcream";
    colors[colors["mistyrose"] = 4294960353] = "mistyrose";
    colors[colors["moccasin"] = 4294960309] = "moccasin";
    colors[colors["navajowhite"] = 4294958765] = "navajowhite";
    colors[colors["navy"] = 4278190208] = "navy";
    colors[colors["oldlace"] = 4294833638] = "oldlace";
    colors[colors["olive"] = 4286611456] = "olive";
    colors[colors["olivedrab"] = 4285238819] = "olivedrab";
    colors[colors["orange"] = 4294944000] = "orange";
    colors[colors["orangered"] = 4294919424] = "orangered";
    colors[colors["orchid"] = 4292505814] = "orchid";
    colors[colors["palegoldenrod"] = 4293847210] = "palegoldenrod";
    colors[colors["palegreen"] = 4288215960] = "palegreen";
    colors[colors["paleturquoise"] = 4289720046] = "paleturquoise";
    colors[colors["palevioletred"] = 4292571283] = "palevioletred";
    colors[colors["papayawhip"] = 4294963157] = "papayawhip";
    colors[colors["peachpuff"] = 4294957753] = "peachpuff";
    colors[colors["peru"] = 4291659071] = "peru";
    colors[colors["pink"] = 4294951115] = "pink";
    colors[colors["plum"] = 4292714717] = "plum";
    colors[colors["powderblue"] = 4289781990] = "powderblue";
    colors[colors["purple"] = 4286578816] = "purple";
    colors[colors["rebeccapurple"] = 4284887961] = "rebeccapurple";
    colors[colors["red"] = 4294901760] = "red";
    colors[colors["rosybrown"] = 4290547599] = "rosybrown";
    colors[colors["royalblue"] = 4282477025] = "royalblue";
    colors[colors["saddlebrown"] = 4287317267] = "saddlebrown";
    colors[colors["salmon"] = 4294606962] = "salmon";
    colors[colors["sandybrown"] = 4294222944] = "sandybrown";
    colors[colors["seagreen"] = 4281240407] = "seagreen";
    colors[colors["seashell"] = 4294964718] = "seashell";
    colors[colors["sienna"] = 4288696877] = "sienna";
    colors[colors["silver"] = 4290822336] = "silver";
    colors[colors["skyblue"] = 4287090411] = "skyblue";
    colors[colors["slateblue"] = 4285160141] = "slateblue";
    colors[colors["slategray"] = 4285563024] = "slategray";
    colors[colors["slategrey"] = 4285563024] = "slategrey";
    colors[colors["snow"] = 4294966010] = "snow";
    colors[colors["springgreen"] = 4278255487] = "springgreen";
    colors[colors["steelblue"] = 4282811060] = "steelblue";
    colors[colors["tan"] = 4291998860] = "tan";
    colors[colors["teal"] = 4278222976] = "teal";
    colors[colors["thistle"] = 4292394968] = "thistle";
    colors[colors["tomato"] = 4294927175] = "tomato";
    colors[colors["turquoise"] = 4282441936] = "turquoise";
    colors[colors["violet"] = 4293821166] = "violet";
    colors[colors["wheat"] = 4294303411] = "wheat";
    colors[colors["white"] = 4294967295] = "white";
    colors[colors["whitesmoke"] = 4294309365] = "whitesmoke";
    colors[colors["yellow"] = 4294967040] = "yellow";
    colors[colors["yellowgreen"] = 4288335154] = "yellowgreen";
})(colors = exports.colors || (exports.colors = {}));
function parseColorKeyword(value, start, keyword) {
    if (keyword === void 0) { keyword = parseKeyword(value, start); }
    if (keyword && keyword.value in colors) {
        var end = keyword.end;
        var value_1 = colors[keyword.value];
        return { start: start, end: end, value: value_1 };
    }
    return null;
}
exports.parseColorKeyword = parseColorKeyword;
function parseColor(value, start, keyword) {
    if (start === void 0) { start = 0; }
    if (keyword === void 0) { keyword = parseKeyword(value, start); }
    return parseHexColor(value, start) ||
        parseColorKeyword(value, start, keyword) ||
        parseRGBColor(value, start) ||
        parseRGBAColor(value, start) ||
        parseHSLColor(value, start) ||
        parseHSLAColor(value, start);
}
exports.parseColor = parseColor;
var keywordRegEx = /\s*([a-z][\w\-]*)\s*/giy;
function parseKeyword(text, start) {
    if (start === void 0) { start = 0; }
    keywordRegEx.lastIndex = start;
    var result = keywordRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = keywordRegEx.lastIndex;
    var value = result[1];
    return { start: start, end: end, value: value };
}
var backgroundRepeatKeywords = new Set(["repeat", "repeat-x", "repeat-y", "no-repeat"]);
function parseRepeat(value, start, keyword) {
    if (start === void 0) { start = 0; }
    if (keyword === void 0) { keyword = parseKeyword(value, start); }
    if (keyword && backgroundRepeatKeywords.has(keyword.value)) {
        var end = keyword.end;
        var value_2 = keyword.value;
        return { start: start, end: end, value: value_2 };
    }
    return null;
}
exports.parseRepeat = parseRepeat;
var unitRegEx = /\s*([\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?)([a-zA-Z]+|%)?\s*/gy;
function parseUnit(text, start) {
    if (start === void 0) { start = 0; }
    unitRegEx.lastIndex = start;
    var result = unitRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = unitRegEx.lastIndex;
    var value = parseFloat(result[1]);
    var unit = result[2] || "dip";
    return { start: start, end: end, value: { value: value, unit: unit } };
}
exports.parseUnit = parseUnit;
function parsePercentageOrLength(text, start) {
    if (start === void 0) { start = 0; }
    var unitResult = parseUnit(text, start);
    if (unitResult) {
        var start_1 = unitResult.start, end = unitResult.end;
        var value = unitResult.value;
        if (value.unit === "%") {
            value.value /= 100;
        }
        else if (!value.unit) {
            value.unit = "dip";
        }
        else if (value.unit === "px" || value.unit === "dip") {
        }
        else {
            return null;
        }
        return { start: start_1, end: end, value: value };
    }
    return null;
}
exports.parsePercentageOrLength = parsePercentageOrLength;
var angleUnitsToRadMap = {
    "deg": function (start, end, deg) { return ({ start: start, end: end, value: deg / 180 * Math.PI }); },
    "rad": function (start, end, rad) { return ({ start: start, end: end, value: rad }); },
    "grad": function (start, end, grad) { return ({ start: start, end: end, value: grad / 200 * Math.PI }); },
    "turn": function (start, end, turn) { return ({ start: start, end: end, value: turn * Math.PI * 2 }); }
};
function parseAngle(value, start) {
    if (start === void 0) { start = 0; }
    var angleResult = parseUnit(value, start);
    if (angleResult) {
        var start_2 = angleResult.start, end = angleResult.end, value_3 = angleResult.value;
        return (angleUnitsToRadMap[value_3.unit] || (function (_, __, ___) { return null; }))(start_2, end, value_3.value);
    }
    return null;
}
exports.parseAngle = parseAngle;
var backgroundSizeKeywords = new Set(["auto", "contain", "cover"]);
function parseBackgroundSize(value, start, keyword) {
    if (start === void 0) { start = 0; }
    if (keyword === void 0) { keyword = parseKeyword(value, start); }
    var end = start;
    if (keyword && backgroundSizeKeywords.has(keyword.value)) {
        end = keyword.end;
        var value_4 = keyword.value;
        return { start: start, end: end, value: value_4 };
    }
    var firstLength = parsePercentageOrLength(value, end);
    if (firstLength) {
        end = firstLength.end;
        var secondLength = parsePercentageOrLength(value, firstLength.end);
        if (secondLength) {
            end = secondLength.end;
            return { start: start, end: end, value: { x: firstLength.value, y: secondLength.value } };
        }
        else {
            return { start: start, end: end, value: { x: firstLength.value, y: "auto" } };
        }
    }
    return null;
}
exports.parseBackgroundSize = parseBackgroundSize;
var backgroundPositionKeywords = Object.freeze(new Set(["left", "right", "top", "bottom", "center"]));
var backgroundPositionKeywordsDirection = {
    "left": "x",
    "right": "x",
    "center": "center",
    "top": "y",
    "bottom": "y"
};
function parseBackgroundPosition(text, start, keyword) {
    if (start === void 0) { start = 0; }
    if (keyword === void 0) { keyword = parseKeyword(text, start); }
    function formatH(align, offset) {
        if (align.value === "center") {
            return "center";
        }
        if (offset && offset.value.value !== 0) {
            return { align: align.value, offset: offset.value };
        }
        return align.value;
    }
    function formatV(align, offset) {
        if (align.value === "center") {
            return "center";
        }
        if (offset && offset.value.value !== 0) {
            return { align: align.value, offset: offset.value };
        }
        return align.value;
    }
    var end = start;
    if (keyword && backgroundPositionKeywords.has(keyword.value)) {
        end = keyword.end;
        var firstDirection = backgroundPositionKeywordsDirection[keyword.value];
        var firstLength = firstDirection !== "center" && parsePercentageOrLength(text, end);
        if (firstLength) {
            end = firstLength.end;
        }
        var secondKeyword = parseKeyword(text, end);
        if (secondKeyword && backgroundPositionKeywords.has(secondKeyword.value)) {
            end = secondKeyword.end;
            var secondDirection = backgroundPositionKeywordsDirection[secondKeyword.end];
            if (firstDirection === secondDirection && firstDirection !== "center") {
                return null;
            }
            var secondLength = secondDirection !== "center" && parsePercentageOrLength(text, end);
            if (secondLength) {
                end = secondLength.end;
            }
            if ((firstDirection === secondDirection && secondDirection === "center") || (firstDirection === "x" || secondDirection === "y")) {
                return {
                    start: start, end: end, value: {
                        x: formatH(keyword, firstLength),
                        y: formatV(secondKeyword, secondLength)
                    }
                };
            }
            else {
                return {
                    start: start, end: end, value: {
                        x: formatH(secondKeyword, secondLength),
                        y: formatV(keyword, firstLength),
                    }
                };
            }
        }
        else {
            if (firstDirection === "center") {
                return { start: start, end: end, value: { x: "center", y: "center" } };
            }
            else if (firstDirection === "x") {
                return { start: start, end: end, value: { x: formatH(keyword, firstLength), y: "center" } };
            }
            else {
                return { start: start, end: end, value: { x: "center", y: formatV(keyword, firstLength) } };
            }
        }
    }
    else {
        var firstLength = parsePercentageOrLength(text, end);
        if (firstLength) {
            end = firstLength.end;
            var secondLength = parsePercentageOrLength(text, end);
            if (secondLength) {
                end = secondLength.end;
                return { start: start, end: end, value: { x: { align: "left", offset: firstLength.value }, y: { align: "top", offset: secondLength.value } } };
            }
            else {
                return { start: start, end: end, value: { x: { align: "left", offset: firstLength.value }, y: "center" } };
            }
        }
        else {
            return null;
        }
    }
}
exports.parseBackgroundPosition = parseBackgroundPosition;
var directionRegEx = /\s*to\s*(left|right|top|bottom)\s*(left|right|top|bottom)?\s*/gy;
var sideDirections = {
    top: Math.PI * 0 / 2,
    right: Math.PI * 1 / 2,
    bottom: Math.PI * 2 / 2,
    left: Math.PI * 3 / 2
};
var cornerDirections = {
    top: {
        right: Math.PI * 1 / 4,
        left: Math.PI * 7 / 4
    },
    right: {
        top: Math.PI * 1 / 4,
        bottom: Math.PI * 3 / 4
    },
    bottom: {
        right: Math.PI * 3 / 4,
        left: Math.PI * 5 / 4
    },
    left: {
        top: Math.PI * 7 / 4,
        bottom: Math.PI * 5 / 4
    }
};
function parseDirection(text, start) {
    if (start === void 0) { start = 0; }
    directionRegEx.lastIndex = start;
    var result = directionRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = directionRegEx.lastIndex;
    var firstDirection = result[1];
    if (result[2]) {
        var secondDirection = result[2];
        var value = cornerDirections[firstDirection][secondDirection];
        return value === undefined ? null : { start: start, end: end, value: value };
    }
    else {
        return { start: start, end: end, value: sideDirections[firstDirection] };
    }
}
var openingBracketRegEx = /\s*\(\s*/gy;
var closingBracketRegEx = /\s*\)\s*/gy;
var closingBracketOrCommaRegEx = /\s*(\)|,)\s*/gy;
function parseArgumentsList(text, start, argument) {
    openingBracketRegEx.lastIndex = start;
    var openingBracket = openingBracketRegEx.exec(text);
    if (!openingBracket) {
        return null;
    }
    var end = openingBracketRegEx.lastIndex;
    var value = [];
    closingBracketRegEx.lastIndex = end;
    var closingBracket = closingBracketRegEx.exec(text);
    if (closingBracket) {
        return { start: start, end: end, value: value };
    }
    for (var index_1 = 0; true; index_1++) {
        var arg = argument(text, end, index_1);
        if (!arg) {
            return null;
        }
        end = arg.end;
        value.push(arg);
        closingBracketOrCommaRegEx.lastIndex = end;
        var closingBracketOrComma = closingBracketOrCommaRegEx.exec(text);
        if (closingBracketOrComma) {
            end = closingBracketOrCommaRegEx.lastIndex;
            if (closingBracketOrComma[1] === ",") {
                continue;
            }
            else if (closingBracketOrComma[1] === ")") {
                return { start: start, end: end, value: value };
            }
        }
        else {
            return null;
        }
    }
}
function parseColorStop(text, start) {
    if (start === void 0) { start = 0; }
    var color = parseColor(text, start);
    if (!color) {
        return null;
    }
    var end = color.end;
    var offset = parsePercentageOrLength(text, end);
    if (offset) {
        end = offset.end;
        return { start: start, end: end, value: { argb: color.value, offset: offset.value } };
    }
    return { start: start, end: end, value: { argb: color.value } };
}
exports.parseColorStop = parseColorStop;
var linearGradientStartRegEx = /\s*linear-gradient\s*/gy;
function parseLinearGradient(text, start) {
    if (start === void 0) { start = 0; }
    linearGradientStartRegEx.lastIndex = start;
    var lgs = linearGradientStartRegEx.exec(text);
    if (!lgs) {
        return null;
    }
    var end = linearGradientStartRegEx.lastIndex;
    var angle = Math.PI;
    var colors = [];
    var parsedArgs = parseArgumentsList(text, end, function (text, start, index) {
        if (index === 0) {
            var angleArg = parseAngle(text, start) || parseDirection(text, start);
            if (angleArg) {
                angle = angleArg.value;
                return angleArg;
            }
        }
        var colorStop = parseColorStop(text, start);
        if (colorStop) {
            colors.push(colorStop.value);
            return colorStop;
        }
        return null;
    });
    if (!parsedArgs) {
        return null;
    }
    end = parsedArgs.end;
    return { start: start, end: end, value: { angle: angle, colors: colors } };
}
exports.parseLinearGradient = parseLinearGradient;
var slashRegEx = /\s*(\/)\s*/gy;
function parseSlash(text, start) {
    slashRegEx.lastIndex = start;
    var slash = slashRegEx.exec(text);
    if (!slash) {
        return null;
    }
    var end = slashRegEx.lastIndex;
    return { start: start, end: end, value: "/" };
}
function parseBackground(text, start) {
    if (start === void 0) { start = 0; }
    var value = {};
    var end = start;
    while (end < text.length) {
        var keyword = parseKeyword(text, end);
        var color = parseColor(text, end, keyword);
        if (color) {
            value.color = color.value;
            end = color.end;
            continue;
        }
        var repeat = parseRepeat(text, end, keyword);
        if (repeat) {
            value.repeat = repeat.value;
            end = repeat.end;
            continue;
        }
        var position = parseBackgroundPosition(text, end, keyword);
        if (position) {
            position.value.text = text.substring(position.start, position.end);
            value.position = position.value;
            end = position.end;
            var slash = parseSlash(text, end);
            if (slash) {
                end = slash.end;
                var size = parseBackgroundSize(text, end);
                if (!size) {
                    return null;
                }
                value.size = size.value;
                end = size.end;
            }
            continue;
        }
        var url = parseURL(text, end);
        if (url) {
            value.image = url.value;
            end = url.end;
            continue;
        }
        var gradient = parseLinearGradient(text, end);
        if (gradient) {
            value.image = gradient.value;
            end = gradient.end;
            continue;
        }
        return null;
    }
    return { start: start, end: end, value: value };
}
exports.parseBackground = parseBackground;
var universalSelectorRegEx = /\*/gy;
function parseUniversalSelector(text, start) {
    if (start === void 0) { start = 0; }
    universalSelectorRegEx.lastIndex = start;
    var result = universalSelectorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = universalSelectorRegEx.lastIndex;
    return { start: start, end: end, value: { type: "*" } };
}
exports.parseUniversalSelector = parseUniversalSelector;
var simpleIdentifierSelectorRegEx = /(#|\.|:|\b)([_-\w][_-\w\d\\/]*)/gy;
function parseSimpleIdentifierSelector(text, start) {
    if (start === void 0) { start = 0; }
    simpleIdentifierSelectorRegEx.lastIndex = start;
    var result = simpleIdentifierSelectorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = simpleIdentifierSelectorRegEx.lastIndex;
    var type = result[1];
    var identifier = result[2].replace(/\\/g, "");
    var value = { type: type, identifier: identifier };
    return { start: start, end: end, value: value };
}
exports.parseSimpleIdentifierSelector = parseSimpleIdentifierSelector;
var attributeSelectorRegEx = /\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\]/gy;
function parseAttributeSelector(text, start) {
    attributeSelectorRegEx.lastIndex = start;
    var result = attributeSelectorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = attributeSelectorRegEx.lastIndex;
    var property = result[1];
    if (result[2]) {
        var test_1 = result[2];
        var value = result[3] || result[4] || result[5];
        return { start: start, end: end, value: { type: "[]", property: property, test: test_1, value: value } };
    }
    return { start: start, end: end, value: { type: "[]", property: property } };
}
exports.parseAttributeSelector = parseAttributeSelector;
function parseSimpleSelector(text, start) {
    if (start === void 0) { start = 0; }
    return parseUniversalSelector(text, start) ||
        parseSimpleIdentifierSelector(text, start) ||
        parseAttributeSelector(text, start);
}
exports.parseSimpleSelector = parseSimpleSelector;
function parseSimpleSelectorSequence(text, start) {
    var simpleSelector = parseSimpleSelector(text, start);
    if (!simpleSelector) {
        return null;
    }
    var end = simpleSelector.end;
    var value = [];
    while (simpleSelector) {
        value.push(simpleSelector.value);
        end = simpleSelector.end;
        simpleSelector = parseSimpleSelector(text, end);
    }
    return { start: start, end: end, value: value };
}
exports.parseSimpleSelectorSequence = parseSimpleSelectorSequence;
var combinatorRegEx = /\s*(\+|~|>)?\s*/gy;
function parseCombinator(text, start) {
    if (start === void 0) { start = 0; }
    combinatorRegEx.lastIndex = start;
    var result = combinatorRegEx.exec(text);
    if (!result) {
        return null;
    }
    var end = combinatorRegEx.lastIndex;
    var value = result[1] || " ";
    return { start: start, end: end, value: value };
}
exports.parseCombinator = parseCombinator;
var whiteSpaceRegEx = /\s*/gy;
function parseSelector(text, start) {
    if (start === void 0) { start = 0; }
    var end = start;
    whiteSpaceRegEx.lastIndex = end;
    var leadingWhiteSpace = whiteSpaceRegEx.exec(text);
    if (leadingWhiteSpace) {
        end = whiteSpaceRegEx.lastIndex;
    }
    var value = [];
    var combinator;
    var expectSimpleSelector = true;
    var pair;
    do {
        var simpleSelectorSequence = parseSimpleSelectorSequence(text, end);
        if (!simpleSelectorSequence) {
            if (expectSimpleSelector) {
                return null;
            }
            else {
                break;
            }
        }
        end = simpleSelectorSequence.end;
        if (combinator) {
            pair[1] = combinator.value;
        }
        pair = [simpleSelectorSequence.value, undefined];
        value.push(pair);
        combinator = parseCombinator(text, end);
        if (combinator) {
            end = combinator.end;
        }
        expectSimpleSelector = combinator && combinator.value !== " ";
    } while (combinator);
    return { start: start, end: end, value: value };
}
exports.parseSelector = parseSelector;
var whitespaceRegEx = /[\s\t\n\r\f]*/gym;
var singleQuoteStringRegEx = /'((?:[^\n\r\f\']|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?'|$)/gym;
var doubleQuoteStringRegEx = /"((?:[^\n\r\f\"]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)(:?"|$)/gym;
var commentRegEx = /(\/\*(?:[^\*]|\*[^\/])*\*\/)/gym;
var numberRegEx = /[\+\-]?(?:\d+\.\d+|\d+|\.\d+)(?:[eE][\+\-]?\d+)?/gym;
var nameRegEx = /-?(?:(?:[a-zA-Z_]|[^\x00-\x7F]|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))(?:[a-zA-Z_0-9\-]*|\\(?:\$|\n|[0-9a-fA-F]{1,6}\s?))*)/gym;
var CSS3Parser = (function () {
    function CSS3Parser(text) {
        this.text = text;
        this.nextInputCodePointIndex = 0;
    }
    CSS3Parser.prototype.tokenize = function () {
        var tokens = [];
        var inputToken;
        do {
            inputToken = this.consumeAToken();
            tokens.push(inputToken);
        } while (inputToken);
        return tokens;
    };
    CSS3Parser.prototype.consumeAToken = function () {
        if (this.reconsumedInputToken) {
            var result = this.reconsumedInputToken;
            this.reconsumedInputToken = null;
            return result;
        }
        var char = this.text[this.nextInputCodePointIndex];
        switch (char) {
            case "\"": return this.consumeAStringToken();
            case "'": return this.consumeAStringToken();
            case "(":
            case ")":
            case ",":
            case ":":
            case ";":
            case "[":
            case "]":
            case "{":
            case "}":
                this.nextInputCodePointIndex++;
                return char;
            case "#": return this.consumeAHashToken() || this.consumeADelimToken();
            case " ":
            case "\t":
            case "\n":
            case "\r":
            case "\f":
                return this.consumeAWhitespace();
            case "@": return this.consumeAtKeyword() || this.consumeADelimToken();
            case "\\": return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                return this.consumeANumericToken();
            case "u":
            case "U":
                if (this.text[this.nextInputCodePointIndex + 1] === "+") {
                    var thirdChar = this.text[this.nextInputCodePointIndex + 2];
                    if (thirdChar >= "0" && thirdChar <= "9" || thirdChar === "?") {
                        throw new Error("Unicode tokens not supported!");
                    }
                }
                return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
            case "$":
            case "*":
            case "^":
            case "|":
            case "~":
                return this.consumeAMatchToken() || this.consumeADelimToken();
            case "-": return this.consumeANumericToken() || this.consumeAnIdentLikeToken() || this.consumeCDC() || this.consumeADelimToken();
            case "+":
            case ".":
                return this.consumeANumericToken() || this.consumeADelimToken();
            case "/": return this.consumeAComment() || this.consumeADelimToken();
            case "<": return this.consumeCDO() || this.consumeADelimToken();
            case undefined: return undefined;
            default: return this.consumeAnIdentLikeToken() || this.consumeADelimToken();
        }
    };
    CSS3Parser.prototype.consumeADelimToken = function () {
        return { type: 2, text: this.text[this.nextInputCodePointIndex++] };
    };
    CSS3Parser.prototype.consumeAWhitespace = function () {
        whitespaceRegEx.lastIndex = this.nextInputCodePointIndex;
        whitespaceRegEx.exec(this.text);
        this.nextInputCodePointIndex = whitespaceRegEx.lastIndex;
        return " ";
    };
    CSS3Parser.prototype.consumeAHashToken = function () {
        this.nextInputCodePointIndex++;
        var hashName = this.consumeAName();
        if (hashName) {
            return { type: 12, text: "#" + hashName.text };
        }
        this.nextInputCodePointIndex--;
        return null;
    };
    CSS3Parser.prototype.consumeCDO = function () {
        if (this.text.substr(this.nextInputCodePointIndex, 4) === "<!--") {
            this.nextInputCodePointIndex += 4;
            return "<!--";
        }
        return null;
    };
    CSS3Parser.prototype.consumeCDC = function () {
        if (this.text.substr(this.nextInputCodePointIndex, 3) === "-->") {
            this.nextInputCodePointIndex += 3;
            return "-->";
        }
        return null;
    };
    CSS3Parser.prototype.consumeAMatchToken = function () {
        if (this.text[this.nextInputCodePointIndex + 1] === "=") {
            var token = this.text.substr(this.nextInputCodePointIndex, 2);
            this.nextInputCodePointIndex += 2;
            return token;
        }
        return null;
    };
    CSS3Parser.prototype.consumeANumericToken = function () {
        numberRegEx.lastIndex = this.nextInputCodePointIndex;
        var result = numberRegEx.exec(this.text);
        if (!result) {
            return null;
        }
        this.nextInputCodePointIndex = numberRegEx.lastIndex;
        if (this.text[this.nextInputCodePointIndex] === "%") {
            return { type: 4, text: result[0] };
        }
        var name = this.consumeAName();
        if (name) {
            return { type: 5, text: result[0] + name.text };
        }
        return { type: 3, text: result[0] };
    };
    CSS3Parser.prototype.consumeAnIdentLikeToken = function () {
        var name = this.consumeAName();
        if (!name) {
            return null;
        }
        if (this.text[this.nextInputCodePointIndex] === "(") {
            this.nextInputCodePointIndex++;
            if (name.text.toLowerCase() === "url") {
                return this.consumeAURLToken();
            }
            return { type: 8, name: name.text, text: name.text + "(" };
        }
        return name;
    };
    CSS3Parser.prototype.consumeAStringToken = function () {
        var char = this.text[this.nextInputCodePointIndex];
        var result;
        if (char === "'") {
            singleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
            result = singleQuoteStringRegEx.exec(this.text);
            if (!result) {
                return null;
            }
            this.nextInputCodePointIndex = singleQuoteStringRegEx.lastIndex;
        }
        else if (char === "\"") {
            doubleQuoteStringRegEx.lastIndex = this.nextInputCodePointIndex;
            result = doubleQuoteStringRegEx.exec(this.text);
            if (!result) {
                return null;
            }
            this.nextInputCodePointIndex = doubleQuoteStringRegEx.lastIndex;
        }
        return { type: 1, text: result[0] };
    };
    CSS3Parser.prototype.consumeAURLToken = function () {
        var start = this.nextInputCodePointIndex - 3 - 1;
        var urlToken = { type: 7, text: undefined };
        this.consumeAWhitespace();
        if (this.nextInputCodePointIndex >= this.text.length) {
            return urlToken;
        }
        var nextInputCodePoint = this.text[this.nextInputCodePointIndex];
        if (nextInputCodePoint === "\"" || nextInputCodePoint === "'") {
            var stringToken = this.consumeAStringToken();
            urlToken.text = stringToken.text;
            this.consumeAWhitespace();
            if (this.text[this.nextInputCodePointIndex] === ")" || this.nextInputCodePointIndex >= this.text.length) {
                this.nextInputCodePointIndex++;
                var end = this.nextInputCodePointIndex;
                urlToken.text = this.text.substring(start, end);
                return urlToken;
            }
            else {
                return null;
            }
        }
        while (this.nextInputCodePointIndex < this.text.length) {
            var char = this.text[this.nextInputCodePointIndex++];
            switch (char) {
                case ")": return urlToken;
                case " ":
                case "\t":
                case "\n":
                case "\r":
                case "\f":
                    this.consumeAWhitespace();
                    if (this.text[this.nextInputCodePointIndex] === ")") {
                        this.nextInputCodePointIndex++;
                        return urlToken;
                    }
                    else {
                        return null;
                    }
                case "\"":
                case "\'":
                    return null;
                case "\\":
                    throw new Error("Escaping not yet supported!");
                default:
                    urlToken.text += char;
            }
        }
        return urlToken;
    };
    CSS3Parser.prototype.consumeAName = function () {
        nameRegEx.lastIndex = this.nextInputCodePointIndex;
        var result = nameRegEx.exec(this.text);
        if (!result) {
            return null;
        }
        this.nextInputCodePointIndex = nameRegEx.lastIndex;
        return { type: 6, text: result[0] };
    };
    CSS3Parser.prototype.consumeAtKeyword = function () {
        this.nextInputCodePointIndex++;
        var name = this.consumeAName();
        if (name) {
            return { type: 11, text: name.text };
        }
        this.nextInputCodePointIndex--;
        return null;
    };
    CSS3Parser.prototype.consumeAComment = function () {
        if (this.text[this.nextInputCodePointIndex + 1] === "*") {
            commentRegEx.lastIndex = this.nextInputCodePointIndex;
            var result = commentRegEx.exec(this.text);
            if (!result) {
                return null;
            }
            this.nextInputCodePointIndex = commentRegEx.lastIndex;
            return this.consumeAToken();
        }
        return null;
    };
    CSS3Parser.prototype.reconsumeTheCurrentInputToken = function (currentInputToken) {
        this.reconsumedInputToken = currentInputToken;
    };
    CSS3Parser.prototype.parseAStylesheet = function () {
        this.topLevelFlag = true;
        var stylesheet = {
            rules: this.consumeAListOfRules()
        };
        return stylesheet;
    };
    CSS3Parser.prototype.consumeAListOfRules = function () {
        var rules = [];
        var inputToken;
        while (inputToken = this.consumeAToken()) {
            switch (inputToken) {
                case " ": continue;
                case "<!--":
                case "-->":
                    if (this.topLevelFlag) {
                        continue;
                    }
                    this.reconsumeTheCurrentInputToken(inputToken);
                    var atRule = this.consumeAnAtRule();
                    if (atRule) {
                        rules.push(atRule);
                    }
                    continue;
            }
            if (inputToken.type === 11) {
                this.reconsumeTheCurrentInputToken(inputToken);
                var atRule = this.consumeAnAtRule();
                if (atRule) {
                    rules.push(atRule);
                }
                continue;
            }
            this.reconsumeTheCurrentInputToken(inputToken);
            var qualifiedRule = this.consumeAQualifiedRule();
            if (qualifiedRule) {
                rules.push(qualifiedRule);
            }
        }
        return rules;
    };
    CSS3Parser.prototype.consumeAnAtRule = function () {
        var inputToken = this.consumeAToken();
        var atRule = {
            type: "at-rule",
            name: inputToken.text,
            prelude: [],
            block: undefined
        };
        while (inputToken = this.consumeAToken()) {
            if (inputToken === ";") {
                return atRule;
            }
            else if (inputToken === "{") {
                atRule.block = this.consumeASimpleBlock(inputToken);
                return atRule;
            }
            else if (inputToken.type === 9 && inputToken.associatedToken === "{") {
                atRule.block = inputToken;
                return atRule;
            }
            this.reconsumeTheCurrentInputToken(inputToken);
            var component = this.consumeAComponentValue();
            if (component) {
                atRule.prelude.push(component);
            }
        }
        return atRule;
    };
    CSS3Parser.prototype.consumeAQualifiedRule = function () {
        var qualifiedRule = {
            type: "qualified-rule",
            prelude: [],
            block: undefined
        };
        var inputToken;
        while (inputToken = this.consumeAToken()) {
            if (inputToken === "{") {
                var block = this.consumeASimpleBlock(inputToken);
                qualifiedRule.block = block;
                return qualifiedRule;
            }
            else if (inputToken.type === 9) {
                var simpleBlock = inputToken;
                if (simpleBlock.associatedToken === "{") {
                    qualifiedRule.block = simpleBlock;
                    return qualifiedRule;
                }
            }
            this.reconsumeTheCurrentInputToken(inputToken);
            var componentValue = this.consumeAComponentValue();
            if (componentValue) {
                qualifiedRule.prelude.push(componentValue);
            }
        }
        return null;
    };
    CSS3Parser.prototype.consumeAComponentValue = function () {
        var inputToken = this.consumeAToken();
        switch (inputToken) {
            case "{":
            case "[":
            case "(":
                this.nextInputCodePointIndex++;
                return this.consumeASimpleBlock(inputToken);
        }
        if (typeof inputToken === "object" && inputToken.type === 8) {
            return this.consumeAFunction(inputToken.name);
        }
        return inputToken;
    };
    CSS3Parser.prototype.consumeASimpleBlock = function (associatedToken) {
        var endianToken = {
            "[": "]",
            "{": "}",
            "(": ")"
        }[associatedToken];
        var start = this.nextInputCodePointIndex - 1;
        var block = {
            type: 9,
            text: undefined,
            associatedToken: associatedToken,
            values: []
        };
        var nextInputToken;
        while (nextInputToken = this.text[this.nextInputCodePointIndex]) {
            if (nextInputToken === endianToken) {
                this.nextInputCodePointIndex++;
                var end = this.nextInputCodePointIndex;
                block.text = this.text.substring(start, end);
                return block;
            }
            var value = this.consumeAComponentValue();
            if (value) {
                block.values.push(value);
            }
        }
        block.text = this.text.substring(start);
        return block;
    };
    CSS3Parser.prototype.consumeAFunction = function (name) {
        var start = this.nextInputCodePointIndex;
        var funcToken = { type: 14, name: name, text: undefined, components: [] };
        do {
            if (this.nextInputCodePointIndex >= this.text.length) {
                funcToken.text = name + "(" + this.text.substring(start);
                return funcToken;
            }
            var nextInputToken = this.text[this.nextInputCodePointIndex];
            switch (nextInputToken) {
                case ")":
                    this.nextInputCodePointIndex++;
                    var end = this.nextInputCodePointIndex;
                    funcToken.text = name + "(" + this.text.substring(start, end);
                    return funcToken;
                default:
                    var component = this.consumeAComponentValue();
                    if (component) {
                        funcToken.components.push(component);
                    }
            }
        } while (true);
    };
    return CSS3Parser;
}());
exports.CSS3Parser = CSS3Parser;
var CSSNativeScript = (function () {
    function CSSNativeScript() {
    }
    CSSNativeScript.prototype.parseStylesheet = function (stylesheet) {
        return {
            type: "stylesheet",
            stylesheet: {
                rules: this.parseRules(stylesheet.rules)
            }
        };
    };
    CSSNativeScript.prototype.parseRules = function (rules) {
        var _this = this;
        return rules.map(function (rule) { return _this.parseRule(rule); });
    };
    CSSNativeScript.prototype.parseRule = function (rule) {
        if (rule.type === "at-rule") {
            return this.parseAtRule(rule);
        }
        else if (rule.type === "qualified-rule") {
            return this.parseQualifiedRule(rule);
        }
    };
    CSSNativeScript.prototype.parseAtRule = function (rule) {
        if (rule.name === "import") {
            return {
                import: rule.prelude.map(function (m) { return typeof m === "string" ? m : m.text; }).join("").trim(),
                type: "import"
            };
        }
        return;
    };
    CSSNativeScript.prototype.parseQualifiedRule = function (rule) {
        return {
            type: "rule",
            selectors: this.preludeToSelectorsStringArray(rule.prelude),
            declarations: this.ruleBlockToDeclarations(rule.block.values)
        };
    };
    CSSNativeScript.prototype.ruleBlockToDeclarations = function (declarationsInputTokens) {
        var declarations = [];
        var property = "";
        var value = "";
        var reading = "property";
        for (var i = 0; i < declarationsInputTokens.length; i++) {
            var inputToken = declarationsInputTokens[i];
            if (reading === "property") {
                if (inputToken === ":") {
                    reading = "value";
                }
                else if (typeof inputToken === "string") {
                    property += inputToken;
                }
                else {
                    property += inputToken.text;
                }
            }
            else {
                if (inputToken === ";") {
                    property = property.trim();
                    value = value.trim();
                    declarations.push({ type: "declaration", property: property, value: value });
                    property = "";
                    value = "";
                    reading = "property";
                }
                else if (typeof inputToken === "string") {
                    value += inputToken;
                }
                else {
                    value += inputToken.text;
                }
            }
        }
        property = property.trim();
        value = value.trim();
        if (property || value) {
            declarations.push({ type: "declaration", property: property, value: value });
        }
        return declarations;
    };
    CSSNativeScript.prototype.preludeToSelectorsStringArray = function (prelude) {
        var selectors = [];
        var selector = "";
        prelude.forEach(function (inputToken) {
            if (typeof inputToken === "string") {
                if (inputToken === ",") {
                    if (selector) {
                        selectors.push(selector.trim());
                    }
                    selector = "";
                }
                else {
                    selector += inputToken;
                }
            }
            else if (typeof inputToken === "object") {
                selector += inputToken.text;
            }
        });
        if (selector) {
            selectors.push(selector.trim());
        }
        return selectors;
    };
    return CSSNativeScript;
}());
exports.CSSNativeScript = CSSNativeScript;
//# sourceMappingURL=parser.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/data/observable/observable.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var _wrappedIndex = 0;
var WrappedValue = (function () {
    function WrappedValue(wrapped) {
        this.wrapped = wrapped;
    }
    WrappedValue.unwrap = function (value) {
        return (value instanceof WrappedValue) ? value.wrapped : value;
    };
    WrappedValue.wrap = function (value) {
        var w = _wrappedValues[_wrappedIndex++ % 5];
        w.wrapped = value;
        return w;
    };
    return WrappedValue;
}());
exports.WrappedValue = WrappedValue;
var _wrappedValues = [
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null),
    new WrappedValue(null)
];
var Observable = (function () {
    function Observable() {
        this._observers = {};
    }
    Observable.prototype.get = function (name) {
        return this[name];
    };
    Observable.prototype.set = function (name, value) {
        var oldValue = this[name];
        if (this[name] === value) {
            return;
        }
        var newValue = WrappedValue.unwrap(value);
        this[name] = newValue;
        this.notifyPropertyChange(name, newValue, oldValue);
    };
    Observable.prototype.on = function (eventNames, callback, thisArg) {
        this.addEventListener(eventNames, callback, thisArg);
    };
    Observable.prototype.once = function (event, callback, thisArg) {
        var list = this._getEventList(event, true);
        list.push({ callback: callback, thisArg: thisArg, once: true });
    };
    Observable.prototype.off = function (eventNames, callback, thisArg) {
        this.removeEventListener(eventNames, callback, thisArg);
    };
    Observable.prototype.addEventListener = function (eventNames, callback, thisArg) {
        if (typeof eventNames !== "string") {
            throw new TypeError("Events name(s) must be string.");
        }
        if (typeof callback !== "function") {
            throw new TypeError("callback must be function.");
        }
        var events = eventNames.split(",");
        for (var i = 0, l = events.length; i < l; i++) {
            var event_1 = events[i].trim();
            var list = this._getEventList(event_1, true);
            list.push({
                callback: callback,
                thisArg: thisArg
            });
        }
    };
    Observable.prototype.removeEventListener = function (eventNames, callback, thisArg) {
        if (typeof eventNames !== "string") {
            throw new TypeError("Events name(s) must be string.");
        }
        if (callback && typeof callback !== "function") {
            throw new TypeError("callback must be function.");
        }
        var events = eventNames.split(",");
        for (var i = 0, l = events.length; i < l; i++) {
            var event_2 = events[i].trim();
            if (callback) {
                var list = this._getEventList(event_2, false);
                if (list) {
                    var index_1 = this._indexOfListener(list, callback, thisArg);
                    if (index_1 >= 0) {
                        list.splice(index_1, 1);
                    }
                    if (list.length === 0) {
                        delete this._observers[event_2];
                    }
                }
            }
            else {
                this._observers[event_2] = undefined;
                delete this._observers[event_2];
            }
        }
    };
    Observable.prototype.notify = function (data) {
        var observers = this._observers[data.eventName];
        if (!observers) {
            return;
        }
        for (var i = observers.length - 1; i >= 0; i--) {
            var entry = observers[i];
            if (entry.once) {
                observers.splice(i, 1);
            }
            if (entry.thisArg) {
                entry.callback.apply(entry.thisArg, [data]);
            }
            else {
                entry.callback(data);
            }
        }
    };
    Observable.prototype.notifyPropertyChange = function (name, value, oldValue) {
        this.notify(this._createPropertyChangeData(name, value, oldValue));
    };
    Observable.prototype.hasListeners = function (eventName) {
        return eventName in this._observers;
    };
    Observable.prototype._createPropertyChangeData = function (propertyName, value, oldValue) {
        return { eventName: Observable.propertyChangeEvent, object: this, propertyName: propertyName, value: value, oldValue: oldValue };
    };
    Observable.prototype._emit = function (eventNames) {
        var events = eventNames.split(",");
        for (var i = 0, l = events.length; i < l; i++) {
            var event_3 = events[i].trim();
            this.notify({ eventName: event_3, object: this });
        }
    };
    Observable.prototype._getEventList = function (eventName, createIfNeeded) {
        if (!eventName) {
            throw new TypeError("EventName must be valid string.");
        }
        var list = this._observers[eventName];
        if (!list && createIfNeeded) {
            list = [];
            this._observers[eventName] = list;
        }
        return list;
    };
    Observable.prototype._indexOfListener = function (list, callback, thisArg) {
        for (var i = 0; i < list.length; i++) {
            var entry = list[i];
            if (thisArg) {
                if (entry.callback === callback && entry.thisArg === thisArg) {
                    return i;
                }
            }
            else {
                if (entry.callback === callback) {
                    return i;
                }
            }
        }
        return -1;
    };
    Observable.propertyChangeEvent = "propertyChange";
    return Observable;
}());
exports.Observable = Observable;
var ObservableFromObject = (function (_super) {
    __extends(ObservableFromObject, _super);
    function ObservableFromObject() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._map = {};
        return _this;
    }
    ObservableFromObject.prototype.get = function (name) {
        return this._map[name];
    };
    ObservableFromObject.prototype.set = function (name, value) {
        var currentValue = this._map[name];
        if (currentValue === value) {
            return;
        }
        var newValue = WrappedValue.unwrap(value);
        this._map[name] = newValue;
        this.notifyPropertyChange(name, newValue, currentValue);
    };
    return ObservableFromObject;
}(Observable));
function defineNewProperty(target, propertyName) {
    Object.defineProperty(target, propertyName, {
        get: function () {
            return target._map[propertyName];
        },
        set: function (value) {
            target.set(propertyName, value);
        },
        enumerable: true,
        configurable: true
    });
}
function addPropertiesFromObject(observable, source, recursive) {
    if (recursive === void 0) { recursive = false; }
    Object.keys(source).forEach(function (prop) {
        var value = source[prop];
        if (recursive
            && !Array.isArray(value)
            && value
            && typeof value === "object"
            && !(value instanceof Observable)) {
            value = fromObjectRecursive(value);
        }
        defineNewProperty(observable, prop);
        observable.set(prop, value);
    });
}
function fromObject(source) {
    var observable = new ObservableFromObject();
    addPropertiesFromObject(observable, source, false);
    return observable;
}
exports.fromObject = fromObject;
function fromObjectRecursive(source) {
    var observable = new ObservableFromObject();
    addPropertiesFromObject(observable, source, true);
    return observable;
}
exports.fromObjectRecursive = fromObjectRecursive;
//# sourceMappingURL=observable.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/debugger/debugger.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", { value: true });
var network;
function getNetwork() {
    return network;
}
exports.getNetwork = getNetwork;
function setNetwork(newNetwork) {
    network = newNetwork;
}
exports.setNetwork = setNetwork;
var dom;
function getDOM() {
    return dom;
}
exports.getDOM = getDOM;
function setDOM(newDOM) {
    dom = newDOM;
}
exports.setDOM = setDOM;
var css;
function getCSS() {
    return css;
}
exports.getCSS = getCSS;
function setCSS(newCSS) {
    css = newCSS;
}
exports.setCSS = setCSS;
var NetworkAgent;
(function (NetworkAgent) {
    function responseReceived(requestId, result, headers) {
        var requestIdStr = requestId.toString();
        var mimeType = headers["Content-Type"] || headers["content-type"] || "application/octet-stream";
        var contentLengthHeader = headers["Content-Length"] || headers["content-length"];
        var contentLength = parseInt(contentLengthHeader, 10);
        if (isNaN(contentLength)) {
            contentLength = 0;
        }
        var response = {
            url: result.url || "",
            status: result.statusCode,
            statusText: result.statusText || "",
            headers: headers,
            mimeType: mimeType,
            fromDiskCache: false,
            connectionReused: true,
            connectionId: 0,
            encodedDataLength: contentLength,
            securityState: "info"
        };
        var responseData = {
            requestId: requestIdStr,
            type: mimeTypeToType(response.mimeType),
            response: response,
            timestamp: getTimeStamp()
        };
        global.__inspector.responseReceived(responseData);
        global.__inspector.loadingFinished({
            requestId: requestIdStr,
            timestamp: getTimeStamp(),
            encodedDataLength: contentLength
        });
        var hasTextContent = responseData.type === "Document" || responseData.type === "Script";
        var data;
        if (!hasTextContent) {
            if (responseData.type === "Image") {
                var bitmap = result.responseAsImage;
                if (bitmap) {
                    var outputStream = new java.io.ByteArrayOutputStream();
                    bitmap.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, outputStream);
                    var base64Image = android.util.Base64.encodeToString(outputStream.toByteArray(), android.util.Base64.DEFAULT);
                    data = base64Image;
                }
            }
        }
        else {
            data = result.responseAsString;
        }
        var successfulRequestData = {
            requestId: requestIdStr,
            data: data,
            hasTextContent: hasTextContent
        };
        global.__inspector.dataForRequestId(successfulRequestData);
    }
    NetworkAgent.responseReceived = responseReceived;
    function requestWillBeSent(requestId, options) {
        var request = {
            url: options.url,
            method: options.method,
            headers: options.headers || {},
            postData: options.content ? options.content.toString() : "",
            initialPriority: "Medium",
            referrerPolicy: "no-referrer-when-downgrade"
        };
        var requestData = {
            requestId: requestId.toString(),
            url: request.url,
            request: request,
            timestamp: getTimeStamp(),
            type: "Document",
            wallTime: 0
        };
        global.__inspector.requestWillBeSent(requestData);
    }
    NetworkAgent.requestWillBeSent = requestWillBeSent;
    function getTimeStamp() {
        var d = new Date();
        return Math.round(d.getTime() / 1000);
    }
    function mimeTypeToType(mimeType) {
        var type = "Document";
        if (mimeType) {
            if (mimeType.indexOf("image") === 0) {
                type = "Image";
            }
            else if (mimeType.indexOf("javascript") !== -1 || mimeType.indexOf("json") !== -1) {
                type = "Script";
            }
        }
        return type;
    }
})(NetworkAgent = exports.NetworkAgent || (exports.NetworkAgent = {}));
//# sourceMappingURL=debugger.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/@nativescript/core/file-system/file-system-access.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var text_1 = __webpack_require__("../node_modules/@nativescript/core/text/text.js");
var utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/utils.js");
var FileSystemAccess = (function () {
    function FileSystemAccess() {
        this.readText = this.readTextSync.bind(this);
        this.read = this.readSync.bind(this);
        this.writeText = this.writeTextSync.bind(this);
        this.write = this.writeSync.bind(this);
    }
    FileSystemAccess.prototype.getLastModified = function (path) {
        var fileManager = NSFileManager.defaultManager;
        var attributes = fileManager.attributesOfItemAtPathError(path);
        if (attributes) {
            return attributes.objectForKey("NSFileModificationDate");
        }
        else {
            return new Date();
        }
    };
    FileSystemAccess.prototype.getFileSize = function (path) {
        var fileManager = NSFileManager.defaultManager;
        var attributes = fileManager.attributesOfItemAtPathError(path);
        if (attributes) {
            return attributes.objectForKey("NSFileSize");
        }
        else {
            return 0;
        }
    };
    FileSystemAccess.prototype.getParent = function (path, onError) {
        try {
            var fileManager = NSFileManager.defaultManager;
            var nsString = NSString.stringWithString(path);
            var parentPath = nsString.stringByDeletingLastPathComponent;
            var name_1 = fileManager.displayNameAtPath(parentPath);
            return {
                path: parentPath.toString(),
                name: name_1
            };
        }
        catch (exception) {
            if (onError) {
                onError(exception);
            }
            return undefined;
        }
    };
    FileSystemAccess.prototype.getFile = function (path, onError) {
        try {
            var fileManager = NSFileManager.defaultManager;
            var exists = fileManager.fileExistsAtPath(path);
            if (!exists) {
                var parentPath = this.getParent(path, onError).path;
                if (!fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(parentPath, true, null)
                    || !fileManager.createFileAtPathContentsAttributes(path, null, null)) {
                    if (onError) {
                        onError(new Error("Failed to create file at path '" + path + "'"));
                    }
                    return undefined;
                }
            }
            var fileName = fileManager.displayNameAtPath(path);
            return {
                path: path,
                name: fileName,
                extension: this.getFileExtension(path)
            };
        }
        catch (exception) {
            if (onError) {
                onError(exception);
            }
            return undefined;
        }
    };
    FileSystemAccess.prototype.getFolder = function (path, onError) {
        try {
            var fileManager = NSFileManager.defaultManager;
            var exists = this.folderExists(path);
            if (!exists) {
                try {
                    fileManager.createDirectoryAtPathWithIntermediateDirectoriesAttributesError(path, true, null);
                }
                catch (ex) {
                    if (onError) {
                        onError(new Error("Failed to create folder at path '" + path + "': " + ex));
                    }
                    return undefined;
                }
            }
            var dirName = fileManager.displayNameAtPath(path);
            return {
                path: path,
                name: dirName
            };
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to create folder at path '" + path + "'"));
            }
            return undefined;
        }
    };
    FileSystemAccess.prototype.getExistingFolder = function (path, onError) {
        try {
            var fileManager = NSFileManager.defaultManager;
            var exists = this.folderExists(path);
            if (exists) {
                var dirName = fileManager.displayNameAtPath(path);
                return {
                    path: path,
                    name: dirName
                };
            }
            return undefined;
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to get folder at path '" + path + "'"));
            }
            return undefined;
        }
    };
    FileSystemAccess.prototype.eachEntity = function (path, onEntity, onError) {
        if (!onEntity) {
            return;
        }
        this.enumEntities(path, onEntity, onError);
    };
    FileSystemAccess.prototype.getEntities = function (path, onError) {
        var fileInfos = new Array();
        var onEntity = function (entity) {
            fileInfos.push(entity);
            return true;
        };
        var errorOccurred;
        var localError = function (error) {
            if (onError) {
                onError(error);
            }
            errorOccurred = true;
        };
        this.enumEntities(path, onEntity, localError);
        if (!errorOccurred) {
            return fileInfos;
        }
        return null;
    };
    FileSystemAccess.prototype.fileExists = function (path) {
        var result = this.exists(path);
        return result.exists;
    };
    FileSystemAccess.prototype.folderExists = function (path) {
        var result = this.exists(path);
        return result.exists && result.isDirectory;
    };
    FileSystemAccess.prototype.exists = function (path) {
        var fileManager = NSFileManager.defaultManager;
        var isDirectory = new interop.Reference(interop.types.bool, false);
        var exists = fileManager.fileExistsAtPathIsDirectory(path, isDirectory);
        return { exists: exists, isDirectory: isDirectory.value };
    };
    FileSystemAccess.prototype.concatPath = function (left, right) {
        return NSString.pathWithComponents([left, right]).toString();
    };
    FileSystemAccess.prototype.deleteFile = function (path, onError) {
        this.deleteEntity(path, onError);
    };
    FileSystemAccess.prototype.deleteFolder = function (path, onError) {
        this.deleteEntity(path, onError);
    };
    FileSystemAccess.prototype.emptyFolder = function (path, onError) {
        var fileManager = NSFileManager.defaultManager;
        var entities = this.getEntities(path, onError);
        if (!entities) {
            return;
        }
        for (var i = 0; i < entities.length; i++) {
            try {
                fileManager.removeItemAtPathError(entities[i].path);
            }
            catch (ex) {
                if (onError) {
                    onError(new Error("Failed to empty folder '" + path + "': " + ex));
                }
                return;
            }
        }
    };
    FileSystemAccess.prototype.rename = function (path, newPath, onError) {
        var fileManager = NSFileManager.defaultManager;
        try {
            fileManager.moveItemAtPathToPathError(path, newPath);
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to rename '" + path + "' to '" + newPath + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.getLogicalRootPath = function () {
        var mainBundlePath = NSBundle.mainBundle.bundlePath;
        var resolvedPath = NSString.stringWithString(mainBundlePath).stringByResolvingSymlinksInPath;
        return resolvedPath;
    };
    FileSystemAccess.prototype.getDocumentsFolderPath = function () {
        return this.getKnownPath(9);
    };
    FileSystemAccess.prototype.getTempFolderPath = function () {
        return this.getKnownPath(13);
    };
    FileSystemAccess.prototype.getCurrentAppPath = function () {
        return utils_1.ios.getCurrentAppPath();
    };
    FileSystemAccess.prototype.readTextAsync = function (path, encoding) {
        var actualEncoding = encoding || text_1.encoding.UTF_8;
        return new Promise(function (resolve, reject) {
            try {
                NSString.stringWithContentsOfFileEncodingCompletion(path, actualEncoding, function (result, error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(result.toString());
                    }
                });
            }
            catch (ex) {
                reject(new Error("Failed to read file at path '" + path + "': " + ex));
            }
        });
    };
    FileSystemAccess.prototype.readTextSync = function (path, onError, encoding) {
        var actualEncoding = encoding || text_1.encoding.UTF_8;
        try {
            var nsString = NSString.stringWithContentsOfFileEncodingError(path, actualEncoding);
            return nsString.toString();
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to read file at path '" + path + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.readAsync = function (path) {
        return new Promise(function (resolve, reject) {
            try {
                NSData.dataWithContentsOfFileCompletion(path, resolve);
            }
            catch (ex) {
                reject(new Error("Failed to read file at path '" + path + "': " + ex));
            }
        });
    };
    FileSystemAccess.prototype.readSync = function (path, onError) {
        try {
            return NSData.dataWithContentsOfFile(path);
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to read file at path '" + path + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.writeTextAsync = function (path, content, encoding) {
        var nsString = NSString.stringWithString(content);
        var actualEncoding = encoding || text_1.encoding.UTF_8;
        return new Promise(function (resolve, reject) {
            try {
                nsString.writeToFileAtomicallyEncodingCompletion(path, true, actualEncoding, function (error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve();
                    }
                });
            }
            catch (ex) {
                reject(new Error("Failed to write file at path '" + path + "': " + ex));
            }
        });
    };
    FileSystemAccess.prototype.writeTextSync = function (path, content, onError, encoding) {
        var nsString = NSString.stringWithString(content);
        var actualEncoding = encoding || text_1.encoding.UTF_8;
        try {
            nsString.writeToFileAtomicallyEncodingError(path, false, actualEncoding);
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to write to file '" + path + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.writeAsync = function (path, content) {
        return new Promise(function (resolve, reject) {
            try {
                content.writeToFileAtomicallyCompletion(path, true, function () { resolve(); });
            }
            catch (ex) {
                reject(new Error("Failed to write file at path '" + path + "': " + ex));
            }
        });
    };
    FileSystemAccess.prototype.writeSync = function (path, content, onError) {
        try {
            content.writeToFileAtomically(path, true);
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to write to file '" + path + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.getKnownPath = function (folderType) {
        var fileManager = NSFileManager.defaultManager;
        var paths = fileManager.URLsForDirectoryInDomains(folderType, 1);
        var url = paths.objectAtIndex(0);
        return url.path;
    };
    FileSystemAccess.prototype.getFileExtension = function (path) {
        var dotIndex = path.lastIndexOf(".");
        if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
            return path.substring(dotIndex);
        }
        return "";
    };
    FileSystemAccess.prototype.deleteEntity = function (path, onError) {
        var fileManager = NSFileManager.defaultManager;
        try {
            fileManager.removeItemAtPathError(path);
        }
        catch (ex) {
            if (onError) {
                onError(new Error("Failed to delete file at path '" + path + "': " + ex));
            }
        }
    };
    FileSystemAccess.prototype.enumEntities = function (path, callback, onError) {
        try {
            var fileManager = NSFileManager.defaultManager;
            var files = void 0;
            try {
                files = fileManager.contentsOfDirectoryAtPathError(path);
            }
            catch (ex) {
                if (onError) {
                    onError(new Error("Failed to enum files for folder '" + path + "': " + ex));
                }
                return;
            }
            for (var i = 0; i < files.count; i++) {
                var file = files.objectAtIndex(i);
                var info = {
                    path: this.concatPath(path, file),
                    name: file,
                    extension: ""
                };
                if (!this.folderExists(this.joinPath(path, file))) {
                    info.extension = this.getFileExtension(info.path);
                }
                var retVal = callback(info);
                if (retVal === false) {
                    break;
                }
            }
        }
        catch (ex) {
            if (onError) {
                onError(ex);
            }
        }
    };
    FileSystemAccess.prototype.getPathSeparator = function () {
        return "/";
    };
    FileSystemAccess.prototype.normalizePath = function (path) {
        var nsString = NSString.stringWithString(path);
        var normalized = nsString.stringByStandardizingPath;
        return normalized;
    };
    FileSystemAccess.prototype.joinPath = function (left, right) {
        var nsString = NSString.stringWithString(left);
        return nsString.stringByAppendingPathComponent(right);
    };
    FileSystemAccess.prototype.joinPaths = function (paths) {
        return utils_1.ios.joinPaths.apply(utils_1.ios, paths);
    };
    return FileSystemAccess;
}());
exports.FileSystemAccess = FileSystemAccess;
//# sourceMappingURL=file-system-access.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/file-system/file-system.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var file_system_access_1 = __webpack_require__("../node_modules/@nativescript/core/file-system/file-system-access.js");
var profiling_1 = __webpack_require__("../node_modules/@nativescript/core/profiling/profiling.js");
var fileAccess;
function getFileAccess() {
    if (!fileAccess) {
        fileAccess = new file_system_access_1.FileSystemAccess();
    }
    return fileAccess;
}
var platform;
function ensurePlatform() {
    if (!platform) {
        platform = __webpack_require__("../node_modules/@nativescript/core/platform/platform.js");
    }
}
function createFile(info) {
    var file = new File();
    file._path = info.path;
    file._name = info.name;
    file._extension = info.extension;
    return file;
}
function createFolder(info) {
    var documents = knownFolders.documents();
    if (info.path === documents.path) {
        return documents;
    }
    var temp = knownFolders.temp();
    if (info.path === temp.path) {
        return temp;
    }
    var folder = new Folder();
    folder._path = info.path;
    folder._name = info.name;
    return folder;
}
var FileSystemEntity = (function () {
    function FileSystemEntity() {
    }
    Object.defineProperty(FileSystemEntity.prototype, "parent", {
        get: function () {
            var onError = function (error) {
                throw error;
            };
            var folderInfo = getFileAccess().getParent(this.path, onError);
            if (!folderInfo) {
                return undefined;
            }
            return createFolder(folderInfo);
        },
        enumerable: true,
        configurable: true
    });
    FileSystemEntity.prototype.remove = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var hasError = false;
            var localError = function (error) {
                hasError = true;
                reject(error);
            };
            _this.removeSync(localError);
            if (!hasError) {
                resolve();
            }
        });
    };
    FileSystemEntity.prototype.removeSync = function (onError) {
        if (this._isKnown) {
            if (onError) {
                onError({ message: "Cannot delete known folder." });
            }
            return;
        }
        var fileAccess = getFileAccess();
        if (this instanceof File) {
            fileAccess.deleteFile(this.path, onError);
        }
        else if (this instanceof Folder) {
            fileAccess.deleteFolder(this.path, onError);
        }
    };
    FileSystemEntity.prototype.rename = function (newName) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var hasError = false;
            var localError = function (error) {
                hasError = true;
                reject(error);
            };
            _this.renameSync(newName, localError);
            if (!hasError) {
                resolve();
            }
        });
    };
    FileSystemEntity.prototype.renameSync = function (newName, onError) {
        if (this._isKnown) {
            if (onError) {
                onError(new Error("Cannot rename known folder."));
            }
            return;
        }
        var parentFolder = this.parent;
        if (!parentFolder) {
            if (onError) {
                onError(new Error("No parent folder."));
            }
            return;
        }
        var fileAccess = getFileAccess();
        var path = parentFolder.path;
        var newPath = fileAccess.joinPath(path, newName);
        var localError = function (error) {
            if (onError) {
                onError(error);
            }
            return null;
        };
        fileAccess.rename(this.path, newPath, localError);
        this._path = newPath;
        this._name = newName;
        if (this instanceof File) {
            this._extension = fileAccess.getFileExtension(newPath);
        }
    };
    Object.defineProperty(FileSystemEntity.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileSystemEntity.prototype, "path", {
        get: function () {
            return this._path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
        get: function () {
            var value = this._lastModified;
            if (!this._lastModified) {
                value = this._lastModified = getFileAccess().getLastModified(this.path);
            }
            return value;
        },
        enumerable: true,
        configurable: true
    });
    return FileSystemEntity;
}());
exports.FileSystemEntity = FileSystemEntity;
var File = (function (_super) {
    __extends(File, _super);
    function File() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    File.fromPath = function (path) {
        var onError = function (error) {
            throw error;
        };
        var fileInfo = getFileAccess().getFile(path, onError);
        if (!fileInfo) {
            return undefined;
        }
        return createFile(fileInfo);
    };
    File.exists = function (path) {
        return getFileAccess().fileExists(path);
    };
    Object.defineProperty(File.prototype, "extension", {
        get: function () {
            return this._extension;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "isLocked", {
        get: function () {
            return !!this._locked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(File.prototype, "size", {
        get: function () {
            return getFileAccess().getFileSize(this.path);
        },
        enumerable: true,
        configurable: true
    });
    File.prototype.read = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.checkAccess();
            }
            catch (ex) {
                reject(ex);
                return;
            }
            _this._locked = true;
            getFileAccess().readAsync(_this.path).then(function (result) {
                resolve(result);
                _this._locked = false;
            }, function (error) {
                reject(error);
                _this._locked = false;
            });
        });
    };
    File.prototype.readSync = function (onError) {
        this.checkAccess();
        this._locked = true;
        var that = this;
        var localError = function (error) {
            that._locked = false;
            if (onError) {
                onError(error);
            }
        };
        var content = getFileAccess().readSync(this.path, localError);
        this._locked = false;
        return content;
    };
    File.prototype.write = function (content) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.checkAccess();
            }
            catch (ex) {
                reject(ex);
                return;
            }
            _this._locked = true;
            getFileAccess().writeAsync(_this.path, content).then(function () {
                resolve();
                _this._locked = false;
            }, function (error) {
                reject(error);
                _this._locked = false;
            });
        });
    };
    File.prototype.writeSync = function (content, onError) {
        this.checkAccess();
        try {
            this._locked = true;
            var that_1 = this;
            var localError = function (error) {
                that_1._locked = false;
                if (onError) {
                    onError(error);
                }
            };
            getFileAccess().writeSync(this.path, content, localError);
        }
        finally {
            this._locked = false;
        }
    };
    File.prototype.readText = function (encoding) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.checkAccess();
            }
            catch (ex) {
                reject(ex);
                return;
            }
            _this._locked = true;
            getFileAccess().readTextAsync(_this.path, encoding).then(function (result) {
                resolve(result);
                _this._locked = false;
            }, function (error) {
                reject(error);
                _this._locked = false;
            });
        });
    };
    File.prototype.readTextSync = function (onError, encoding) {
        this.checkAccess();
        this._locked = true;
        var that = this;
        var localError = function (error) {
            that._locked = false;
            if (onError) {
                onError(error);
            }
        };
        var content = getFileAccess().readTextSync(this.path, localError, encoding);
        this._locked = false;
        return content;
    };
    File.prototype.writeText = function (content, encoding) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.checkAccess();
            }
            catch (ex) {
                reject(ex);
                return;
            }
            _this._locked = true;
            getFileAccess().writeTextAsync(_this.path, content, encoding).then(function () {
                resolve();
                _this._locked = false;
            }, function (error) {
                reject(error);
                _this._locked = false;
            });
        });
    };
    File.prototype.writeTextSync = function (content, onError, encoding) {
        this.checkAccess();
        try {
            this._locked = true;
            var that_2 = this;
            var localError = function (error) {
                that_2._locked = false;
                if (onError) {
                    onError(error);
                }
            };
            getFileAccess().writeTextSync(this.path, content, localError, encoding);
        }
        finally {
            this._locked = false;
        }
    };
    File.prototype.checkAccess = function () {
        if (this.isLocked) {
            throw new Error("Cannot access a locked file.");
        }
    };
    __decorate([
        profiling_1.profile
    ], File.prototype, "readTextSync", null);
    return File;
}(FileSystemEntity));
exports.File = File;
var Folder = (function (_super) {
    __extends(Folder, _super);
    function Folder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Folder.fromPath = function (path) {
        var onError = function (error) {
            throw error;
        };
        var folderInfo = getFileAccess().getFolder(path, onError);
        if (!folderInfo) {
            return undefined;
        }
        return createFolder(folderInfo);
    };
    Folder.exists = function (path) {
        return getFileAccess().folderExists(path);
    };
    Folder.prototype.contains = function (name) {
        var fileAccess = getFileAccess();
        var path = fileAccess.joinPath(this.path, name);
        if (fileAccess.fileExists(path)) {
            return true;
        }
        return fileAccess.folderExists(path);
    };
    Folder.prototype.clear = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var hasError = false;
            var onError = function (error) {
                hasError = true;
                reject(error);
            };
            _this.clearSync(onError);
            if (!hasError) {
                resolve();
            }
        });
    };
    Folder.prototype.clearSync = function (onError) {
        getFileAccess().emptyFolder(this.path, onError);
    };
    Object.defineProperty(Folder.prototype, "isKnown", {
        get: function () {
            return this._isKnown;
        },
        enumerable: true,
        configurable: true
    });
    Folder.prototype.getFile = function (name) {
        var fileAccess = getFileAccess();
        var path = fileAccess.joinPath(this.path, name);
        var onError = function (error) {
            throw error;
        };
        var fileInfo = fileAccess.getFile(path, onError);
        if (!fileInfo) {
            return undefined;
        }
        return createFile(fileInfo);
    };
    Folder.prototype.getFolder = function (name) {
        var fileAccess = getFileAccess();
        var path = fileAccess.joinPath(this.path, name);
        var onError = function (error) {
            throw error;
        };
        var folderInfo = fileAccess.getFolder(path, onError);
        if (!folderInfo) {
            return undefined;
        }
        return createFolder(folderInfo);
    };
    Folder.prototype.getEntities = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var hasError = false;
            var localError = function (error) {
                hasError = true;
                reject(error);
            };
            var entities = _this.getEntitiesSync(localError);
            if (!hasError) {
                resolve(entities);
            }
        });
    };
    Folder.prototype.getEntitiesSync = function (onError) {
        var fileInfos = getFileAccess().getEntities(this.path, onError);
        if (!fileInfos) {
            return null;
        }
        var entities = new Array();
        for (var i = 0; i < fileInfos.length; i++) {
            if (fileInfos[i].extension) {
                entities.push(createFile(fileInfos[i]));
            }
            else {
                entities.push(createFolder(fileInfos[i]));
            }
        }
        return entities;
    };
    Folder.prototype.eachEntity = function (onEntity) {
        if (!onEntity) {
            return;
        }
        var onSuccess = function (fileInfo) {
            var entity;
            if (fileInfo.extension) {
                entity = createFile(fileInfo);
            }
            else {
                entity = createFolder(fileInfo);
            }
            return onEntity(entity);
        };
        var onError = function (error) {
            throw error;
        };
        getFileAccess().eachEntity(this.path, onSuccess, onError);
    };
    return Folder;
}(FileSystemEntity));
exports.Folder = Folder;
var knownFolders;
(function (knownFolders) {
    var _documents;
    var _temp;
    var _app;
    function documents() {
        if (!_documents) {
            var path_1 = getFileAccess().getDocumentsFolderPath();
            _documents = new Folder();
            _documents._path = path_1;
            _documents._isKnown = true;
        }
        return _documents;
    }
    knownFolders.documents = documents;
    function temp() {
        if (!_temp) {
            var path_2 = getFileAccess().getTempFolderPath();
            _temp = new Folder();
            _temp._path = path_2;
            _temp._isKnown = true;
        }
        return _temp;
    }
    knownFolders.temp = temp;
    function currentApp() {
        if (!_app) {
            var path_3 = getFileAccess().getCurrentAppPath();
            _app = new Folder();
            _app._path = path_3;
            _app._isKnown = true;
        }
        return _app;
    }
    knownFolders.currentApp = currentApp;
    var ios;
    (function (ios) {
        function _checkPlatform(knownFolderName) {
            ensurePlatform();
            if (!platform.isIOS) {
                throw new Error("The \"" + knownFolderName + "\" known folder is available on iOS only!");
            }
        }
        var _library;
        function library() {
            _checkPlatform("library");
            if (!_library) {
                var existingFolderInfo = getExistingFolderInfo(5);
                if (existingFolderInfo) {
                    _library = existingFolderInfo.folder;
                    _library._path = existingFolderInfo.path;
                    _library._isKnown = true;
                }
            }
            return _library;
        }
        ios.library = library;
        var _developer;
        function developer() {
            _checkPlatform("developer");
            if (!_developer) {
                var existingFolderInfo = getExistingFolderInfo(6);
                if (existingFolderInfo) {
                    _developer = existingFolderInfo.folder;
                    _developer._path = existingFolderInfo.path;
                    _developer._isKnown = true;
                }
            }
            return _developer;
        }
        ios.developer = developer;
        var _desktop;
        function desktop() {
            _checkPlatform("desktop");
            if (!_desktop) {
                var existingFolderInfo = getExistingFolderInfo(12);
                if (existingFolderInfo) {
                    _desktop = existingFolderInfo.folder;
                    _desktop._path = existingFolderInfo.path;
                    _desktop._isKnown = true;
                }
            }
            return _desktop;
        }
        ios.desktop = desktop;
        var _downloads;
        function downloads() {
            _checkPlatform("downloads");
            if (!_downloads) {
                var existingFolderInfo = getExistingFolderInfo(15);
                if (existingFolderInfo) {
                    _downloads = existingFolderInfo.folder;
                    _downloads._path = existingFolderInfo.path;
                    _downloads._isKnown = true;
                }
            }
            return _downloads;
        }
        ios.downloads = downloads;
        var _movies;
        function movies() {
            _checkPlatform("movies");
            if (!_movies) {
                var existingFolderInfo = getExistingFolderInfo(17);
                if (existingFolderInfo) {
                    _movies = existingFolderInfo.folder;
                    _movies._path = existingFolderInfo.path;
                    _movies._isKnown = true;
                }
            }
            return _movies;
        }
        ios.movies = movies;
        var _music;
        function music() {
            _checkPlatform("music");
            if (!_music) {
                var existingFolderInfo = getExistingFolderInfo(18);
                if (existingFolderInfo) {
                    _music = existingFolderInfo.folder;
                    _music._path = existingFolderInfo.path;
                    _music._isKnown = true;
                }
            }
            return _music;
        }
        ios.music = music;
        var _pictures;
        function pictures() {
            _checkPlatform("pictures");
            if (!_pictures) {
                var existingFolderInfo = getExistingFolderInfo(19);
                if (existingFolderInfo) {
                    _pictures = existingFolderInfo.folder;
                    _pictures._path = existingFolderInfo.path;
                    _pictures._isKnown = true;
                }
            }
            return _pictures;
        }
        ios.pictures = pictures;
        var _sharedPublic;
        function sharedPublic() {
            _checkPlatform("sharedPublic");
            if (!_sharedPublic) {
                var existingFolderInfo = getExistingFolderInfo(21);
                if (existingFolderInfo) {
                    _sharedPublic = existingFolderInfo.folder;
                    _sharedPublic._path = existingFolderInfo.path;
                    _sharedPublic._isKnown = true;
                }
            }
            return _sharedPublic;
        }
        ios.sharedPublic = sharedPublic;
        function getExistingFolderInfo(pathDirectory) {
            var fileAccess = getFileAccess();
            var folderPath = fileAccess.getKnownPath(pathDirectory);
            var folderInfo = fileAccess.getExistingFolder(folderPath);
            if (folderInfo) {
                return {
                    folder: createFolder(folderInfo),
                    path: folderPath
                };
            }
            return undefined;
        }
    })(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function (path_4) {
    function normalize(path) {
        return getFileAccess().normalizePath(path);
    }
    path_4.normalize = normalize;
    function join() {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        var fileAccess = getFileAccess();
        return fileAccess.joinPaths(paths);
    }
    path_4.join = join;
    path_4.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
//# sourceMappingURL=file-system.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/http/http-request/http-request-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
function getFilenameFromUrl(url) {
    var fs = __webpack_require__("../node_modules/@nativescript/core/file-system/file-system.js");
    var slashPos = url.lastIndexOf("/") + 1;
    var questionMarkPos = url.lastIndexOf("?");
    var actualFileName;
    if (questionMarkPos !== -1) {
        actualFileName = url.substring(slashPos, questionMarkPos);
    }
    else {
        actualFileName = url.substring(slashPos);
    }
    var result = fs.path.join(fs.knownFolders.documents().path, actualFileName);
    return result;
}
exports.getFilenameFromUrl = getFilenameFromUrl;
//# sourceMappingURL=http-request-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/http/http-request/http-request.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var types = __webpack_require__("../node_modules/@nativescript/core/utils/types.js");
var domainDebugger = __webpack_require__("../node_modules/@nativescript/core/debugger/debugger.js");
var http_request_common_1 = __webpack_require__("../node_modules/@nativescript/core/http/http-request/http-request-common.js");
var HttpResponseEncoding;
(function (HttpResponseEncoding) {
    HttpResponseEncoding[HttpResponseEncoding["UTF8"] = 0] = "UTF8";
    HttpResponseEncoding[HttpResponseEncoding["GBK"] = 1] = "GBK";
})(HttpResponseEncoding = exports.HttpResponseEncoding || (exports.HttpResponseEncoding = {}));
var currentDevice = UIDevice.currentDevice;
var device = currentDevice.userInterfaceIdiom === 0 ? "Phone" : "Pad";
var osVersion = currentDevice.systemVersion;
var GET = "GET";
var USER_AGENT_HEADER = "User-Agent";
var USER_AGENT = "Mozilla/5.0 (i" + device + "; CPU OS " + osVersion.replace(".", "_") + " like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/" + osVersion + " Mobile/10A5355d Safari/8536.25";
var sessionConfig = NSURLSessionConfiguration.defaultSessionConfiguration;
var queue = NSOperationQueue.mainQueue;
function parseJSON(source) {
    var src = source.trim();
    if (src.lastIndexOf(")") === src.length - 1) {
        return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
    }
    return JSON.parse(src);
}
var NSURLSessionTaskDelegateImpl = (function (_super) {
    __extends(NSURLSessionTaskDelegateImpl, _super);
    function NSURLSessionTaskDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NSURLSessionTaskDelegateImpl.prototype.URLSessionTaskWillPerformHTTPRedirectionNewRequestCompletionHandler = function (session, task, response, request, completionHandler) {
        completionHandler(null);
    };
    NSURLSessionTaskDelegateImpl.ObjCProtocols = [NSURLSessionTaskDelegate];
    return NSURLSessionTaskDelegateImpl;
}(NSObject));
var sessionTaskDelegateInstance = NSURLSessionTaskDelegateImpl.new();
var defaultSession;
function ensureDefaultSession() {
    if (!defaultSession) {
        defaultSession = NSURLSession.sessionWithConfigurationDelegateDelegateQueue(sessionConfig, null, queue);
    }
}
var sessionNotFollowingRedirects;
function ensureSessionNotFollowingRedirects() {
    if (!sessionNotFollowingRedirects) {
        sessionNotFollowingRedirects = NSURLSession.sessionWithConfigurationDelegateDelegateQueue(sessionConfig, sessionTaskDelegateInstance, queue);
    }
}
var imageSource;
function ensureImageSource() {
    if (!imageSource) {
        imageSource = __webpack_require__("../node_modules/@nativescript/core/image-source/image-source.js");
    }
}
var fs;
function ensureFileSystem() {
    if (!fs) {
        fs = __webpack_require__("../node_modules/@nativescript/core/file-system/file-system.js");
    }
}
function request(options) {
    return new Promise(function (resolve, reject) {
        if (!options.url) {
            reject(new Error("Request url was empty."));
            return;
        }
        try {
            var network = domainDebugger.getNetwork();
            var debugRequest_1 = network && network.create();
            var urlRequest = NSMutableURLRequest.requestWithURL(NSURL.URLWithString(options.url));
            urlRequest.HTTPMethod = types.isDefined(options.method) ? options.method : GET;
            urlRequest.setValueForHTTPHeaderField(USER_AGENT, USER_AGENT_HEADER);
            if (options.headers) {
                for (var header in options.headers) {
                    urlRequest.setValueForHTTPHeaderField(options.headers[header] + "", header);
                }
            }
            if (types.isString(options.content) || options.content instanceof FormData) {
                urlRequest.HTTPBody = NSString.stringWithString(options.content.toString()).dataUsingEncoding(4);
            }
            if (types.isNumber(options.timeout)) {
                urlRequest.timeoutInterval = options.timeout / 1000;
            }
            var session = void 0;
            if (types.isBoolean(options.dontFollowRedirects) && options.dontFollowRedirects) {
                ensureSessionNotFollowingRedirects();
                session = sessionNotFollowingRedirects;
            }
            else {
                ensureDefaultSession();
                session = defaultSession;
            }
            var dataTask = session.dataTaskWithRequestCompletionHandler(urlRequest, function (data, response, error) {
                if (error) {
                    reject(new Error(error.localizedDescription));
                }
                else {
                    var headers_1 = {};
                    if (response && response.allHeaderFields) {
                        var headerFields = response.allHeaderFields;
                        headerFields.enumerateKeysAndObjectsUsingBlock(function (key, value, stop) {
                            addHeader(headers_1, key, value);
                        });
                    }
                    if (debugRequest_1) {
                        debugRequest_1.mimeType = response.MIMEType;
                        debugRequest_1.data = data;
                        var debugResponse = {
                            url: options.url,
                            status: response.statusCode,
                            statusText: NSHTTPURLResponse.localizedStringForStatusCode(response.statusCode),
                            headers: headers_1,
                            mimeType: response.MIMEType,
                            fromDiskCache: false
                        };
                        debugRequest_1.responseReceived(debugResponse);
                        debugRequest_1.loadingFinished();
                    }
                    resolve({
                        content: {
                            raw: data,
                            toString: function (encoding) { return NSDataToString(data, encoding); },
                            toJSON: function (encoding) { return parseJSON(NSDataToString(data, encoding)); },
                            toImage: function () {
                                ensureImageSource();
                                return new Promise(function (resolve, reject) {
                                    UIImage.tns_decodeImageWithDataCompletion(data, function (image) {
                                        if (image) {
                                            resolve(new imageSource.ImageSource(image));
                                        }
                                        else {
                                            reject(new Error("Response content may not be converted to an Image"));
                                        }
                                    });
                                });
                            },
                            toFile: function (destinationFilePath) {
                                ensureFileSystem();
                                if (!destinationFilePath) {
                                    destinationFilePath = http_request_common_1.getFilenameFromUrl(options.url);
                                }
                                if (data instanceof NSData) {
                                    var file = fs.File.fromPath(destinationFilePath);
                                    data.writeToFileAtomically(destinationFilePath, true);
                                    return file;
                                }
                                else {
                                    reject(new Error("Cannot save file with path: " + destinationFilePath + "."));
                                }
                            }
                        },
                        statusCode: response.statusCode,
                        headers: headers_1
                    });
                }
            });
            if (options.url && debugRequest_1) {
                var request_1 = {
                    url: options.url,
                    method: "GET",
                    headers: options.headers
                };
                debugRequest_1.requestWillBeSent(request_1);
            }
            dataTask.resume();
        }
        catch (ex) {
            reject(ex);
        }
    });
}
exports.request = request;
function NSDataToString(data, encoding) {
    var code = NSUTF8StringEncoding;
    if (encoding === HttpResponseEncoding.GBK) {
        code = 1586;
    }
    var encodedString = NSString.alloc().initWithDataEncoding(data, code);
    if (!encodedString) {
        code = NSISOLatin1StringEncoding;
        encodedString = NSString.alloc().initWithDataEncoding(data, code);
    }
    return encodedString.toString();
}
function addHeader(headers, key, value) {
    if (!headers[key]) {
        headers[key] = value;
    }
    else if (Array.isArray(headers[key])) {
        headers[key].push(value);
    }
    else {
        var values = [headers[key]];
        values.push(value);
        headers[key] = values;
    }
}
exports.addHeader = addHeader;
//# sourceMappingURL=http-request.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/http/http.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var httpRequest = __webpack_require__("../node_modules/@nativescript/core/http/http-request/http-request.js");
__export(__webpack_require__("../node_modules/@nativescript/core/http/http-request/http-request.js"));
function getString(arg) {
    return new Promise(function (resolve, reject) {
        httpRequest.request(typeof arg === "string" ? { url: arg, method: "GET" } : arg)
            .then(function (r) {
            try {
                var str = r.content.toString();
                resolve(str);
            }
            catch (e) {
                reject(e);
            }
        }, function (e) { return reject(e); });
    });
}
exports.getString = getString;
function getJSON(arg) {
    return new Promise(function (resolve, reject) {
        httpRequest.request(typeof arg === "string" ? { url: arg, method: "GET" } : arg)
            .then(function (r) {
            try {
                var json = r.content.toJSON();
                resolve(json);
            }
            catch (e) {
                reject(e);
            }
        }, function (e) { return reject(e); });
    });
}
exports.getJSON = getJSON;
function getImage(arg) {
    return new Promise(function (resolve, reject) {
        httpRequest.request(typeof arg === "string" ? { url: arg, method: "GET" } : arg)
            .then(function (r) {
            try {
                resolve(r.content.toImage());
            }
            catch (err) {
                reject(err);
            }
        }, function (err) {
            reject(err);
        });
    });
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
    return new Promise(function (resolve, reject) {
        httpRequest.request(typeof arg === "string" ? { url: arg, method: "GET" } : arg)
            .then(function (r) {
            try {
                var file = r.content.toFile(destinationFilePath);
                resolve(file);
            }
            catch (e) {
                reject(e);
            }
        }, function (e) { return reject(e); });
    });
}
exports.getFile = getFile;
//# sourceMappingURL=http.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/image-source/image-source.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var file_system_1 = __webpack_require__("../node_modules/@nativescript/core/file-system/file-system.js");
var utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/utils.js");
exports.isFileOrResourcePath = utils_1.isFileOrResourcePath;
var http;
function ensureHttp() {
    if (!http) {
        http = __webpack_require__("../node_modules/@nativescript/core/http/http.js");
    }
}
var ImageSource = (function () {
    function ImageSource(nativeSource) {
        if (nativeSource) {
            this.setNativeSource(nativeSource);
        }
    }
    Object.defineProperty(ImageSource.prototype, "height", {
        get: function () {
            if (this.ios) {
                return this.ios.size.height;
            }
            return NaN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageSource.prototype, "width", {
        get: function () {
            if (this.ios) {
                return this.ios.size.width;
            }
            return NaN;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageSource.prototype, "rotationAngle", {
        get: function () {
            return NaN;
        },
        set: function (_value) {
        },
        enumerable: true,
        configurable: true
    });
    ImageSource.fromAsset = function (asset) {
        return new Promise(function (resolve, reject) {
            asset.getImageAsync(function (image, err) {
                if (image) {
                    resolve(new ImageSource(image));
                }
                else {
                    reject(err);
                }
            });
        });
    };
    ImageSource.fromUrl = function (url) {
        ensureHttp();
        return http.getImage(url);
    };
    ImageSource.fromResourceSync = function (name) {
        var nativeSource = UIImage.tns_safeImageNamed(name) || UIImage.tns_safeImageNamed(name + ".jpg");
        return nativeSource ? new ImageSource(nativeSource) : null;
    };
    ImageSource.fromResource = function (name) {
        return new Promise(function (resolve, reject) {
            try {
                UIImage.tns_safeDecodeImageNamedCompletion(name, function (image) {
                    if (image) {
                        resolve(new ImageSource(image));
                    }
                    else {
                        UIImage.tns_safeDecodeImageNamedCompletion(name + ".jpg", function (image) {
                            resolve(new ImageSource(image));
                        });
                    }
                });
            }
            catch (ex) {
                reject(ex);
            }
        });
    };
    ImageSource.fromFileSync = function (path) {
        var uiImage = UIImage.imageWithContentsOfFile(getFileName(path));
        return uiImage ? new ImageSource(uiImage) : null;
    };
    ImageSource.fromFile = function (path) {
        return new Promise(function (resolve, reject) {
            try {
                UIImage.tns_decodeImageWidthContentsOfFileCompletion(getFileName(path), function (uiImage) {
                    resolve(new ImageSource(uiImage));
                });
            }
            catch (ex) {
                reject(ex);
            }
        });
    };
    ImageSource.fromFileOrResourceSync = function (path) {
        if (!utils_1.isFileOrResourcePath(path)) {
            throw new Error("Path \"" + "\" is not a valid file or resource.");
        }
        if (path.indexOf(utils_1.RESOURCE_PREFIX) === 0) {
            return ImageSource.fromResourceSync(path.substr(utils_1.RESOURCE_PREFIX.length));
        }
        return ImageSource.fromFileSync(path);
    };
    ImageSource.fromDataSync = function (data) {
        var uiImage = UIImage.imageWithData(data);
        return uiImage ? new ImageSource(uiImage) : null;
    };
    ImageSource.fromData = function (data) {
        return new Promise(function (resolve, reject) {
            try {
                UIImage.tns_decodeImageWithDataCompletion(data, function (uiImage) {
                    resolve(new ImageSource(uiImage));
                });
            }
            catch (ex) {
                reject(ex);
            }
        });
    };
    ImageSource.fromBase64Sync = function (source) {
        var uiImage;
        if (typeof source === "string") {
            var data = NSData.alloc().initWithBase64EncodedStringOptions(source, 1);
            uiImage = UIImage.imageWithData(data);
        }
        return uiImage ? new ImageSource(uiImage) : null;
    };
    ImageSource.fromBase64 = function (source) {
        return new Promise(function (resolve, reject) {
            try {
                var data = NSData.alloc().initWithBase64EncodedStringOptions(source, 1);
                UIImage.imageWithData["async"](UIImage, [data]).then(function (uiImage) {
                    resolve(new ImageSource(uiImage));
                });
            }
            catch (ex) {
                reject(ex);
            }
        });
    };
    ImageSource.fromFontIconCodeSync = function (source, font, color) {
        var _a;
        var fontSize = utils_1.layout.toDevicePixels(font.fontSize);
        if (!fontSize) {
            fontSize = UIFont.labelFontSize;
        }
        var density = utils_1.layout.getDisplayDensity();
        var scaledFontSize = fontSize * density;
        var attributes = (_a = {},
            _a[NSFontAttributeName] = font.getUIFont(UIFont.systemFontOfSize(scaledFontSize)),
            _a);
        if (color) {
            attributes[NSForegroundColorAttributeName] = color.ios;
        }
        var attributedString = NSAttributedString.alloc().initWithStringAttributes(source, attributes);
        UIGraphicsBeginImageContextWithOptions(attributedString.size(), false, 0.0);
        attributedString.drawAtPoint(CGPointMake(0, 0));
        var iconImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
        return iconImage ? new ImageSource(iconImage) : null;
    };
    ImageSource.prototype.fromAsset = function (asset) {
        var _this = this;
        console.log("fromAsset() is deprecated. Use ImageSource.fromAsset() instead.");
        return ImageSource.fromAsset(asset)
            .then(function (imgSource) {
            _this.setNativeSource(imgSource.ios);
            return _this;
        });
    };
    ImageSource.prototype.loadFromResource = function (name) {
        console.log("loadFromResource() is deprecated. Use ImageSource.fromResourceSync() instead.");
        var imgSource = ImageSource.fromResourceSync(name);
        this.ios = imgSource ? imgSource.ios : null;
        return !!this.ios;
    };
    ImageSource.prototype.fromResource = function (name) {
        var _this = this;
        console.log("fromResource() is deprecated. Use ImageSource.fromResource() instead.");
        return ImageSource.fromResource(name)
            .then(function (imgSource) {
            _this.ios = imgSource.ios;
            return !!_this.ios;
        });
    };
    ImageSource.prototype.loadFromFile = function (path) {
        console.log("loadFromFile() is deprecated. Use ImageSource.fromFileSync() instead.");
        var imgSource = ImageSource.fromFileSync(path);
        this.ios = imgSource ? imgSource.ios : null;
        return !!this.ios;
    };
    ImageSource.prototype.fromFile = function (path) {
        var _this = this;
        console.log("fromFile() is deprecated. Use ImageSource.fromFile() instead.");
        return ImageSource.fromFile(path)
            .then(function (imgSource) {
            _this.ios = imgSource.ios;
            return !!_this.ios;
        });
    };
    ImageSource.prototype.loadFromData = function (data) {
        console.log("loadFromData() is deprecated. Use ImageSource.fromDataSync() instead.");
        var imgSource = ImageSource.fromDataSync(data);
        this.ios = imgSource ? imgSource.ios : null;
        return !!this.ios;
    };
    ImageSource.prototype.fromData = function (data) {
        var _this = this;
        console.log("fromData() is deprecated. Use ImageSource.fromData() instead.");
        return ImageSource.fromData(data)
            .then(function (imgSource) {
            _this.ios = imgSource.ios;
            return !!_this.ios;
        });
    };
    ImageSource.prototype.loadFromBase64 = function (source) {
        console.log("loadFromBase64() is deprecated. Use ImageSource.fromBase64Sync() instead.");
        var imgSource = ImageSource.fromBase64Sync(source);
        this.ios = imgSource ? imgSource.ios : null;
        return !!this.ios;
    };
    ImageSource.prototype.fromBase64 = function (source) {
        var _this = this;
        console.log("fromBase64() is deprecated. Use ImageSource.fromBase64() instead.");
        return ImageSource.fromBase64(source)
            .then(function (imgSource) {
            _this.ios = imgSource.ios;
            return !!_this.ios;
        });
    };
    ImageSource.prototype.loadFromFontIconCode = function (source, font, color) {
        console.log("loadFromFontIconCode() is deprecated. Use ImageSource.fromFontIconCodeSync() instead.");
        var imgSource = ImageSource.fromFontIconCodeSync(source, font, color);
        this.ios = imgSource ? imgSource.ios : null;
        return !!this.ios;
    };
    ImageSource.prototype.setNativeSource = function (source) {
        if (source && !(source instanceof UIImage)) {
            throw new Error("The method setNativeSource() expects UIImage instance.");
        }
        this.ios = source;
    };
    ImageSource.prototype.saveToFile = function (path, format, quality) {
        if (!this.ios) {
            return false;
        }
        if (quality) {
            quality = (quality - 0) / (100 - 0);
        }
        var data = getImageData(this.ios, format, quality);
        if (data) {
            return NSFileManager.defaultManager.createFileAtPathContentsAttributes(path, data, null);
        }
        return false;
    };
    ImageSource.prototype.toBase64String = function (format, quality) {
        var res = null;
        if (!this.ios) {
            return res;
        }
        if (quality) {
            quality = (quality - 0) / (100 - 0);
        }
        var data = getImageData(this.ios, format, quality);
        if (data) {
            res = data.base64Encoding();
        }
        return res;
    };
    return ImageSource;
}());
exports.ImageSource = ImageSource;
function getFileName(path) {
    var fileName = typeof path === "string" ? path.trim() : "";
    if (fileName.indexOf("~/") === 0) {
        fileName = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, fileName.replace("~/", ""));
    }
    return fileName;
}
function getImageData(instance, format, quality) {
    if (quality === void 0) { quality = 0.9; }
    var data = null;
    switch (format) {
        case "png":
            data = UIImagePNGRepresentation(instance);
            break;
        case "jpeg":
        case "jpg":
            data = UIImageJPEGRepresentation(instance, quality);
            break;
    }
    return data;
}
function fromAsset(asset) {
    console.log("fromAsset() is deprecated. Use ImageSource.fromAsset() instead.");
    return ImageSource.fromAsset(asset);
}
exports.fromAsset = fromAsset;
function fromResource(name) {
    console.log("fromResource() is deprecated. Use ImageSource.fromResourceSync() instead.");
    return ImageSource.fromResourceSync(name);
}
exports.fromResource = fromResource;
function fromFile(path) {
    console.log("fromFile() is deprecated. Use ImageSource.fromFileSync() instead.");
    return ImageSource.fromFileSync(path);
}
exports.fromFile = fromFile;
function fromData(data) {
    console.log("fromData() is deprecated. Use ImageSource.fromDataSync() instead.");
    return ImageSource.fromDataSync(data);
}
exports.fromData = fromData;
function fromFontIconCode(source, font, color) {
    console.log("fromFontIconCode() is deprecated. Use ImageSource.fromFontIconCodeSync() instead.");
    return ImageSource.fromFontIconCodeSync(source, font, color);
}
exports.fromFontIconCode = fromFontIconCode;
function fromBase64(source) {
    console.log("fromBase64() is deprecated. Use ImageSource.fromBase64Sync() instead.");
    return ImageSource.fromBase64Sync(source);
}
exports.fromBase64 = fromBase64;
function fromNativeSource(nativeSource) {
    console.log("fromNativeSource() is deprecated. Use ImageSource constructor instead.");
    return new ImageSource(nativeSource);
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
    console.log("fromUrl() is deprecated. Use ImageSource.fromUrl() instead.");
    return ImageSource.fromUrl(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
    console.log("fromFileOrResource() is deprecated. Use ImageSource.fromFileOrResourceSync() instead.");
    return ImageSource.fromFileOrResourceSync(path);
}
exports.fromFileOrResource = fromFileOrResource;
//# sourceMappingURL=image-source.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/matrix/matrix.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var number_utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/number-utils.js");
exports.getTransformMatrix = function (_a) {
    var property = _a.property, value = _a.value;
    return TRANSFORM_MATRIXES[property](value);
};
var TRANSFORM_MATRIXES = {
    "scale": function (_a) {
        var x = _a.x, y = _a.y;
        return [
            x, 0, 0,
            0, y, 0,
            0, 0, 1,
        ];
    },
    "translate": function (_a) {
        var x = _a.x, y = _a.y;
        return [
            1, 0, x,
            0, 1, y,
            0, 0, 1,
        ];
    },
    "rotate": function (angleInDeg) {
        var angleInRad = number_utils_1.degreesToRadians(angleInDeg);
        return [
            Math.cos(angleInRad), -Math.sin(angleInRad), 0,
            Math.sin(angleInRad), Math.cos(angleInRad), 0,
            0, 0, 1,
        ];
    },
};
exports.matrixArrayToCssMatrix = function (m) { return [
    m[0], m[3], m[1],
    m[4], m[2], m[5],
]; };
function multiplyAffine2d(m1, m2) {
    return [
        m1[0] * m2[0] + m1[1] * m2[3],
        m1[0] * m2[1] + m1[1] * m2[4],
        m1[0] * m2[2] + m1[1] * m2[5] + m1[2],
        m1[3] * m2[0] + m1[4] * m2[3],
        m1[3] * m2[1] + m1[4] * m2[4],
        m1[3] * m2[2] + m1[4] * m2[5] + m1[5]
    ];
}
exports.multiplyAffine2d = multiplyAffine2d;
function decompose2DTransformMatrix(matrix) {
    verifyTransformMatrix(matrix);
    var _a = __spreadArrays(matrix), A = _a[0], B = _a[1], C = _a[2], D = _a[3], E = _a[4], F = _a[5];
    var determinant = A * D - B * C;
    var translate = { x: E || 0, y: F || 0 };
    var rotate = 0;
    var scale = { x: 1, y: 1 };
    if (A || B) {
        var R = Math.sqrt(A * A + B * B);
        rotate = B > 0 ? Math.acos(A / R) : -Math.acos(A / R);
        scale = { x: R, y: determinant / R };
    }
    else if (C || D) {
        var R = Math.sqrt(C * C + D * D);
        rotate = Math.PI / 2 - (D > 0 ? Math.acos(-C / R) : -Math.acos(C / R));
        scale = { x: determinant / R, y: R };
    }
    rotate = number_utils_1.radiansToDegrees(rotate);
    return { translate: translate, rotate: rotate, scale: scale };
}
exports.decompose2DTransformMatrix = decompose2DTransformMatrix;
function verifyTransformMatrix(matrix) {
    if (matrix.length < 6) {
        throw new Error("Transform matrix should be 2x3.");
    }
}
//# sourceMappingURL=matrix.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/platform/platform.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var platformNames;
(function (platformNames) {
    platformNames.android = "Android";
    platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = (function () {
    function Device() {
    }
    Object.defineProperty(Device.prototype, "manufacturer", {
        get: function () {
            return "Apple";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "os", {
        get: function () {
            return platformNames.ios;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "osVersion", {
        get: function () {
            if (!this._osVersion) {
                this._osVersion = UIDevice.currentDevice.systemVersion;
            }
            return this._osVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "model", {
        get: function () {
            if (!this._model) {
                this._model = UIDevice.currentDevice.model;
            }
            return this._model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "sdkVersion", {
        get: function () {
            if (!this._sdkVersion) {
                this._sdkVersion = UIDevice.currentDevice.systemVersion;
            }
            return this._sdkVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "deviceType", {
        get: function () {
            if (!this._deviceType) {
                if (UIDevice.currentDevice.userInterfaceIdiom === 0) {
                    this._deviceType = "Phone";
                }
                else {
                    this._deviceType = "Tablet";
                }
            }
            return this._deviceType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "uuid", {
        get: function () {
            var userDefaults = NSUserDefaults.standardUserDefaults;
            var uuid_key = "TNSUUID";
            var app_uuid = userDefaults.stringForKey(uuid_key);
            if (!app_uuid) {
                app_uuid = NSUUID.UUID().UUIDString;
                userDefaults.setObjectForKey(app_uuid, uuid_key);
                userDefaults.synchronize();
            }
            return app_uuid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "language", {
        get: function () {
            if (!this._language) {
                var languages = NSLocale.preferredLanguages;
                this._language = languages[0];
            }
            return this._language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Device.prototype, "region", {
        get: function () {
            if (!this._region) {
                this._region = NSLocale.currentLocale.objectForKey(NSLocaleCountryCode);
            }
            return this._region;
        },
        enumerable: true,
        configurable: true
    });
    return Device;
}());
var MainScreen = (function () {
    function MainScreen() {
    }
    Object.defineProperty(MainScreen.prototype, "screen", {
        get: function () {
            if (!this._screen) {
                this._screen = UIScreen.mainScreen;
            }
            return this._screen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainScreen.prototype, "widthPixels", {
        get: function () {
            return this.widthDIPs * this.scale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainScreen.prototype, "heightPixels", {
        get: function () {
            return this.heightDIPs * this.scale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainScreen.prototype, "scale", {
        get: function () {
            return this.screen.scale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainScreen.prototype, "widthDIPs", {
        get: function () {
            return this.screen.bounds.size.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MainScreen.prototype, "heightDIPs", {
        get: function () {
            return this.screen.bounds.size.height;
        },
        enumerable: true,
        configurable: true
    });
    return MainScreen;
}());
exports.device = new Device();
var screen;
(function (screen) {
    screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
exports.isIOS = true;
exports.isAndroid = false;
//# sourceMappingURL=platform.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/profiling/profiling.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", { value: true });
function uptime() {
    return global.android ? org.nativescript.Process.getUpTime() : global.__tns_uptime();
}
exports.uptime = uptime;
function log(message) {
    if (global.__nslog) {
        global.__nslog("CONSOLE LOG: " + message);
    }
    console.log(message);
}
exports.log = log;
var timers = {};
var anyGlobal = global;
var profileNames = [];
exports.time = global.__time || Date.now;
function start(name) {
    var info = timers[name];
    if (info) {
        info.currentStart = exports.time();
        info.runCount++;
    }
    else {
        info = {
            totalTime: 0,
            count: 0,
            currentStart: exports.time(),
            runCount: 1
        };
        timers[name] = info;
        profileNames.push(name);
    }
}
exports.start = start;
function stop(name) {
    var info = timers[name];
    if (!info) {
        throw new Error("No timer started: " + name);
    }
    if (info.runCount) {
        info.runCount--;
        if (info.runCount) {
            info.count++;
        }
        else {
            info.lastTime = exports.time() - info.currentStart;
            info.totalTime += info.lastTime;
            info.count++;
            info.currentStart = 0;
        }
    }
    else {
        throw new Error("Timer " + name + " paused more times than started.");
    }
    return info;
}
exports.stop = stop;
function timer(name) {
    return timers[name];
}
exports.timer = timer;
function print(name) {
    var info = timers[name];
    if (!info) {
        throw new Error("No timer started: " + name);
    }
    console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
    return info;
}
exports.print = print;
function isRunning(name) {
    var info = timers[name];
    return !!(info && info.runCount);
}
exports.isRunning = isRunning;
function countersProfileFunctionFactory(fn, name, type) {
    if (type === void 0) { type = 1; }
    profileNames.push(name);
    return function () {
        start(name);
        try {
            return fn.apply(this, arguments);
        }
        finally {
            stop(name);
        }
    };
}
function timelineProfileFunctionFactory(fn, name, type) {
    if (type === void 0) { type = 1; }
    return type === 1 ? function () {
        var start = exports.time();
        try {
            return fn.apply(this, arguments);
        }
        finally {
            var end = exports.time();
            console.log("Timeline: Modules: " + name + " " + this + "  (" + start + "ms. - " + end + "ms.)");
        }
    } : function () {
        var start = exports.time();
        try {
            return fn.apply(this, arguments);
        }
        finally {
            var end = exports.time();
            console.log("Timeline: Modules: " + name + "  (" + start + "ms. - " + end + "ms.)");
        }
    };
}
var Level;
(function (Level) {
    Level[Level["none"] = 0] = "none";
    Level[Level["lifecycle"] = 1] = "lifecycle";
    Level[Level["timeline"] = 2] = "timeline";
})(Level = exports.Level || (exports.Level = {}));
var tracingLevel = Level.none;
var profileFunctionFactory;
function enable(mode) {
    if (mode === void 0) { mode = "counters"; }
    profileFunctionFactory = mode && {
        counters: countersProfileFunctionFactory,
        timeline: timelineProfileFunctionFactory
    }[mode];
    tracingLevel = {
        lifecycle: Level.lifecycle,
        timeline: Level.timeline,
    }[mode] || Level.none;
}
exports.enable = enable;
try {
    var appConfig = __webpack_require__("./package.json");
    if (appConfig && appConfig.profiling) {
        enable(appConfig.profiling);
    }
}
catch (e1) {
    try {
        console.log("Profiling startup failed to figure out defaults from package.json, error: " + e1);
    }
    catch (e2) {
    }
}
function disable() {
    profileFunctionFactory = undefined;
}
exports.disable = disable;
function profileFunction(fn, customName) {
    return profileFunctionFactory(fn, customName || fn.name);
}
var profileMethodUnnamed = function (target, key, descriptor) {
    if (descriptor === undefined) {
        descriptor = Object.getOwnPropertyDescriptor(target, key);
    }
    var originalMethod = descriptor.value;
    var className = "";
    if (target && target.constructor && target.constructor.name) {
        className = target.constructor.name + ".";
    }
    var name = className + key;
    descriptor.value = profileFunctionFactory(originalMethod, name, 1);
    return descriptor;
};
var profileStaticMethodUnnamed = function (ctor, key, descriptor) {
    if (descriptor === undefined) {
        descriptor = Object.getOwnPropertyDescriptor(ctor, key);
    }
    var originalMethod = descriptor.value;
    var className = "";
    if (ctor && ctor.name) {
        className = ctor.name + ".";
    }
    var name = className + key;
    descriptor.value = profileFunctionFactory(originalMethod, name, 0);
    return descriptor;
};
function profileMethodNamed(name) {
    return function (target, key, descriptor) {
        if (descriptor === undefined) {
            descriptor = Object.getOwnPropertyDescriptor(target, key);
        }
        var originalMethod = descriptor.value;
        descriptor.value = profileFunctionFactory(originalMethod, name);
        return descriptor;
    };
}
var voidMethodDecorator = function () {
};
function profile(nameFnOrTarget, fnOrKey, descriptor) {
    if (typeof nameFnOrTarget === "object" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
        if (!profileFunctionFactory) {
            return;
        }
        return profileMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
    }
    else if (typeof nameFnOrTarget === "function" && (typeof fnOrKey === "string" || typeof fnOrKey === "symbol")) {
        if (!profileFunctionFactory) {
            return;
        }
        return profileStaticMethodUnnamed(nameFnOrTarget, fnOrKey, descriptor);
    }
    else if (typeof nameFnOrTarget === "string" && typeof fnOrKey === "function") {
        if (!profileFunctionFactory) {
            return fnOrKey;
        }
        return profileFunction(fnOrKey, nameFnOrTarget);
    }
    else if (typeof nameFnOrTarget === "function") {
        if (!profileFunctionFactory) {
            return nameFnOrTarget;
        }
        return profileFunction(nameFnOrTarget);
    }
    else if (typeof nameFnOrTarget === "string") {
        if (!profileFunctionFactory) {
            return voidMethodDecorator;
        }
        return profileMethodNamed(nameFnOrTarget);
    }
    else {
        if (!profileFunctionFactory) {
            return voidMethodDecorator;
        }
        return profileMethodUnnamed;
    }
}
exports.profile = profile;
function dumpProfiles() {
    profileNames.forEach(function (name) {
        var info = timers[name];
        if (info) {
            console.log("---- [" + name + "] STOP total: " + info.totalTime + " count:" + info.count);
        }
        else {
            console.log("---- [" + name + "] Never called");
        }
    });
}
exports.dumpProfiles = dumpProfiles;
function resetProfiles() {
    profileNames.forEach(function (name) {
        var info = timers[name];
        if (info) {
            if (info.runCount) {
                console.log("---- timer with name [" + name + "] is currently running and won't be reset");
            }
            else {
                timers[name] = undefined;
            }
        }
    });
}
exports.resetProfiles = resetProfiles;
function startCPUProfile(name) {
    if (anyGlobal.android) {
        __startCPUProfiler(name);
    }
}
exports.startCPUProfile = startCPUProfile;
function stopCPUProfile(name) {
    if (anyGlobal.android) {
        __stopCPUProfiler(name);
    }
}
exports.stopCPUProfile = stopCPUProfile;
function level() {
    return tracingLevel;
}
exports.level = level;
function trace(message, start, end) {
    log("Timeline: Modules: " + message + "  (" + start + "ms. - " + end + "ms.)");
}
exports.trace = trace;
//# sourceMappingURL=profiling.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/@nativescript/core/text/text.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var encoding;
(function (encoding) {
    encoding.ISO_8859_1 = 5;
    encoding.US_ASCII = 1;
    encoding.UTF_16 = 10;
    encoding.UTF_16BE = 0x90000100;
    encoding.UTF_16LE = 0x94000100;
    encoding.UTF_8 = 4;
})(encoding = exports.encoding || (exports.encoding = {}));
//# sourceMappingURL=text.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/trace/trace.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
var _errorHandler;
function enable() {
    enabled = true;
}
exports.enable = enable;
function disable() {
    enabled = false;
}
exports.disable = disable;
function isEnabled() {
    return enabled;
}
exports.isEnabled = isEnabled;
function isCategorySet(category) {
    return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
    _writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
    var index = _writers.indexOf(writer);
    if (index >= 0) {
        _writers.splice(index, 1);
    }
}
exports.removeWriter = removeWriter;
function clearWriters() {
    if (_writers.length > 0) {
        _writers.splice(0, _writers.length);
    }
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
    _categories = {};
    addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
    var split = categories.split(",");
    for (var i = 0; i < split.length; i++) {
        _categories[split[i].trim()] = true;
    }
}
exports.addCategories = addCategories;
function write(message, category, type) {
    var i;
    if (type === messageType.error) {
        for (i = 0; i < _writers.length; i++) {
            _writers[i].write(message, category, type);
        }
        return;
    }
    if (!enabled) {
        return;
    }
    if (!(category in _categories)) {
        return;
    }
    for (i = 0; i < _writers.length; i++) {
        _writers[i].write(message, category, type);
    }
}
exports.write = write;
function notifyEvent(object, name, data) {
    if (!enabled) {
        return;
    }
    var i, listener, filters;
    for (i = 0; i < _eventListeners.length; i++) {
        listener = _eventListeners[i];
        if (listener.filter) {
            filters = listener.filter.split(",");
            filters.forEach(function (value) {
                if (value.trim() === name) {
                    listener.on(object, name, data);
                }
            });
        }
        else {
            listener.on(object, name, data);
        }
    }
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
    _eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
    var index = _eventListeners.indexOf(listener);
    if (index >= 0) {
        _eventListeners.splice(index, 1);
    }
}
exports.removeEventListener = removeEventListener;
var messageType;
(function (messageType) {
    messageType.log = 0;
    messageType.info = 1;
    messageType.warn = 2;
    messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function (categories) {
    categories.VisualTreeEvents = "VisualTreeEvents";
    categories.Layout = "Layout";
    categories.Style = "Style";
    categories.ViewHierarchy = "ViewHierarchy";
    categories.NativeLifecycle = "NativeLifecycle";
    categories.Debug = "Debug";
    categories.Navigation = "Navigation";
    categories.Test = "Test";
    categories.Binding = "Binding";
    categories.BindingError = "BindingError";
    categories.Error = "Error";
    categories.Animation = "Animation";
    categories.Transition = "Transition";
    categories.Livesync = "Livesync";
    categories.ModuleNameResolver = "ModuleNameResolver";
    categories.separator = ",";
    categories.All = [
        categories.VisualTreeEvents, categories.Layout, categories.Style,
        categories.ViewHierarchy, categories.NativeLifecycle,
        categories.Debug, categories.Navigation, categories.Test, categories.Binding,
        categories.Error, categories.Animation, categories.Transition, categories.Livesync,
        categories.ModuleNameResolver
    ]
        .join(categories.separator);
    function concat() {
        var result;
        for (var i = 0; i < arguments.length; i++) {
            if (!result) {
                result = arguments[i];
                continue;
            }
            result = result.concat(categories.separator, arguments[i]);
        }
        return result;
    }
    categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = (function () {
    function ConsoleWriter() {
    }
    ConsoleWriter.prototype.write = function (message, category, type) {
        if (!console) {
            return;
        }
        var msgType;
        if (type === undefined) {
            msgType = messageType.log;
        }
        else {
            msgType = type;
        }
        switch (msgType) {
            case messageType.log:
                console.log(category + ": " + message);
                break;
            case messageType.info:
                console.info(category + ": " + message);
                break;
            case messageType.warn:
                console.warn(category + ": " + message);
                break;
            case messageType.error:
                console.error(category + ": " + message);
                break;
        }
    };
    return ConsoleWriter;
}());
addWriter(new ConsoleWriter());
var DefaultErrorHandler = (function () {
    function DefaultErrorHandler() {
    }
    DefaultErrorHandler.prototype.handlerError = function (error) {
        throw error;
    };
    return DefaultErrorHandler;
}());
exports.DefaultErrorHandler = DefaultErrorHandler;
setErrorHandler(new DefaultErrorHandler());
function getErrorHandler() {
    return _errorHandler;
}
exports.getErrorHandler = getErrorHandler;
function setErrorHandler(handler) {
    _errorHandler = handler;
}
exports.setErrorHandler = setErrorHandler;
function error(error) {
    if (!_errorHandler) {
        return;
    }
    if (typeof error === "string") {
        error = new Error(error);
    }
    _errorHandler.handlerError(error);
}
exports.error = error;
//# sourceMappingURL=trace.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/animation/animation-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__("../node_modules/@nativescript/core/color/color.js");
exports.Color = color_1.Color;
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
exports.traceEnabled = trace_1.isEnabled;
exports.traceWrite = trace_1.write;
exports.traceCategories = trace_1.categories;
exports.traceType = trace_1.messageType;
var style_properties_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/style-properties.js");
var Properties;
(function (Properties) {
    Properties.opacity = "opacity";
    Properties.backgroundColor = "backgroundColor";
    Properties.translate = "translate";
    Properties.rotate = "rotate";
    Properties.scale = "scale";
    Properties.height = "height";
    Properties.width = "width";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = (function () {
    function CubicBezierAnimationCurve(x1, y1, x2, y2) {
        this.x1 = x1;
        this.y1 = y1;
        this.x2 = x2;
        this.y2 = y2;
    }
    return CubicBezierAnimationCurve;
}());
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationBase = (function () {
    function AnimationBase(animationDefinitions, playSequentially) {
        if (!animationDefinitions || animationDefinitions.length === 0) {
            throw new Error("No animation definitions specified");
        }
        if (trace_1.isEnabled()) {
            trace_1.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace_1.categories.Animation);
        }
        this._propertyAnimations = new Array();
        for (var i = 0, length_1 = animationDefinitions.length; i < length_1; i++) {
            if (animationDefinitions[i].curve) {
                animationDefinitions[i].curve = this._resolveAnimationCurve(animationDefinitions[i].curve);
            }
            this._propertyAnimations = this._propertyAnimations.concat(AnimationBase._createPropertyAnimations(animationDefinitions[i]));
        }
        if (this._propertyAnimations.length === 0) {
            throw new Error("Nothing to animate.");
        }
        if (trace_1.isEnabled()) {
            trace_1.write("Created " + this._propertyAnimations.length + " individual property animations.", trace_1.categories.Animation);
        }
        this._playSequentially = playSequentially;
    }
    AnimationBase.prototype._rejectAlreadyPlaying = function () {
        var reason = "Animation is already playing.";
        trace_1.write(reason, trace_1.categories.Animation, trace_1.messageType.warn);
        return new Promise(function (resolve, reject) {
            reject(reason);
        });
    };
    AnimationBase.prototype.play = function () {
        var _this_1 = this;
        var animationFinishedPromise = new Promise(function (resolve, reject) {
            _this_1._resolve = resolve;
            _this_1._reject = reject;
        });
        this.fixupAnimationPromise(animationFinishedPromise);
        this._isPlaying = true;
        return animationFinishedPromise;
    };
    AnimationBase.prototype.fixupAnimationPromise = function (promise) {
        var _this = this;
        promise.cancel = function () {
            _this.cancel();
        };
        var _then = promise.then;
        promise.then = function () {
            var r = _then.apply(promise, arguments);
            _this.fixupAnimationPromise(r);
            return r;
        };
        var _catch = promise.catch;
        promise.catch = function () {
            var r = _catch.apply(promise, arguments);
            _this.fixupAnimationPromise(r);
            return r;
        };
    };
    AnimationBase.prototype.cancel = function () {
    };
    Object.defineProperty(AnimationBase.prototype, "isPlaying", {
        get: function () {
            return this._isPlaying;
        },
        enumerable: true,
        configurable: true
    });
    AnimationBase.prototype._resolveAnimationFinishedPromise = function () {
        this._isPlaying = false;
        this._resolve();
    };
    AnimationBase.prototype._rejectAnimationFinishedPromise = function () {
        this._isPlaying = false;
        this._reject(new Error("Animation cancelled."));
    };
    AnimationBase._createPropertyAnimations = function (animationDefinition) {
        if (!animationDefinition.target) {
            throw new Error("No animation target specified.");
        }
        for (var item in animationDefinition) {
            if (animationDefinition[item] === undefined) {
                continue;
            }
            if ((item === Properties.opacity ||
                item === Properties.rotate ||
                item === "duration" ||
                item === "delay" ||
                item === "iterations") && typeof animationDefinition[item] !== "number") {
                throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
            }
            else if ((item === Properties.scale || item === Properties.translate) &&
                (typeof animationDefinition[item].x !== "number" || typeof animationDefinition[item].y !== "number")) {
                throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
            }
            else if (item === Properties.backgroundColor && !color_1.Color.isValid(animationDefinition.backgroundColor)) {
                throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
            }
            else if (item === Properties.width || item === Properties.height) {
                animationDefinition[item] = style_properties_1.PercentLength.parse(animationDefinition[item]);
            }
        }
        var propertyAnimations = new Array();
        if (animationDefinition.opacity !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.opacity,
                value: animationDefinition.opacity,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.backgroundColor !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.backgroundColor,
                value: typeof animationDefinition.backgroundColor === "string" ?
                    new color_1.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.translate !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.translate,
                value: animationDefinition.translate,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.scale !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.scale,
                value: animationDefinition.scale,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.rotate !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.rotate,
                value: animationDefinition.rotate,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.height !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.height,
                value: animationDefinition.height,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (animationDefinition.width !== undefined) {
            propertyAnimations.push({
                target: animationDefinition.target,
                property: Properties.width,
                value: animationDefinition.width,
                duration: animationDefinition.duration,
                delay: animationDefinition.delay,
                iterations: animationDefinition.iterations,
                curve: animationDefinition.curve
            });
        }
        if (propertyAnimations.length === 0) {
            throw new Error("No known animation properties specified");
        }
        return propertyAnimations;
    };
    AnimationBase._getAnimationInfo = function (animation) {
        return JSON.stringify({
            target: animation.target.id,
            property: animation.property,
            value: animation.value,
            duration: animation.duration,
            delay: animation.delay,
            iterations: animation.iterations,
            curve: animation.curve
        });
    };
    return AnimationBase;
}());
exports.AnimationBase = AnimationBase;
//# sourceMappingURL=animation-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/animation/animation.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var animation_common_1 = __webpack_require__("../node_modules/@nativescript/core/ui/animation/animation-common.js");
var style_properties_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/style-properties.js");
var platform_1 = __webpack_require__("../node_modules/@nativescript/core/platform/platform.js");
__export(__webpack_require__("../node_modules/@nativescript/core/ui/animation/animation-common.js"));
var _transform = "_transform";
var _skip = "_skip";
var FLT_MAX = 340282346638528859811704183484516925440.000000;
var AnimationInfo = (function () {
    function AnimationInfo() {
    }
    return AnimationInfo;
}());
var AnimationDelegateImpl = (function (_super) {
    __extends(AnimationDelegateImpl, _super);
    function AnimationDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnimationDelegateImpl.initWithFinishedCallback = function (finishedCallback, propertyAnimation, valueSource) {
        var delegate = AnimationDelegateImpl.new();
        delegate._finishedCallback = finishedCallback;
        delegate._propertyAnimation = propertyAnimation;
        delegate._valueSource = valueSource;
        return delegate;
    };
    AnimationDelegateImpl.prototype.animationDidStart = function (anim) {
        var value = this._propertyAnimation.value;
        var setLocal = this._valueSource === "animation";
        var targetStyle = this._propertyAnimation.target.style;
        this._propertyAnimation.target._suspendPresentationLayerUpdates();
        switch (this._propertyAnimation.property) {
            case animation_common_1.Properties.backgroundColor:
                targetStyle[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = value;
                break;
            case animation_common_1.Properties.opacity:
                targetStyle[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = value;
                break;
            case animation_common_1.Properties.rotate:
                targetStyle[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = value;
                break;
            case animation_common_1.Properties.translate:
                targetStyle[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.x;
                targetStyle[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.y;
                break;
            case animation_common_1.Properties.height:
                targetStyle[setLocal ? style_properties_1.heightProperty.name : style_properties_1.heightProperty.keyframe] = value;
                break;
            case animation_common_1.Properties.width:
                targetStyle[setLocal ? style_properties_1.widthProperty.name : style_properties_1.widthProperty.keyframe] = value;
                break;
            case animation_common_1.Properties.scale:
                targetStyle[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.x === 0 ? 0.001 : value.x;
                targetStyle[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.y === 0 ? 0.001 : value.y;
                break;
            case _transform:
                if (value[animation_common_1.Properties.translate] !== undefined) {
                    targetStyle[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value[animation_common_1.Properties.translate].x;
                    targetStyle[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value[animation_common_1.Properties.translate].y;
                }
                if (value[animation_common_1.Properties.scale] !== undefined) {
                    var x = value[animation_common_1.Properties.scale].x;
                    var y = value[animation_common_1.Properties.scale].y;
                    targetStyle[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = x === 0 ? 0.001 : x;
                    targetStyle[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = y === 0 ? 0.001 : y;
                }
                break;
        }
        this._propertyAnimation.target._resumePresentationLayerUpdates();
    };
    AnimationDelegateImpl.prototype.animationDidStopFinished = function (anim, finished) {
        if (this._finishedCallback) {
            this._finishedCallback(!finished);
        }
        if (finished && this.nextAnimation) {
            this.nextAnimation();
        }
    };
    AnimationDelegateImpl.ObjCProtocols = global.CAAnimationDelegate ? [global.CAAnimationDelegate] : [];
    return AnimationDelegateImpl;
}(NSObject));
function _resolveAnimationCurve(curve) {
    switch (curve) {
        case "easeIn":
            return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseIn);
        case "easeOut":
            return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseOut);
        case "easeInOut":
            return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionEaseInEaseOut);
        case "linear":
            return CAMediaTimingFunction.functionWithName(kCAMediaTimingFunctionLinear);
        case "spring":
            return curve;
        case "ease":
            return CAMediaTimingFunction.functionWithControlPoints(0.25, 0.1, 0.25, 1.0);
        default:
            if (curve instanceof CAMediaTimingFunction) {
                return curve;
            }
            else if (curve instanceof animation_common_1.CubicBezierAnimationCurve) {
                var animationCurve = curve;
                return CAMediaTimingFunction.functionWithControlPoints(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
            }
            else {
                throw new Error("Invalid animation curve: " + curve);
            }
    }
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
var Animation = (function (_super) {
    __extends(Animation, _super);
    function Animation(animationDefinitions, playSequentially) {
        var _this = _super.call(this, animationDefinitions, playSequentially) || this;
        _this._valueSource = "animation";
        if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
            _this._valueSource = animationDefinitions[0].valueSource;
        }
        if (!playSequentially) {
            if (animation_common_1.traceEnabled()) {
                animation_common_1.traceWrite("Non-merged Property Animations: " + _this._propertyAnimations.length, animation_common_1.traceCategories.Animation);
            }
            _this._mergedPropertyAnimations = Animation._mergeAffineTransformAnimations(_this._propertyAnimations);
            if (animation_common_1.traceEnabled()) {
                animation_common_1.traceWrite("Merged Property Animations: " + _this._mergedPropertyAnimations.length, animation_common_1.traceCategories.Animation);
            }
        }
        else {
            _this._mergedPropertyAnimations = _this._propertyAnimations;
        }
        var that = _this;
        var animationFinishedCallback = function (cancelled) {
            if (that._playSequentially) {
                if (cancelled) {
                    that._rejectAnimationFinishedPromise();
                }
                else {
                    that._resolveAnimationFinishedPromise();
                }
            }
            else {
                if (cancelled) {
                    that._cancelledAnimations++;
                }
                else {
                    that._finishedAnimations++;
                }
                if (that._cancelledAnimations > 0 && (that._cancelledAnimations + that._finishedAnimations) === that._mergedPropertyAnimations.length) {
                    if (animation_common_1.traceEnabled()) {
                        animation_common_1.traceWrite(that._cancelledAnimations + " animations cancelled.", animation_common_1.traceCategories.Animation);
                    }
                    that._rejectAnimationFinishedPromise();
                }
                else if (that._finishedAnimations === that._mergedPropertyAnimations.length) {
                    if (animation_common_1.traceEnabled()) {
                        animation_common_1.traceWrite(that._finishedAnimations + " animations finished.", animation_common_1.traceCategories.Animation);
                    }
                    that._resolveAnimationFinishedPromise();
                }
            }
        };
        _this._iOSAnimationFunction = Animation._createiOSAnimationFunction(_this._mergedPropertyAnimations, 0, _this._playSequentially, _this._valueSource, animationFinishedCallback);
        return _this;
    }
    Animation.prototype.play = function () {
        if (this.isPlaying) {
            return this._rejectAlreadyPlaying();
        }
        var animationFinishedPromise = _super.prototype.play.call(this);
        this._finishedAnimations = 0;
        this._cancelledAnimations = 0;
        this._iOSAnimationFunction();
        return animationFinishedPromise;
    };
    Animation.prototype.cancel = function () {
        if (!this.isPlaying) {
            animation_common_1.traceWrite("Animation is not currently playing.", animation_common_1.traceCategories.Animation, animation_common_1.traceType.warn);
            return;
        }
        var i = 0;
        var length = this._mergedPropertyAnimations.length;
        for (; i < length; i++) {
            var propertyAnimation = this._mergedPropertyAnimations[i];
            propertyAnimation.target.nativeViewProtected.layer.removeAllAnimations();
            if (propertyAnimation._propertyResetCallback) {
                propertyAnimation._propertyResetCallback(propertyAnimation._originalValue, this._valueSource);
            }
        }
    };
    Animation.prototype._resolveAnimationCurve = function (curve) {
        return _resolveAnimationCurve(curve);
    };
    Animation._createiOSAnimationFunction = function (propertyAnimations, index, playSequentially, valueSource, finishedCallback) {
        return function (cancelled) {
            if (cancelled && finishedCallback) {
                if (animation_common_1.traceEnabled()) {
                    animation_common_1.traceWrite("Animation " + (index - 1).toString() + " was cancelled. Will skip the rest of animations and call finishedCallback(true).", animation_common_1.traceCategories.Animation);
                }
                finishedCallback(cancelled);
                return;
            }
            var animation = propertyAnimations[index];
            var args = Animation._getNativeAnimationArguments(animation, valueSource);
            if (animation.curve === "spring") {
                Animation._createNativeSpringAnimation(propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback);
            }
            else {
                Animation._createNativeAnimation(propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback);
            }
        };
    };
    Animation._getNativeAnimationArguments = function (animation, valueSource) {
        var nativeView = animation.target.nativeViewProtected;
        var propertyNameToAnimate = animation.property;
        var toValue = animation.value;
        var fromValue;
        var parent = animation.target.parent;
        var screenScale = platform_1.screen.mainScreen.scale;
        var tempRotate = (animation.target.rotate || 0) * Math.PI / 180;
        var abs;
        var setLocal = valueSource === "animation";
        switch (animation.property) {
            case animation_common_1.Properties.backgroundColor:
                animation._originalValue = animation.target.backgroundColor;
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.backgroundColorProperty.name : style_properties_1.backgroundColorProperty.keyframe] = value;
                };
                fromValue = nativeView.layer.backgroundColor;
                if (nativeView instanceof UILabel) {
                    nativeView.setValueForKey(UIColor.clearColor, "backgroundColor");
                }
                toValue = toValue.CGColor;
                break;
            case animation_common_1.Properties.opacity:
                animation._originalValue = animation.target.opacity;
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.opacityProperty.name : style_properties_1.opacityProperty.keyframe] = value;
                };
                fromValue = nativeView.layer.opacity;
                break;
            case animation_common_1.Properties.rotate:
                animation._originalValue = animation.target.rotate !== undefined ? animation.target.rotate : 0;
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.rotateProperty.name : style_properties_1.rotateProperty.keyframe] = value;
                };
                propertyNameToAnimate = "transform.rotation";
                fromValue = nativeView.layer.valueForKeyPath("transform.rotation");
                if (animation.target.rotate !== undefined && animation.target.rotate !== 0 && Math.floor(toValue / 360) - toValue / 360 === 0) {
                    fromValue = animation.target.rotate * Math.PI / 180;
                }
                toValue = toValue * Math.PI / 180;
                abs = fabs(fromValue - toValue);
                if (abs < 0.001 && fromValue !== tempRotate) {
                    fromValue = tempRotate;
                }
                break;
            case animation_common_1.Properties.translate:
                animation._originalValue = { x: animation.target.translateX, y: animation.target.translateY };
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.x;
                    animation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.y;
                };
                propertyNameToAnimate = "transform";
                fromValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
                toValue = NSValue.valueWithCATransform3D(CATransform3DTranslate(nativeView.layer.transform, toValue.x, toValue.y, 0));
                break;
            case animation_common_1.Properties.scale:
                if (toValue.x === 0) {
                    toValue.x = 0.001;
                }
                if (toValue.y === 0) {
                    toValue.y = 0.001;
                }
                animation._originalValue = { x: animation.target.scaleX, y: animation.target.scaleY };
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.x;
                    animation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.y;
                };
                propertyNameToAnimate = "transform";
                fromValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
                toValue = NSValue.valueWithCATransform3D(CATransform3DScale(nativeView.layer.transform, toValue.x, toValue.y, 1));
                break;
            case _transform:
                fromValue = NSValue.valueWithCATransform3D(nativeView.layer.transform);
                animation._originalValue = {
                    xs: animation.target.scaleX, ys: animation.target.scaleY,
                    xt: animation.target.translateX, yt: animation.target.translateY
                };
                animation._propertyResetCallback = function (value, valueSource) {
                    animation.target.style[setLocal ? style_properties_1.translateXProperty.name : style_properties_1.translateXProperty.keyframe] = value.xt;
                    animation.target.style[setLocal ? style_properties_1.translateYProperty.name : style_properties_1.translateYProperty.keyframe] = value.yt;
                    animation.target.style[setLocal ? style_properties_1.scaleXProperty.name : style_properties_1.scaleXProperty.keyframe] = value.xs;
                    animation.target.style[setLocal ? style_properties_1.scaleYProperty.name : style_properties_1.scaleYProperty.keyframe] = value.ys;
                };
                propertyNameToAnimate = "transform";
                toValue = NSValue.valueWithCATransform3D(Animation._createNativeAffineTransform(animation));
                break;
            case animation_common_1.Properties.width:
            case animation_common_1.Properties.height:
                var direction = animation.property;
                var isHeight_1 = direction === "height";
                propertyNameToAnimate = "bounds";
                if (!parent) {
                    throw new Error("cannot animate " + direction + " on root view");
                }
                var parentExtent = isHeight_1 ? parent.getMeasuredHeight() : parent.getMeasuredWidth();
                var asNumber = style_properties_1.PercentLength.toDevicePixels(style_properties_1.PercentLength.parse(toValue), parentExtent, parentExtent) / screenScale;
                var currentBounds = nativeView.layer.bounds;
                var extentX = isHeight_1 ? currentBounds.size.width : asNumber;
                var extentY = isHeight_1 ? asNumber : currentBounds.size.height;
                fromValue = NSValue.valueWithCGRect(currentBounds);
                toValue = NSValue.valueWithCGRect(CGRectMake(currentBounds.origin.x, currentBounds.origin.y, extentX, extentY));
                animation._originalValue = animation.target.height;
                animation._propertyResetCallback = function (value, valueSource) {
                    var prop = isHeight_1 ? style_properties_1.heightProperty : style_properties_1.widthProperty;
                    animation.target.style[setLocal ? prop.name : prop.keyframe] = value;
                };
                break;
            default:
                throw new Error("Animating property '" + animation.property + "' is unsupported");
        }
        var duration = 0.3;
        if (animation.duration !== undefined) {
            duration = animation.duration / 1000.0;
        }
        var delay = undefined;
        if (animation.delay) {
            delay = animation.delay / 1000.0;
        }
        var repeatCount = undefined;
        if (animation.iterations !== undefined) {
            if (animation.iterations === Number.POSITIVE_INFINITY) {
                repeatCount = FLT_MAX;
            }
            else {
                repeatCount = animation.iterations;
            }
        }
        return {
            propertyNameToAnimate: propertyNameToAnimate,
            fromValue: fromValue,
            toValue: toValue,
            duration: duration,
            repeatCount: repeatCount,
            delay: delay
        };
    };
    Animation._createNativeAnimation = function (propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback) {
        var nativeView = animation.target.nativeViewProtected;
        var nativeAnimation = CABasicAnimation.animationWithKeyPath(args.propertyNameToAnimate);
        nativeAnimation.fromValue = args.fromValue;
        nativeAnimation.toValue = args.toValue;
        nativeAnimation.duration = args.duration;
        if (args.repeatCount !== undefined) {
            nativeAnimation.repeatCount = args.repeatCount;
        }
        if (args.delay !== undefined) {
            nativeAnimation.beginTime = CACurrentMediaTime() + args.delay;
        }
        if (animation.curve !== undefined) {
            nativeAnimation.timingFunction = animation.curve;
        }
        var animationDelegate = AnimationDelegateImpl.initWithFinishedCallback(finishedCallback, animation, valueSource);
        nativeAnimation.setValueForKey(animationDelegate, "delegate");
        nativeView.layer.addAnimationForKey(nativeAnimation, args.propertyNameToAnimate);
        var callback = undefined;
        if (index + 1 < propertyAnimations.length) {
            callback = Animation._createiOSAnimationFunction(propertyAnimations, index + 1, playSequentially, valueSource, finishedCallback);
            if (!playSequentially) {
                callback();
            }
            else {
                animationDelegate.nextAnimation = callback;
            }
        }
    };
    Animation._createNativeSpringAnimation = function (propertyAnimations, index, playSequentially, args, animation, valueSource, finishedCallback) {
        var nativeView = animation.target.nativeViewProtected;
        var callback = undefined;
        var nextAnimation;
        if (index + 1 < propertyAnimations.length) {
            callback = Animation._createiOSAnimationFunction(propertyAnimations, index + 1, playSequentially, valueSource, finishedCallback);
            if (!playSequentially) {
                callback();
            }
            else {
                nextAnimation = callback;
            }
        }
        var delay = 0;
        if (args.delay) {
            delay = args.delay;
        }
        UIView.animateWithDurationDelayUsingSpringWithDampingInitialSpringVelocityOptionsAnimationsCompletion(args.duration, delay, 0.2, 0, 196608, function () {
            if (args.repeatCount !== undefined) {
                UIView.setAnimationRepeatCount(args.repeatCount);
            }
            switch (animation.property) {
                case animation_common_1.Properties.backgroundColor:
                    animation.target.backgroundColor = args.toValue;
                    break;
                case animation_common_1.Properties.opacity:
                    animation.target.opacity = args.toValue;
                    break;
                case animation_common_1.Properties.height:
                case animation_common_1.Properties.width:
                    animation._originalValue = animation.target[animation.property];
                    nativeView.layer.setValueForKey(args.toValue, args.propertyNameToAnimate);
                    animation._propertyResetCallback = function (value) {
                        animation.target[animation.property] = value;
                    };
                    break;
                case animation_common_1.Properties.rotate:
                    nativeView.layer.setValueForKey(args.toValue, args.propertyNameToAnimate);
                    break;
                case _transform:
                    animation._originalValue = nativeView.layer.transform;
                    nativeView.layer.setValueForKey(args.toValue, args.propertyNameToAnimate);
                    animation._propertyResetCallback = function (value) {
                        nativeView.layer.transform = value;
                    };
                    break;
            }
        }, function (animationDidFinish) {
            if (animationDidFinish) {
                if (animation.property === _transform) {
                    if (animation.value[animation_common_1.Properties.translate] !== undefined) {
                        animation.target.translateX = animation.value[animation_common_1.Properties.translate].x;
                        animation.target.translateY = animation.value[animation_common_1.Properties.translate].y;
                    }
                    if (animation.value[animation_common_1.Properties.scale] !== undefined) {
                        animation.target.scaleX = animation.value[animation_common_1.Properties.scale].x;
                        animation.target.scaleY = animation.value[animation_common_1.Properties.scale].y;
                    }
                }
            }
            else {
                if (animation._propertyResetCallback) {
                    animation._propertyResetCallback(animation._originalValue);
                }
            }
            if (finishedCallback) {
                var cancelled = !animationDidFinish;
                finishedCallback(cancelled);
            }
            if (animationDidFinish && nextAnimation) {
                nextAnimation();
            }
        });
    };
    Animation._createNativeAffineTransform = function (animation) {
        var value = animation.value;
        var result = CATransform3DIdentity;
        if (value[animation_common_1.Properties.translate] !== undefined) {
            var x = value[animation_common_1.Properties.translate].x;
            var y = value[animation_common_1.Properties.translate].y;
            result = CATransform3DTranslate(result, x, y, 0);
        }
        if (value[animation_common_1.Properties.scale] !== undefined) {
            var x = value[animation_common_1.Properties.scale].x;
            var y = value[animation_common_1.Properties.scale].y;
            result = CATransform3DScale(result, x === 0 ? 0.001 : x, y === 0 ? 0.001 : y, 1);
        }
        return result;
    };
    Animation._isAffineTransform = function (property) {
        return property === _transform
            || property === animation_common_1.Properties.translate
            || property === animation_common_1.Properties.scale;
    };
    Animation._canBeMerged = function (animation1, animation2) {
        var result = Animation._isAffineTransform(animation1.property) &&
            Animation._isAffineTransform(animation2.property) &&
            animation1.target === animation2.target &&
            animation1.duration === animation2.duration &&
            animation1.delay === animation2.delay &&
            animation1.iterations === animation2.iterations &&
            animation1.curve === animation2.curve;
        return result;
    };
    Animation._mergeAffineTransformAnimations = function (propertyAnimations) {
        var result = new Array();
        var i = 0;
        var j;
        var length = propertyAnimations.length;
        for (; i < length; i++) {
            if (propertyAnimations[i][_skip]) {
                continue;
            }
            if (!Animation._isAffineTransform(propertyAnimations[i].property)) {
                result.push(propertyAnimations[i]);
            }
            else {
                var newTransformAnimation = {
                    target: propertyAnimations[i].target,
                    property: _transform,
                    value: {},
                    duration: propertyAnimations[i].duration,
                    delay: propertyAnimations[i].delay,
                    iterations: propertyAnimations[i].iterations,
                    curve: propertyAnimations[i].curve
                };
                if (animation_common_1.traceEnabled()) {
                    animation_common_1.traceWrite("Curve: " + propertyAnimations[i].curve, animation_common_1.traceCategories.Animation);
                }
                newTransformAnimation.value[propertyAnimations[i].property] = propertyAnimations[i].value;
                if (animation_common_1.traceEnabled()) {
                    animation_common_1.traceWrite("Created new transform animation: " + Animation._getAnimationInfo(newTransformAnimation), animation_common_1.traceCategories.Animation);
                }
                j = i + 1;
                if (j < length) {
                    for (; j < length; j++) {
                        if (Animation._canBeMerged(propertyAnimations[i], propertyAnimations[j])) {
                            if (animation_common_1.traceEnabled()) {
                                animation_common_1.traceWrite("Merging animations: " + Animation._getAnimationInfo(newTransformAnimation) + " + " + Animation._getAnimationInfo(propertyAnimations[j]) + ";", animation_common_1.traceCategories.Animation);
                            }
                            newTransformAnimation.value[propertyAnimations[j].property] = propertyAnimations[j].value;
                            propertyAnimations[j][_skip] = true;
                        }
                    }
                }
                result.push(newTransformAnimation);
            }
        }
        return result;
    };
    return Animation;
}(animation_common_1.AnimationBase));
exports.Animation = Animation;
function _getTransformMismatchErrorMessage(view) {
    var result = CGAffineTransformIdentity;
    var tx = view.translateX;
    var ty = view.translateY;
    result = CGAffineTransformTranslate(result, tx, ty);
    result = CGAffineTransformRotate(result, (view.rotate || 0) * Math.PI / 180);
    result = CGAffineTransformScale(result, view.scaleX || 1, view.scaleY || 1);
    var viewTransform = NSStringFromCGAffineTransform(result);
    var nativeTransform = NSStringFromCGAffineTransform(view.nativeViewProtected.transform);
    if (viewTransform !== nativeTransform) {
        return "View and Native transforms do not match. View: " + viewTransform + "; Native: " + nativeTransform;
    }
    return undefined;
}
exports._getTransformMismatchErrorMessage = _getTransformMismatchErrorMessage;
//# sourceMappingURL=animation.ios.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/builder/module-name-sanitizer.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function sanitizeModuleName(moduleName, removeExtension) {
    if (removeExtension === void 0) { removeExtension = true; }
    moduleName = moduleName.trim();
    if (moduleName.startsWith("~/")) {
        moduleName = moduleName.substring(2);
    }
    else if (moduleName.startsWith("~")) {
        moduleName = moduleName.substring(1);
    }
    else if (moduleName.startsWith("/")) {
        moduleName = moduleName.substring(1);
    }
    if (removeExtension) {
        var extToRemove = ["js", "ts", "xml", "html", "css", "scss"];
        var extensionRegEx = new RegExp("(.*)\\.(?:" + extToRemove.join("|") + ")", "i");
        moduleName = moduleName.replace(extensionRegEx, "$1");
    }
    return moduleName;
}
exports.sanitizeModuleName = sanitizeModuleName;
//# sourceMappingURL=module-name-sanitizer.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/core/properties/properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var reduceCSSCalc = __webpack_require__("../node_modules/reduce-css-calc/dist/index.js");
var observable_1 = __webpack_require__("../node_modules/@nativescript/core/data/observable/observable.js");
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
var style_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/style/style.js");
exports.Style = style_1.Style;
var profiling_1 = __webpack_require__("../node_modules/@nativescript/core/profiling/profiling.js");
exports.unsetValue = new Object();
var cssPropertyNames = [];
var symbolPropertyMap = {};
var cssSymbolPropertyMap = {};
var inheritableProperties = new Array();
var inheritableCssProperties = new Array();
function print(map) {
    var symbols = Object.getOwnPropertySymbols(map);
    for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {
        var symbol = symbols_1[_i];
        var prop = map[symbol];
        if (!prop.registered) {
            console.log("Property " + prop.name + " not Registered!!!!!");
        }
    }
}
function _printUnregisteredProperties() {
    print(symbolPropertyMap);
    print(cssSymbolPropertyMap);
}
exports._printUnregisteredProperties = _printUnregisteredProperties;
function _getProperties() {
    return getPropertiesFromMap(symbolPropertyMap);
}
exports._getProperties = _getProperties;
function _getStyleProperties() {
    return getPropertiesFromMap(cssSymbolPropertyMap);
}
exports._getStyleProperties = _getStyleProperties;
function isCssVariable(property) {
    return /^--[^,\s]+?$/.test(property);
}
exports.isCssVariable = isCssVariable;
function isCssCalcExpression(value) {
    return value.includes("calc(");
}
exports.isCssCalcExpression = isCssCalcExpression;
function isCssVariableExpression(value) {
    return value.includes("var(--");
}
exports.isCssVariableExpression = isCssVariableExpression;
function _evaluateCssVariableExpression(view, cssName, value) {
    if (typeof value !== "string") {
        return value;
    }
    if (!isCssVariableExpression(value)) {
        return value;
    }
    var output = value.trim();
    var lastValue;
    while (lastValue !== output) {
        lastValue = output;
        var idx = output.lastIndexOf("var(");
        if (idx === -1) {
            continue;
        }
        var endIdx = output.indexOf(")", idx);
        if (endIdx === -1) {
            continue;
        }
        var matched = output.substring(idx + 4, endIdx).split(",").map(function (v) { return v.trim(); }).filter(function (v) { return !!v; });
        var cssVariableName = matched.shift();
        var cssVariableValue = view.style.getCssVariable(cssVariableName);
        if (cssVariableValue === null && matched.length) {
            cssVariableValue = _evaluateCssVariableExpression(view, cssName, matched.join(", ")).split(",")[0];
        }
        if (!cssVariableValue) {
            cssVariableValue = "unset";
        }
        output = "" + output.substring(0, idx) + cssVariableValue + output.substring(endIdx + 1);
    }
    return output;
}
exports._evaluateCssVariableExpression = _evaluateCssVariableExpression;
function _evaluateCssCalcExpression(value) {
    if (typeof value !== "string") {
        return value;
    }
    if (isCssCalcExpression(value)) {
        return reduceCSSCalc(value.replace(/([0-9]+(\.[0-9]+)?)dip\b/g, "$1"));
    }
    else {
        return value;
    }
}
exports._evaluateCssCalcExpression = _evaluateCssCalcExpression;
function getPropertiesFromMap(map) {
    var props = [];
    Object.getOwnPropertySymbols(map).forEach(function (symbol) { return props.push(map[symbol]); });
    return props;
}
var Property = (function () {
    function Property(options) {
        this.enumerable = true;
        this.configurable = true;
        var propertyName = options.name;
        this.name = propertyName;
        var key = Symbol(propertyName + ":propertyKey");
        this.key = key;
        var getDefault = Symbol(propertyName + ":getDefault");
        this.getDefault = getDefault;
        var setNative = Symbol(propertyName + ":setNative");
        this.setNative = setNative;
        var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
        this.defaultValueKey = defaultValueKey;
        var defaultValue = options.defaultValue;
        this.defaultValue = defaultValue;
        var eventName = propertyName + "Change";
        var equalityComparer = options.equalityComparer;
        var affectsLayout = options.affectsLayout;
        var valueChanged = options.valueChanged;
        var valueConverter = options.valueConverter;
        var property = this;
        this.set = function (boxedValue) {
            var reset = boxedValue === exports.unsetValue;
            var value;
            var wrapped;
            if (reset) {
                value = defaultValue;
            }
            else {
                wrapped = boxedValue && boxedValue.wrapped;
                value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;
                if (valueConverter && typeof value === "string") {
                    value = valueConverter(value);
                }
            }
            var oldValue = key in this ? this[key] : defaultValue;
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (wrapped || changed) {
                if (affectsLayout) {
                    this.requestLayout();
                }
                if (reset) {
                    delete this[key];
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (this[setNative]) {
                        if (this._suspendNativeUpdatesCount) {
                            if (this._suspendedUpdates) {
                                this._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (defaultValueKey in this) {
                                this[setNative](this[defaultValueKey]);
                                delete this[defaultValueKey];
                            }
                            else {
                                this[setNative](defaultValue);
                            }
                        }
                    }
                }
                else {
                    this[key] = value;
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (this[setNative]) {
                        if (this._suspendNativeUpdatesCount) {
                            if (this._suspendedUpdates) {
                                this._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (!(defaultValueKey in this)) {
                                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
                            }
                            this[setNative](value);
                        }
                    }
                }
                if (this.hasListeners(eventName)) {
                    this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (this.domNode) {
                    if (reset) {
                        this.domNode.attributeRemoved(propertyName);
                    }
                    else {
                        this.domNode.attributeModified(propertyName, value);
                    }
                }
            }
        };
        this.get = function () {
            return key in this ? this[key] : defaultValue;
        };
        this.nativeValueChange = function (owner, value) {
            var oldValue = key in owner ? owner[key] : defaultValue;
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (changed) {
                owner[key] = value;
                if (valueChanged) {
                    valueChanged(owner, oldValue, value);
                }
                if (owner.nativeViewProtected && !(defaultValueKey in owner)) {
                    owner[defaultValueKey] = owner[getDefault] ? owner[getDefault]() : defaultValue;
                }
                if (owner.hasListeners(eventName)) {
                    owner.notify({ object: owner, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (affectsLayout) {
                    owner.requestLayout();
                }
                if (owner.domNode) {
                    owner.domNode.attributeModified(propertyName, value);
                }
            }
        };
        symbolPropertyMap[key] = this;
    }
    Property.prototype.register = function (cls) {
        if (this.registered) {
            throw new Error("Property " + this.name + " already registered.");
        }
        this.registered = true;
        Object.defineProperty(cls.prototype, this.name, this);
    };
    Property.prototype.isSet = function (instance) {
        return this.key in instance;
    };
    return Property;
}());
exports.Property = Property;
Property.prototype.isStyleProperty = false;
var CoercibleProperty = (function (_super) {
    __extends(CoercibleProperty, _super);
    function CoercibleProperty(options) {
        var _this = _super.call(this, options) || this;
        var propertyName = options.name;
        var key = _this.key;
        var getDefault = _this.getDefault;
        var setNative = _this.setNative;
        var defaultValueKey = _this.defaultValueKey;
        var defaultValue = _this.defaultValue;
        var coerceKey = Symbol(propertyName + ":coerceKey");
        var eventName = propertyName + "Change";
        var affectsLayout = options.affectsLayout;
        var equalityComparer = options.equalityComparer;
        var valueChanged = options.valueChanged;
        var valueConverter = options.valueConverter;
        var coerceCallback = options.coerceValue;
        var property = _this;
        _this.coerce = function (target) {
            var originalValue = coerceKey in target ? target[coerceKey] : defaultValue;
            target[propertyName] = originalValue;
        };
        _this.set = function (boxedValue) {
            var reset = boxedValue === exports.unsetValue;
            var value;
            var wrapped;
            if (reset) {
                value = defaultValue;
                delete this[coerceKey];
            }
            else {
                wrapped = boxedValue && boxedValue.wrapped;
                value = wrapped ? observable_1.WrappedValue.unwrap(boxedValue) : boxedValue;
                if (valueConverter && typeof value === "string") {
                    value = valueConverter(value);
                }
                this[coerceKey] = value;
                value = coerceCallback(this, value);
            }
            var oldValue = key in this ? this[key] : defaultValue;
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (wrapped || changed) {
                if (reset) {
                    delete this[key];
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (this[setNative]) {
                        if (this._suspendNativeUpdatesCount) {
                            if (this._suspendedUpdates) {
                                this._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (defaultValueKey in this) {
                                this[setNative](this[defaultValueKey]);
                                delete this[defaultValueKey];
                            }
                            else {
                                this[setNative](defaultValue);
                            }
                        }
                    }
                }
                else {
                    this[key] = value;
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (this[setNative]) {
                        if (this._suspendNativeUpdatesCount) {
                            if (this._suspendedUpdates) {
                                this._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (!(defaultValueKey in this)) {
                                this[defaultValueKey] = this[getDefault] ? this[getDefault]() : defaultValue;
                            }
                            this[setNative](value);
                        }
                    }
                }
                if (this.hasListeners(eventName)) {
                    this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (affectsLayout) {
                    this.requestLayout();
                }
                if (this.domNode) {
                    if (reset) {
                        this.domNode.attributeRemoved(propertyName);
                    }
                    else {
                        this.domNode.attributeModified(propertyName, value);
                    }
                }
            }
        };
        return _this;
    }
    return CoercibleProperty;
}(Property));
exports.CoercibleProperty = CoercibleProperty;
var InheritedProperty = (function (_super) {
    __extends(InheritedProperty, _super);
    function InheritedProperty(options) {
        var _this = _super.call(this, options) || this;
        var name = options.name;
        var key = _this.key;
        var defaultValue = options.defaultValue;
        var sourceKey = Symbol(name + ":valueSourceKey");
        _this.sourceKey = sourceKey;
        var setBase = _this.set;
        var setFunc = function (valueSource) { return function (value) {
            var that = this;
            var unboxedValue;
            var newValueSource;
            if (value === exports.unsetValue) {
                var parent_1 = that.parent;
                if (parent_1 && parent_1[sourceKey] !== 0) {
                    unboxedValue = parent_1[name];
                    newValueSource = 1;
                }
                else {
                    unboxedValue = defaultValue;
                    newValueSource = 0;
                }
            }
            else {
                unboxedValue = value;
                newValueSource = valueSource;
            }
            var currentValue = that[key];
            setBase.call(that, unboxedValue);
            var newValue = that[key];
            that[sourceKey] = newValueSource;
            if (currentValue !== newValue) {
                var reset_1 = newValueSource === 0;
                that.eachChild(function (child) {
                    var childValueSource = child[sourceKey] || 0;
                    if (reset_1) {
                        if (childValueSource === 1) {
                            setFunc.call(child, exports.unsetValue);
                        }
                    }
                    else {
                        if (childValueSource <= 1) {
                            setInheritedValue.call(child, newValue);
                        }
                    }
                    return true;
                });
            }
        }; };
        var setInheritedValue = setFunc(1);
        _this.setInheritedValue = setInheritedValue;
        _this.set = setFunc(3);
        inheritableProperties.push(_this);
        return _this;
    }
    return InheritedProperty;
}(Property));
exports.InheritedProperty = InheritedProperty;
var CssProperty = (function () {
    function CssProperty(options) {
        var propertyName = options.name;
        this.name = propertyName;
        cssPropertyNames.push(options.cssName);
        this.cssName = "css:" + options.cssName;
        this.cssLocalName = options.cssName;
        var key = Symbol(propertyName + ":propertyKey");
        this.key = key;
        var sourceKey = Symbol(propertyName + ":valueSourceKey");
        this.sourceKey = sourceKey;
        var getDefault = Symbol(propertyName + ":getDefault");
        this.getDefault = getDefault;
        var setNative = Symbol(propertyName + ":setNative");
        this.setNative = setNative;
        var defaultValueKey = Symbol(propertyName + ":nativeDefaultValue");
        this.defaultValueKey = defaultValueKey;
        var defaultValue = options.defaultValue;
        this.defaultValue = defaultValue;
        var eventName = propertyName + "Change";
        var affectsLayout = options.affectsLayout;
        var equalityComparer = options.equalityComparer;
        var valueChanged = options.valueChanged;
        var valueConverter = options.valueConverter;
        var property = this;
        function setLocalValue(newValue) {
            var view = this.viewRef.get();
            if (!view) {
                trace_1.write(newValue + " not set to view because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
                return;
            }
            var reset = newValue === exports.unsetValue || newValue === "";
            var value;
            if (reset) {
                value = defaultValue;
                delete this[sourceKey];
            }
            else {
                this[sourceKey] = 3;
                value = (valueConverter && typeof newValue === "string") ?
                    valueConverter(newValue) :
                    newValue;
            }
            var oldValue = key in this ? this[key] : defaultValue;
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (changed) {
                if (reset) {
                    delete this[key];
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (view[setNative]) {
                        if (view._suspendNativeUpdatesCount) {
                            if (view._suspendedUpdates) {
                                view._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (defaultValueKey in this) {
                                view[setNative](this[defaultValueKey]);
                                delete this[defaultValueKey];
                            }
                            else {
                                view[setNative](defaultValue);
                            }
                        }
                    }
                }
                else {
                    this[key] = value;
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (view[setNative]) {
                        if (view._suspendNativeUpdatesCount) {
                            if (view._suspendedUpdates) {
                                view._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (!(defaultValueKey in this)) {
                                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                            }
                            view[setNative](value);
                        }
                    }
                }
                if (this.hasListeners(eventName)) {
                    this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (affectsLayout) {
                    view.requestLayout();
                }
            }
        }
        function setCssValue(newValue) {
            var view = this.viewRef.get();
            if (!view) {
                trace_1.write(newValue + " not set to view because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
                return;
            }
            var currentValueSource = this[sourceKey] || 0;
            if (currentValueSource === 3) {
                return;
            }
            var reset = newValue === exports.unsetValue || newValue === "";
            var value;
            if (reset) {
                value = defaultValue;
                delete this[sourceKey];
            }
            else {
                value = valueConverter && typeof newValue === "string" ?
                    valueConverter(newValue) :
                    newValue;
                this[sourceKey] = 2;
            }
            var oldValue = key in this ? this[key] : defaultValue;
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (changed) {
                if (reset) {
                    delete this[key];
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (view[setNative]) {
                        if (view._suspendNativeUpdatesCount) {
                            if (view._suspendedUpdates) {
                                view._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (defaultValueKey in this) {
                                view[setNative](this[defaultValueKey]);
                                delete this[defaultValueKey];
                            }
                            else {
                                view[setNative](defaultValue);
                            }
                        }
                    }
                }
                else {
                    this[key] = value;
                    if (valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (view[setNative]) {
                        if (view._suspendNativeUpdatesCount) {
                            if (view._suspendedUpdates) {
                                view._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (!(defaultValueKey in this)) {
                                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                            }
                            view[setNative](value);
                        }
                    }
                }
                if (this.hasListeners(eventName)) {
                    this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (affectsLayout) {
                    view.requestLayout();
                }
            }
        }
        function get() {
            return key in this ? this[key] : defaultValue;
        }
        this.cssValueDescriptor = {
            enumerable: true,
            configurable: true,
            get: get,
            set: setCssValue
        };
        this.localValueDescriptor = {
            enumerable: true,
            configurable: true,
            get: get,
            set: setLocalValue
        };
        cssSymbolPropertyMap[key] = this;
    }
    CssProperty.prototype.register = function (cls) {
        if (this.registered) {
            throw new Error("Property " + this.name + " already registered.");
        }
        this.registered = true;
        Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
        Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
        if (this.cssLocalName !== this.cssName) {
            Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
        }
    };
    CssProperty.prototype.isSet = function (instance) {
        return this.key in instance;
    };
    return CssProperty;
}());
exports.CssProperty = CssProperty;
CssProperty.prototype.isStyleProperty = true;
var CssAnimationProperty = (function () {
    function CssAnimationProperty(options) {
        var valueConverter = options.valueConverter, equalityComparer = options.equalityComparer, valueChanged = options.valueChanged, defaultValue = options.defaultValue;
        var propertyName = options.name;
        this.name = propertyName;
        cssPropertyNames.push(options.cssName);
        CssAnimationProperty.properties[propertyName] = this;
        if (options.cssName && options.cssName !== propertyName) {
            CssAnimationProperty.properties[options.cssName] = this;
        }
        this._valueConverter = options.valueConverter;
        var cssLocalName = (options.cssName || propertyName);
        this.cssLocalName = cssLocalName;
        var cssName = "css:" + cssLocalName;
        this.cssName = cssName;
        var keyframeName = "keyframe:" + propertyName;
        this.keyframe = keyframeName;
        var defaultName = "default:" + propertyName;
        var defaultValueKey = Symbol(defaultName);
        this.defaultValueKey = defaultValueKey;
        this.defaultValue = defaultValue;
        var cssValue = Symbol(cssName);
        var styleValue = Symbol("local:" + propertyName);
        var keyframeValue = Symbol(keyframeName);
        var computedValue = Symbol("computed-value:" + propertyName);
        this.key = computedValue;
        var computedSource = Symbol("computed-source:" + propertyName);
        this.source = computedSource;
        this.getDefault = Symbol(propertyName + ":getDefault");
        var getDefault = this.getDefault;
        var setNative = this.setNative = Symbol(propertyName + ":setNative");
        var eventName = propertyName + "Change";
        var property = this;
        function descriptor(symbol, propertySource, enumerable, configurable, getsComputed) {
            return {
                enumerable: enumerable, configurable: configurable,
                get: getsComputed ? function () { return this[computedValue]; } : function () { return this[symbol]; },
                set: function (boxedValue) {
                    var view = this.viewRef.get();
                    if (!view) {
                        trace_1.write(boxedValue + " not set to view because \".viewRef\" is cleared", trace_1.categories.Animation, trace_1.messageType.warn);
                        return;
                    }
                    var oldValue = this[computedValue];
                    var oldSource = this[computedSource];
                    var wasSet = oldSource !== 0;
                    var reset = boxedValue === exports.unsetValue || boxedValue === "";
                    if (reset) {
                        this[symbol] = exports.unsetValue;
                        if (this[computedSource] === propertySource) {
                            if (this[styleValue] !== exports.unsetValue) {
                                this[computedSource] = 3;
                                this[computedValue] = this[styleValue];
                            }
                            else if (this[cssValue] !== exports.unsetValue) {
                                this[computedSource] = 2;
                                this[computedValue] = this[cssValue];
                            }
                            else {
                                delete this[computedSource];
                                delete this[computedValue];
                            }
                        }
                    }
                    else {
                        if (valueConverter && typeof boxedValue === "string") {
                            boxedValue = valueConverter(boxedValue);
                        }
                        this[symbol] = boxedValue;
                        if (this[computedSource] <= propertySource) {
                            this[computedSource] = propertySource;
                            this[computedValue] = boxedValue;
                        }
                    }
                    var value = this[computedValue];
                    var source = this[computedSource];
                    var isSet = source !== 0;
                    var computedValueChanged = oldValue !== value && (!equalityComparer || !equalityComparer(oldValue, value));
                    if (computedValueChanged && valueChanged) {
                        valueChanged(this, oldValue, value);
                    }
                    if (view[setNative] && (computedValueChanged || isSet !== wasSet)) {
                        if (view._suspendNativeUpdatesCount) {
                            if (view._suspendedUpdates) {
                                view._suspendedUpdates[propertyName] = property;
                            }
                        }
                        else {
                            if (isSet) {
                                if (!wasSet && !(defaultValueKey in this)) {
                                    this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                                }
                                view[setNative](value);
                            }
                            else if (wasSet) {
                                if (defaultValueKey in this) {
                                    view[setNative](this[defaultValueKey]);
                                }
                                else {
                                    view[setNative](defaultValue);
                                }
                            }
                        }
                    }
                    if (computedValueChanged && this.hasListeners(eventName)) {
                        this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                    }
                }
            };
        }
        var defaultPropertyDescriptor = descriptor(defaultValueKey, 0, false, false, false);
        var cssPropertyDescriptor = descriptor(cssValue, 2, false, false, false);
        var stylePropertyDescriptor = descriptor(styleValue, 3, true, true, true);
        var keyframePropertyDescriptor = descriptor(keyframeValue, 4, false, false, false);
        symbolPropertyMap[computedValue] = this;
        cssSymbolPropertyMap[computedValue] = this;
        this.register = function (cls) {
            cls.prototype[computedValue] = options.defaultValue;
            cls.prototype[computedSource] = 0;
            cls.prototype[cssValue] = exports.unsetValue;
            cls.prototype[styleValue] = exports.unsetValue;
            cls.prototype[keyframeValue] = exports.unsetValue;
            Object.defineProperty(cls.prototype, defaultName, defaultPropertyDescriptor);
            Object.defineProperty(cls.prototype, cssName, cssPropertyDescriptor);
            Object.defineProperty(cls.prototype, propertyName, stylePropertyDescriptor);
            if (options.cssName && options.cssName !== options.name) {
                Object.defineProperty(cls.prototype, options.cssName, stylePropertyDescriptor);
            }
            Object.defineProperty(cls.prototype, keyframeName, keyframePropertyDescriptor);
        };
    }
    CssAnimationProperty.prototype._initDefaultNativeValue = function (target) {
        var view = target.viewRef.get();
        if (!view) {
            trace_1.write("_initDefaultNativeValue not executed to view because \".viewRef\" is cleared", trace_1.categories.Animation, trace_1.messageType.warn);
            return;
        }
        var defaultValueKey = this.defaultValueKey;
        if (!(defaultValueKey in target)) {
            var getDefault = this.getDefault;
            target[defaultValueKey] = view[getDefault] ? view[getDefault]() : this.defaultValue;
        }
    };
    CssAnimationProperty._getByCssName = function (name) {
        return this.properties[name];
    };
    CssAnimationProperty._getPropertyNames = function () {
        return Object.keys(CssAnimationProperty.properties);
    };
    CssAnimationProperty.prototype.isSet = function (instance) {
        return instance[this.source] !== 0;
    };
    CssAnimationProperty.properties = {};
    return CssAnimationProperty;
}());
exports.CssAnimationProperty = CssAnimationProperty;
CssAnimationProperty.prototype.isStyleProperty = true;
var InheritedCssProperty = (function (_super) {
    __extends(InheritedCssProperty, _super);
    function InheritedCssProperty(options) {
        var _this = _super.call(this, options) || this;
        var propertyName = options.name;
        var key = _this.key;
        var sourceKey = _this.sourceKey;
        var getDefault = _this.getDefault;
        var setNative = _this.setNative;
        var defaultValueKey = _this.defaultValueKey;
        var eventName = propertyName + "Change";
        var defaultValue = options.defaultValue;
        var affectsLayout = options.affectsLayout;
        var equalityComparer = options.equalityComparer;
        var valueChanged = options.valueChanged;
        var valueConverter = options.valueConverter;
        var property = _this;
        var setFunc = function (valueSource) { return function (boxedValue) {
            var view = this.viewRef.get();
            if (!view) {
                trace_1.write(boxedValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
                return;
            }
            var reset = boxedValue === exports.unsetValue || boxedValue === "";
            var currentValueSource = this[sourceKey] || 0;
            if (reset) {
                if (valueSource === 2 && currentValueSource === 3) {
                    return;
                }
            }
            else {
                if (currentValueSource > valueSource) {
                    return;
                }
            }
            var oldValue = key in this ? this[key] : defaultValue;
            var value;
            var unsetNativeValue = false;
            if (reset) {
                var parent_2 = view.parent;
                var style = parent_2 ? parent_2.style : null;
                if (style && style[sourceKey] > 0) {
                    value = style[propertyName];
                    this[sourceKey] = 1;
                    this[key] = value;
                }
                else {
                    value = defaultValue;
                    delete this[sourceKey];
                    delete this[key];
                    unsetNativeValue = true;
                }
            }
            else {
                this[sourceKey] = valueSource;
                if (valueConverter && typeof boxedValue === "string") {
                    value = valueConverter(boxedValue);
                }
                else {
                    value = boxedValue;
                }
                this[key] = value;
            }
            var changed = equalityComparer ? !equalityComparer(oldValue, value) : oldValue !== value;
            if (changed) {
                if (valueChanged) {
                    valueChanged(this, oldValue, value);
                }
                if (view[setNative]) {
                    if (view._suspendNativeUpdatesCount) {
                        if (view._suspendedUpdates) {
                            view._suspendedUpdates[propertyName] = property;
                        }
                    }
                    else {
                        if (unsetNativeValue) {
                            if (defaultValueKey in this) {
                                view[setNative](this[defaultValueKey]);
                                delete this[defaultValueKey];
                            }
                            else {
                                view[setNative](defaultValue);
                            }
                        }
                        else {
                            if (!(defaultValueKey in this)) {
                                this[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                            }
                            view[setNative](value);
                        }
                    }
                }
                if (this.hasListeners(eventName)) {
                    this.notify({ object: this, eventName: eventName, propertyName: propertyName, value: value, oldValue: oldValue });
                }
                if (affectsLayout) {
                    view.requestLayout();
                }
                view.eachChild(function (child) {
                    var childStyle = child.style;
                    var childValueSource = childStyle[sourceKey] || 0;
                    if (reset) {
                        if (childValueSource === 1) {
                            setDefaultFunc.call(childStyle, exports.unsetValue);
                        }
                    }
                    else {
                        if (childValueSource <= 1) {
                            setInheritedFunc.call(childStyle, value);
                        }
                    }
                    return true;
                });
            }
        }; };
        var setDefaultFunc = setFunc(0);
        var setInheritedFunc = setFunc(1);
        _this.setInheritedValue = setInheritedFunc;
        _this.cssValueDescriptor.set = setFunc(2);
        _this.localValueDescriptor.set = setFunc(3);
        inheritableCssProperties.push(_this);
        return _this;
    }
    return InheritedCssProperty;
}(CssProperty));
exports.InheritedCssProperty = InheritedCssProperty;
var ShorthandProperty = (function () {
    function ShorthandProperty(options) {
        this.name = options.name;
        var key = Symbol(this.name + ":propertyKey");
        this.key = key;
        this.cssName = "css:" + options.cssName;
        this.cssLocalName = "" + options.cssName;
        var converter = options.converter;
        function setLocalValue(value) {
            var _this = this;
            var view = this.viewRef.get();
            if (!view) {
                trace_1.write("setLocalValue not executed to view because \".viewRef\" is cleared", trace_1.categories.Animation, trace_1.messageType.warn);
                return;
            }
            view._batchUpdate(function () {
                for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
                    var _b = _a[_i], p = _b[0], v = _b[1];
                    _this[p.name] = v;
                }
            });
        }
        function setCssValue(value) {
            var _this = this;
            var view = this.viewRef.get();
            if (!view) {
                trace_1.write("setCssValue not executed to view because \".viewRef\" is cleared", trace_1.categories.Animation, trace_1.messageType.warn);
                return;
            }
            view._batchUpdate(function () {
                for (var _i = 0, _a = converter(value); _i < _a.length; _i++) {
                    var _b = _a[_i], p = _b[0], v = _b[1];
                    _this[p.cssName] = v;
                }
            });
        }
        this.cssValueDescriptor = {
            enumerable: true,
            configurable: true,
            get: options.getter,
            set: setCssValue
        };
        this.localValueDescriptor = {
            enumerable: true,
            configurable: true,
            get: options.getter,
            set: setLocalValue
        };
        this.propertyBagDescriptor = {
            enumerable: false,
            configurable: true,
            set: function (value) {
                var _this = this;
                converter(value).forEach(function (_a) {
                    var property = _a[0], value = _a[1];
                    _this[property.cssLocalName] = value;
                });
            }
        };
        cssSymbolPropertyMap[key] = this;
    }
    ShorthandProperty.prototype.register = function (cls) {
        if (this.registered) {
            throw new Error("Property " + this.name + " already registered.");
        }
        this.registered = true;
        Object.defineProperty(cls.prototype, this.name, this.localValueDescriptor);
        Object.defineProperty(cls.prototype, this.cssName, this.cssValueDescriptor);
        if (this.cssLocalName !== this.cssName) {
            Object.defineProperty(cls.prototype, this.cssLocalName, this.localValueDescriptor);
        }
        Object.defineProperty(cls.prototype.PropertyBag, this.cssLocalName, this.propertyBagDescriptor);
    };
    return ShorthandProperty;
}());
exports.ShorthandProperty = ShorthandProperty;
function inheritablePropertyValuesOn(view) {
    var array = new Array();
    for (var _i = 0, inheritableProperties_1 = inheritableProperties; _i < inheritableProperties_1.length; _i++) {
        var prop = inheritableProperties_1[_i];
        var sourceKey = prop.sourceKey;
        var valueSource = view[sourceKey] || 0;
        if (valueSource !== 0) {
            array.push({ property: prop, value: view[prop.name] });
        }
    }
    return array;
}
function inheritableCssPropertyValuesOn(style) {
    var array = new Array();
    for (var _i = 0, inheritableCssProperties_1 = inheritableCssProperties; _i < inheritableCssProperties_1.length; _i++) {
        var prop = inheritableCssProperties_1[_i];
        var sourceKey = prop.sourceKey;
        var valueSource = style[sourceKey] || 0;
        if (valueSource !== 0) {
            array.push({ property: prop, value: style[prop.name] });
        }
    }
    return array;
}
exports.initNativeView = profiling_1.profile("\"properties\".initNativeView", function initNativeView(view) {
    if (view._suspendedUpdates) {
        applyPendingNativeSetters(view);
    }
    else {
        applyAllNativeSetters(view);
    }
    view._suspendedUpdates = {};
});
function applyPendingNativeSetters(view) {
    var suspendedUpdates = view._suspendedUpdates;
    for (var propertyName in suspendedUpdates) {
        var property = suspendedUpdates[propertyName];
        var setNative = property.setNative;
        if (view[setNative]) {
            var getDefault = property.getDefault, isStyleProperty = property.isStyleProperty, defaultValueKey = property.defaultValueKey, defaultValue = property.defaultValue;
            var value = void 0;
            if (isStyleProperty) {
                var style = view.style;
                if (property.isSet(view.style)) {
                    if (!(defaultValueKey in style)) {
                        style[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                    }
                    value = view.style[propertyName];
                }
                else {
                    value = style[defaultValueKey];
                }
            }
            else {
                if (property.isSet(view)) {
                    if (!(defaultValueKey in view)) {
                        view[defaultValueKey] = view[getDefault] ? view[getDefault]() : defaultValue;
                    }
                    value = view[propertyName];
                }
                else {
                    value = view[defaultValueKey];
                }
            }
            view[setNative](value);
        }
    }
}
exports.applyPendingNativeSetters = applyPendingNativeSetters;
function applyAllNativeSetters(view) {
    var symbols = Object.getOwnPropertySymbols(view);
    for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {
        var symbol = symbols_2[_i];
        var property = symbolPropertyMap[symbol];
        if (!property) {
            continue;
        }
        var setNative = property.setNative;
        var getDefault = property.getDefault;
        if (setNative in view) {
            var defaultValueKey = property.defaultValueKey;
            if (!(defaultValueKey in view)) {
                view[defaultValueKey] = view[getDefault] ? view[getDefault]() : property.defaultValue;
            }
            var value = view[symbol];
            view[setNative](value);
        }
    }
    var style = view.style;
    symbols = Object.getOwnPropertySymbols(style);
    for (var _a = 0, symbols_3 = symbols; _a < symbols_3.length; _a++) {
        var symbol = symbols_3[_a];
        var property = cssSymbolPropertyMap[symbol];
        if (!property) {
            continue;
        }
        if (view[property.setNative]) {
            var defaultValueKey = property.defaultValueKey;
            if (!(defaultValueKey in style)) {
                style[defaultValueKey] = view[property.getDefault] ? view[property.getDefault]() : property.defaultValue;
            }
            var value = style[symbol];
            view[property.setNative](value);
        }
    }
}
exports.applyAllNativeSetters = applyAllNativeSetters;
function resetNativeView(view) {
    var symbols = Object.getOwnPropertySymbols(view);
    for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {
        var symbol = symbols_4[_i];
        var property = symbolPropertyMap[symbol];
        if (!property) {
            continue;
        }
        if (view[property.setNative]) {
            if (property.defaultValueKey in view) {
                view[property.setNative](view[property.defaultValueKey]);
                delete view[property.defaultValueKey];
            }
            else {
                view[property.setNative](property.defaultValue);
            }
        }
    }
    var style = view.style;
    symbols = Object.getOwnPropertySymbols(style);
    for (var _a = 0, symbols_5 = symbols; _a < symbols_5.length; _a++) {
        var symbol = symbols_5[_a];
        var property = cssSymbolPropertyMap[symbol];
        if (!property) {
            continue;
        }
        if (view[property.setNative]) {
            if (property.defaultValueKey in style) {
                view[property.setNative](style[property.defaultValueKey]);
                delete style[property.defaultValueKey];
            }
            else {
                view[property.setNative](property.defaultValue);
            }
        }
    }
}
exports.resetNativeView = resetNativeView;
function clearInheritedProperties(view) {
    for (var _i = 0, inheritableProperties_2 = inheritableProperties; _i < inheritableProperties_2.length; _i++) {
        var prop = inheritableProperties_2[_i];
        var sourceKey = prop.sourceKey;
        if (view[sourceKey] === 1) {
            prop.set.call(view, exports.unsetValue);
        }
    }
    var style = view.style;
    for (var _a = 0, inheritableCssProperties_2 = inheritableCssProperties; _a < inheritableCssProperties_2.length; _a++) {
        var prop = inheritableCssProperties_2[_a];
        var sourceKey = prop.sourceKey;
        if (style[sourceKey] === 1) {
            prop.setInheritedValue.call(style, exports.unsetValue);
        }
    }
}
exports.clearInheritedProperties = clearInheritedProperties;
function resetCSSProperties(style) {
    var symbols = Object.getOwnPropertySymbols(style);
    for (var _i = 0, symbols_6 = symbols; _i < symbols_6.length; _i++) {
        var symbol = symbols_6[_i];
        var cssProperty = void 0;
        if (cssProperty = cssSymbolPropertyMap[symbol]) {
            style[cssProperty.cssName] = exports.unsetValue;
            if (cssProperty instanceof CssAnimationProperty) {
                style[cssProperty.keyframe] = exports.unsetValue;
            }
        }
    }
}
exports.resetCSSProperties = resetCSSProperties;
function propagateInheritableProperties(view, child) {
    var inheritablePropertyValues = inheritablePropertyValuesOn(view);
    for (var _i = 0, inheritablePropertyValues_1 = inheritablePropertyValues; _i < inheritablePropertyValues_1.length; _i++) {
        var pair = inheritablePropertyValues_1[_i];
        var prop = pair.property;
        var sourceKey = prop.sourceKey;
        var currentValueSource = child[sourceKey] || 0;
        if (currentValueSource <= 1) {
            prop.setInheritedValue.call(child, pair.value);
        }
    }
}
exports.propagateInheritableProperties = propagateInheritableProperties;
function propagateInheritableCssProperties(parentStyle, childStyle) {
    var inheritableCssPropertyValues = inheritableCssPropertyValuesOn(parentStyle);
    for (var _i = 0, inheritableCssPropertyValues_1 = inheritableCssPropertyValues; _i < inheritableCssPropertyValues_1.length; _i++) {
        var pair = inheritableCssPropertyValues_1[_i];
        var prop = pair.property;
        var sourceKey = prop.sourceKey;
        var currentValueSource = childStyle[sourceKey] || 0;
        if (currentValueSource <= 1) {
            prop.setInheritedValue.call(childStyle, pair.value, 1);
        }
    }
}
exports.propagateInheritableCssProperties = propagateInheritableCssProperties;
function makeValidator() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var set = new Set(values);
    return function (value) { return set.has(value); };
}
exports.makeValidator = makeValidator;
function makeParser(isValid) {
    return function (value) {
        var lower = value && value.toLowerCase();
        if (isValid(lower)) {
            return lower;
        }
        else {
            throw new Error("Invalid value: " + value);
        }
    };
}
exports.makeParser = makeParser;
function getSetProperties(view) {
    var result = [];
    Object.getOwnPropertyNames(view).forEach(function (prop) {
        result.push([prop, view[prop]]);
    });
    var symbols = Object.getOwnPropertySymbols(view);
    for (var _i = 0, symbols_7 = symbols; _i < symbols_7.length; _i++) {
        var symbol = symbols_7[_i];
        var property = symbolPropertyMap[symbol];
        if (!property) {
            continue;
        }
        var value = view[property.key];
        result.push([property.name, value]);
    }
    return result;
}
exports.getSetProperties = getSetProperties;
function getComputedCssValues(view) {
    var result = [];
    var style = view.style;
    for (var _i = 0, cssPropertyNames_1 = cssPropertyNames; _i < cssPropertyNames_1.length; _i++) {
        var prop = cssPropertyNames_1[_i];
        result.push([prop, style[prop]]);
    }
    result.push(["top", "auto"]);
    result.push(["left", "auto"]);
    result.push(["bottom", "auto"]);
    result.push(["right", "auto"]);
    return result;
}
exports.getComputedCssValues = getComputedCssValues;
//# sourceMappingURL=properties.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/enums/enums.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var KeyboardType;
(function (KeyboardType) {
    KeyboardType.datetime = "datetime";
    KeyboardType.phone = "phone";
    KeyboardType.number = "number";
    KeyboardType.url = "url";
    KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function (ReturnKeyType) {
    ReturnKeyType.done = "done";
    ReturnKeyType.next = "next";
    ReturnKeyType.go = "go";
    ReturnKeyType.search = "search";
    ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function (TextAlignment) {
    TextAlignment.left = "left";
    TextAlignment.center = "center";
    TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function (TextDecoration) {
    TextDecoration.none = "none";
    TextDecoration.underline = "underline";
    TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function (TextTransform) {
    TextTransform.none = "none";
    TextTransform.capitalize = "capitalize";
    TextTransform.uppercase = "uppercase";
    TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function (WhiteSpace) {
    WhiteSpace.normal = "normal";
    WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function (Orientation) {
    Orientation.horizontal = "horizontal";
    Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function (DeviceOrientation) {
    DeviceOrientation.portrait = "portrait";
    DeviceOrientation.landscape = "landscape";
    DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment.left = "left";
    HorizontalAlignment.center = "center";
    HorizontalAlignment.right = "right";
    HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment.top = "top";
    VerticalAlignment.middle = "middle";
    VerticalAlignment.bottom = "bottom";
    VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function (Stretch) {
    Stretch.none = "none";
    Stretch.aspectFill = "aspectFill";
    Stretch.aspectFit = "aspectFit";
    Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function (Visibility) {
    Visibility.visible = "visible";
    Visibility.collapse = "collapse";
    Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function (FontAttributes) {
    FontAttributes.Normal = 0;
    FontAttributes.Bold = 1;
    FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function (DeviceType) {
    DeviceType.Phone = "Phone";
    DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function (UpdateTextTrigger) {
    UpdateTextTrigger.focusLost = "focusLost";
    UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function (Accuracy) {
    Accuracy.any = 300;
    Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function (Dock) {
    Dock.left = "left";
    Dock.top = "top";
    Dock.right = "right";
    Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function (AutocapitalizationType) {
    AutocapitalizationType.none = "none";
    AutocapitalizationType.words = "words";
    AutocapitalizationType.sentences = "sentences";
    AutocapitalizationType.allCharacters = "allcharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function (NavigationBarVisibility) {
    NavigationBarVisibility.auto = "auto";
    NavigationBarVisibility.never = "never";
    NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function (AndroidActionBarIconVisibility) {
    AndroidActionBarIconVisibility.auto = "auto";
    AndroidActionBarIconVisibility.never = "never";
    AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function (AndroidActionItemPosition) {
    AndroidActionItemPosition.actionBar = "actionBar";
    AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
    AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function (IOSActionItemPosition) {
    IOSActionItemPosition.left = "left";
    IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function (ImageFormat) {
    ImageFormat.png = "png";
    ImageFormat.jpeg = "jpeg";
    ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function (FontStyle) {
    FontStyle.normal = "normal";
    FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function (FontWeight) {
    FontWeight.thin = "100";
    FontWeight.extraLight = "200";
    FontWeight.light = "300";
    FontWeight.normal = "normal";
    FontWeight.medium = "500";
    FontWeight.semiBold = "600";
    FontWeight.bold = "bold";
    FontWeight.extraBold = "800";
    FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function (BackgroundRepeat) {
    BackgroundRepeat.repeat = "repeat";
    BackgroundRepeat.repeatX = "repeat-x";
    BackgroundRepeat.repeatY = "repeat-y";
    BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animation;
var AnimationCurve;
(function (AnimationCurve) {
    AnimationCurve.ease = "ease";
    AnimationCurve.easeIn = "easeIn";
    AnimationCurve.easeOut = "easeOut";
    AnimationCurve.easeInOut = "easeInOut";
    AnimationCurve.linear = "linear";
    AnimationCurve.spring = "spring";
    function cubicBezier(x1, y1, x2, y2) {
        animation = animation || __webpack_require__("../node_modules/@nativescript/core/ui/animation/animation.js");
        return new animation.CubicBezierAnimationCurve(x1, y1, x2, y2);
    }
    AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
var StatusBarStyle;
(function (StatusBarStyle) {
    StatusBarStyle.light = "light";
    StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));
var SystemAppearance;
(function (SystemAppearance) {
    SystemAppearance.light = "light";
    SystemAppearance.dark = "dark";
})(SystemAppearance = exports.SystemAppearance || (exports.SystemAppearance = {}));
//# sourceMappingURL=enums.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/background-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var linear_gradient_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/linear-gradient.js");
var color_1 = __webpack_require__("../node_modules/@nativescript/core/color/color.js");
var Background = (function () {
    function Background() {
        this.borderTopWidth = 0;
        this.borderRightWidth = 0;
        this.borderBottomWidth = 0;
        this.borderLeftWidth = 0;
        this.borderTopLeftRadius = 0;
        this.borderTopRightRadius = 0;
        this.borderBottomLeftRadius = 0;
        this.borderBottomRightRadius = 0;
    }
    Background.prototype.clone = function () {
        var clone = new Background();
        clone.color = this.color;
        clone.image = this.image;
        clone.repeat = this.repeat;
        clone.position = this.position;
        clone.size = this.size;
        clone.borderTopColor = this.borderTopColor;
        clone.borderRightColor = this.borderRightColor;
        clone.borderBottomColor = this.borderBottomColor;
        clone.borderLeftColor = this.borderLeftColor;
        clone.borderTopWidth = this.borderTopWidth;
        clone.borderRightWidth = this.borderRightWidth;
        clone.borderBottomWidth = this.borderBottomWidth;
        clone.borderLeftWidth = this.borderLeftWidth;
        clone.borderTopLeftRadius = this.borderTopLeftRadius;
        clone.borderTopRightRadius = this.borderTopRightRadius;
        clone.borderBottomRightRadius = this.borderBottomRightRadius;
        clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
        clone.clipPath = this.clipPath;
        return clone;
    };
    Background.prototype.withColor = function (value) {
        var clone = this.clone();
        clone.color = value;
        return clone;
    };
    Background.prototype.withImage = function (value) {
        var clone = this.clone();
        clone.image = value;
        return clone;
    };
    Background.prototype.withRepeat = function (value) {
        var clone = this.clone();
        clone.repeat = value;
        return clone;
    };
    Background.prototype.withPosition = function (value) {
        var clone = this.clone();
        clone.position = value;
        return clone;
    };
    Background.prototype.withSize = function (value) {
        var clone = this.clone();
        clone.size = value;
        return clone;
    };
    Background.prototype.withBorderTopColor = function (value) {
        var clone = this.clone();
        clone.borderTopColor = value;
        return clone;
    };
    Background.prototype.withBorderRightColor = function (value) {
        var clone = this.clone();
        clone.borderRightColor = value;
        return clone;
    };
    Background.prototype.withBorderBottomColor = function (value) {
        var clone = this.clone();
        clone.borderBottomColor = value;
        return clone;
    };
    Background.prototype.withBorderLeftColor = function (value) {
        var clone = this.clone();
        clone.borderLeftColor = value;
        return clone;
    };
    Background.prototype.withBorderTopWidth = function (value) {
        var clone = this.clone();
        clone.borderTopWidth = value;
        return clone;
    };
    Background.prototype.withBorderRightWidth = function (value) {
        var clone = this.clone();
        clone.borderRightWidth = value;
        return clone;
    };
    Background.prototype.withBorderBottomWidth = function (value) {
        var clone = this.clone();
        clone.borderBottomWidth = value;
        return clone;
    };
    Background.prototype.withBorderLeftWidth = function (value) {
        var clone = this.clone();
        clone.borderLeftWidth = value;
        return clone;
    };
    Background.prototype.withBorderTopLeftRadius = function (value) {
        var clone = this.clone();
        clone.borderTopLeftRadius = value;
        return clone;
    };
    Background.prototype.withBorderTopRightRadius = function (value) {
        var clone = this.clone();
        clone.borderTopRightRadius = value;
        return clone;
    };
    Background.prototype.withBorderBottomRightRadius = function (value) {
        var clone = this.clone();
        clone.borderBottomRightRadius = value;
        return clone;
    };
    Background.prototype.withBorderBottomLeftRadius = function (value) {
        var clone = this.clone();
        clone.borderBottomLeftRadius = value;
        return clone;
    };
    Background.prototype.withClipPath = function (value) {
        var clone = this.clone();
        clone.clipPath = value;
        return clone;
    };
    Background.prototype.isEmpty = function () {
        return !this.color
            && !this.image
            && !this.hasBorderWidth()
            && !this.hasBorderRadius()
            && !this.clipPath;
    };
    Background.equals = function (value1, value2) {
        if (!value1 && !value2) {
            return true;
        }
        if (!value1 || !value2) {
            return false;
        }
        var imagesEqual = false;
        if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
            imagesEqual = linear_gradient_1.LinearGradient.equals(value1, value2);
        }
        else {
            imagesEqual = value1.image === value2.image;
        }
        return color_1.Color.equals(value1.color, value2.color)
            && imagesEqual
            && value1.position === value2.position
            && value1.repeat === value2.repeat
            && value1.size === value2.size
            && color_1.Color.equals(value1.borderTopColor, value2.borderTopColor)
            && color_1.Color.equals(value1.borderRightColor, value2.borderRightColor)
            && color_1.Color.equals(value1.borderBottomColor, value2.borderBottomColor)
            && color_1.Color.equals(value1.borderLeftColor, value2.borderLeftColor)
            && value1.borderTopWidth === value2.borderTopWidth
            && value1.borderRightWidth === value2.borderRightWidth
            && value1.borderBottomWidth === value2.borderBottomWidth
            && value1.borderLeftWidth === value2.borderLeftWidth
            && value1.borderTopLeftRadius === value2.borderTopLeftRadius
            && value1.borderTopRightRadius === value2.borderTopRightRadius
            && value1.borderBottomRightRadius === value2.borderBottomRightRadius
            && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius
            && value1.clipPath === value2.clipPath;
    };
    Background.prototype.hasBorderColor = function () {
        return !!this.borderTopColor || !!this.borderRightColor || !!this.borderBottomColor || !!this.borderLeftColor;
    };
    Background.prototype.hasBorderWidth = function () {
        return this.borderTopWidth > 0
            || this.borderRightWidth > 0
            || this.borderBottomWidth > 0
            || this.borderLeftWidth > 0;
    };
    Background.prototype.hasBorderRadius = function () {
        return this.borderTopLeftRadius > 0
            || this.borderTopRightRadius > 0
            || this.borderBottomRightRadius > 0
            || this.borderBottomLeftRadius > 0;
    };
    Background.prototype.hasUniformBorderColor = function () {
        return color_1.Color.equals(this.borderTopColor, this.borderRightColor)
            && color_1.Color.equals(this.borderTopColor, this.borderBottomColor)
            && color_1.Color.equals(this.borderTopColor, this.borderLeftColor);
    };
    Background.prototype.hasUniformBorderWidth = function () {
        return this.borderTopWidth === this.borderRightWidth
            && this.borderTopWidth === this.borderBottomWidth
            && this.borderTopWidth === this.borderLeftWidth;
    };
    Background.prototype.hasUniformBorderRadius = function () {
        return this.borderTopLeftRadius === this.borderTopRightRadius
            && this.borderTopLeftRadius === this.borderBottomRightRadius
            && this.borderTopLeftRadius === this.borderBottomLeftRadius;
    };
    Background.prototype.hasUniformBorder = function () {
        return this.hasUniformBorderColor()
            && this.hasUniformBorderWidth()
            && this.hasUniformBorderRadius();
    };
    Background.prototype.getUniformBorderColor = function () {
        if (this.hasUniformBorderColor()) {
            return this.borderTopColor;
        }
        return undefined;
    };
    Background.prototype.getUniformBorderWidth = function () {
        if (this.hasUniformBorderWidth()) {
            return this.borderTopWidth;
        }
        return 0;
    };
    Background.prototype.getUniformBorderRadius = function () {
        if (this.hasUniformBorderRadius()) {
            return this.borderTopLeftRadius;
        }
        return 0;
    };
    Background.prototype.toString = function () {
        return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
    };
    Background.default = new Background();
    return Background;
}());
exports.Background = Background;
//# sourceMappingURL=background-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/background.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var linear_gradient_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/linear-gradient.js");
var color_1 = __webpack_require__("../node_modules/@nativescript/core/color/color.js");
var utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/utils.js");
var image_source_1 = __webpack_require__("../node_modules/@nativescript/core/image-source/image-source.js");
var css_value_1 = __webpack_require__("../node_modules/@nativescript/core/css-value/reworkcss-value.js");
__export(__webpack_require__("../node_modules/@nativescript/core/ui/styling/background-common.js"));
var clearCGColor = UIColor.clearColor.CGColor;
var symbolUrl = Symbol("backgroundImageUrl");
var ios;
(function (ios) {
    function createBackgroundUIColor(view, callback, flip) {
        var background = view.style.backgroundInternal;
        var nativeView = view.nativeViewProtected;
        if (nativeView.hasNonUniformBorder) {
            unsubscribeFromScrollNotifications(view);
            clearNonUniformBorders(nativeView);
        }
        clearGradient(nativeView);
        if (background.image instanceof linear_gradient_1.LinearGradient) {
            drawGradient(nativeView, background.image);
        }
        var hasNonUniformBorderWidths = background.hasBorderWidth() && !background.hasUniformBorder();
        var hasNonUniformBorderRadiuses = background.hasBorderRadius() && !background.hasUniformBorderRadius();
        if (background.hasUniformBorderColor() && (hasNonUniformBorderWidths || hasNonUniformBorderRadiuses)) {
            drawUniformColorNonUniformBorders(nativeView, background);
            subscribeForScrollNotifications(view);
        }
        else if (background.hasUniformBorder()) {
            var layer = nativeView.layer;
            var borderColor = background.getUniformBorderColor();
            layer.borderColor = !borderColor ? undefined : borderColor.ios.CGColor;
            layer.borderWidth = utils_1.layout.toDeviceIndependentPixels(background.getUniformBorderWidth());
            var renderSize = view.getActualSize() || { width: 0, height: 0 };
            var cornerRadius = utils_1.layout.toDeviceIndependentPixels(background.getUniformBorderRadius());
            layer.cornerRadius = Math.min(Math.min(renderSize.width / 2, renderSize.height / 2), cornerRadius);
        }
        else {
            drawNoRadiusNonUniformBorders(nativeView, background);
            subscribeForScrollNotifications(view);
        }
        if (background.clipPath) {
            drawClipPath(nativeView, background);
        }
        if (!background.image || background.image instanceof linear_gradient_1.LinearGradient) {
            var uiColor = background.color ? background.color.ios : undefined;
            callback(uiColor);
        }
        else {
            setUIColorFromImage(view, nativeView, callback, flip);
        }
    }
    ios.createBackgroundUIColor = createBackgroundUIColor;
})(ios = exports.ios || (exports.ios = {}));
function onScroll(args) {
    var view = args.object;
    var nativeView = view.nativeViewProtected;
    if (nativeView instanceof UIScrollView) {
        adjustLayersForScrollView(nativeView);
    }
}
function adjustLayersForScrollView(nativeView) {
    var layer = nativeView.borderLayer;
    if (layer instanceof CALayer) {
        CATransaction.begin();
        CATransaction.setValueForKey(kCFBooleanTrue, kCATransactionDisableActions);
        var offset = nativeView.contentOffset;
        var transform = { a: 1, b: 0, c: 0, d: 1, tx: offset.x, ty: offset.y };
        layer.setAffineTransform(transform);
        if (nativeView.layer.mask) {
            nativeView.layer.mask.setAffineTransform(transform);
        }
        CATransaction.commit();
    }
}
function unsubscribeFromScrollNotifications(view) {
    if (view.nativeViewProtected instanceof UIScrollView) {
        view.off("scroll", onScroll);
    }
}
function subscribeForScrollNotifications(view) {
    if (view.nativeViewProtected instanceof UIScrollView) {
        view.on("scroll", onScroll);
        adjustLayersForScrollView(view.nativeViewProtected);
    }
}
function clearNonUniformBorders(nativeView) {
    if (nativeView.borderLayer) {
        nativeView.borderLayer.removeFromSuperlayer();
    }
    if (nativeView.hasBorderMask) {
        nativeView.layer.mask = nativeView.borderOriginalMask;
        nativeView.hasBorderMask = false;
        nativeView.borderOriginalMask = null;
    }
    if (nativeView.topBorderLayer) {
        nativeView.topBorderLayer.removeFromSuperlayer();
    }
    if (nativeView.rightBorderLayer) {
        nativeView.rightBorderLayer.removeFromSuperlayer();
    }
    if (nativeView.bottomBorderLayer) {
        nativeView.bottomBorderLayer.removeFromSuperlayer();
    }
    if (nativeView.leftBorderLayer) {
        nativeView.leftBorderLayer.removeFromSuperlayer();
    }
}
var pattern = /url\(('|")(.*?)\1\)/;
function setUIColorFromImage(view, nativeView, callback, flip) {
    var frame = nativeView.frame;
    var boundsWidth = view.scaleX ? frame.size.width / view.scaleX : frame.size.width;
    var boundsHeight = view.scaleY ? frame.size.height / view.scaleY : frame.size.height;
    if (!boundsWidth || !boundsHeight) {
        return undefined;
    }
    var style = view.style;
    var background = style.backgroundInternal;
    var imageUri = background.image;
    if (imageUri) {
        var match = imageUri.match(pattern);
        if (match && match[2]) {
            imageUri = match[2];
        }
    }
    var bitmap;
    if (utils_1.isDataURI(imageUri)) {
        var base64Data = imageUri.split(",")[1];
        if (base64Data !== undefined) {
            var imageSource = image_source_1.ImageSource.fromBase64Sync(base64Data);
            bitmap = imageSource && imageSource.ios;
        }
    }
    else if (utils_1.isFileOrResourcePath(imageUri)) {
        var imageSource = image_source_1.ImageSource.fromFileOrResourceSync(imageUri);
        bitmap = imageSource && imageSource.ios;
    }
    else if (imageUri.indexOf("http") !== -1) {
        style[symbolUrl] = imageUri;
        image_source_1.ImageSource.fromUrl(imageUri).then(function (r) {
            if (style && style[symbolUrl] === imageUri) {
                uiColorFromImage(r.ios, view, callback, flip);
            }
        });
    }
    uiColorFromImage(bitmap, view, callback, flip);
}
function parsePosition(pos) {
    var values = css_value_1.parse(pos);
    if (values.length === 2) {
        return { x: values[0], y: values[1] };
    }
    if (values.length === 1 && values[0].type === "ident") {
        var val = values[0].string.toLocaleLowerCase();
        var center = { type: "ident", string: "center" };
        if (val === "left" || val === "right") {
            return { x: values[0], y: center };
        }
        else if (val === "top" || val === "bottom") {
            return { x: center, y: values[0] };
        }
        else if (val === "center") {
            return { x: center, y: center };
        }
    }
    return null;
}
function getDrawParams(image, background, width, height) {
    if (!image) {
        return null;
    }
    var res = {
        repeatX: true,
        repeatY: true,
        posX: 0,
        posY: 0,
    };
    if (background.repeat) {
        switch (background.repeat.toLowerCase()) {
            case "no-repeat":
                res.repeatX = false;
                res.repeatY = false;
                break;
            case "repeat-x":
                res.repeatY = false;
                break;
            case "repeat-y":
                res.repeatX = false;
                break;
        }
    }
    var imageSize = image.size;
    var imageWidth = imageSize.width;
    var imageHeight = imageSize.height;
    var size = background.size;
    if (size) {
        var values = css_value_1.parse(size);
        if (values.length === 2) {
            var vx = values[0];
            var vy = values[1];
            if (vx.unit === "%" && vy.unit === "%") {
                imageWidth = width * vx.value / 100;
                imageHeight = height * vy.value / 100;
                res.sizeX = imageWidth;
                res.sizeY = imageHeight;
            }
            else if (vx.type === "number" && vy.type === "number" &&
                ((vx.unit === "px" && vy.unit === "px") || (vx.unit === "" && vy.unit === ""))) {
                imageWidth = vx.value;
                imageHeight = vy.value;
                res.sizeX = imageWidth;
                res.sizeY = imageHeight;
            }
        }
        else if (values.length === 1 && values[0].type === "ident") {
            var scale = 0;
            if (values[0].string === "cover") {
                scale = Math.max(width / imageWidth, height / imageHeight);
            }
            else if (values[0].string === "contain") {
                scale = Math.min(width / imageWidth, height / imageHeight);
            }
            if (scale > 0) {
                imageWidth *= scale;
                imageHeight *= scale;
                res.sizeX = imageWidth;
                res.sizeY = imageHeight;
            }
        }
    }
    var position = background.position;
    if (position) {
        var v = parsePosition(position);
        if (v) {
            var spaceX = width - imageWidth;
            var spaceY = height - imageHeight;
            if (v.x.unit === "%" && v.y.unit === "%") {
                res.posX = spaceX * v.x.value / 100;
                res.posY = spaceY * v.y.value / 100;
            }
            else if (v.x.type === "number" && v.y.type === "number" &&
                ((v.x.unit === "px" && v.y.unit === "px") || (v.x.unit === "" && v.y.unit === ""))) {
                res.posX = v.x.value;
                res.posY = v.y.value;
            }
            else if (v.x.type === "ident" && v.y.type === "ident") {
                if (v.x.string.toLowerCase() === "center") {
                    res.posX = spaceX / 2;
                }
                else if (v.x.string.toLowerCase() === "right") {
                    res.posX = spaceX;
                }
                if (v.y.string.toLowerCase() === "center") {
                    res.posY = spaceY / 2;
                }
                else if (v.y.string.toLowerCase() === "bottom") {
                    res.posY = spaceY;
                }
            }
        }
    }
    return res;
}
function uiColorFromImage(img, view, callback, flip) {
    var background = view.style.backgroundInternal;
    if (!img) {
        callback(background.color && background.color.ios);
        return;
    }
    var nativeView = view.nativeViewProtected;
    var frame = nativeView.frame;
    var boundsWidth = view.scaleX ? frame.size.width / view.scaleX : frame.size.width;
    var boundsHeight = view.scaleY ? frame.size.height / view.scaleY : frame.size.height;
    var params = getDrawParams(img, background, boundsWidth, boundsHeight);
    if (params.sizeX > 0 && params.sizeY > 0) {
        var resizeRect = CGRectMake(0, 0, params.sizeX, params.sizeY);
        UIGraphicsBeginImageContextWithOptions(resizeRect.size, false, 0.0);
        img.drawInRect(resizeRect);
        img = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
    }
    UIGraphicsBeginImageContextWithOptions(CGSizeFromString("{" + boundsWidth + "," + boundsHeight + "}"), false, 0.0);
    var context = UIGraphicsGetCurrentContext();
    if (background.color && background.color.ios) {
        CGContextSetFillColorWithColor(context, background.color.ios.CGColor);
        CGContextFillRect(context, CGRectMake(0, 0, boundsWidth, boundsHeight));
    }
    if (!params.repeatX && !params.repeatY) {
        img.drawAtPoint(CGPointMake(params.posX, params.posY));
    }
    else {
        var w = params.repeatX ? boundsWidth : img.size.width;
        var h = params.repeatY ? boundsHeight : img.size.height;
        CGContextSetPatternPhase(context, CGSizeMake(params.posX, params.posY));
        params.posX = params.repeatX ? 0 : params.posX;
        params.posY = params.repeatY ? 0 : params.posY;
        var patternRect = CGRectMake(params.posX, params.posY, w, h);
        img.drawAsPatternInRect(patternRect);
    }
    var bkgImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    if (flip) {
        var flippedImage = _flipImage(bkgImage);
        callback(UIColor.alloc().initWithPatternImage(flippedImage));
    }
    else {
        callback(UIColor.alloc().initWithPatternImage(bkgImage));
    }
}
function _flipImage(originalImage) {
    UIGraphicsBeginImageContextWithOptions(originalImage.size, false, 0.0);
    var context = UIGraphicsGetCurrentContext();
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 0.0, originalImage.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);
    originalImage.drawInRect(CGRectMake(0, 0, originalImage.size.width, originalImage.size.height));
    CGContextRestoreGState(context);
    var flippedImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return flippedImage;
}
function cssValueToDeviceIndependentPixels(source, total) {
    source = source.trim();
    if (source.indexOf("px") !== -1) {
        return utils_1.layout.toDeviceIndependentPixels(parseFloat(source.replace("px", "")));
    }
    else if (source.indexOf("%") !== -1 && total > 0) {
        return (parseFloat(source.replace("%", "")) / 100) * total;
    }
    else {
        return parseFloat(source);
    }
}
function drawUniformColorNonUniformBorders(nativeView, background) {
    var layer = nativeView.layer;
    layer.backgroundColor = undefined;
    layer.borderColor = undefined;
    layer.borderWidth = 0;
    layer.cornerRadius = 0;
    var _a = layer.bounds.size, width = _a.width, height = _a.height;
    var _b = layer.bounds.origin, x = _b.x, y = _b.y;
    var left = x;
    var top = y;
    var right = x + width;
    var bottom = y + height;
    var min = Math.min, max = Math.max;
    var borderTopWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderTopWidth));
    var borderRightWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderRightWidth));
    var borderBottomWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderBottomWidth));
    var borderLeftWidth = max(0, utils_1.layout.toDeviceIndependentPixels(background.borderLeftWidth));
    var borderVWidth = borderTopWidth + borderBottomWidth;
    var borderHWidth = borderLeftWidth + borderRightWidth;
    var cappedBorderTopWidth = borderTopWidth && borderTopWidth * min(1, height / borderVWidth);
    var cappedBorderRightWidth = borderRightWidth && borderRightWidth * min(1, width / borderHWidth);
    var cappedBorderBottomWidth = borderBottomWidth && borderBottomWidth * min(1, height / borderVWidth);
    var cappedBorderLeftWidth = borderLeftWidth && borderLeftWidth * min(1, width / borderHWidth);
    var outerTopLeftRadius = utils_1.layout.toDeviceIndependentPixels(background.borderTopLeftRadius);
    var outerTopRightRadius = utils_1.layout.toDeviceIndependentPixels(background.borderTopRightRadius);
    var outerBottomRightRadius = utils_1.layout.toDeviceIndependentPixels(background.borderBottomRightRadius);
    var outerBottomLeftRadius = utils_1.layout.toDeviceIndependentPixels(background.borderBottomLeftRadius);
    var topRadii = outerTopLeftRadius + outerTopRightRadius;
    var rightRadii = outerTopRightRadius + outerBottomRightRadius;
    var bottomRadii = outerBottomRightRadius + outerBottomLeftRadius;
    var leftRadii = outerBottomLeftRadius + outerTopLeftRadius;
    function capRadius(a, b, c) {
        return a && Math.min(a, Math.min(b, c));
    }
    var cappedOuterTopLeftRadius = capRadius(outerTopLeftRadius, outerTopLeftRadius / topRadii * width, outerTopLeftRadius / leftRadii * height);
    var cappedOuterTopRightRadius = capRadius(outerTopRightRadius, outerTopRightRadius / topRadii * width, outerTopRightRadius / rightRadii * height);
    var cappedOuterBottomRightRadius = capRadius(outerBottomRightRadius, outerBottomRightRadius / bottomRadii * width, outerBottomRightRadius / rightRadii * height);
    var cappedOuterBottomLeftRadius = capRadius(outerBottomLeftRadius, outerBottomLeftRadius / bottomRadii * width, outerBottomLeftRadius / leftRadii * height);
    var clipPath = CGPathCreateMutable();
    CGPathMoveToPoint(clipPath, null, left + cappedOuterTopLeftRadius, top);
    CGPathAddArcToPoint(clipPath, null, right, top, right, top + cappedOuterTopRightRadius, cappedOuterTopRightRadius);
    CGPathAddArcToPoint(clipPath, null, right, bottom, right - cappedOuterBottomRightRadius, bottom, cappedOuterBottomRightRadius);
    CGPathAddArcToPoint(clipPath, null, left, bottom, left, bottom - cappedOuterBottomLeftRadius, cappedOuterBottomLeftRadius);
    CGPathAddArcToPoint(clipPath, null, left, top, left + cappedOuterTopLeftRadius, top, cappedOuterTopLeftRadius);
    CGPathCloseSubpath(clipPath);
    nativeView.borderOriginalMask = layer.mask;
    var clipShapeLayer = CAShapeLayer.layer();
    clipShapeLayer.path = clipPath;
    layer.mask = clipShapeLayer;
    nativeView.hasBorderMask = true;
    if (cappedBorderLeftWidth > 0 || cappedBorderTopWidth > 0 || cappedBorderRightWidth > 0 || cappedBorderBottomWidth > 0) {
        var borderPath = CGPathCreateMutable();
        CGPathAddRect(borderPath, null, CGRectMake(left, top, width, height));
        if (cappedBorderTopWidth > 0 || cappedBorderLeftWidth > 0) {
            CGPathMoveToPoint(borderPath, null, left + cappedOuterTopLeftRadius, top + cappedBorderTopWidth);
        }
        else {
            CGPathMoveToPoint(borderPath, null, left, top);
        }
        if (cappedBorderTopWidth > 0 || cappedBorderRightWidth > 0) {
            var innerTopRightWRadius = max(0, cappedOuterTopRightRadius - cappedBorderRightWidth);
            var innerTopRightHRadius = max(0, cappedOuterTopRightRadius - cappedBorderTopWidth);
            var innerTopRightMaxRadius = max(innerTopRightWRadius, innerTopRightHRadius);
            var innerTopRightTransform = CGAffineTransformMake(innerTopRightMaxRadius && innerTopRightWRadius / innerTopRightMaxRadius, 0, 0, innerTopRightMaxRadius && innerTopRightHRadius / innerTopRightMaxRadius, right - cappedBorderRightWidth - innerTopRightWRadius, top + cappedBorderTopWidth + innerTopRightHRadius);
            CGPathAddArc(borderPath, innerTopRightTransform, 0, 0, innerTopRightMaxRadius, Math.PI * 3 / 2, 0, false);
        }
        else {
            CGPathMoveToPoint(borderPath, null, right, top);
        }
        if (cappedBorderBottomWidth > 0 || cappedBorderRightWidth > 0) {
            var innerBottomRightWRadius = max(0, cappedOuterBottomRightRadius - cappedBorderRightWidth);
            var innerBottomRightHRadius = max(0, cappedOuterBottomRightRadius - cappedBorderBottomWidth);
            var innerBottomRightMaxRadius = max(innerBottomRightWRadius, innerBottomRightHRadius);
            var innerBottomRightTransform = CGAffineTransformMake(innerBottomRightMaxRadius && innerBottomRightWRadius / innerBottomRightMaxRadius, 0, 0, innerBottomRightMaxRadius && innerBottomRightHRadius / innerBottomRightMaxRadius, right - cappedBorderRightWidth - innerBottomRightWRadius, bottom - cappedBorderBottomWidth - innerBottomRightHRadius);
            CGPathAddArc(borderPath, innerBottomRightTransform, 0, 0, innerBottomRightMaxRadius, 0, Math.PI / 2, false);
        }
        else {
            CGPathAddLineToPoint(borderPath, null, right, bottom);
        }
        if (cappedBorderBottomWidth > 0 || cappedBorderLeftWidth > 0) {
            var innerBottomLeftWRadius = max(0, cappedOuterBottomLeftRadius - cappedBorderLeftWidth);
            var innerBottomLeftHRadius = max(0, cappedOuterBottomLeftRadius - cappedBorderBottomWidth);
            var innerBottomLeftMaxRadius = max(innerBottomLeftWRadius, innerBottomLeftHRadius);
            var innerBottomLeftTransform = CGAffineTransformMake(innerBottomLeftMaxRadius && innerBottomLeftWRadius / innerBottomLeftMaxRadius, 0, 0, innerBottomLeftMaxRadius && innerBottomLeftHRadius / innerBottomLeftMaxRadius, left + cappedBorderLeftWidth + innerBottomLeftWRadius, bottom - cappedBorderBottomWidth - innerBottomLeftHRadius);
            CGPathAddArc(borderPath, innerBottomLeftTransform, 0, 0, innerBottomLeftMaxRadius, Math.PI / 2, Math.PI, false);
        }
        else {
            CGPathAddLineToPoint(borderPath, null, left, bottom);
        }
        if (cappedBorderTopWidth > 0 || cappedBorderLeftWidth > 0) {
            var innerTopLeftWRadius = max(0, cappedOuterTopLeftRadius - cappedBorderLeftWidth);
            var innerTopLeftHRadius = max(0, cappedOuterTopLeftRadius - cappedBorderTopWidth);
            var innerTopLeftMaxRadius = max(innerTopLeftWRadius, innerTopLeftHRadius);
            var innerTopLeftTransform = CGAffineTransformMake(innerTopLeftMaxRadius && innerTopLeftWRadius / innerTopLeftMaxRadius, 0, 0, innerTopLeftMaxRadius && innerTopLeftHRadius / innerTopLeftMaxRadius, left + cappedBorderLeftWidth + innerTopLeftWRadius, top + cappedBorderTopWidth + innerTopLeftHRadius);
            CGPathAddArc(borderPath, innerTopLeftTransform, 0, 0, innerTopLeftMaxRadius, Math.PI, Math.PI * 3 / 2, false);
        }
        else {
            CGPathAddLineToPoint(borderPath, null, left, top);
        }
        CGPathCloseSubpath(borderPath);
        var borderLayer = CAShapeLayer.layer();
        borderLayer.fillColor = background.borderTopColor && background.borderTopColor.ios.CGColor || UIColor.blackColor.CGColor;
        borderLayer.fillRule = kCAFillRuleEvenOdd;
        borderLayer.path = borderPath;
        layer.addSublayer(borderLayer);
        nativeView.borderLayer = borderLayer;
    }
    nativeView.hasNonUniformBorder = true;
}
function drawNoRadiusNonUniformBorders(nativeView, background) {
    var borderLayer = CALayer.layer();
    nativeView.layer.addSublayer(borderLayer);
    nativeView.borderLayer = borderLayer;
    borderLayer.borderColor = undefined;
    borderLayer.borderWidth = 0;
    borderLayer.cornerRadius = 0;
    var layerBounds = nativeView.layer.bounds;
    var layerOrigin = layerBounds.origin;
    var layerSize = layerBounds.size;
    var nativeViewLayerBounds = {
        left: layerOrigin.x,
        top: layerOrigin.y,
        bottom: layerSize.height,
        right: layerSize.width
    };
    var top = utils_1.layout.toDeviceIndependentPixels(background.borderTopWidth);
    var right = utils_1.layout.toDeviceIndependentPixels(background.borderRightWidth);
    var bottom = utils_1.layout.toDeviceIndependentPixels(background.borderBottomWidth);
    var left = utils_1.layout.toDeviceIndependentPixels(background.borderLeftWidth);
    var lto = { x: nativeViewLayerBounds.left, y: nativeViewLayerBounds.top };
    var lti = { x: nativeViewLayerBounds.left + left, y: nativeViewLayerBounds.top + top };
    var rto = { x: nativeViewLayerBounds.right, y: nativeViewLayerBounds.top };
    var rti = { x: nativeViewLayerBounds.right - right, y: nativeViewLayerBounds.top + top };
    var rbo = { x: nativeViewLayerBounds.right, y: nativeViewLayerBounds.bottom };
    var rbi = { x: nativeViewLayerBounds.right - right, y: nativeViewLayerBounds.bottom - bottom };
    var lbo = { x: nativeViewLayerBounds.left, y: nativeViewLayerBounds.bottom };
    var lbi = { x: nativeViewLayerBounds.left + left, y: nativeViewLayerBounds.bottom - bottom };
    var hasNonUniformBorder;
    var borderTopColor = background.borderTopColor;
    if (top > 0 && borderTopColor && borderTopColor.ios) {
        var topBorderPath = CGPathCreateMutable();
        CGPathMoveToPoint(topBorderPath, null, lto.x, lto.y);
        CGPathAddLineToPoint(topBorderPath, null, rto.x, rto.y);
        CGPathAddLineToPoint(topBorderPath, null, rti.x, rti.y);
        CGPathAddLineToPoint(topBorderPath, null, lti.x, lti.y);
        CGPathAddLineToPoint(topBorderPath, null, lto.x, lto.y);
        var topBorderLayer = CAShapeLayer.layer();
        topBorderLayer.fillColor = background.borderTopColor.ios.CGColor;
        topBorderLayer.path = topBorderPath;
        borderLayer.addSublayer(topBorderLayer);
        nativeView.topBorderLayer = topBorderLayer;
        hasNonUniformBorder = true;
    }
    var borderRightColor = background.borderRightColor;
    if (right > 0 && borderRightColor && borderRightColor.ios) {
        var rightBorderPath = CGPathCreateMutable();
        CGPathMoveToPoint(rightBorderPath, null, rto.x, rto.y);
        CGPathAddLineToPoint(rightBorderPath, null, rbo.x, rbo.y);
        CGPathAddLineToPoint(rightBorderPath, null, rbi.x, rbi.y);
        CGPathAddLineToPoint(rightBorderPath, null, rti.x, rti.y);
        CGPathAddLineToPoint(rightBorderPath, null, rto.x, rto.y);
        var rightBorderLayer = CAShapeLayer.layer();
        rightBorderLayer.fillColor = background.borderRightColor.ios.CGColor;
        rightBorderLayer.path = rightBorderPath;
        borderLayer.addSublayer(rightBorderLayer);
        nativeView.rightBorderLayer = rightBorderLayer;
        hasNonUniformBorder = true;
    }
    var borderBottomColor = background.borderBottomColor;
    if (bottom > 0 && borderBottomColor && borderBottomColor.ios) {
        var bottomBorderPath = CGPathCreateMutable();
        CGPathMoveToPoint(bottomBorderPath, null, rbo.x, rbo.y);
        CGPathAddLineToPoint(bottomBorderPath, null, lbo.x, lbo.y);
        CGPathAddLineToPoint(bottomBorderPath, null, lbi.x, lbi.y);
        CGPathAddLineToPoint(bottomBorderPath, null, rbi.x, rbi.y);
        CGPathAddLineToPoint(bottomBorderPath, null, rbo.x, rbo.y);
        var bottomBorderLayer = CAShapeLayer.layer();
        bottomBorderLayer.fillColor = background.borderBottomColor.ios.CGColor;
        bottomBorderLayer.path = bottomBorderPath;
        borderLayer.addSublayer(bottomBorderLayer);
        nativeView.bottomBorderLayer = bottomBorderLayer;
        hasNonUniformBorder = true;
    }
    var borderLeftColor = background.borderLeftColor;
    if (left > 0 && borderLeftColor && borderLeftColor.ios) {
        var leftBorderPath = CGPathCreateMutable();
        CGPathMoveToPoint(leftBorderPath, null, lbo.x, lbo.y);
        CGPathAddLineToPoint(leftBorderPath, null, lto.x, lto.y);
        CGPathAddLineToPoint(leftBorderPath, null, lti.x, lti.y);
        CGPathAddLineToPoint(leftBorderPath, null, lbi.x, lbi.y);
        CGPathAddLineToPoint(leftBorderPath, null, lbo.x, lbo.y);
        var leftBorderLayer = CAShapeLayer.layer();
        leftBorderLayer.fillColor = background.borderLeftColor.ios.CGColor;
        leftBorderLayer.path = leftBorderPath;
        borderLayer.addSublayer(leftBorderLayer);
        nativeView.leftBorderLayer = leftBorderLayer;
        hasNonUniformBorder = true;
    }
    nativeView.hasNonUniformBorder = hasNonUniformBorder;
}
function drawGradient(nativeView, gradient) {
    var gradientLayer = CAGradientLayer.layer();
    gradientLayer.frame = nativeView.bounds;
    nativeView.gradientLayer = gradientLayer;
    var iosColors = NSMutableArray.alloc().initWithCapacity(gradient.colorStops.length);
    var iosStops = NSMutableArray.alloc().initWithCapacity(gradient.colorStops.length);
    var hasStops = false;
    gradient.colorStops.forEach(function (stop) {
        iosColors.addObject(stop.color.ios.CGColor);
        if (stop.offset) {
            iosStops.addObject(stop.offset.value);
            hasStops = true;
        }
    });
    gradientLayer.colors = iosColors;
    if (hasStops) {
        gradientLayer.locations = iosStops;
    }
    var alpha = gradient.angle / (Math.PI * 2);
    var startX = Math.pow(Math.sin(Math.PI * (alpha + 0.75)), 2);
    var startY = Math.pow(Math.sin(Math.PI * (alpha + 0.5)), 2);
    var endX = Math.pow(Math.sin(Math.PI * (alpha + 0.25)), 2);
    var endY = Math.pow(Math.sin(Math.PI * alpha), 2);
    gradientLayer.startPoint = { x: startX, y: startY };
    gradientLayer.endPoint = { x: endX, y: endY };
    nativeView.layer.insertSublayerAtIndex(gradientLayer, 0);
}
function clearGradient(nativeView) {
    if (nativeView.gradientLayer) {
        nativeView.gradientLayer.removeFromSuperlayer();
    }
}
function drawClipPath(nativeView, background) {
    var layer = nativeView.layer;
    var layerBounds = layer.bounds;
    var layerOrigin = layerBounds.origin;
    var layerSize = layerBounds.size;
    var bounds = {
        left: layerOrigin.x,
        top: layerOrigin.y,
        bottom: layerSize.height,
        right: layerSize.width
    };
    if (bounds.right === 0 || bounds.bottom === 0) {
        return;
    }
    var path;
    var clipPath = background.clipPath;
    var functionName = clipPath.substring(0, clipPath.indexOf("("));
    var value = clipPath.replace(functionName + "(", "").replace(")", "");
    switch (functionName) {
        case "rect":
            path = rectPath(value, bounds);
            break;
        case "inset":
            path = insetPath(value, bounds);
            break;
        case "circle":
            path = circlePath(value, bounds);
            break;
        case "ellipse":
            path = ellipsePath(value, bounds);
            break;
        case "polygon":
            path = polygonPath(value, bounds);
            break;
    }
    if (path) {
        var shape = CAShapeLayer.layer();
        shape.path = path;
        layer.mask = shape;
        nativeView.clipsToBounds = true;
        var borderWidth = background.getUniformBorderWidth();
        var borderColor = background.getUniformBorderColor();
        if (borderWidth > 0 && borderColor instanceof color_1.Color) {
            var borderLayer = CAShapeLayer.layer();
            borderLayer.path = path;
            borderLayer.lineWidth = borderWidth * 2;
            borderLayer.strokeColor = borderColor.ios.CGColor;
            borderLayer.fillColor = clearCGColor;
            borderLayer.frame = nativeView.bounds;
            layer.borderColor = undefined;
            layer.borderWidth = 0;
            layer.addSublayer(borderLayer);
        }
    }
}
function rectPath(value, bounds) {
    var arr = value.split(/[\s]+/);
    var top = cssValueToDeviceIndependentPixels(arr[0], bounds.top);
    var right = cssValueToDeviceIndependentPixels(arr[1], bounds.right);
    var bottom = cssValueToDeviceIndependentPixels(arr[2], bounds.bottom);
    var left = cssValueToDeviceIndependentPixels(arr[3], bounds.left);
    return UIBezierPath.bezierPathWithRect(CGRectMake(left, top, right - left, bottom - top)).CGPath;
}
function insetPath(value, bounds) {
    var arr = value.split(/[\s]+/);
    var topString;
    var rightString;
    var bottomString;
    var leftString;
    if (arr.length === 1) {
        topString = rightString = bottomString = leftString = arr[0];
    }
    else if (arr.length === 2) {
        topString = bottomString = arr[0];
        rightString = leftString = arr[1];
    }
    else if (arr.length === 3) {
        topString = arr[0];
        rightString = leftString = arr[1];
        bottomString = arr[2];
    }
    else if (arr.length === 4) {
        topString = arr[0];
        rightString = arr[1];
        bottomString = arr[2];
        leftString = arr[3];
    }
    var top = cssValueToDeviceIndependentPixels(topString, bounds.bottom);
    var right = cssValueToDeviceIndependentPixels("100%", bounds.right) - cssValueToDeviceIndependentPixels(rightString, bounds.right);
    var bottom = cssValueToDeviceIndependentPixels("100%", bounds.bottom) - cssValueToDeviceIndependentPixels(bottomString, bounds.bottom);
    var left = cssValueToDeviceIndependentPixels(leftString, bounds.right);
    return UIBezierPath.bezierPathWithRect(CGRectMake(left, top, right - left, bottom - top)).CGPath;
}
function circlePath(value, bounds) {
    var arr = value.split(/[\s]+/);
    var radius = cssValueToDeviceIndependentPixels(arr[0], (bounds.right > bounds.bottom ? bounds.bottom : bounds.right) / 2);
    var y = cssValueToDeviceIndependentPixels(arr[2], bounds.bottom);
    var x = cssValueToDeviceIndependentPixels(arr[3], bounds.right);
    return UIBezierPath.bezierPathWithArcCenterRadiusStartAngleEndAngleClockwise(CGPointMake(x, y), radius, 0, 360, true).CGPath;
}
function ellipsePath(value, bounds) {
    var arr = value.split(/[\s]+/);
    var rX = cssValueToDeviceIndependentPixels(arr[0], bounds.right);
    var rY = cssValueToDeviceIndependentPixels(arr[1], bounds.bottom);
    var cX = cssValueToDeviceIndependentPixels(arr[3], bounds.right);
    var cY = cssValueToDeviceIndependentPixels(arr[4], bounds.bottom);
    var left = cX - rX;
    var top = cY - rY;
    var width = rX * 2;
    var height = rY * 2;
    return UIBezierPath.bezierPathWithOvalInRect(CGRectMake(left, top, width, height)).CGPath;
}
function polygonPath(value, bounds) {
    var path = CGPathCreateMutable();
    var firstPoint;
    var arr = value.split(/[,]+/);
    for (var i = 0; i < arr.length; i++) {
        var xy = arr[i].trim().split(/[\s]+/);
        var point = {
            x: cssValueToDeviceIndependentPixels(xy[0], bounds.right),
            y: cssValueToDeviceIndependentPixels(xy[1], bounds.bottom)
        };
        if (!firstPoint) {
            firstPoint = point;
            CGPathMoveToPoint(path, null, point.x, point.y);
        }
        CGPathAddLineToPoint(path, null, point.x, point.y);
    }
    CGPathAddLineToPoint(path, null, firstPoint.x, firstPoint.y);
    return path;
}
//# sourceMappingURL=background.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/font-common.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var properties_1 = __webpack_require__("../node_modules/@nativescript/core/ui/core/properties/properties.js");
var Font = (function () {
    function Font(fontFamily, fontSize, fontStyle, fontWeight) {
        this.fontFamily = fontFamily;
        this.fontSize = fontSize;
        this.fontStyle = fontStyle;
        this.fontWeight = fontWeight;
    }
    Object.defineProperty(Font.prototype, "isItalic", {
        get: function () {
            return this.fontStyle === FontStyle.ITALIC;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Font.prototype, "isBold", {
        get: function () {
            return this.fontWeight === FontWeight.SEMI_BOLD ||
                this.fontWeight === FontWeight.BOLD ||
                this.fontWeight === "700" ||
                this.fontWeight === FontWeight.EXTRA_BOLD ||
                this.fontWeight === FontWeight.BLACK;
        },
        enumerable: true,
        configurable: true
    });
    Font.equals = function (value1, value2) {
        if (!value1 && !value2) {
            return true;
        }
        if (!value1 || !value2) {
            return false;
        }
        return value1.fontFamily === value2.fontFamily &&
            value1.fontSize === value2.fontSize &&
            value1.fontStyle === value2.fontStyle &&
            value1.fontWeight === value2.fontWeight;
    };
    Font.default = undefined;
    return Font;
}());
exports.Font = Font;
var FontStyle;
(function (FontStyle) {
    FontStyle.NORMAL = "normal";
    FontStyle.ITALIC = "italic";
    FontStyle.isValid = properties_1.makeValidator(FontStyle.NORMAL, FontStyle.ITALIC);
    FontStyle.parse = properties_1.makeParser(FontStyle.isValid);
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function (FontWeight) {
    FontWeight.THIN = "100";
    FontWeight.EXTRA_LIGHT = "200";
    FontWeight.LIGHT = "300";
    FontWeight.NORMAL = "normal";
    FontWeight.MEDIUM = "500";
    FontWeight.SEMI_BOLD = "600";
    FontWeight.BOLD = "bold";
    FontWeight.EXTRA_BOLD = "800";
    FontWeight.BLACK = "900";
    FontWeight.isValid = properties_1.makeValidator(FontWeight.THIN, FontWeight.EXTRA_LIGHT, FontWeight.LIGHT, FontWeight.NORMAL, "400", FontWeight.MEDIUM, FontWeight.SEMI_BOLD, FontWeight.BOLD, "700", FontWeight.EXTRA_BOLD, FontWeight.BLACK);
    FontWeight.parse = properties_1.makeParser(FontWeight.isValid);
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
function parseFontFamily(value) {
    var result = new Array();
    if (!value) {
        return result;
    }
    var split = value.split(",");
    for (var i = 0; i < split.length; i++) {
        var str = split[i].trim().replace(/['"]+/g, "");
        if (str) {
            result.push(str);
        }
    }
    return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function (genericFontFamilies) {
    genericFontFamilies.serif = "serif";
    genericFontFamilies.sansSerif = "sans-serif";
    genericFontFamilies.monospace = "monospace";
    genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[
    FontStyle.NORMAL,
    FontStyle.ITALIC
].forEach(function (val, i, a) { return styles.add(val); });
var weights = new Set();
[
    FontWeight.THIN,
    FontWeight.EXTRA_LIGHT,
    FontWeight.LIGHT,
    FontWeight.NORMAL,
    "400",
    FontWeight.MEDIUM,
    FontWeight.SEMI_BOLD,
    FontWeight.BOLD,
    "700",
    FontWeight.EXTRA_BOLD,
    FontWeight.BLACK
].forEach(function (val, i, a) { return weights.add(val); });
function parseFont(fontValue) {
    var result = {
        fontStyle: "normal",
        fontVariant: "normal",
        fontWeight: "normal"
    };
    var parts = fontValue.split(/\s+/);
    var part;
    while (part = parts.shift()) {
        if (part === "normal") {
        }
        else if (part === "small-caps") {
            result.fontVariant = part;
        }
        else if (styles.has(part)) {
            result.fontStyle = part;
        }
        else if (weights.has(part)) {
            result.fontWeight = part;
        }
        else if (!result.fontSize) {
            var sizes = part.split("/");
            result.fontSize = sizes[0];
            result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
        }
        else {
            result.fontFamily = part;
            if (parts.length) {
                result.fontFamily += " " + parts.join(" ");
            }
            break;
        }
    }
    return result;
}
exports.parseFont = parseFont;
//# sourceMappingURL=font-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/font.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var font_common_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/font-common.js");
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
var platform_1 = __webpack_require__("../node_modules/@nativescript/core/platform/platform.js");
var fs = __webpack_require__("../node_modules/@nativescript/core/file-system/file-system.js");
__export(__webpack_require__("../node_modules/@nativescript/core/ui/styling/font-common.js"));
var EMULATE_OBLIQUE = true;
var OBLIQUE_TRANSFORM = CGAffineTransformMake(1, 0, 0.2, 1, 0, 0);
var DEFAULT_SERIF = "Times New Roman";
var DEFAULT_MONOSPACE = "Courier New";
var SUPPORT_FONT_WEIGHTS = parseFloat(platform_1.device.osVersion) >= 10.0;
var Font = (function (_super) {
    __extends(Font, _super);
    function Font(family, size, style, weight) {
        return _super.call(this, family, size, style, weight) || this;
    }
    Font.prototype.withFontFamily = function (family) {
        return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
    };
    Font.prototype.withFontStyle = function (style) {
        return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
    };
    Font.prototype.withFontWeight = function (weight) {
        return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
    };
    Font.prototype.withFontSize = function (size) {
        return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
    };
    Font.prototype.getUIFont = function (defaultFont) {
        if (!this._uiFont) {
            this._uiFont = createUIFont(this, defaultFont);
        }
        return this._uiFont;
    };
    Font.prototype.getAndroidTypeface = function () {
        return undefined;
    };
    Font.default = new Font(undefined, undefined, font_common_1.FontStyle.NORMAL, font_common_1.FontWeight.NORMAL);
    return Font;
}(font_common_1.Font));
exports.Font = Font;
function getFontFamilyRespectingGenericFonts(fontFamily) {
    if (!fontFamily) {
        return fontFamily;
    }
    switch (fontFamily.toLowerCase()) {
        case font_common_1.genericFontFamilies.serif:
            return DEFAULT_SERIF;
        case font_common_1.genericFontFamilies.monospace:
            return DEFAULT_MONOSPACE;
        default:
            return fontFamily;
    }
}
function shouldUseSystemFont(fontFamily) {
    return !fontFamily ||
        fontFamily === font_common_1.genericFontFamilies.sansSerif ||
        fontFamily === font_common_1.genericFontFamilies.system;
}
function getNativeFontWeight(fontWeight) {
    switch (fontWeight) {
        case font_common_1.FontWeight.THIN:
            return UIFontWeightUltraLight;
        case font_common_1.FontWeight.EXTRA_LIGHT:
            return UIFontWeightThin;
        case font_common_1.FontWeight.LIGHT:
            return UIFontWeightLight;
        case font_common_1.FontWeight.NORMAL:
        case "400":
        case undefined:
        case null:
            return UIFontWeightRegular;
        case font_common_1.FontWeight.MEDIUM:
            return UIFontWeightMedium;
        case font_common_1.FontWeight.SEMI_BOLD:
            return UIFontWeightSemibold;
        case font_common_1.FontWeight.BOLD:
        case "700":
            return UIFontWeightBold;
        case font_common_1.FontWeight.EXTRA_BOLD:
            return UIFontWeightHeavy;
        case font_common_1.FontWeight.BLACK:
            return UIFontWeightBlack;
        default:
            throw new Error("Invalid font weight: \"" + fontWeight + "\"");
    }
}
function getSystemFont(size, nativeWeight, italic, symbolicTraits) {
    var result = UIFont.systemFontOfSizeWeight(size, nativeWeight);
    if (italic) {
        var descriptor = result.fontDescriptor.fontDescriptorWithSymbolicTraits(symbolicTraits);
        result = UIFont.fontWithDescriptorSize(descriptor, size);
    }
    return result;
}
function createUIFont(font, defaultFont) {
    var _a, _b;
    var result;
    var size = font.fontSize || defaultFont.pointSize;
    var nativeWeight = getNativeFontWeight(font.fontWeight);
    var fontFamilies = font_common_1.parseFontFamily(font.fontFamily);
    var symbolicTraits = 0;
    if (font.isBold) {
        symbolicTraits |= 2;
    }
    if (font.isItalic) {
        symbolicTraits |= 1;
    }
    var fontDescriptorTraits = (_a = {},
        _a[UIFontSymbolicTrait] = symbolicTraits,
        _a);
    if (SUPPORT_FONT_WEIGHTS) {
        fontDescriptorTraits[UIFontWeightTrait] = nativeWeight;
    }
    for (var i = 0; i < fontFamilies.length; i++) {
        var fontFamily = getFontFamilyRespectingGenericFonts(fontFamilies[i]);
        if (shouldUseSystemFont(fontFamily)) {
            result = getSystemFont(size, nativeWeight, font.isItalic, symbolicTraits);
            break;
        }
        else {
            var fontAttributes = (_b = {},
                _b[UIFontDescriptorFamilyAttribute] = fontFamily,
                _b[UIFontDescriptorTraitsAttribute] = fontDescriptorTraits,
                _b);
            var descriptor = UIFontDescriptor.fontDescriptorWithFontAttributes(fontAttributes);
            result = UIFont.fontWithDescriptorSize(descriptor, size);
            var actualItalic = result.fontDescriptor.symbolicTraits & 1;
            if (font.isItalic && !actualItalic && EMULATE_OBLIQUE) {
                descriptor = descriptor.fontDescriptorWithMatrix(OBLIQUE_TRANSFORM);
                result = UIFont.fontWithDescriptorSize(descriptor, size);
            }
            if (result.familyName === fontFamily) {
                break;
            }
            else {
                result = null;
            }
        }
    }
    if (!result) {
        result = getSystemFont(size, nativeWeight, font.isItalic, symbolicTraits);
    }
    return result;
}
var ios;
(function (ios) {
    function registerFont(fontFile) {
        var filePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFile);
        if (!fs.File.exists(filePath)) {
            filePath = fs.path.join(fs.knownFolders.currentApp().path, fontFile);
        }
        var fontData = NSFileManager.defaultManager.contentsAtPath(filePath);
        if (!fontData) {
            throw new Error("Could not load font from: " + fontFile);
        }
        var provider = CGDataProviderCreateWithCFData(fontData);
        var font = CGFontCreateWithDataProvider(provider);
        if (!font) {
            throw new Error("Could not load font from: " + fontFile);
        }
        var error = new interop.Reference();
        if (!CTFontManagerRegisterGraphicsFont(font, error)) {
            if (trace_1.isEnabled()) {
                trace_1.write("Error occur while registering font: " + CFErrorCopyDescription(error.value), trace_1.categories.Error, trace_1.messageType.error);
            }
        }
    }
    ios.registerFont = registerFont;
})(ios = exports.ios || (exports.ios = {}));
function registerFontsInFolder(fontsFolderPath) {
    var fontsFolder = fs.Folder.fromPath(fontsFolderPath);
    fontsFolder.eachEntity(function (fileEntity) {
        if (fs.Folder.exists(fs.path.join(fontsFolderPath, fileEntity.name))) {
            return true;
        }
        if (fileEntity instanceof fs.File &&
            (fileEntity.extension === ".ttf" || fileEntity.extension === ".otf")) {
            ios.registerFont(fileEntity.name);
        }
        return true;
    });
}
function registerCustomFonts() {
    var appDir = fs.knownFolders.currentApp().path;
    var fontsDir = fs.path.join(appDir, "fonts");
    if (fs.Folder.exists(fontsDir)) {
        registerFontsInFolder(fontsDir);
    }
}
registerCustomFonts();
//# sourceMappingURL=font.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/linear-gradient.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__("../node_modules/@nativescript/core/color/color.js");
var LinearGradient = (function () {
    function LinearGradient() {
    }
    LinearGradient.parse = function (value) {
        var result = new LinearGradient();
        result.angle = value.angle;
        result.colorStops = value.colors.map(function (color) {
            var offset = color.offset || null;
            var offsetUnit;
            if (offset && offset.unit === "%") {
                offsetUnit = {
                    unit: "%",
                    value: offset.value
                };
            }
            return {
                color: new color_1.Color(color.argb),
                offset: offsetUnit
            };
        });
        return result;
    };
    LinearGradient.equals = function (first, second) {
        if (!first && !second) {
            return true;
        }
        else if (!first || !second) {
            return false;
        }
        if (first.angle !== second.angle) {
            return false;
        }
        if (first.colorStops.length !== second.colorStops.length) {
            return false;
        }
        for (var i = 0; i < first.colorStops.length; i++) {
            var firstStop = first.colorStops[i];
            var secondStop = second.colorStops[i];
            if (firstStop.offset !== secondStop.offset) {
                return false;
            }
            if (!color_1.Color.equals(firstStop.color, secondStop.color)) {
                return false;
            }
        }
        return true;
    };
    return LinearGradient;
}());
exports.LinearGradient = LinearGradient;
//# sourceMappingURL=linear-gradient.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/style-properties.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var properties_1 = __webpack_require__("../node_modules/@nativescript/core/ui/core/properties/properties.js");
var color_1 = __webpack_require__("../node_modules/@nativescript/core/color/color.js");
var font_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/font.js");
var utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/utils.js");
var background_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/background.js");
var platform_1 = __webpack_require__("../node_modules/@nativescript/core/platform/platform.js");
var number_utils_1 = __webpack_require__("../node_modules/@nativescript/core/utils/number-utils.js");
var matrix_1 = __webpack_require__("../node_modules/@nativescript/core/matrix/matrix.js");
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
var parser = __webpack_require__("../node_modules/@nativescript/core/css/parser.js");
var linear_gradient_1 = __webpack_require__("../node_modules/@nativescript/core/ui/styling/linear-gradient.js");
function equalsCommon(a, b) {
    if (a == "auto") {
        return b == "auto";
    }
    if (typeof a === "number") {
        if (b == "auto") {
            return false;
        }
        if (typeof b === "number") {
            return a == b;
        }
        if (!b) {
            return false;
        }
        return b.unit == "dip" && a == b.value;
    }
    if (b == "auto") {
        return false;
    }
    if (typeof b === "number") {
        return a ? (a.unit == "dip" && a.value == b) : false;
    }
    if (!a || !b) {
        return false;
    }
    return a.value == b.value && a.unit == b.unit;
}
function convertToStringCommon(length) {
    if (length == "auto") {
        return "auto";
    }
    if (typeof length === "number") {
        return length.toString();
    }
    var val = length.value;
    if (length.unit === "%") {
        val *= 100;
    }
    return val + length.unit;
}
function toDevicePixelsCommon(length, auto, parentAvailableWidth) {
    if (auto === void 0) { auto = Number.NaN; }
    if (parentAvailableWidth === void 0) { parentAvailableWidth = Number.NaN; }
    if (length == "auto") {
        return auto;
    }
    if (typeof length === "number") {
        return utils_1.layout.round(utils_1.layout.toDevicePixels(length));
    }
    if (!length) {
        return auto;
    }
    switch (length.unit) {
        case "px":
            return utils_1.layout.round(length.value);
        case "%":
            return utils_1.layout.round(parentAvailableWidth * length.value);
        case "dip":
        default:
            return utils_1.layout.round(utils_1.layout.toDevicePixels(length.value));
    }
}
var PercentLength;
(function (PercentLength) {
    function parse(fromValue) {
        if (fromValue == "auto") {
            return "auto";
        }
        if (typeof fromValue === "string") {
            var stringValue = fromValue.trim();
            var percentIndex = stringValue.indexOf("%");
            if (percentIndex !== -1) {
                var value = void 0;
                if (percentIndex !== (stringValue.length - 1) || percentIndex === 0) {
                    value = Number.NaN;
                }
                else {
                    value = parseFloat(stringValue.substring(0, stringValue.length - 1).trim()) / 100;
                }
                if (isNaN(value) || !isFinite(value)) {
                    throw new Error("Invalid value: " + fromValue);
                }
                return { unit: "%", value: value };
            }
            else if (stringValue.indexOf("px") !== -1) {
                stringValue = stringValue.replace("px", "").trim();
                var value = parseFloat(stringValue);
                if (isNaN(value) || !isFinite(value)) {
                    throw new Error("Invalid value: " + fromValue);
                }
                return { unit: "px", value: value };
            }
            else {
                var value = parseFloat(stringValue);
                if (isNaN(value) || !isFinite(value)) {
                    throw new Error("Invalid value: " + fromValue);
                }
                return value;
            }
        }
        else {
            return fromValue;
        }
    }
    PercentLength.parse = parse;
    PercentLength.equals = equalsCommon;
    PercentLength.toDevicePixels = toDevicePixelsCommon;
    PercentLength.convertToString = convertToStringCommon;
})(PercentLength = exports.PercentLength || (exports.PercentLength = {}));
var Length;
(function (Length) {
    function parse(fromValue) {
        if (fromValue == "auto") {
            return "auto";
        }
        if (typeof fromValue === "string") {
            var stringValue = fromValue.trim();
            if (stringValue.indexOf("px") !== -1) {
                stringValue = stringValue.replace("px", "").trim();
                var value = parseFloat(stringValue);
                if (isNaN(value) || !isFinite(value)) {
                    throw new Error("Invalid value: " + stringValue);
                }
                return { unit: "px", value: value };
            }
            else {
                var value = parseFloat(stringValue);
                if (isNaN(value) || !isFinite(value)) {
                    throw new Error("Invalid value: " + stringValue);
                }
                return value;
            }
        }
        else {
            return fromValue;
        }
    }
    Length.parse = parse;
    Length.equals = equalsCommon;
    Length.toDevicePixels = toDevicePixelsCommon;
    Length.convertToString = convertToStringCommon;
})(Length = exports.Length || (exports.Length = {}));
exports.zeroLength = { value: 0, unit: "px" };
exports.minWidthProperty = new properties_1.CssProperty({
    name: "minWidth", cssName: "min-width", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectiveMinWidth = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.minWidthProperty.register(properties_1.Style);
exports.minHeightProperty = new properties_1.CssProperty({
    name: "minHeight", cssName: "min-height", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectiveMinHeight = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.minHeightProperty.register(properties_1.Style);
exports.widthProperty = new properties_1.CssAnimationProperty({
    name: "width", cssName: "width", defaultValue: "auto", equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        if (platform_1.isIOS) {
            var view = target.viewRef.get();
            if (view) {
                view.requestLayout();
            }
        }
    }, valueConverter: PercentLength.parse
});
exports.widthProperty.register(properties_1.Style);
exports.heightProperty = new properties_1.CssAnimationProperty({
    name: "height", cssName: "height", defaultValue: "auto", equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        if (platform_1.isIOS) {
            var view = target.viewRef.get();
            if (view) {
                view.requestLayout();
            }
        }
    }, valueConverter: PercentLength.parse,
});
exports.heightProperty.register(properties_1.Style);
var marginProperty = new properties_1.ShorthandProperty({
    name: "margin", cssName: "margin",
    getter: function () {
        if (PercentLength.equals(this.marginTop, this.marginRight) &&
            PercentLength.equals(this.marginTop, this.marginBottom) &&
            PercentLength.equals(this.marginTop, this.marginLeft)) {
            return this.marginTop;
        }
        return PercentLength.convertToString(this.marginTop) + " " + PercentLength.convertToString(this.marginRight) + " " + PercentLength.convertToString(this.marginBottom) + " " + PercentLength.convertToString(this.marginLeft);
    },
    converter: convertToMargins
});
marginProperty.register(properties_1.Style);
exports.marginLeftProperty = new properties_1.CssProperty({ name: "marginLeft", cssName: "margin-left", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals, valueConverter: PercentLength.parse });
exports.marginLeftProperty.register(properties_1.Style);
exports.marginRightProperty = new properties_1.CssProperty({ name: "marginRight", cssName: "margin-right", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals, valueConverter: PercentLength.parse });
exports.marginRightProperty.register(properties_1.Style);
exports.marginTopProperty = new properties_1.CssProperty({ name: "marginTop", cssName: "margin-top", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals, valueConverter: PercentLength.parse });
exports.marginTopProperty.register(properties_1.Style);
exports.marginBottomProperty = new properties_1.CssProperty({ name: "marginBottom", cssName: "margin-bottom", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals, valueConverter: PercentLength.parse });
exports.marginBottomProperty.register(properties_1.Style);
var paddingProperty = new properties_1.ShorthandProperty({
    name: "padding", cssName: "padding",
    getter: function () {
        if (Length.equals(this.paddingTop, this.paddingRight) &&
            Length.equals(this.paddingTop, this.paddingBottom) &&
            Length.equals(this.paddingTop, this.paddingLeft)) {
            return this.paddingTop;
        }
        return Length.convertToString(this.paddingTop) + " " + Length.convertToString(this.paddingRight) + " " + Length.convertToString(this.paddingBottom) + " " + Length.convertToString(this.paddingLeft);
    },
    converter: convertToPaddings
});
paddingProperty.register(properties_1.Style);
exports.paddingLeftProperty = new properties_1.CssProperty({
    name: "paddingLeft", cssName: "padding-left", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectivePaddingLeft = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.paddingLeftProperty.register(properties_1.Style);
exports.paddingRightProperty = new properties_1.CssProperty({
    name: "paddingRight", cssName: "padding-right", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectivePaddingRight = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.paddingRightProperty.register(properties_1.Style);
exports.paddingTopProperty = new properties_1.CssProperty({
    name: "paddingTop", cssName: "padding-top", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectivePaddingTop = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.paddingTopProperty.register(properties_1.Style);
exports.paddingBottomProperty = new properties_1.CssProperty({
    name: "paddingBottom", cssName: "padding-bottom", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.effectivePaddingBottom = Length.toDevicePixels(newValue, 0);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }, valueConverter: Length.parse
});
exports.paddingBottomProperty.register(properties_1.Style);
var HorizontalAlignment;
(function (HorizontalAlignment) {
    HorizontalAlignment.LEFT = "left";
    HorizontalAlignment.CENTER = "center";
    HorizontalAlignment.RIGHT = "right";
    HorizontalAlignment.STRETCH = "stretch";
    HorizontalAlignment.isValid = properties_1.makeValidator(HorizontalAlignment.LEFT, HorizontalAlignment.CENTER, HorizontalAlignment.RIGHT, HorizontalAlignment.STRETCH);
    HorizontalAlignment.parse = properties_1.makeParser(HorizontalAlignment.isValid);
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
exports.horizontalAlignmentProperty = new properties_1.CssProperty({ name: "horizontalAlignment", cssName: "horizontal-align", defaultValue: HorizontalAlignment.STRETCH, affectsLayout: platform_1.isIOS, valueConverter: HorizontalAlignment.parse });
exports.horizontalAlignmentProperty.register(properties_1.Style);
var VerticalAlignment;
(function (VerticalAlignment) {
    VerticalAlignment.TOP = "top";
    VerticalAlignment.MIDDLE = "middle";
    VerticalAlignment.BOTTOM = "bottom";
    VerticalAlignment.STRETCH = "stretch";
    VerticalAlignment.isValid = properties_1.makeValidator(VerticalAlignment.TOP, VerticalAlignment.MIDDLE, VerticalAlignment.BOTTOM, VerticalAlignment.STRETCH);
    VerticalAlignment.parse = function (value) { return value.toLowerCase() === "center" ? VerticalAlignment.MIDDLE : parseStrict(value); };
    var parseStrict = properties_1.makeParser(VerticalAlignment.isValid);
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
exports.verticalAlignmentProperty = new properties_1.CssProperty({ name: "verticalAlignment", cssName: "vertical-align", defaultValue: VerticalAlignment.STRETCH, affectsLayout: platform_1.isIOS, valueConverter: VerticalAlignment.parse });
exports.verticalAlignmentProperty.register(properties_1.Style);
function parseThickness(value) {
    if (typeof value === "string") {
        var arr = value.split(/[ ,]+/);
        var top_1;
        var right = void 0;
        var bottom = void 0;
        var left = void 0;
        if (arr.length === 1) {
            top_1 = arr[0];
            right = arr[0];
            bottom = arr[0];
            left = arr[0];
        }
        else if (arr.length === 2) {
            top_1 = arr[0];
            bottom = arr[0];
            right = arr[1];
            left = arr[1];
        }
        else if (arr.length === 3) {
            top_1 = arr[0];
            right = arr[1];
            left = arr[1];
            bottom = arr[2];
        }
        else if (arr.length === 4) {
            top_1 = arr[0];
            right = arr[1];
            bottom = arr[2];
            left = arr[3];
        }
        else {
            throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
        }
        return {
            top: top_1,
            right: right,
            bottom: bottom,
            left: left
        };
    }
    else {
        return value;
    }
}
function convertToMargins(value) {
    if (typeof value === "string" && value !== "auto") {
        var thickness = parseThickness(value);
        return [
            [exports.marginTopProperty, PercentLength.parse(thickness.top)],
            [exports.marginRightProperty, PercentLength.parse(thickness.right)],
            [exports.marginBottomProperty, PercentLength.parse(thickness.bottom)],
            [exports.marginLeftProperty, PercentLength.parse(thickness.left)]
        ];
    }
    else {
        return [
            [exports.marginTopProperty, value],
            [exports.marginRightProperty, value],
            [exports.marginBottomProperty, value],
            [exports.marginLeftProperty, value]
        ];
    }
}
function convertToPaddings(value) {
    if (typeof value === "string" && value !== "auto") {
        var thickness = parseThickness(value);
        return [
            [exports.paddingTopProperty, Length.parse(thickness.top)],
            [exports.paddingRightProperty, Length.parse(thickness.right)],
            [exports.paddingBottomProperty, Length.parse(thickness.bottom)],
            [exports.paddingLeftProperty, Length.parse(thickness.left)]
        ];
    }
    else {
        return [
            [exports.paddingTopProperty, value],
            [exports.paddingRightProperty, value],
            [exports.paddingBottomProperty, value],
            [exports.paddingLeftProperty, value]
        ];
    }
}
exports.rotateProperty = new properties_1.CssAnimationProperty({ name: "rotate", cssName: "rotate", defaultValue: 0, valueConverter: parseFloat });
exports.rotateProperty.register(properties_1.Style);
exports.scaleXProperty = new properties_1.CssAnimationProperty({ name: "scaleX", cssName: "scaleX", defaultValue: 1, valueConverter: parseFloat });
exports.scaleXProperty.register(properties_1.Style);
exports.scaleYProperty = new properties_1.CssAnimationProperty({ name: "scaleY", cssName: "scaleY", defaultValue: 1, valueConverter: parseFloat });
exports.scaleYProperty.register(properties_1.Style);
function parseDIPs(value) {
    if (value.indexOf("px") !== -1) {
        return utils_1.layout.toDeviceIndependentPixels(parseFloat(value.replace("px", "").trim()));
    }
    else {
        return parseFloat(value.replace("dip", "").trim());
    }
}
exports.translateXProperty = new properties_1.CssAnimationProperty({ name: "translateX", cssName: "translateX", defaultValue: 0, valueConverter: parseDIPs });
exports.translateXProperty.register(properties_1.Style);
exports.translateYProperty = new properties_1.CssAnimationProperty({ name: "translateY", cssName: "translateY", defaultValue: 0, valueConverter: parseDIPs });
exports.translateYProperty.register(properties_1.Style);
var transformProperty = new properties_1.ShorthandProperty({
    name: "transform", cssName: "transform",
    getter: function () {
        var scaleX = this.scaleX;
        var scaleY = this.scaleY;
        var translateX = this.translateX;
        var translateY = this.translateY;
        var rotate = this.rotate;
        var result = "";
        if (translateX !== 0 || translateY !== 0) {
            result += "translate(" + translateX + ", " + translateY + ") ";
        }
        if (scaleX !== 1 || scaleY !== 1) {
            result += "scale(" + scaleX + ", " + scaleY + ") ";
        }
        if (rotate !== 0) {
            result += "rotate (" + rotate + ")";
        }
        return result.trim();
    },
    converter: convertToTransform
});
transformProperty.register(properties_1.Style);
var IDENTITY_TRANSFORMATION = {
    translate: { x: 0, y: 0 },
    rotate: 0,
    scale: { x: 1, y: 1 },
};
var TRANSFORM_SPLITTER = new RegExp(/\s*(.+?)\((.*?)\)/g);
var TRANSFORMATIONS = Object.freeze([
    "rotate",
    "translate",
    "translate3d",
    "translateX",
    "translateY",
    "scale",
    "scale3d",
    "scaleX",
    "scaleY",
]);
var STYLE_TRANSFORMATION_MAP = Object.freeze({
    "scale": function (value) { return ({ property: "scale", value: value }); },
    "scale3d": function (value) { return ({ property: "scale", value: value }); },
    "scaleX": function (_a) {
        var x = _a.x;
        return ({ property: "scale", value: { x: x, y: IDENTITY_TRANSFORMATION.scale.y } });
    },
    "scaleY": function (_a) {
        var y = _a.y;
        return ({ property: "scale", value: { y: y, x: IDENTITY_TRANSFORMATION.scale.x } });
    },
    "translate": function (value) { return ({ property: "translate", value: value }); },
    "translate3d": function (value) { return ({ property: "translate", value: value }); },
    "translateX": function (_a) {
        var x = _a.x;
        return ({ property: "translate", value: { x: x, y: IDENTITY_TRANSFORMATION.translate.y } });
    },
    "translateY": function (_a) {
        var y = _a.y;
        return ({ property: "translate", value: { y: y, x: IDENTITY_TRANSFORMATION.translate.x } });
    },
    "rotate": function (value) { return ({ property: "rotate", value: value }); },
});
function convertToTransform(value) {
    if (value === properties_1.unsetValue) {
        value = "none";
    }
    var _a = transformConverter(value), translate = _a.translate, rotate = _a.rotate, scale = _a.scale;
    return [
        [exports.translateXProperty, translate.x],
        [exports.translateYProperty, translate.y],
        [exports.scaleXProperty, scale.x],
        [exports.scaleYProperty, scale.y],
        [exports.rotateProperty, rotate],
    ];
}
function transformConverter(text) {
    var transformations = parseTransformString(text);
    if (text === "none" || text === "" || !transformations.length) {
        return IDENTITY_TRANSFORMATION;
    }
    var usedTransforms = transformations.map(function (t) { return t.property; });
    if (!utils_1.hasDuplicates(usedTransforms)) {
        var fullTransformations_1 = __assign({}, IDENTITY_TRANSFORMATION);
        transformations.forEach(function (transform) {
            fullTransformations_1[transform.property] = transform.value;
        });
        return fullTransformations_1;
    }
    var affineMatrix = transformations
        .map(matrix_1.getTransformMatrix)
        .reduce(matrix_1.multiplyAffine2d);
    var cssMatrix = matrix_1.matrixArrayToCssMatrix(affineMatrix);
    return matrix_1.decompose2DTransformMatrix(cssMatrix);
}
exports.transformConverter = transformConverter;
function parseTransformString(text) {
    var matches = [];
    var match;
    while ((match = TRANSFORM_SPLITTER.exec(text)) !== null) {
        var property = match[1];
        var value = convertTransformValue(property, match[2]);
        if (TRANSFORMATIONS.indexOf(property) !== -1) {
            matches.push(normalizeTransformation({ property: property, value: value }));
        }
    }
    return matches;
}
function normalizeTransformation(_a) {
    var property = _a.property, value = _a.value;
    return STYLE_TRANSFORMATION_MAP[property](value);
}
function convertTransformValue(property, stringValue) {
    var _a = stringValue.split(",").map(parseFloat), x = _a[0], _b = _a[1], y = _b === void 0 ? x : _b;
    if (property === "rotate") {
        return stringValue.slice(-3) === "rad" ? number_utils_1.radiansToDegrees(x) : x;
    }
    return { x: x, y: y };
}
var backgroundProperty = new properties_1.ShorthandProperty({
    name: "background", cssName: "background",
    getter: function () {
        return this.backgroundColor + " " + this.backgroundImage + " " + this.backgroundRepeat + " " + this.backgroundPosition;
    },
    converter: convertToBackgrounds
});
backgroundProperty.register(properties_1.Style);
exports.backgroundInternalProperty = new properties_1.CssProperty({
    name: "backgroundInternal",
    cssName: "_backgroundInternal",
    defaultValue: background_1.Background.default
});
exports.backgroundInternalProperty.register(properties_1.Style);
exports.backgroundImageProperty = new properties_1.CssProperty({
    name: "backgroundImage", cssName: "background-image", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withImage(newValue);
        target.backgroundInternal = background;
    },
    equalityComparer: function (value1, value2) {
        if (value1 instanceof linear_gradient_1.LinearGradient && value2 instanceof linear_gradient_1.LinearGradient) {
            return linear_gradient_1.LinearGradient.equals(value1, value2);
        }
        else {
            return value1 === value2;
        }
    },
    valueConverter: function (value) {
        if (typeof value === "string") {
            var parsed = parser.parseBackground(value);
            if (parsed) {
                var background = parsed.value;
                value = (typeof background.image === "object") ? linear_gradient_1.LinearGradient.parse(background.image) : value;
            }
        }
        return value;
    }
});
exports.backgroundImageProperty.register(properties_1.Style);
exports.backgroundColorProperty = new properties_1.CssAnimationProperty({
    name: "backgroundColor", cssName: "background-color", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withColor(newValue);
        target.backgroundInternal = background;
    }, equalityComparer: color_1.Color.equals, valueConverter: function (value) { return new color_1.Color(value); }
});
exports.backgroundColorProperty.register(properties_1.Style);
var BackgroundRepeat;
(function (BackgroundRepeat) {
    BackgroundRepeat.REPEAT = "repeat";
    BackgroundRepeat.REPEAT_X = "repeat-x";
    BackgroundRepeat.REPEAT_Y = "repeat-y";
    BackgroundRepeat.NO_REPEAT = "no-repeat";
    BackgroundRepeat.isValid = properties_1.makeValidator(BackgroundRepeat.REPEAT, BackgroundRepeat.REPEAT_X, BackgroundRepeat.REPEAT_Y, BackgroundRepeat.NO_REPEAT);
    BackgroundRepeat.parse = properties_1.makeParser(BackgroundRepeat.isValid);
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
exports.backgroundRepeatProperty = new properties_1.CssProperty({
    name: "backgroundRepeat", cssName: "background-repeat", valueConverter: BackgroundRepeat.parse,
    valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withRepeat(newValue);
        target.backgroundInternal = background;
    }
});
exports.backgroundRepeatProperty.register(properties_1.Style);
exports.backgroundSizeProperty = new properties_1.CssProperty({
    name: "backgroundSize", cssName: "background-size", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withSize(newValue);
        target.backgroundInternal = background;
    }
});
exports.backgroundSizeProperty.register(properties_1.Style);
exports.backgroundPositionProperty = new properties_1.CssProperty({
    name: "backgroundPosition", cssName: "background-position", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withPosition(newValue);
        target.backgroundInternal = background;
    }
});
exports.backgroundPositionProperty.register(properties_1.Style);
function convertToBackgrounds(value) {
    if (typeof value === "string") {
        var backgrounds = parser.parseBackground(value).value;
        var backgroundColor = backgrounds.color ? new color_1.Color(backgrounds.color) : properties_1.unsetValue;
        var backgroundImage = void 0;
        if (typeof backgrounds.image === "object" && backgrounds.image) {
            backgroundImage = linear_gradient_1.LinearGradient.parse(backgrounds.image);
        }
        else {
            backgroundImage = backgrounds.image || properties_1.unsetValue;
        }
        var backgroundRepeat = backgrounds.repeat || properties_1.unsetValue;
        var backgroundPosition = backgrounds.position ? backgrounds.position.text : properties_1.unsetValue;
        return [
            [exports.backgroundColorProperty, backgroundColor],
            [exports.backgroundImageProperty, backgroundImage],
            [exports.backgroundRepeatProperty, backgroundRepeat],
            [exports.backgroundPositionProperty, backgroundPosition]
        ];
    }
    else {
        return [
            [exports.backgroundColorProperty, properties_1.unsetValue],
            [exports.backgroundImageProperty, properties_1.unsetValue],
            [exports.backgroundRepeatProperty, properties_1.unsetValue],
            [exports.backgroundPositionProperty, properties_1.unsetValue]
        ];
    }
}
function parseBorderColor(value) {
    var result = { top: undefined, right: undefined, bottom: undefined, left: undefined };
    if (value.indexOf("rgb") === 0) {
        result.top = result.right = result.bottom = result.left = new color_1.Color(value);
        return result;
    }
    var arr = value.split(/[ ,]+/);
    if (arr.length === 1) {
        var arr0 = new color_1.Color(arr[0]);
        result.top = arr0;
        result.right = arr0;
        result.bottom = arr0;
        result.left = arr0;
    }
    else if (arr.length === 2) {
        var arr0 = new color_1.Color(arr[0]);
        var arr1 = new color_1.Color(arr[1]);
        result.top = arr0;
        result.right = arr1;
        result.bottom = arr0;
        result.left = arr1;
    }
    else if (arr.length === 3) {
        var arr0 = new color_1.Color(arr[0]);
        var arr1 = new color_1.Color(arr[1]);
        var arr2 = new color_1.Color(arr[2]);
        result.top = arr0;
        result.right = arr1;
        result.bottom = arr2;
        result.left = arr1;
    }
    else if (arr.length === 4) {
        var arr0 = new color_1.Color(arr[0]);
        var arr1 = new color_1.Color(arr[1]);
        var arr2 = new color_1.Color(arr[2]);
        var arr3 = new color_1.Color(arr[3]);
        result.top = arr0;
        result.right = arr1;
        result.bottom = arr2;
        result.left = arr3;
    }
    else {
        throw new Error("Expected 1, 2, 3 or 4 parameters. Actual: " + value);
    }
    return result;
}
var borderColorProperty = new properties_1.ShorthandProperty({
    name: "borderColor", cssName: "border-color",
    getter: function () {
        if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) &&
            color_1.Color.equals(this.borderTopColor, this.borderBottomColor) &&
            color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
            return this.borderTopColor;
        }
        else {
            return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
        }
    },
    converter: function (value) {
        if (typeof value === "string") {
            var fourColors = parseBorderColor(value);
            return [
                [exports.borderTopColorProperty, fourColors.top],
                [exports.borderRightColorProperty, fourColors.right],
                [exports.borderBottomColorProperty, fourColors.bottom],
                [exports.borderLeftColorProperty, fourColors.left]
            ];
        }
        else {
            return [
                [exports.borderTopColorProperty, value],
                [exports.borderRightColorProperty, value],
                [exports.borderBottomColorProperty, value],
                [exports.borderLeftColorProperty, value]
            ];
        }
    }
});
borderColorProperty.register(properties_1.Style);
exports.borderTopColorProperty = new properties_1.CssProperty({
    name: "borderTopColor", cssName: "border-top-color", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withBorderTopColor(newValue);
        target.backgroundInternal = background;
    }, equalityComparer: color_1.Color.equals, valueConverter: function (value) { return new color_1.Color(value); }
});
exports.borderTopColorProperty.register(properties_1.Style);
exports.borderRightColorProperty = new properties_1.CssProperty({
    name: "borderRightColor", cssName: "border-right-color", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withBorderRightColor(newValue);
        target.backgroundInternal = background;
    }, equalityComparer: color_1.Color.equals, valueConverter: function (value) { return new color_1.Color(value); }
});
exports.borderRightColorProperty.register(properties_1.Style);
exports.borderBottomColorProperty = new properties_1.CssProperty({
    name: "borderBottomColor", cssName: "border-bottom-color", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withBorderBottomColor(newValue);
        target.backgroundInternal = background;
    }, equalityComparer: color_1.Color.equals, valueConverter: function (value) { return new color_1.Color(value); }
});
exports.borderBottomColorProperty.register(properties_1.Style);
exports.borderLeftColorProperty = new properties_1.CssProperty({
    name: "borderLeftColor", cssName: "border-left-color", valueChanged: function (target, oldValue, newValue) {
        var background = target.backgroundInternal.withBorderLeftColor(newValue);
        target.backgroundInternal = background;
    }, equalityComparer: color_1.Color.equals, valueConverter: function (value) { return new color_1.Color(value); }
});
exports.borderLeftColorProperty.register(properties_1.Style);
var borderWidthProperty = new properties_1.ShorthandProperty({
    name: "borderWidth", cssName: "border-width",
    getter: function () {
        if (Length.equals(this.borderTopWidth, this.borderRightWidth) &&
            Length.equals(this.borderTopWidth, this.borderBottomWidth) &&
            Length.equals(this.borderTopWidth, this.borderLeftWidth)) {
            return this.borderTopWidth;
        }
        else {
            return Length.convertToString(this.borderTopWidth) + " " + Length.convertToString(this.borderRightWidth) + " " + Length.convertToString(this.borderBottomWidth) + " " + Length.convertToString(this.borderLeftWidth);
        }
    },
    converter: function (value) {
        if (typeof value === "string" && value !== "auto") {
            var borderWidths = parseThickness(value);
            return [
                [exports.borderTopWidthProperty, borderWidths.top],
                [exports.borderRightWidthProperty, borderWidths.right],
                [exports.borderBottomWidthProperty, borderWidths.bottom],
                [exports.borderLeftWidthProperty, borderWidths.left]
            ];
        }
        else {
            return [
                [exports.borderTopWidthProperty, value],
                [exports.borderRightWidthProperty, value],
                [exports.borderBottomWidthProperty, value],
                [exports.borderLeftWidthProperty, value]
            ];
        }
    }
});
borderWidthProperty.register(properties_1.Style);
exports.borderTopWidthProperty = new properties_1.CssProperty({
    name: "borderTopWidth", cssName: "border-top-width", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-top-width should be Non-Negative Finite number. Value: " + value);
        }
        var view = target.viewRef.get();
        if (view) {
            view.effectiveBorderTopWidth = value;
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
        var background = target.backgroundInternal.withBorderTopWidth(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderTopWidthProperty.register(properties_1.Style);
exports.borderRightWidthProperty = new properties_1.CssProperty({
    name: "borderRightWidth", cssName: "border-right-width", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-right-width should be Non-Negative Finite number. Value: " + value);
        }
        var view = target.viewRef.get();
        if (view) {
            view.effectiveBorderRightWidth = value;
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
        var background = target.backgroundInternal.withBorderRightWidth(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderRightWidthProperty.register(properties_1.Style);
exports.borderBottomWidthProperty = new properties_1.CssProperty({
    name: "borderBottomWidth", cssName: "border-bottom-width", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-bottom-width should be Non-Negative Finite number. Value: " + value);
        }
        var view = target.viewRef.get();
        if (view) {
            view.effectiveBorderBottomWidth = value;
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
        var background = target.backgroundInternal.withBorderBottomWidth(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderBottomWidthProperty.register(properties_1.Style);
exports.borderLeftWidthProperty = new properties_1.CssProperty({
    name: "borderLeftWidth", cssName: "border-left-width", defaultValue: exports.zeroLength, affectsLayout: platform_1.isIOS, equalityComparer: Length.equals,
    valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-left-width should be Non-Negative Finite number. Value: " + value);
        }
        var view = target.viewRef.get();
        if (view) {
            view.effectiveBorderLeftWidth = value;
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
        var background = target.backgroundInternal.withBorderLeftWidth(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderLeftWidthProperty.register(properties_1.Style);
var borderRadiusProperty = new properties_1.ShorthandProperty({
    name: "borderRadius", cssName: "border-radius",
    getter: function () {
        if (Length.equals(this.borderTopLeftRadius, this.borderTopRightRadius) &&
            Length.equals(this.borderTopLeftRadius, this.borderBottomRightRadius) &&
            Length.equals(this.borderTopLeftRadius, this.borderBottomLeftRadius)) {
            return this.borderTopLeftRadius;
        }
        return Length.convertToString(this.borderTopLeftRadius) + " " + Length.convertToString(this.borderTopRightRadius) + " " + Length.convertToString(this.borderBottomRightRadius) + " " + Length.convertToString(this.borderBottomLeftRadius);
    },
    converter: function (value) {
        if (typeof value === "string") {
            var borderRadius = parseThickness(value);
            return [
                [exports.borderTopLeftRadiusProperty, borderRadius.top],
                [exports.borderTopRightRadiusProperty, borderRadius.right],
                [exports.borderBottomRightRadiusProperty, borderRadius.bottom],
                [exports.borderBottomLeftRadiusProperty, borderRadius.left]
            ];
        }
        else {
            return [
                [exports.borderTopLeftRadiusProperty, value],
                [exports.borderTopRightRadiusProperty, value],
                [exports.borderBottomRightRadiusProperty, value],
                [exports.borderBottomLeftRadiusProperty, value]
            ];
        }
    }
});
borderRadiusProperty.register(properties_1.Style);
exports.borderTopLeftRadiusProperty = new properties_1.CssProperty({
    name: "borderTopLeftRadius", cssName: "border-top-left-radius", defaultValue: 0, affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-top-left-radius should be Non-Negative Finite number. Value: " + value);
        }
        var background = target.backgroundInternal.withBorderTopLeftRadius(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderTopLeftRadiusProperty.register(properties_1.Style);
exports.borderTopRightRadiusProperty = new properties_1.CssProperty({
    name: "borderTopRightRadius", cssName: "border-top-right-radius", defaultValue: 0, affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-top-right-radius should be Non-Negative Finite number. Value: " + value);
        }
        var background = target.backgroundInternal.withBorderTopRightRadius(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderTopRightRadiusProperty.register(properties_1.Style);
exports.borderBottomRightRadiusProperty = new properties_1.CssProperty({
    name: "borderBottomRightRadius", cssName: "border-bottom-right-radius", defaultValue: 0, affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-bottom-right-radius should be Non-Negative Finite number. Value: " + value);
        }
        var background = target.backgroundInternal.withBorderBottomRightRadius(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderBottomRightRadiusProperty.register(properties_1.Style);
exports.borderBottomLeftRadiusProperty = new properties_1.CssProperty({
    name: "borderBottomLeftRadius", cssName: "border-bottom-left-radius", defaultValue: 0, affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var value = Length.toDevicePixels(newValue, 0);
        if (!isNonNegativeFiniteNumber(value)) {
            throw new Error("border-bottom-left-radius should be Non-Negative Finite number. Value: " + value);
        }
        var background = target.backgroundInternal.withBorderBottomLeftRadius(value);
        target.backgroundInternal = background;
    }, valueConverter: Length.parse
});
exports.borderBottomLeftRadiusProperty.register(properties_1.Style);
function isNonNegativeFiniteNumber(value) {
    return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = ["rect", "circle", "ellipse", "polygon", "inset"];
function isClipPathValid(value) {
    if (!value) {
        return true;
    }
    var functionName = value.substring(0, value.indexOf("(")).trim();
    return supportedPaths.indexOf(functionName) !== -1;
}
exports.clipPathProperty = new properties_1.CssProperty({
    name: "clipPath", cssName: "clip-path", valueChanged: function (target, oldValue, newValue) {
        if (!isClipPathValid(newValue)) {
            throw new Error("clip-path is not valid.");
        }
        var background = target.backgroundInternal.withClipPath(newValue);
        target.backgroundInternal = background;
    }
});
exports.clipPathProperty.register(properties_1.Style);
function isFloatValueConverter(value) {
    var newValue = parseFloat(value);
    if (isNaN(newValue)) {
        throw new Error("Invalid value: " + newValue);
    }
    return newValue;
}
exports.zIndexProperty = new properties_1.CssProperty({ name: "zIndex", cssName: "z-index", valueConverter: isFloatValueConverter });
exports.zIndexProperty.register(properties_1.Style);
function opacityConverter(value) {
    var newValue = parseFloat(value);
    if (!isNaN(newValue) && 0 <= newValue && newValue <= 1) {
        return newValue;
    }
    throw new Error("Opacity should be between [0, 1]. Value: " + newValue);
}
exports.opacityProperty = new properties_1.CssAnimationProperty({ name: "opacity", cssName: "opacity", defaultValue: 1, valueConverter: opacityConverter });
exports.opacityProperty.register(properties_1.Style);
exports.colorProperty = new properties_1.InheritedCssProperty({ name: "color", cssName: "color", equalityComparer: color_1.Color.equals, valueConverter: function (v) { return new color_1.Color(v); } });
exports.colorProperty.register(properties_1.Style);
exports.fontInternalProperty = new properties_1.CssProperty({ name: "fontInternal", cssName: "_fontInternal", defaultValue: font_1.Font.default });
exports.fontInternalProperty.register(properties_1.Style);
exports.fontFamilyProperty = new properties_1.InheritedCssProperty({
    name: "fontFamily", cssName: "font-family", affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var currentFont = target.fontInternal;
        if (currentFont.fontFamily !== newValue) {
            var newFont = currentFont.withFontFamily(newValue);
            target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
        }
    }
});
exports.fontFamilyProperty.register(properties_1.Style);
exports.fontSizeProperty = new properties_1.InheritedCssProperty({
    name: "fontSize", cssName: "font-size", affectsLayout: platform_1.isIOS, valueChanged: function (target, oldValue, newValue) {
        var currentFont = target.fontInternal;
        if (currentFont.fontSize !== newValue) {
            var newFont = currentFont.withFontSize(newValue);
            target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
        }
    },
    valueConverter: function (v) { return parseFloat(v); }
});
exports.fontSizeProperty.register(properties_1.Style);
exports.fontStyleProperty = new properties_1.InheritedCssProperty({
    name: "fontStyle", cssName: "font-style", affectsLayout: platform_1.isIOS, defaultValue: font_1.FontStyle.NORMAL, valueConverter: font_1.FontStyle.parse, valueChanged: function (target, oldValue, newValue) {
        var currentFont = target.fontInternal;
        if (currentFont.fontStyle !== newValue) {
            var newFont = currentFont.withFontStyle(newValue);
            target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
        }
    }
});
exports.fontStyleProperty.register(properties_1.Style);
exports.fontWeightProperty = new properties_1.InheritedCssProperty({
    name: "fontWeight", cssName: "font-weight", affectsLayout: platform_1.isIOS, defaultValue: font_1.FontWeight.NORMAL, valueConverter: font_1.FontWeight.parse, valueChanged: function (target, oldValue, newValue) {
        var currentFont = target.fontInternal;
        if (currentFont.fontWeight !== newValue) {
            var newFont = currentFont.withFontWeight(newValue);
            target.fontInternal = font_1.Font.equals(font_1.Font.default, newFont) ? properties_1.unsetValue : newFont;
        }
    }
});
exports.fontWeightProperty.register(properties_1.Style);
var fontProperty = new properties_1.ShorthandProperty({
    name: "font", cssName: "font",
    getter: function () {
        return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
    },
    converter: function (value) {
        if (value === properties_1.unsetValue) {
            return [
                [exports.fontStyleProperty, properties_1.unsetValue],
                [exports.fontWeightProperty, properties_1.unsetValue],
                [exports.fontSizeProperty, properties_1.unsetValue],
                [exports.fontFamilyProperty, properties_1.unsetValue]
            ];
        }
        else {
            var font = font_1.parseFont(value);
            var fontSize = parseFloat(font.fontSize);
            return [
                [exports.fontStyleProperty, font.fontStyle],
                [exports.fontWeightProperty, font.fontWeight],
                [exports.fontSizeProperty, fontSize],
                [exports.fontFamilyProperty, font.fontFamily]
            ];
        }
    }
});
fontProperty.register(properties_1.Style);
var Visibility;
(function (Visibility) {
    Visibility.VISIBLE = "visible";
    Visibility.HIDDEN = "hidden";
    Visibility.COLLAPSE = "collapse";
    Visibility.isValid = properties_1.makeValidator(Visibility.VISIBLE, Visibility.HIDDEN, Visibility.COLLAPSE);
    Visibility.parse = function (value) { return value.toLowerCase() === "collapsed" ? Visibility.COLLAPSE : parseStrict(value); };
    var parseStrict = properties_1.makeParser(Visibility.isValid);
})(Visibility = exports.Visibility || (exports.Visibility = {}));
exports.visibilityProperty = new properties_1.CssProperty({
    name: "visibility", cssName: "visibility", defaultValue: Visibility.VISIBLE, affectsLayout: platform_1.isIOS, valueConverter: Visibility.parse, valueChanged: function (target, oldValue, newValue) {
        var view = target.viewRef.get();
        if (view) {
            view.isCollapsed = (newValue === Visibility.COLLAPSE);
        }
        else {
            trace_1.write(newValue + " not set to view's property because \".viewRef\" is cleared", trace_1.categories.Style, trace_1.messageType.warn);
        }
    }
});
exports.visibilityProperty.register(properties_1.Style);
exports.androidElevationProperty = new properties_1.CssProperty({ name: "androidElevation", cssName: "android-elevation", valueConverter: parseFloat });
exports.androidElevationProperty.register(properties_1.Style);
exports.androidDynamicElevationOffsetProperty = new properties_1.CssProperty({ name: "androidDynamicElevationOffset", cssName: "android-dynamic-elevation-offset", valueConverter: parseFloat });
exports.androidDynamicElevationOffsetProperty.register(properties_1.Style);
//# sourceMappingURL=style-properties.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/ui/styling/style/style.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = __webpack_require__("../node_modules/@nativescript/core/data/observable/observable.js");
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
var Style = (function (_super) {
    __extends(Style, _super);
    function Style(ownerView) {
        var _this = _super.call(this) || this;
        _this.unscopedCssVariables = new Map();
        _this.scopedCssVariables = new Map();
        if (ownerView.constructor.toString().indexOf("[native code]") !== -1) {
            _this.viewRef = ownerView;
        }
        else {
            _this.viewRef = new WeakRef(ownerView);
        }
        return _this;
    }
    Style.prototype.setScopedCssVariable = function (varName, value) {
        this.scopedCssVariables.set(varName, value);
    };
    Style.prototype.setUnscopedCssVariable = function (varName, value) {
        this.unscopedCssVariables.set(varName, value);
    };
    Style.prototype.getCssVariable = function (varName) {
        var view = this.view;
        if (!view) {
            return null;
        }
        if (this.unscopedCssVariables.has(varName)) {
            return this.unscopedCssVariables.get(varName);
        }
        if (this.scopedCssVariables.has(varName)) {
            return this.scopedCssVariables.get(varName);
        }
        if (!view.parent || !view.parent.style) {
            return null;
        }
        return view.parent.style.getCssVariable(varName);
    };
    Style.prototype.resetScopedCssVariables = function () {
        this.scopedCssVariables.clear();
    };
    Style.prototype.resetUnscopedCssVariables = function () {
        this.unscopedCssVariables.clear();
    };
    Style.prototype.toString = function () {
        var view = this.viewRef.get();
        if (!view) {
            trace_1.write("toString() of Style cannot execute correctly because \".viewRef\" is cleared", trace_1.categories.Animation, trace_1.messageType.warn);
            return "";
        }
        return view + ".style";
    };
    Object.defineProperty(Style.prototype, "view", {
        get: function () {
            if (this.viewRef) {
                return this.viewRef.get();
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    return Style;
}(observable_1.Observable));
exports.Style = Style;
Style.prototype.PropertyBag = (function () {
    function class_1() {
    }
    return class_1;
}());
//# sourceMappingURL=style.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/layout-helper/layout-helper-common.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
exports.MODE_SHIFT = 30;
exports.MODE_MASK = 0x3 << exports.MODE_SHIFT;
exports.UNSPECIFIED = 0 << exports.MODE_SHIFT;
exports.EXACTLY = 1 << exports.MODE_SHIFT;
exports.AT_MOST = 2 << exports.MODE_SHIFT;
exports.MEASURED_HEIGHT_STATE_SHIFT = 0x00000010;
exports.MEASURED_STATE_TOO_SMALL = 0x01000000;
exports.MEASURED_STATE_MASK = 0xff000000;
exports.MEASURED_SIZE_MASK = 0x00ffffff;
function getMode(mode) {
    switch (mode) {
        case exports.EXACTLY:
            return "Exact";
        case exports.AT_MOST:
            return "AtMost";
        default:
            return "Unspecified";
    }
}
exports.getMode = getMode;
function getMeasureSpecMode(spec) {
    return (spec & exports.MODE_MASK);
}
exports.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
    return (spec & ~exports.MODE_MASK);
}
exports.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
    var mode = getMeasureSpecMode(measureSpec);
    var size = getMeasureSpecSize(measureSpec);
    var text = "MeasureSpec: ";
    if (mode === exports.UNSPECIFIED) {
        text += "UNSPECIFIED ";
    }
    else if (mode === exports.EXACTLY) {
        text += "EXACTLY ";
    }
    else if (mode === exports.AT_MOST) {
        text += "AT_MOST ";
    }
    text += size;
    return text;
}
exports.measureSpecToString = measureSpecToString;
function round(value) {
    var res = Math.floor(value + 0.5);
    if (res !== 0) {
        return res;
    }
    else if (value === 0) {
        return 0;
    }
    else if (value > 0) {
        return 1;
    }
    return -1;
}
exports.round = round;
//# sourceMappingURL=layout-helper-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/layout-helper/layout-helper.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var layout_helper_common_1 = __webpack_require__("../node_modules/@nativescript/core/utils/layout-helper/layout-helper-common.js");
__export(__webpack_require__("../node_modules/@nativescript/core/utils/layout-helper/layout-helper-common.js"));
var mainScreenScale;
function makeMeasureSpec(size, mode) {
    return (Math.round(Math.max(0, size)) & ~layout_helper_common_1.MODE_MASK) | (mode & layout_helper_common_1.MODE_MASK);
}
exports.makeMeasureSpec = makeMeasureSpec;
function getDisplayDensity() {
    return mainScreenScale;
}
exports.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
    return value * mainScreenScale;
}
exports.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
    return value / mainScreenScale;
}
exports.toDeviceIndependentPixels = toDeviceIndependentPixels;
function measureNativeView(nativeView, width, widthMode, height, heightMode) {
    var view = nativeView;
    var nativeSize = view.sizeThatFits({
        width: widthMode === 0 ? Number.POSITIVE_INFINITY : toDeviceIndependentPixels(width),
        height: heightMode === 0 ? Number.POSITIVE_INFINITY : toDeviceIndependentPixels(height)
    });
    nativeSize.width = layout_helper_common_1.round(toDevicePixels(nativeSize.width));
    nativeSize.height = layout_helper_common_1.round(toDevicePixels(nativeSize.height));
    return nativeSize;
}
exports.measureNativeView = measureNativeView;
mainScreenScale = UIScreen.mainScreen.scale;
//# sourceMappingURL=layout-helper.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/mainthread-helper.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function dispatchToMainThread(func) {
    NSOperationQueue.mainQueue.addOperationWithBlock(func);
}
exports.dispatchToMainThread = dispatchToMainThread;
function isMainThread() {
    return NSThread.isMainThread;
}
exports.isMainThread = isMainThread;
//# sourceMappingURL=mainthread-helper.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/native-helper.js":
/***/ (function(module, exports, __webpack_require__) {

Object.defineProperty(exports, "__esModule", { value: true });
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
function isOrientationLandscape(orientation) {
    return orientation === 3 ||
        orientation === 4;
}
function openFileAtRootModule(filePath) {
    try {
        var appPath = ios.getCurrentAppPath();
        var path = filePath.replace("~", appPath);
        var controller = UIDocumentInteractionController.interactionControllerWithURL(NSURL.fileURLWithPath(path));
        controller.delegate = new ios.UIDocumentInteractionControllerDelegateImpl();
        return controller.presentPreviewAnimated(true);
    }
    catch (e) {
        trace_1.write("Error in openFile", trace_1.categories.Error, trace_1.messageType.error);
    }
    return false;
}
var ios;
(function (ios) {
    function getter(_this, property) {
        console.log("utils.ios.getter() is deprecated; use the respective native property instead");
        if (typeof property === "function") {
            return property.call(_this);
        }
        else {
            return property;
        }
    }
    ios.getter = getter;
    var collections;
    (function (collections) {
        function jsArrayToNSArray(str) {
            return NSArray.arrayWithArray(str);
        }
        collections.jsArrayToNSArray = jsArrayToNSArray;
        function nsArrayToJSArray(a) {
            var arr = [];
            if (a !== undefined) {
                var count = a.count;
                for (var i = 0; i < count; i++) {
                    arr.push(a.objectAtIndex(i));
                }
            }
            return arr;
        }
        collections.nsArrayToJSArray = nsArrayToJSArray;
    })(collections = ios.collections || (ios.collections = {}));
    function isLandscape() {
        console.log("utils.ios.isLandscape() is deprecated; use application.orientation instead");
        var deviceOrientation = UIDevice.currentDevice.orientation;
        var statusBarOrientation = UIApplication.sharedApplication.statusBarOrientation;
        var isDeviceOrientationLandscape = isOrientationLandscape(deviceOrientation);
        var isStatusBarOrientationLandscape = isOrientationLandscape(statusBarOrientation);
        return isDeviceOrientationLandscape || isStatusBarOrientationLandscape;
    }
    ios.isLandscape = isLandscape;
    ios.MajorVersion = NSString.stringWithString(UIDevice.currentDevice.systemVersion).intValue;
    function openFile(filePath) {
        console.log("utils.ios.openFile() is deprecated; use utils.openFile() instead");
        return openFileAtRootModule(filePath);
    }
    ios.openFile = openFile;
    function getCurrentAppPath() {
        var currentDir = __dirname;
        var tnsModulesIndex = currentDir.indexOf("/tns_modules");
        var appPath = currentDir;
        if (tnsModulesIndex !== -1) {
            appPath = currentDir.substring(0, tnsModulesIndex);
        }
        return appPath;
    }
    ios.getCurrentAppPath = getCurrentAppPath;
    function joinPaths() {
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        if (!paths || paths.length === 0) {
            return "";
        }
        return NSString.stringWithString(NSString.pathWithComponents(paths)).stringByStandardizingPath;
    }
    ios.joinPaths = joinPaths;
    function getVisibleViewController(rootViewController) {
        if (rootViewController.presentedViewController) {
            return getVisibleViewController(rootViewController.presentedViewController);
        }
        if (rootViewController.isKindOfClass(UINavigationController.class())) {
            return getVisibleViewController(rootViewController.visibleViewController);
        }
        if (rootViewController.isKindOfClass(UITabBarController.class())) {
            return getVisibleViewController(rootViewController);
        }
        return rootViewController;
    }
    ios.getVisibleViewController = getVisibleViewController;
    var UIDocumentInteractionControllerDelegateImpl = (function (_super) {
        __extends(UIDocumentInteractionControllerDelegateImpl, _super);
        function UIDocumentInteractionControllerDelegateImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        UIDocumentInteractionControllerDelegateImpl.prototype.getViewController = function () {
            var app = UIApplication.sharedApplication;
            return app.keyWindow.rootViewController;
        };
        UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerViewControllerForPreview = function (controller) {
            return this.getViewController();
        };
        UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerViewForPreview = function (controller) {
            return this.getViewController().view;
        };
        UIDocumentInteractionControllerDelegateImpl.prototype.documentInteractionControllerRectForPreview = function (controller) {
            return this.getViewController().view.frame;
        };
        UIDocumentInteractionControllerDelegateImpl.ObjCProtocols = [UIDocumentInteractionControllerDelegate];
        return UIDocumentInteractionControllerDelegateImpl;
    }(NSObject));
    ios.UIDocumentInteractionControllerDelegateImpl = UIDocumentInteractionControllerDelegateImpl;
})(ios = exports.ios || (exports.ios = {}));
//# sourceMappingURL=native-helper.ios.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/number-utils.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
var epsilon = 1E-05;
function areClose(value1, value2) {
    return (Math.abs(value1 - value2) < epsilon);
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
    return (value1 > value2) || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
    return (value1 > value2) && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
    return (value1 < value2) && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
    return (Math.abs(value) < epsilon);
}
exports.isZero = isZero;
function greaterThanZero(value) {
    return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
    return value >= 0;
}
exports.notNegative = notNegative;
exports.radiansToDegrees = function (a) { return a * (180 / Math.PI); };
exports.degreesToRadians = function (a) { return a * (Math.PI / 180); };
//# sourceMappingURL=number-utils.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/types.js":
/***/ (function(module, exports) {

Object.defineProperty(exports, "__esModule", { value: true });
function isString(value) {
    return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
    return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isBoolean(value) {
    return typeof value === "boolean" || value instanceof Boolean;
}
exports.isBoolean = isBoolean;
function isFunction(value) {
    if (!value) {
        return false;
    }
    return typeof value === "function";
}
exports.isFunction = isFunction;
function isObject(value) {
    if (!value) {
        return false;
    }
    return typeof value === "object";
}
exports.isObject = isObject;
function isUndefined(value) {
    return value === undefined;
}
exports.isUndefined = isUndefined;
function isDefined(value) {
    return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
    return value === undefined || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
    if (value && !isFunction(value)) {
        throw new TypeError("Callback must be a valid function.");
    }
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;
function getClass(object) {
    return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
    var constructor = object.constructor;
    var result = classInfosMap.get(constructor);
    if (!result) {
        result = new ClassInfo(constructor);
        classInfosMap.set(constructor, result);
    }
    return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
    var result = [];
    var info = getClassInfo(object);
    while (info) {
        result.push(info.name);
        info = info.baseClassInfo;
    }
    return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = (function () {
    function ClassInfo(typeCosntructor) {
        this._typeCosntructor = typeCosntructor;
    }
    Object.defineProperty(ClassInfo.prototype, "name", {
        get: function () {
            if (!this._name) {
                var results = (funcNameRegex).exec(this._typeCosntructor.toString());
                this._name = (results && results.length > 1) ? results[1] : "";
            }
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
        get: function () {
            if (isUndefined(this._baseClassInfo)) {
                this._baseClassInfo = ClassInfo._getBase(this);
                if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
                    this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
                }
            }
            return this._baseClassInfo;
        },
        enumerable: true,
        configurable: true
    });
    ClassInfo._getBase = function (info) {
        var result = null;
        var constructorProto = info._typeCosntructor.prototype;
        if (constructorProto.__proto__) {
            result = getClassInfo(constructorProto.__proto__);
        }
        return result;
    };
    return ClassInfo;
}());
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
    return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
//# sourceMappingURL=types.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/utils-common.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var types = __webpack_require__("../node_modules/@nativescript/core/utils/types.js");
var mainthread_helper_1 = __webpack_require__("../node_modules/@nativescript/core/utils/mainthread-helper.js");
var module_name_sanitizer_1 = __webpack_require__("../node_modules/@nativescript/core/ui/builder/module-name-sanitizer.js");
var layout = __webpack_require__("../node_modules/@nativescript/core/utils/layout-helper/layout-helper.js");
exports.layout = layout;
__export(__webpack_require__("../node_modules/@nativescript/core/utils/mainthread-helper.js"));
exports.RESOURCE_PREFIX = "res://";
exports.FILE_PREFIX = "file:///";
function escapeRegexSymbols(source) {
    var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
    return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
    var result;
    if (!types.isString(value) || value.trim() === "") {
        result = value;
    }
    else {
        var valueAsNumber = +value;
        if (!isNaN(valueAsNumber)) {
            result = valueAsNumber;
        }
        else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
            result = value.toLowerCase() === "true" ? true : false;
        }
        else {
            result = value;
        }
    }
    return result;
}
exports.convertString = convertString;
function getModuleName(path) {
    var moduleName = path.replace("./", "");
    return module_name_sanitizer_1.sanitizeModuleName(moduleName);
}
exports.getModuleName = getModuleName;
function isFileOrResourcePath(path) {
    if (!types.isString(path)) {
        return false;
    }
    return path.indexOf("~/") === 0 ||
        path.indexOf("/") === 0 ||
        path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isFontIconURI(uri) {
    if (!types.isString(uri)) {
        return false;
    }
    var firstSegment = uri.trim().split("//")[0];
    return firstSegment && firstSegment.indexOf("font:") === 0;
}
exports.isFontIconURI = isFontIconURI;
function isDataURI(uri) {
    if (!types.isString(uri)) {
        return false;
    }
    var firstSegment = uri.trim().split(",")[0];
    return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
function mergeSort(arr, compareFunc) {
    if (arr.length < 2) {
        return arr;
    }
    var middle = arr.length / 2;
    var left = arr.slice(0, middle);
    var right = arr.slice(middle, arr.length);
    return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}
exports.mergeSort = mergeSort;
function merge(left, right, compareFunc) {
    var result = [];
    while (left.length && right.length) {
        if (compareFunc(left[0], right[0]) <= 0) {
            result.push(left.shift());
        }
        else {
            result.push(right.shift());
        }
    }
    while (left.length) {
        result.push(left.shift());
    }
    while (right.length) {
        result.push(right.shift());
    }
    return result;
}
exports.merge = merge;
function hasDuplicates(arr) {
    return arr.length !== eliminateDuplicates(arr).length;
}
exports.hasDuplicates = hasDuplicates;
function eliminateDuplicates(arr) {
    return Array.from(new Set(arr));
}
exports.eliminateDuplicates = eliminateDuplicates;
function executeOnMainThread(func) {
    if (mainthread_helper_1.isMainThread()) {
        return func();
    }
    else {
        mainthread_helper_1.dispatchToMainThread(func);
    }
}
exports.executeOnMainThread = executeOnMainThread;
function mainThreadify(func) {
    return function () {
        var _this = this;
        var argsToPass = arguments;
        executeOnMainThread(function () { return func.apply(_this, argsToPass); });
    };
}
exports.mainThreadify = mainThreadify;
//# sourceMappingURL=utils-common.js.map

/***/ }),

/***/ "../node_modules/@nativescript/core/utils/utils.js":
/***/ (function(module, exports, __webpack_require__) {

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var native_helper_1 = __webpack_require__("../node_modules/@nativescript/core/utils/native-helper.js");
exports.ios = native_helper_1.ios;
var trace_1 = __webpack_require__("../node_modules/@nativescript/core/trace/trace.js");
__export(__webpack_require__("../node_modules/@nativescript/core/utils/utils-common.js"));
var mainScreenScale;
function openFile(filePath) {
    try {
        var appPath = native_helper_1.ios.getCurrentAppPath();
        var path = filePath.replace("~", appPath);
        var controller = UIDocumentInteractionController.interactionControllerWithURL(NSURL.fileURLWithPath(path));
        controller.delegate = new native_helper_1.ios.UIDocumentInteractionControllerDelegateImpl();
        return controller.presentPreviewAnimated(true);
    }
    catch (e) {
        trace_1.write("Error in openFile", trace_1.categories.Error, trace_1.messageType.error);
    }
    return false;
}
exports.openFile = openFile;
function GC() {
    __collect();
}
exports.GC = GC;
function releaseNativeObject(object) {
    __releaseNativeCounterpart(object);
}
exports.releaseNativeObject = releaseNativeObject;
function openUrl(location) {
    try {
        var url = NSURL.URLWithString(location.trim());
        if (UIApplication.sharedApplication.canOpenURL(url)) {
            return UIApplication.sharedApplication.openURL(url);
        }
    }
    catch (e) {
        trace_1.write("Error in OpenURL", trace_1.categories.Error, trace_1.messageType.error);
    }
    return false;
}
exports.openUrl = openUrl;
mainScreenScale = UIScreen.mainScreen.scale;
//# sourceMappingURL=utils.ios.js.map

/***/ }),

/***/ "../node_modules/css-unit-converter/index.js":
/***/ (function(module, exports) {

var conversions = {
    // length
    'px': {
        'px': 1,
        'cm': 96.0/2.54,
        'mm': 96.0/25.4,
        'in': 96,
        'pt': 96.0/72.0,
        'pc': 16
    },
    'cm': {
        'px': 2.54/96.0,
        'cm': 1,
        'mm': 0.1,
        'in': 2.54,
        'pt': 2.54/72.0,
        'pc': 2.54/6.0
    },
    'mm': {
        'px': 25.4/96.0,
        'cm': 10,
        'mm': 1,
        'in': 25.4,
        'pt': 25.4/72.0,
        'pc': 25.4/6.0
    },
    'in': {
        'px': 1.0/96.0,
        'cm': 1.0/2.54,
        'mm': 1.0/25.4,
        'in': 1,
        'pt': 1.0/72.0,
        'pc': 1.0/6.0
    },
    'pt': {
        'px': 0.75,
        'cm': 72.0/2.54,
        'mm': 72.0/25.4,
        'in': 72,
        'pt': 1,
        'pc': 12
    },
    'pc': {
        'px': 6.0/96.0,
        'cm': 6.0/2.54,
        'mm': 6.0/25.4,
        'in': 6,
        'pt': 6.0/72.0,
        'pc': 1
    },
    // angle
    'deg': {
        'deg': 1,
        'grad': 0.9,
        'rad': 180/Math.PI,
        'turn': 360
    },
    'grad': {
        'deg': 400/360,
        'grad': 1,
        'rad': 200/Math.PI,
        'turn': 400
    },
    'rad': {
        'deg': Math.PI/180,
        'grad': Math.PI/200,
        'rad': 1,
        'turn': Math.PI*2
    },
    'turn': {
        'deg': 1/360,
        'grad': 1/400,
        'rad': 0.5/Math.PI,
        'turn': 1
    },
    // time
    's': {
        's': 1,
        'ms': 1/1000
    },
    'ms': {
        's': 1000,
        'ms': 1
    },
    // frequency
    'Hz': {
        'Hz': 1,
        'kHz': 1000
    },
    'kHz': {
        'Hz': 1/1000,
        'kHz': 1
    },
    // resolution
    'dpi': {
        'dpi': 1,
        'dpcm': 1.0/2.54,
        'dppx': 1/96
    },
    'dpcm': {
        'dpi': 2.54,
        'dpcm': 1,
        'dppx': 2.54/96.0
    },
    'dppx': {
        'dpi': 96,
        'dpcm': 96.0/2.54,
        'dppx': 1
    }
};

module.exports = function (value, sourceUnit, targetUnit, precision) {
    if (!conversions.hasOwnProperty(targetUnit))
        throw new Error("Cannot convert to " + targetUnit);

    if (!conversions[targetUnit].hasOwnProperty(sourceUnit))
        throw new Error("Cannot convert from " + sourceUnit + " to " + targetUnit);

    precision = Math.pow(10, parseInt(precision) || 5);
    return Math.round((conversions[targetUnit][sourceUnit] * value) * precision) / precision;
};


/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/css2json-loader.js?useForImports!../node_modules/nativescript-theme-core/css/core.light.css":
/***/ (function(module, exports) {

module.exports = {"type":"stylesheet","stylesheet":{"rules":[{"type":"comment","comment":"!\r\n * NativeScript Theme v1.0.6 (https://nativescript.org)\r\n * Copyright 2016-2016 The Theme Authors\r\n * Copyright 2016-2016 Telerik\r\n * Licensed under MIT (https://github.com/NativeScript/theme/blob/master/LICENSE)\r\n "},{"type":"rule","selectors":[".c-white"],"declarations":[{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".c-bg-white"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"}]},{"type":"rule","selectors":[".c-black"],"declarations":[{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".c-bg-black"],"declarations":[{"type":"declaration","property":"background-color","value":"#000"}]},{"type":"rule","selectors":[".c-aqua"],"declarations":[{"type":"declaration","property":"color","value":"#00caab"}]},{"type":"rule","selectors":[".c-bg-aqua"],"declarations":[{"type":"declaration","property":"background-color","value":"#00caab"}]},{"type":"rule","selectors":[".c-blue"],"declarations":[{"type":"declaration","property":"color","value":"#3d5afe"}]},{"type":"rule","selectors":[".c-bg-blue"],"declarations":[{"type":"declaration","property":"background-color","value":"#3d5afe"}]},{"type":"rule","selectors":[".c-charcoal"],"declarations":[{"type":"declaration","property":"color","value":"#303030"}]},{"type":"rule","selectors":[".c-bg-charcoal"],"declarations":[{"type":"declaration","property":"background-color","value":"#303030"}]},{"type":"rule","selectors":[".c-brown"],"declarations":[{"type":"declaration","property":"color","value":"#795548"}]},{"type":"rule","selectors":[".c-bg-brown"],"declarations":[{"type":"declaration","property":"background-color","value":"#795548"}]},{"type":"rule","selectors":[".c-forest"],"declarations":[{"type":"declaration","property":"color","value":"#006968"}]},{"type":"rule","selectors":[".c-bg-forest"],"declarations":[{"type":"declaration","property":"background-color","value":"#006968"}]},{"type":"rule","selectors":[".c-grey"],"declarations":[{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".c-bg-grey"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".c-grey-light"],"declarations":[{"type":"declaration","property":"color","value":"#bababa"}]},{"type":"rule","selectors":[".c-bg-grey-light"],"declarations":[{"type":"declaration","property":"background-color","value":"#bababa"}]},{"type":"rule","selectors":[".c-grey-dark"],"declarations":[{"type":"declaration","property":"color","value":"#5c687c"}]},{"type":"rule","selectors":[".c-bg-grey-dark"],"declarations":[{"type":"declaration","property":"background-color","value":"#5c687c"}]},{"type":"rule","selectors":[".c-purple"],"declarations":[{"type":"declaration","property":"color","value":"#8130ff"}]},{"type":"rule","selectors":[".c-bg-purple"],"declarations":[{"type":"declaration","property":"background-color","value":"#8130ff"}]},{"type":"rule","selectors":[".c-lemon"],"declarations":[{"type":"declaration","property":"color","value":"#ffea00"}]},{"type":"rule","selectors":[".c-bg-lemon"],"declarations":[{"type":"declaration","property":"background-color","value":"#ffea00"}]},{"type":"rule","selectors":[".c-lime"],"declarations":[{"type":"declaration","property":"color","value":"#aee406"}]},{"type":"rule","selectors":[".c-bg-lime"],"declarations":[{"type":"declaration","property":"background-color","value":"#aee406"}]},{"type":"rule","selectors":[".c-orange"],"declarations":[{"type":"declaration","property":"color","value":"#f57c00"}]},{"type":"rule","selectors":[".c-bg-orange"],"declarations":[{"type":"declaration","property":"background-color","value":"#f57c00"}]},{"type":"rule","selectors":[".c-ruby"],"declarations":[{"type":"declaration","property":"color","value":"#ff1744"}]},{"type":"rule","selectors":[".c-bg-ruby"],"declarations":[{"type":"declaration","property":"background-color","value":"#ff1744"}]},{"type":"rule","selectors":[".c-sky"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".c-bg-sky"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".w-full"],"declarations":[{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".w-100"],"declarations":[{"type":"declaration","property":"width","value":"100"}]},{"type":"rule","selectors":[".h-full"],"declarations":[{"type":"declaration","property":"height","value":"100%"}]},{"type":"rule","selectors":[".h-100"],"declarations":[{"type":"declaration","property":"height","value":"100"}]},{"type":"rule","selectors":[".m-0"],"declarations":[{"type":"declaration","property":"margin","value":"0"}]},{"type":"rule","selectors":[".m-t-0"],"declarations":[{"type":"declaration","property":"margin-top","value":"0"}]},{"type":"rule","selectors":[".m-r-0"],"declarations":[{"type":"declaration","property":"margin-right","value":"0"}]},{"type":"rule","selectors":[".m-b-0"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"0"}]},{"type":"rule","selectors":[".m-l-0"],"declarations":[{"type":"declaration","property":"margin-left","value":"0"}]},{"type":"rule","selectors":[".m-x-0"],"declarations":[{"type":"declaration","property":"margin-right","value":"0"},{"type":"declaration","property":"margin-left","value":"0"}]},{"type":"rule","selectors":[".m-y-0"],"declarations":[{"type":"declaration","property":"margin-top","value":"0"},{"type":"declaration","property":"margin-bottom","value":"0"}]},{"type":"rule","selectors":[".m-2"],"declarations":[{"type":"declaration","property":"margin","value":"2"}]},{"type":"rule","selectors":[".m-t-2"],"declarations":[{"type":"declaration","property":"margin-top","value":"2"}]},{"type":"rule","selectors":[".m-r-2"],"declarations":[{"type":"declaration","property":"margin-right","value":"2"}]},{"type":"rule","selectors":[".m-b-2"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"2"}]},{"type":"rule","selectors":[".m-l-2"],"declarations":[{"type":"declaration","property":"margin-left","value":"2"}]},{"type":"rule","selectors":[".m-x-2"],"declarations":[{"type":"declaration","property":"margin-right","value":"2"},{"type":"declaration","property":"margin-left","value":"2"}]},{"type":"rule","selectors":[".m-y-2"],"declarations":[{"type":"declaration","property":"margin-top","value":"2"},{"type":"declaration","property":"margin-bottom","value":"2"}]},{"type":"rule","selectors":[".m-4"],"declarations":[{"type":"declaration","property":"margin","value":"4"}]},{"type":"rule","selectors":[".m-t-4"],"declarations":[{"type":"declaration","property":"margin-top","value":"4"}]},{"type":"rule","selectors":[".m-r-4"],"declarations":[{"type":"declaration","property":"margin-right","value":"4"}]},{"type":"rule","selectors":[".m-b-4"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"4"}]},{"type":"rule","selectors":[".m-l-4"],"declarations":[{"type":"declaration","property":"margin-left","value":"4"}]},{"type":"rule","selectors":[".m-x-4"],"declarations":[{"type":"declaration","property":"margin-right","value":"4"},{"type":"declaration","property":"margin-left","value":"4"}]},{"type":"rule","selectors":[".m-y-4"],"declarations":[{"type":"declaration","property":"margin-top","value":"4"},{"type":"declaration","property":"margin-bottom","value":"4"}]},{"type":"rule","selectors":[".m-5"],"declarations":[{"type":"declaration","property":"margin","value":"5"}]},{"type":"rule","selectors":[".m-t-5"],"declarations":[{"type":"declaration","property":"margin-top","value":"5"}]},{"type":"rule","selectors":[".m-r-5"],"declarations":[{"type":"declaration","property":"margin-right","value":"5"}]},{"type":"rule","selectors":[".m-b-5"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"5"}]},{"type":"rule","selectors":[".m-l-5"],"declarations":[{"type":"declaration","property":"margin-left","value":"5"}]},{"type":"rule","selectors":[".m-x-5"],"declarations":[{"type":"declaration","property":"margin-right","value":"5"},{"type":"declaration","property":"margin-left","value":"5"}]},{"type":"rule","selectors":[".m-y-5"],"declarations":[{"type":"declaration","property":"margin-top","value":"5"},{"type":"declaration","property":"margin-bottom","value":"5"}]},{"type":"rule","selectors":[".m-8"],"declarations":[{"type":"declaration","property":"margin","value":"8"}]},{"type":"rule","selectors":[".m-t-8"],"declarations":[{"type":"declaration","property":"margin-top","value":"8"}]},{"type":"rule","selectors":[".m-r-8"],"declarations":[{"type":"declaration","property":"margin-right","value":"8"}]},{"type":"rule","selectors":[".m-b-8"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"8"}]},{"type":"rule","selectors":[".m-l-8"],"declarations":[{"type":"declaration","property":"margin-left","value":"8"}]},{"type":"rule","selectors":[".m-x-8"],"declarations":[{"type":"declaration","property":"margin-right","value":"8"},{"type":"declaration","property":"margin-left","value":"8"}]},{"type":"rule","selectors":[".m-y-8"],"declarations":[{"type":"declaration","property":"margin-top","value":"8"},{"type":"declaration","property":"margin-bottom","value":"8"}]},{"type":"rule","selectors":[".m-10"],"declarations":[{"type":"declaration","property":"margin","value":"10"}]},{"type":"rule","selectors":[".m-t-10"],"declarations":[{"type":"declaration","property":"margin-top","value":"10"}]},{"type":"rule","selectors":[".m-r-10"],"declarations":[{"type":"declaration","property":"margin-right","value":"10"}]},{"type":"rule","selectors":[".m-b-10"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"10"}]},{"type":"rule","selectors":[".m-l-10"],"declarations":[{"type":"declaration","property":"margin-left","value":"10"}]},{"type":"rule","selectors":[".m-x-10"],"declarations":[{"type":"declaration","property":"margin-right","value":"10"},{"type":"declaration","property":"margin-left","value":"10"}]},{"type":"rule","selectors":[".m-y-10"],"declarations":[{"type":"declaration","property":"margin-top","value":"10"},{"type":"declaration","property":"margin-bottom","value":"10"}]},{"type":"rule","selectors":[".m-12"],"declarations":[{"type":"declaration","property":"margin","value":"12"}]},{"type":"rule","selectors":[".m-t-12"],"declarations":[{"type":"declaration","property":"margin-top","value":"12"}]},{"type":"rule","selectors":[".m-r-12"],"declarations":[{"type":"declaration","property":"margin-right","value":"12"}]},{"type":"rule","selectors":[".m-b-12"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"12"}]},{"type":"rule","selectors":[".m-l-12"],"declarations":[{"type":"declaration","property":"margin-left","value":"12"}]},{"type":"rule","selectors":[".m-x-12"],"declarations":[{"type":"declaration","property":"margin-right","value":"12"},{"type":"declaration","property":"margin-left","value":"12"}]},{"type":"rule","selectors":[".m-y-12"],"declarations":[{"type":"declaration","property":"margin-top","value":"12"},{"type":"declaration","property":"margin-bottom","value":"12"}]},{"type":"rule","selectors":[".m-15"],"declarations":[{"type":"declaration","property":"margin","value":"15"}]},{"type":"rule","selectors":[".m-t-15"],"declarations":[{"type":"declaration","property":"margin-top","value":"15"}]},{"type":"rule","selectors":[".m-r-15"],"declarations":[{"type":"declaration","property":"margin-right","value":"15"}]},{"type":"rule","selectors":[".m-b-15"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"15"}]},{"type":"rule","selectors":[".m-l-15"],"declarations":[{"type":"declaration","property":"margin-left","value":"15"}]},{"type":"rule","selectors":[".m-x-15"],"declarations":[{"type":"declaration","property":"margin-right","value":"15"},{"type":"declaration","property":"margin-left","value":"15"}]},{"type":"rule","selectors":[".m-y-15"],"declarations":[{"type":"declaration","property":"margin-top","value":"15"},{"type":"declaration","property":"margin-bottom","value":"15"}]},{"type":"rule","selectors":[".m-16"],"declarations":[{"type":"declaration","property":"margin","value":"16"}]},{"type":"rule","selectors":[".m-t-16"],"declarations":[{"type":"declaration","property":"margin-top","value":"16"}]},{"type":"rule","selectors":[".m-r-16"],"declarations":[{"type":"declaration","property":"margin-right","value":"16"}]},{"type":"rule","selectors":[".m-b-16"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"16"}]},{"type":"rule","selectors":[".m-l-16"],"declarations":[{"type":"declaration","property":"margin-left","value":"16"}]},{"type":"rule","selectors":[".m-x-16"],"declarations":[{"type":"declaration","property":"margin-right","value":"16"},{"type":"declaration","property":"margin-left","value":"16"}]},{"type":"rule","selectors":[".m-y-16"],"declarations":[{"type":"declaration","property":"margin-top","value":"16"},{"type":"declaration","property":"margin-bottom","value":"16"}]},{"type":"rule","selectors":[".m-20"],"declarations":[{"type":"declaration","property":"margin","value":"20"}]},{"type":"rule","selectors":[".m-t-20"],"declarations":[{"type":"declaration","property":"margin-top","value":"20"}]},{"type":"rule","selectors":[".m-r-20"],"declarations":[{"type":"declaration","property":"margin-right","value":"20"}]},{"type":"rule","selectors":[".m-b-20"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"20"}]},{"type":"rule","selectors":[".m-l-20"],"declarations":[{"type":"declaration","property":"margin-left","value":"20"}]},{"type":"rule","selectors":[".m-x-20"],"declarations":[{"type":"declaration","property":"margin-right","value":"20"},{"type":"declaration","property":"margin-left","value":"20"}]},{"type":"rule","selectors":[".m-y-20"],"declarations":[{"type":"declaration","property":"margin-top","value":"20"},{"type":"declaration","property":"margin-bottom","value":"20"}]},{"type":"rule","selectors":[".m-24"],"declarations":[{"type":"declaration","property":"margin","value":"24"}]},{"type":"rule","selectors":[".m-t-24"],"declarations":[{"type":"declaration","property":"margin-top","value":"24"}]},{"type":"rule","selectors":[".m-r-24"],"declarations":[{"type":"declaration","property":"margin-right","value":"24"}]},{"type":"rule","selectors":[".m-b-24"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".m-l-24"],"declarations":[{"type":"declaration","property":"margin-left","value":"24"}]},{"type":"rule","selectors":[".m-x-24"],"declarations":[{"type":"declaration","property":"margin-right","value":"24"},{"type":"declaration","property":"margin-left","value":"24"}]},{"type":"rule","selectors":[".m-y-24"],"declarations":[{"type":"declaration","property":"margin-top","value":"24"},{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".m-25"],"declarations":[{"type":"declaration","property":"margin","value":"25"}]},{"type":"rule","selectors":[".m-t-25"],"declarations":[{"type":"declaration","property":"margin-top","value":"25"}]},{"type":"rule","selectors":[".m-r-25"],"declarations":[{"type":"declaration","property":"margin-right","value":"25"}]},{"type":"rule","selectors":[".m-b-25"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"25"}]},{"type":"rule","selectors":[".m-l-25"],"declarations":[{"type":"declaration","property":"margin-left","value":"25"}]},{"type":"rule","selectors":[".m-x-25"],"declarations":[{"type":"declaration","property":"margin-right","value":"25"},{"type":"declaration","property":"margin-left","value":"25"}]},{"type":"rule","selectors":[".m-y-25"],"declarations":[{"type":"declaration","property":"margin-top","value":"25"},{"type":"declaration","property":"margin-bottom","value":"25"}]},{"type":"rule","selectors":[".m-28"],"declarations":[{"type":"declaration","property":"margin","value":"28"}]},{"type":"rule","selectors":[".m-t-28"],"declarations":[{"type":"declaration","property":"margin-top","value":"28"}]},{"type":"rule","selectors":[".m-r-28"],"declarations":[{"type":"declaration","property":"margin-right","value":"28"}]},{"type":"rule","selectors":[".m-b-28"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"28"}]},{"type":"rule","selectors":[".m-l-28"],"declarations":[{"type":"declaration","property":"margin-left","value":"28"}]},{"type":"rule","selectors":[".m-x-28"],"declarations":[{"type":"declaration","property":"margin-right","value":"28"},{"type":"declaration","property":"margin-left","value":"28"}]},{"type":"rule","selectors":[".m-y-28"],"declarations":[{"type":"declaration","property":"margin-top","value":"28"},{"type":"declaration","property":"margin-bottom","value":"28"}]},{"type":"rule","selectors":[".m-30"],"declarations":[{"type":"declaration","property":"margin","value":"30"}]},{"type":"rule","selectors":[".m-t-30"],"declarations":[{"type":"declaration","property":"margin-top","value":"30"}]},{"type":"rule","selectors":[".m-r-30"],"declarations":[{"type":"declaration","property":"margin-right","value":"30"}]},{"type":"rule","selectors":[".m-b-30"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"30"}]},{"type":"rule","selectors":[".m-l-30"],"declarations":[{"type":"declaration","property":"margin-left","value":"30"}]},{"type":"rule","selectors":[".m-x-30"],"declarations":[{"type":"declaration","property":"margin-right","value":"30"},{"type":"declaration","property":"margin-left","value":"30"}]},{"type":"rule","selectors":[".m-y-30"],"declarations":[{"type":"declaration","property":"margin-top","value":"30"},{"type":"declaration","property":"margin-bottom","value":"30"}]},{"type":"rule","selectors":[".p-0"],"declarations":[{"type":"declaration","property":"padding","value":"0"}]},{"type":"rule","selectors":[".p-t-0"],"declarations":[{"type":"declaration","property":"padding-top","value":"0"}]},{"type":"rule","selectors":[".p-r-0"],"declarations":[{"type":"declaration","property":"padding-right","value":"0"}]},{"type":"rule","selectors":[".p-b-0"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"0"}]},{"type":"rule","selectors":[".p-l-0"],"declarations":[{"type":"declaration","property":"padding-left","value":"0"}]},{"type":"rule","selectors":[".p-x-0"],"declarations":[{"type":"declaration","property":"padding-right","value":"0"},{"type":"declaration","property":"padding-left","value":"0"}]},{"type":"rule","selectors":[".p-y-0"],"declarations":[{"type":"declaration","property":"padding-top","value":"0"},{"type":"declaration","property":"padding-bottom","value":"0"}]},{"type":"rule","selectors":[".p-2"],"declarations":[{"type":"declaration","property":"padding","value":"2"}]},{"type":"rule","selectors":[".p-t-2"],"declarations":[{"type":"declaration","property":"padding-top","value":"2"}]},{"type":"rule","selectors":[".p-r-2"],"declarations":[{"type":"declaration","property":"padding-right","value":"2"}]},{"type":"rule","selectors":[".p-b-2"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"2"}]},{"type":"rule","selectors":[".p-l-2"],"declarations":[{"type":"declaration","property":"padding-left","value":"2"}]},{"type":"rule","selectors":[".p-x-2"],"declarations":[{"type":"declaration","property":"padding-right","value":"2"},{"type":"declaration","property":"padding-left","value":"2"}]},{"type":"rule","selectors":[".p-y-2"],"declarations":[{"type":"declaration","property":"padding-top","value":"2"},{"type":"declaration","property":"padding-bottom","value":"2"}]},{"type":"rule","selectors":[".p-4"],"declarations":[{"type":"declaration","property":"padding","value":"4"}]},{"type":"rule","selectors":[".p-t-4"],"declarations":[{"type":"declaration","property":"padding-top","value":"4"}]},{"type":"rule","selectors":[".p-r-4"],"declarations":[{"type":"declaration","property":"padding-right","value":"4"}]},{"type":"rule","selectors":[".p-b-4"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"4"}]},{"type":"rule","selectors":[".p-l-4"],"declarations":[{"type":"declaration","property":"padding-left","value":"4"}]},{"type":"rule","selectors":[".p-x-4"],"declarations":[{"type":"declaration","property":"padding-right","value":"4"},{"type":"declaration","property":"padding-left","value":"4"}]},{"type":"rule","selectors":[".p-y-4"],"declarations":[{"type":"declaration","property":"padding-top","value":"4"},{"type":"declaration","property":"padding-bottom","value":"4"}]},{"type":"rule","selectors":[".p-5"],"declarations":[{"type":"declaration","property":"padding","value":"5"}]},{"type":"rule","selectors":[".p-t-5"],"declarations":[{"type":"declaration","property":"padding-top","value":"5"}]},{"type":"rule","selectors":[".p-r-5"],"declarations":[{"type":"declaration","property":"padding-right","value":"5"}]},{"type":"rule","selectors":[".p-b-5"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"5"}]},{"type":"rule","selectors":[".p-l-5"],"declarations":[{"type":"declaration","property":"padding-left","value":"5"}]},{"type":"rule","selectors":[".p-x-5"],"declarations":[{"type":"declaration","property":"padding-right","value":"5"},{"type":"declaration","property":"padding-left","value":"5"}]},{"type":"rule","selectors":[".p-y-5"],"declarations":[{"type":"declaration","property":"padding-top","value":"5"},{"type":"declaration","property":"padding-bottom","value":"5"}]},{"type":"rule","selectors":[".p-8"],"declarations":[{"type":"declaration","property":"padding","value":"8"}]},{"type":"rule","selectors":[".p-t-8"],"declarations":[{"type":"declaration","property":"padding-top","value":"8"}]},{"type":"rule","selectors":[".p-r-8"],"declarations":[{"type":"declaration","property":"padding-right","value":"8"}]},{"type":"rule","selectors":[".p-b-8"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"8"}]},{"type":"rule","selectors":[".p-l-8"],"declarations":[{"type":"declaration","property":"padding-left","value":"8"}]},{"type":"rule","selectors":[".p-x-8"],"declarations":[{"type":"declaration","property":"padding-right","value":"8"},{"type":"declaration","property":"padding-left","value":"8"}]},{"type":"rule","selectors":[".p-y-8"],"declarations":[{"type":"declaration","property":"padding-top","value":"8"},{"type":"declaration","property":"padding-bottom","value":"8"}]},{"type":"rule","selectors":[".p-10"],"declarations":[{"type":"declaration","property":"padding","value":"10"}]},{"type":"rule","selectors":[".p-t-10"],"declarations":[{"type":"declaration","property":"padding-top","value":"10"}]},{"type":"rule","selectors":[".p-r-10"],"declarations":[{"type":"declaration","property":"padding-right","value":"10"}]},{"type":"rule","selectors":[".p-b-10"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"10"}]},{"type":"rule","selectors":[".p-l-10"],"declarations":[{"type":"declaration","property":"padding-left","value":"10"}]},{"type":"rule","selectors":[".p-x-10"],"declarations":[{"type":"declaration","property":"padding-right","value":"10"},{"type":"declaration","property":"padding-left","value":"10"}]},{"type":"rule","selectors":[".p-y-10"],"declarations":[{"type":"declaration","property":"padding-top","value":"10"},{"type":"declaration","property":"padding-bottom","value":"10"}]},{"type":"rule","selectors":[".p-12"],"declarations":[{"type":"declaration","property":"padding","value":"12"}]},{"type":"rule","selectors":[".p-t-12"],"declarations":[{"type":"declaration","property":"padding-top","value":"12"}]},{"type":"rule","selectors":[".p-r-12"],"declarations":[{"type":"declaration","property":"padding-right","value":"12"}]},{"type":"rule","selectors":[".p-b-12"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"12"}]},{"type":"rule","selectors":[".p-l-12"],"declarations":[{"type":"declaration","property":"padding-left","value":"12"}]},{"type":"rule","selectors":[".p-x-12"],"declarations":[{"type":"declaration","property":"padding-right","value":"12"},{"type":"declaration","property":"padding-left","value":"12"}]},{"type":"rule","selectors":[".p-y-12"],"declarations":[{"type":"declaration","property":"padding-top","value":"12"},{"type":"declaration","property":"padding-bottom","value":"12"}]},{"type":"rule","selectors":[".p-15"],"declarations":[{"type":"declaration","property":"padding","value":"15"}]},{"type":"rule","selectors":[".p-t-15"],"declarations":[{"type":"declaration","property":"padding-top","value":"15"}]},{"type":"rule","selectors":[".p-r-15"],"declarations":[{"type":"declaration","property":"padding-right","value":"15"}]},{"type":"rule","selectors":[".p-b-15"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"15"}]},{"type":"rule","selectors":[".p-l-15"],"declarations":[{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".p-x-15"],"declarations":[{"type":"declaration","property":"padding-right","value":"15"},{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".p-y-15"],"declarations":[{"type":"declaration","property":"padding-top","value":"15"},{"type":"declaration","property":"padding-bottom","value":"15"}]},{"type":"rule","selectors":[".p-16"],"declarations":[{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".p-t-16"],"declarations":[{"type":"declaration","property":"padding-top","value":"16"}]},{"type":"rule","selectors":[".p-r-16"],"declarations":[{"type":"declaration","property":"padding-right","value":"16"}]},{"type":"rule","selectors":[".p-b-16"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"16"}]},{"type":"rule","selectors":[".p-l-16"],"declarations":[{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".p-x-16"],"declarations":[{"type":"declaration","property":"padding-right","value":"16"},{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".p-y-16"],"declarations":[{"type":"declaration","property":"padding-top","value":"16"},{"type":"declaration","property":"padding-bottom","value":"16"}]},{"type":"rule","selectors":[".p-20"],"declarations":[{"type":"declaration","property":"padding","value":"20"}]},{"type":"rule","selectors":[".p-t-20"],"declarations":[{"type":"declaration","property":"padding-top","value":"20"}]},{"type":"rule","selectors":[".p-r-20"],"declarations":[{"type":"declaration","property":"padding-right","value":"20"}]},{"type":"rule","selectors":[".p-b-20"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"20"}]},{"type":"rule","selectors":[".p-l-20"],"declarations":[{"type":"declaration","property":"padding-left","value":"20"}]},{"type":"rule","selectors":[".p-x-20"],"declarations":[{"type":"declaration","property":"padding-right","value":"20"},{"type":"declaration","property":"padding-left","value":"20"}]},{"type":"rule","selectors":[".p-y-20"],"declarations":[{"type":"declaration","property":"padding-top","value":"20"},{"type":"declaration","property":"padding-bottom","value":"20"}]},{"type":"rule","selectors":[".p-24"],"declarations":[{"type":"declaration","property":"padding","value":"24"}]},{"type":"rule","selectors":[".p-t-24"],"declarations":[{"type":"declaration","property":"padding-top","value":"24"}]},{"type":"rule","selectors":[".p-r-24"],"declarations":[{"type":"declaration","property":"padding-right","value":"24"}]},{"type":"rule","selectors":[".p-b-24"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"24"}]},{"type":"rule","selectors":[".p-l-24"],"declarations":[{"type":"declaration","property":"padding-left","value":"24"}]},{"type":"rule","selectors":[".p-x-24"],"declarations":[{"type":"declaration","property":"padding-right","value":"24"},{"type":"declaration","property":"padding-left","value":"24"}]},{"type":"rule","selectors":[".p-y-24"],"declarations":[{"type":"declaration","property":"padding-top","value":"24"},{"type":"declaration","property":"padding-bottom","value":"24"}]},{"type":"rule","selectors":[".p-25"],"declarations":[{"type":"declaration","property":"padding","value":"25"}]},{"type":"rule","selectors":[".p-t-25"],"declarations":[{"type":"declaration","property":"padding-top","value":"25"}]},{"type":"rule","selectors":[".p-r-25"],"declarations":[{"type":"declaration","property":"padding-right","value":"25"}]},{"type":"rule","selectors":[".p-b-25"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"25"}]},{"type":"rule","selectors":[".p-l-25"],"declarations":[{"type":"declaration","property":"padding-left","value":"25"}]},{"type":"rule","selectors":[".p-x-25"],"declarations":[{"type":"declaration","property":"padding-right","value":"25"},{"type":"declaration","property":"padding-left","value":"25"}]},{"type":"rule","selectors":[".p-y-25"],"declarations":[{"type":"declaration","property":"padding-top","value":"25"},{"type":"declaration","property":"padding-bottom","value":"25"}]},{"type":"rule","selectors":[".p-28"],"declarations":[{"type":"declaration","property":"padding","value":"28"}]},{"type":"rule","selectors":[".p-t-28"],"declarations":[{"type":"declaration","property":"padding-top","value":"28"}]},{"type":"rule","selectors":[".p-r-28"],"declarations":[{"type":"declaration","property":"padding-right","value":"28"}]},{"type":"rule","selectors":[".p-b-28"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"28"}]},{"type":"rule","selectors":[".p-l-28"],"declarations":[{"type":"declaration","property":"padding-left","value":"28"}]},{"type":"rule","selectors":[".p-x-28"],"declarations":[{"type":"declaration","property":"padding-right","value":"28"},{"type":"declaration","property":"padding-left","value":"28"}]},{"type":"rule","selectors":[".p-y-28"],"declarations":[{"type":"declaration","property":"padding-top","value":"28"},{"type":"declaration","property":"padding-bottom","value":"28"}]},{"type":"rule","selectors":[".p-30"],"declarations":[{"type":"declaration","property":"padding","value":"30"}]},{"type":"rule","selectors":[".p-t-30"],"declarations":[{"type":"declaration","property":"padding-top","value":"30"}]},{"type":"rule","selectors":[".p-r-30"],"declarations":[{"type":"declaration","property":"padding-right","value":"30"}]},{"type":"rule","selectors":[".p-b-30"],"declarations":[{"type":"declaration","property":"padding-bottom","value":"30"}]},{"type":"rule","selectors":[".p-l-30"],"declarations":[{"type":"declaration","property":"padding-left","value":"30"}]},{"type":"rule","selectors":[".p-x-30"],"declarations":[{"type":"declaration","property":"padding-right","value":"30"},{"type":"declaration","property":"padding-left","value":"30"}]},{"type":"rule","selectors":[".p-y-30"],"declarations":[{"type":"declaration","property":"padding-top","value":"30"},{"type":"declaration","property":"padding-bottom","value":"30"}]},{"type":"rule","selectors":[".hr-light"],"declarations":[{"type":"declaration","property":"height","value":"1"},{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".hr-dark"],"declarations":[{"type":"declaration","property":"height","value":"1"},{"type":"declaration","property":"background-color","value":"#303030"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".text-left"],"declarations":[{"type":"declaration","property":"text-align","value":"left"}]},{"type":"rule","selectors":[".text-right"],"declarations":[{"type":"declaration","property":"text-align","value":"right"}]},{"type":"rule","selectors":[".text-center"],"declarations":[{"type":"declaration","property":"text-align","value":"center"}]},{"type":"rule","selectors":[".text-lowercase"],"declarations":[{"type":"declaration","property":"text-transform","value":"lowercase"}]},{"type":"rule","selectors":[".text-uppercase"],"declarations":[{"type":"declaration","property":"text-transform","value":"uppercase"}]},{"type":"rule","selectors":[".text-capitalize"],"declarations":[{"type":"declaration","property":"text-transform","value":"capitalize"}]},{"type":"rule","selectors":[".font-weight-normal"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"}]},{"type":"rule","selectors":[".font-weight-bold"],"declarations":[{"type":"declaration","property":"font-weight","value":"bold"}]},{"type":"rule","selectors":[".font-italic"],"declarations":[{"type":"declaration","property":"font-style","value":"italic"}]},{"type":"rule","selectors":[".t-10"],"declarations":[{"type":"declaration","property":"font-size","value":"10"}]},{"type":"rule","selectors":[".t-12"],"declarations":[{"type":"declaration","property":"font-size","value":"12"}]},{"type":"rule","selectors":[".t-14"],"declarations":[{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".t-15"],"declarations":[{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".t-16"],"declarations":[{"type":"declaration","property":"font-size","value":"16"}]},{"type":"rule","selectors":[".t-17"],"declarations":[{"type":"declaration","property":"font-size","value":"17"}]},{"type":"rule","selectors":[".t-18"],"declarations":[{"type":"declaration","property":"font-size","value":"18"}]},{"type":"rule","selectors":[".t-19"],"declarations":[{"type":"declaration","property":"font-size","value":"19"}]},{"type":"rule","selectors":[".t-20"],"declarations":[{"type":"declaration","property":"font-size","value":"20"}]},{"type":"rule","selectors":[".t-25"],"declarations":[{"type":"declaration","property":"font-size","value":"25"}]},{"type":"rule","selectors":[".t-30"],"declarations":[{"type":"declaration","property":"font-size","value":"30"}]},{"type":"rule","selectors":[".img-rounded"],"declarations":[{"type":"declaration","property":"border-radius","value":"5"}]},{"type":"rule","selectors":[".img-circle"],"declarations":[{"type":"declaration","property":"border-radius","value":"20"}]},{"type":"rule","selectors":[".img-thumbnail"],"declarations":[{"type":"declaration","property":"border-radius","value":"0"}]},{"type":"rule","selectors":[".invisible"],"declarations":[{"type":"declaration","property":"visibility","value":"collapse"}]},{"type":"rule","selectors":[".pull-left"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"}]},{"type":"rule","selectors":[".pull-right"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"right"}]},{"type":"rule","selectors":[".m-x-auto"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"center"}]},{"type":"rule","selectors":[".m-y-auto"],"declarations":[{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".text-primary"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".text-danger"],"declarations":[{"type":"declaration","property":"color","value":"#d50000"}]},{"type":"rule","selectors":[".text-muted"],"declarations":[{"type":"declaration","property":"color","value":"#9e9e9e"}]},{"type":"rule","selectors":[".bg-primary"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".bg-danger"],"declarations":[{"type":"declaration","property":"background-color","value":"#d50000"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".action-bar"],"declarations":[{"type":"declaration","property":"background-color","value":"#F8F8F8"},{"type":"declaration","property":"color","value":"#212121"}]},{"type":"rule","selectors":[".action-bar .action-bar-title"],"declarations":[{"type":"declaration","property":"font-weight","value":"bold"},{"type":"declaration","property":"font-size","value":"17"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".action-bar .action-item"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"}]},{"type":"rule","selectors":[".activity-indicator"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"width","value":"30"},{"type":"declaration","property":"height","value":"30"}]},{"type":"rule","selectors":[".btn"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"min-height","value":"36"},{"type":"declaration","property":"min-width","value":"64"},{"type":"declaration","property":"padding","value":"10 10 10 10"},{"type":"declaration","property":"font-size","value":"18"},{"type":"declaration","property":"margin","value":"8 16 8 16"}]},{"type":"rule","selectors":[".btn.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"color","value":"#fff"},{"type":"declaration","property":"background-color","value":"#c0ebff"}]},{"type":"rule","selectors":[".btn-primary"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"border-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".btn-primary.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"background-color","value":"#01a0ec"},{"type":"declaration","property":"border-color","value":"#01a0ec"}]},{"type":"rule","selectors":[".btn-primary.btn-aqua"],"declarations":[{"type":"declaration","property":"background-color","value":"#00caab"}]},{"type":"rule","selectors":[".btn-primary.btn-blue"],"declarations":[{"type":"declaration","property":"background-color","value":"#3d5afe"}]},{"type":"rule","selectors":[".btn-primary.btn-brown"],"declarations":[{"type":"declaration","property":"background-color","value":"#795548"}]},{"type":"rule","selectors":[".btn-primary.btn-forest"],"declarations":[{"type":"declaration","property":"background-color","value":"#006968"}]},{"type":"rule","selectors":[".btn-primary.btn-grey"],"declarations":[{"type":"declaration","property":"background-color","value":"#5c687c"}]},{"type":"rule","selectors":[".btn-primary.btn-lemon"],"declarations":[{"type":"declaration","property":"background-color","value":"#ffea00"},{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".btn-primary.btn-lime"],"declarations":[{"type":"declaration","property":"background-color","value":"#aee406"},{"type":"declaration","property":"color","value":"#000"}]},{"type":"rule","selectors":[".btn-primary.btn-orange"],"declarations":[{"type":"declaration","property":"background-color","value":"#f57c00"}]},{"type":"rule","selectors":[".btn-primary.btn-purple"],"declarations":[{"type":"declaration","property":"background-color","value":"#8130ff"}]},{"type":"rule","selectors":[".btn-primary.btn-ruby"],"declarations":[{"type":"declaration","property":"background-color","value":"#ff1744"}]},{"type":"rule","selectors":[".btn-primary.btn-sky"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".btn-outline"],"declarations":[{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"border-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".btn-outline.btn-active:highlighted"],"declarations":[{"type":"declaration","property":"background-color","value":"#c0ebff"}]},{"type":"rule","selectors":[".btn[isEnabled=false]"],"declarations":[{"type":"declaration","property":"color","value":"#a4a4a4"},{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"border-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".fa"],"declarations":[{"type":"declaration","property":"font-family","value":"FontAwesome, fontawesome-webfont"}]},{"type":"rule","selectors":[".form .input"],"declarations":[{"type":"declaration","property":"padding","value":"16 8 16 8"},{"type":"declaration","property":"background-color","value":"transparent"}]},{"type":"rule","selectors":[".form .input.input-border"],"declarations":[{"type":"declaration","property":"border-width","value":"1"},{"type":"declaration","property":"border-color","value":"#e0e0e0"},{"type":"declaration","property":"border-radius","value":"2"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".form .input.input-rounded"],"declarations":[{"type":"declaration","property":"border-width","value":"1"},{"type":"declaration","property":"border-color","value":"#e0e0e0"},{"type":"declaration","property":"border-radius","value":"28"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".form .input[isEnabled='false']"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"}]},{"type":"rule","selectors":[".form .input-field"],"declarations":[{"type":"declaration","property":"margin","value":"8"}]},{"type":"rule","selectors":[".form .input-field .label"],"declarations":[{"type":"declaration","property":"font-size","value":"12"},{"type":"declaration","property":"color","value":"#bababa"}]},{"type":"rule","selectors":[".form .input-field .input"],"declarations":[{"type":"declaration","property":"padding","value":"0"},{"type":"declaration","property":"margin","value":"0 0 8 0"}]},{"type":"rule","selectors":[".form .input-field .hr-light.active",".form .input-field .hr-dark.active"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".form .input-field.input-sides .label"],"declarations":[{"type":"declaration","property":"font-size","value":"18"},{"type":"declaration","property":"margin","value":"0 0 8 0"}]},{"type":"rule","selectors":[".h1",".h2",".h3",".h4",".h5",".h6"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"4"},{"type":"declaration","property":"font-weight","value":"normal"},{"type":"declaration","property":"color","value":"#212121"}]},{"type":"rule","selectors":[".body",".body2",".footnote"],"declarations":[{"type":"declaration","property":"font-weight","value":"normal"},{"type":"declaration","property":"color","value":"#757575"}]},{"type":"rule","selectors":[".h1"],"declarations":[{"type":"declaration","property":"font-size","value":"32"}]},{"type":"rule","selectors":[".h2"],"declarations":[{"type":"declaration","property":"font-size","value":"22"}]},{"type":"rule","selectors":[".h3"],"declarations":[{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".h4"],"declarations":[{"type":"declaration","property":"font-size","value":"12"}]},{"type":"rule","selectors":[".h5"],"declarations":[{"type":"declaration","property":"font-size","value":"11"}]},{"type":"rule","selectors":[".h6"],"declarations":[{"type":"declaration","property":"font-size","value":"10"}]},{"type":"rule","selectors":[".body"],"declarations":[{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".body2"],"declarations":[{"type":"declaration","property":"font-size","value":"17"}]},{"type":"rule","selectors":[".footnote"],"declarations":[{"type":"declaration","property":"font-size","value":"13"}]},{"type":"rule","selectors":[".list-group .list-group-item"],"declarations":[{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"font-size","value":"16"},{"type":"declaration","property":"margin","value":"0"},{"type":"declaration","property":"padding","value":"16"}]},{"type":"rule","selectors":[".list-group .list-group-item Label"],"declarations":[{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".list-group .list-group-item .thumb"],"declarations":[{"type":"declaration","property":"stretch","value":"fill"},{"type":"declaration","property":"width","value":"40"},{"type":"declaration","property":"height","value":"40"},{"type":"declaration","property":"margin-right","value":"16"}]},{"type":"rule","selectors":[".list-group .list-group-item.active"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".list-group .list-group-item .list-group-item-text"],"declarations":[{"type":"declaration","property":"color","value":"#757575"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".page"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"}]},{"type":"rule","selectors":[".progress"],"declarations":[{"type":"declaration","property":"color","value":"#30bcff"},{"type":"declaration","property":"background-color","value":"#bababa"}]},{"type":"rule","selectors":[".segmented-bar"],"declarations":[{"type":"declaration","property":"font-size","value":"13"},{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"selected-background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".sidedrawer-left",".sidedrawer-center"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"}]},{"type":"rule","selectors":[".sidedrawer-header"],"declarations":[{"type":"declaration","property":"background-color","value":"#fafafa"},{"type":"declaration","property":"height","value":"148"},{"type":"declaration","property":"width","value":"100%"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header"],"declarations":[{"type":"declaration","property":"padding","value":"16 16 0 16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header"],"declarations":[{"type":"declaration","property":"padding","value":"20 15 0 15"}]},{"type":"rule","selectors":[".sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"height","value":"64"},{"type":"declaration","property":"width","value":"64"},{"type":"declaration","property":"border-radius","value":"32"},{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"margin-bottom","value":"36"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header-image"],"declarations":[{"type":"declaration","property":"height","value":"74"},{"type":"declaration","property":"width","value":"74"},{"type":"declaration","property":"border-radius","value":"37"},{"type":"declaration","property":"horizontal-align","value":"center"},{"type":"declaration","property":"margin-bottom","value":"24"}]},{"type":"rule","selectors":[".sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"color","value":"#737373"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"font-size","value":"14"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-header-brand"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"center"},{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".sidedrawer-list-item"],"declarations":[{"type":"declaration","property":"height","value":"48"},{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"width","value":"100%"},{"type":"declaration","property":"orientation","value":"horizontal"}]},{"type":"rule","selectors":[".sidedrawer-list-item .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"width","value":"24"},{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"font-size","value":"20"},{"type":"declaration","property":"height","value":"48"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".sidedrawer-list-item.active"],"declarations":[{"type":"declaration","property":"color","value":"#fff"},{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".sidedrawer-list-item.active .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"margin","value":"0 16 0 16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-list-item-icon"],"declarations":[{"type":"declaration","property":"margin","value":"0 0 0 15"}]},{"type":"rule","selectors":[".sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"horizontal-align","value":"left"},{"type":"declaration","property":"text-align","value":"left"},{"type":"declaration","property":"font-size","value":"15"},{"type":"declaration","property":"background-color","value":"transparent"},{"type":"declaration","property":"border-width","value":"0.1"},{"type":"declaration","property":"width","value":"80%"},{"type":"declaration","property":"vertical-align","value":"center"}]},{"type":"rule","selectors":[".sidedrawer-left .sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"padding-left","value":"16"}]},{"type":"rule","selectors":[".sidedrawer-center .sidedrawer-list-item-text"],"declarations":[{"type":"declaration","property":"padding-left","value":"15"}]},{"type":"rule","selectors":[".slider"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"}]},{"type":"rule","selectors":[".slider[isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".switch[checked=true]"],"declarations":[{"type":"declaration","property":"background-color","value":"#30bcff"},{"type":"declaration","property":"color","value":"#30bcff"}]},{"type":"rule","selectors":[".switch[checked=true][isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#fff"}]},{"type":"rule","selectors":[".switch[isEnabled=false]"],"declarations":[{"type":"declaration","property":"background-color","value":"#e0e0e0"},{"type":"declaration","property":"color","value":"#e0e0e0"}]},{"type":"rule","selectors":[".tab-view"],"declarations":[{"type":"declaration","property":"selected-color","value":"#30bcff"},{"type":"declaration","property":"tabs-background-color","value":"#fff"}]},{"type":"rule","selectors":[".tab-view .tab-view-item"],"declarations":[{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"tabs-background-color","value":"#fff"}]},{"type":"rule","selectors":["#login-background"],"declarations":[{"type":"declaration","property":"margin-top","value":"-20"},{"type":"declaration","property":"background-size","value":"cover"},{"type":"declaration","property":"background-position","value":"center"}]},{"type":"rule","selectors":[".login-wrap"],"declarations":[{"type":"declaration","property":"padding","value":"0 40"}]},{"type":"rule","selectors":[".logo-wrap"],"declarations":[{"type":"declaration","property":"margin","value":"60 0 10 0"},{"type":"declaration","property":"padding","value":"20 0"}]},{"type":"rule","selectors":[".logo-wrap .login-logo"],"declarations":[{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"font-size","value":"30"},{"type":"declaration","property":"font-weight","value":"bold"},{"type":"declaration","property":"margin-bottom","value":"10"},{"type":"declaration","property":"opacity","value":"1"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"opacity","value":".9"}]},{"type":"rule","selectors":[".logo-wrap .login-logo-sub"],"declarations":[{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"opacity","value":".8"},{"type":"declaration","property":"text-align","value":"center"}]},{"type":"rule","selectors":[".login-wrapper"],"declarations":[{"type":"declaration","property":"padding","value":"20"},{"type":"declaration","property":"background-color","value":"#fff"},{"type":"declaration","property":"border-radius","value":"3"}]},{"type":"rule","selectors":[".login-wrapper TextField"],"declarations":[{"type":"declaration","property":"padding","value":"10 10"},{"type":"declaration","property":"margin","value":"10 0 0 0"}]},{"type":"rule","selectors":[".go-back"],"declarations":[{"type":"declaration","property":"font-size","value":"14"},{"type":"declaration","property":"text-align","value":"center"},{"type":"declaration","property":"color","value":"#212121"},{"type":"declaration","property":"margin-top","value":"10"}]},{"type":"rule","selectors":[".btn"],"declarations":[{"type":"declaration","property":"border-width","value":"0"},{"type":"declaration","property":"font-family","value":"'SF UI Text Medium'"},{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".btn-outline"],"declarations":[{"type":"declaration","property":"border-width","value":"1"}]},{"type":"rule","selectors":[".btn-rounded-sm"],"declarations":[{"type":"declaration","property":"border-radius","value":"4"}]},{"type":"rule","selectors":[".btn-rounded-lg"],"declarations":[{"type":"declaration","property":"border-radius","value":"19"}]},{"type":"rule","selectors":[".form"],"declarations":[{"type":"declaration","property":"font-family","value":"'SF UI Text Regular'"}]},{"type":"rule","selectors":[".form .input"],"declarations":[{"type":"declaration","property":"font-size","value":"15"}]},{"type":"rule","selectors":[".form .input.input-rounded"],"declarations":[{"type":"declaration","property":"border-radius","value":"27"}]},{"type":"rule","selectors":[".h1"],"declarations":[{"type":"declaration","property":"font-size","value":"32"}]},{"type":"rule","selectors":[".slider"],"declarations":[{"type":"declaration","property":"margin","value":"10 15"}]},{"type":"rule","selectors":[".sidedrawer-list-item-icon",".sidedrawer-list-item"],"declarations":[{"type":"declaration","property":"color","value":"#949494"}]},{"type":"rule","selectors":[".switch"],"declarations":[{"type":"declaration","property":"margin","value":"8 15"}]},{"type":"rule","selectors":[".list-group .list-group-item"],"declarations":[{"type":"declaration","property":"padding","value":"16 15 16 15"}]},{"type":"rule","selectors":[".list-group .list-group-item .thumb"],"declarations":[{"type":"declaration","property":"margin-right","value":"15"}]},{"type":"rule","selectors":[".list-group .list-group-item .list-group-item-heading"],"declarations":[{"type":"declaration","property":"margin-bottom","value":"5"}]},{"type":"rule","selectors":[".segmented-bar"],"declarations":[{"type":"declaration","property":"margin","value":"0 15"},{"type":"declaration","property":"color","value":"#30bcff"}]}],"parsingErrors":[]}};

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/hmr-update.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const hot = __webpack_require__("../node_modules/nativescript-dev-webpack/hot.js");
const file_system_1 = __webpack_require__("tns-core-modules/file-system");
function hmrUpdate() {
    const currentAppFolder = file_system_1.knownFolders.currentApp();
    const latestHash = __webpack_require__["h"]();
    return hot(latestHash, filename => {
        const fullFilePath = file_system_1.path.join(currentAppFolder.path, filename);
        return file_system_1.File.exists(fullFilePath) ? currentAppFolder.getFile(filename) : null;
    });
}
exports.hmrUpdate = hmrUpdate;
//# sourceMappingURL=hmr-update.js.map

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hmr/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var hmr_update_1 = __webpack_require__("../node_modules/nativescript-dev-webpack/hmr/hmr-update.js");
exports.hmrUpdate = hmr_update_1.hmrUpdate;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/hot.js":
/***/ (function(module, exports, __webpack_require__) {

const hmrPrefix = 'HMR:';
const log = {
    info: (message) => console.info(`${hmrPrefix} ${message}`),
    warn: (message) => console.warn(`${hmrPrefix} ${message}`),
    error: (message) => console.error(`${hmrPrefix} ${message}`),
};
const refresh = 'Application needs to be restarted in order to apply the changes.';
const hotOptions = {
    ignoreUnaccepted: false,
    ignoreDeclined: false,
    ignoreErrored: false,
    onUnaccepted(data) {
        const chain = [].concat(data.chain);
        const last = chain[chain.length - 1];

        if (last === 0) {
            chain.pop();
        }

        log.warn(`Ignored an update to unaccepted module: `);
        chain.forEach(mod => log.warn(`         ➭ ${mod}`));
    },
    onDeclined(data) {
        log.warn(`Ignored an update to declined module:`);
        data.chain.forEach(mod => log.warn(`         ➭ ${mod}`));
    },
    onErrored(data) {
        log.warn(
            `Ignored an error while updating module ${data.moduleId} <${data.type}>`
        );
        log.warn(data.error);
    },
};

let nextHash;
let currentHash;

function upToDate() {
    return nextHash.indexOf(__webpack_require__.h()) >= 0;
}

function result(modules, appliedModules) {
    const unaccepted = modules.filter(
        (moduleId) => appliedModules && appliedModules.indexOf(moduleId) < 0
    );

    if (unaccepted.length > 0) {
        log.warn('The following modules could not be updated:');

        for (const moduleId of unaccepted) {
            log.warn(`          ⦻ ${moduleId}`);
        }
    }

    if (!(appliedModules || []).length) {
        log.info('No Modules Updated.');
    } else {
        log.info('The following modules were updated:');

        for (const moduleId of appliedModules) {
            log.info(`         ↻ ${moduleId}`);
        }

        const numberIds = appliedModules.every(
            (moduleId) => typeof moduleId === 'number'
        );
        if (numberIds) {
            log.info(
                'Please consider using the NamedModulesPlugin for module names.'
            );
        }
    }
}

function check(options) {
    return module.hot
        .check()
        .then((modules) => {
            if (!modules) {
                log.warn(
                    `Cannot find update. ${refresh}`
                );
                return null;
            }

            return module.hot
                .apply(hotOptions)
                .then((appliedModules) => {
                    let nextCheck;
                    if (!upToDate()) {
                        nextCheck = check(options);
                    }

                    result(modules, appliedModules);

                    if (upToDate()) {
                        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
                        log.info(`Successfully applied update with hmr hash ${currentHash}. App is up to date.`);
                    }

                    return nextCheck || null;
                })
                .catch((err) => {
                    const status = module.hot.status();
                    if (['abort', 'fail'].indexOf(status) >= 0) {
                        // Do not modify message - CLI depends on this exact content to determine hmr operation status.
                        log.error(`Cannot apply update with hmr hash ${currentHash}.`);
                        log.error(err.message || err.stack);
                    } else {
                        log.error(`Update failed: ${err.message || err.stack}`);
                    }
                });
        })
        .catch((err) => {
            const status = module.hot.status();
            if (['abort', 'fail'].indexOf(status) >= 0) {
                log.error(`Cannot check for update. ${refresh}`);
                log.error(err.message || err.stack);
            } else {
                log.error(`Update check failed: ${err.message || err.stack}`);
            }
        });
}

if (true) {
    log.info('Hot Module Replacement Enabled. Waiting for signal.');
} else {}

function update(latestHash, options) {
    nextHash = latestHash;
    if (!upToDate()) {
        const status = module.hot.status();

        if (status === 'idle') {
            //Do not modify message - CLI depends on this exact content to determine hmr operation status.
            log.info(`Checking for updates to the bundle with hmr hash ${currentHash}.`);
            return check(options);
        } else if (['abort', 'fail'].indexOf(status) >= 0) {
            log.warn(
                `Cannot apply update. A previous update ${status}ed. ${refresh}`
            );
        }
    }
};

function getNextHash(hash, getFileContent) {
    const file = getFileContent(`${hash}.hot-update.json`);
    if (!file) {
        return Promise.resolve(hash);
    }

    return file.readText().then(hotUpdateContent => {
        if (hotUpdateContent) {
            const manifest = JSON.parse(hotUpdateContent);
            const newHash = manifest.h;
            return getNextHash(newHash, getFileContent);
        } else {
            return Promise.resolve(hash);
        }
    }).catch(error => Promise.reject(error));
}

module.exports = function checkState(initialHash, getFileContent) {
    currentHash = initialHash;
    return getNextHash(initialHash, getFileContent).then(nextHash => {
        if (nextHash != initialHash) {
            return update(nextHash, {});
        }
    })
}


/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css-angular.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {const loadCss = __webpack_require__("../node_modules/nativescript-dev-webpack/load-application-css.js");

module.exports = function() {
    loadCss(function() {
        global.registerModule("./app.css", () => __webpack_require__("./app.css"));
        global.registerModule("app.css", () => __webpack_require__("./app.css"));
    });
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__("../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/nativescript-dev-webpack/load-application-css.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = function (loadModuleFn) {
    const application = __webpack_require__("tns-core-modules/application");
    __webpack_require__("tns-core-modules/ui/styling/style-scope");

    loadModuleFn();

    application.loadAppCss();
}


/***/ }),

/***/ "../node_modules/postcss-value-parser/lib/index.js":
/***/ (function(module, exports, __webpack_require__) {

var parse = __webpack_require__("../node_modules/postcss-value-parser/lib/parse.js");
var walk = __webpack_require__("../node_modules/postcss-value-parser/lib/walk.js");
var stringify = __webpack_require__("../node_modules/postcss-value-parser/lib/stringify.js");

function ValueParser(value) {
  if (this instanceof ValueParser) {
    this.nodes = parse(value);
    return this;
  }
  return new ValueParser(value);
}

ValueParser.prototype.toString = function() {
  return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
};

ValueParser.prototype.walk = function(cb, bubble) {
  walk(this.nodes, cb, bubble);
  return this;
};

ValueParser.unit = __webpack_require__("../node_modules/postcss-value-parser/lib/unit.js");

ValueParser.walk = walk;

ValueParser.stringify = stringify;

module.exports = ValueParser;


/***/ }),

/***/ "../node_modules/postcss-value-parser/lib/parse.js":
/***/ (function(module, exports) {

var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);

module.exports = function(input) {
  var tokens = [];
  var value = input;

  var next, quote, prev, token, escape, escapePos, whitespacePos;
  var pos = 0;
  var code = value.charCodeAt(pos);
  var max = value.length;
  var stack = [{ nodes: tokens }];
  var balanced = 0;
  var parent;

  var name = "";
  var before = "";
  var after = "";

  while (pos < max) {
    // Whitespaces
    if (code <= 32) {
      next = pos;
      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);
      token = value.slice(pos, next);

      prev = tokens[tokens.length - 1];
      if (code === closeParentheses && balanced) {
        after = token;
      } else if (prev && prev.type === "div") {
        prev.after = token;
      } else if (
        code === comma ||
        code === colon ||
        (code === slash && value.charCodeAt(next + 1) !== star)
      ) {
        before = token;
      } else {
        tokens.push({
          type: "space",
          sourceIndex: pos,
          value: token
        });
      }

      pos = next;

      // Quotes
    } else if (code === singleQuote || code === doubleQuote) {
      next = pos;
      quote = code === singleQuote ? "'" : '"';
      token = {
        type: "string",
        sourceIndex: pos,
        quote: quote
      };
      do {
        escape = false;
        next = value.indexOf(quote, next + 1);
        if (~next) {
          escapePos = next;
          while (value.charCodeAt(escapePos - 1) === backslash) {
            escapePos -= 1;
            escape = !escape;
          }
        } else {
          value += quote;
          next = value.length - 1;
          token.unclosed = true;
        }
      } while (escape);
      token.value = value.slice(pos + 1, next);

      tokens.push(token);
      pos = next + 1;
      code = value.charCodeAt(pos);

      // Comments
    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
      token = {
        type: "comment",
        sourceIndex: pos
      };

      next = value.indexOf("*/", pos);
      if (next === -1) {
        token.unclosed = true;
        next = value.length;
      }

      token.value = value.slice(pos + 2, next);
      tokens.push(token);

      pos = next + 2;
      code = value.charCodeAt(pos);

      // Dividers
    } else if (code === slash || code === comma || code === colon) {
      token = value[pos];

      tokens.push({
        type: "div",
        sourceIndex: pos - before.length,
        value: token,
        before: before,
        after: ""
      });
      before = "";

      pos += 1;
      code = value.charCodeAt(pos);

      // Open parentheses
    } else if (openParentheses === code) {
      // Whitespaces after open parentheses
      next = pos;
      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);
      token = {
        type: "function",
        sourceIndex: pos - name.length,
        value: name,
        before: value.slice(pos + 1, next)
      };
      pos = next;

      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
        next -= 1;
        do {
          escape = false;
          next = value.indexOf(")", next + 1);
          if (~next) {
            escapePos = next;
            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1;
              escape = !escape;
            }
          } else {
            value += ")";
            next = value.length - 1;
            token.unclosed = true;
          }
        } while (escape);
        // Whitespaces before closed
        whitespacePos = next;
        do {
          whitespacePos -= 1;
          code = value.charCodeAt(whitespacePos);
        } while (code <= 32);
        if (pos !== whitespacePos + 1) {
          token.nodes = [
            {
              type: "word",
              sourceIndex: pos,
              value: value.slice(pos, whitespacePos + 1)
            }
          ];
        } else {
          token.nodes = [];
        }
        if (token.unclosed && whitespacePos + 1 !== next) {
          token.after = "";
          token.nodes.push({
            type: "space",
            sourceIndex: whitespacePos + 1,
            value: value.slice(whitespacePos + 1, next)
          });
        } else {
          token.after = value.slice(whitespacePos + 1, next);
        }
        pos = next + 1;
        code = value.charCodeAt(pos);
        tokens.push(token);
      } else {
        balanced += 1;
        token.after = "";
        tokens.push(token);
        stack.push(token);
        tokens = token.nodes = [];
        parent = token;
      }
      name = "";

      // Close parentheses
    } else if (closeParentheses === code && balanced) {
      pos += 1;
      code = value.charCodeAt(pos);

      parent.after = after;
      after = "";
      balanced -= 1;
      stack.pop();
      parent = stack[balanced];
      tokens = parent.nodes;

      // Words
    } else {
      next = pos;
      do {
        if (code === backslash) {
          next += 1;
        }
        next += 1;
        code = value.charCodeAt(next);
      } while (
        next < max &&
        !(
          code <= 32 ||
          code === singleQuote ||
          code === doubleQuote ||
          code === comma ||
          code === colon ||
          code === slash ||
          code === openParentheses ||
          (code === closeParentheses && balanced)
        )
      );
      token = value.slice(pos, next);

      if (openParentheses === code) {
        name = token;
      } else {
        tokens.push({
          type: "word",
          sourceIndex: pos,
          value: token
        });
      }

      pos = next;
    }
  }

  for (pos = stack.length - 1; pos; pos -= 1) {
    stack[pos].unclosed = true;
  }

  return stack[0].nodes;
};


/***/ }),

/***/ "../node_modules/postcss-value-parser/lib/stringify.js":
/***/ (function(module, exports) {

function stringifyNode(node, custom) {
  var type = node.type;
  var value = node.value;
  var buf;
  var customResult;

  if (custom && (customResult = custom(node)) !== undefined) {
    return customResult;
  } else if (type === "word" || type === "space") {
    return value;
  } else if (type === "string") {
    buf = node.quote || "";
    return buf + value + (node.unclosed ? "" : buf);
  } else if (type === "comment") {
    return "/*" + value + (node.unclosed ? "" : "*/");
  } else if (type === "div") {
    return (node.before || "") + value + (node.after || "");
  } else if (Array.isArray(node.nodes)) {
    buf = stringify(node.nodes);
    if (type !== "function") {
      return buf;
    }
    return (
      value +
      "(" +
      (node.before || "") +
      buf +
      (node.after || "") +
      (node.unclosed ? "" : ")")
    );
  }
  return value;
}

function stringify(nodes, custom) {
  var result, i;

  if (Array.isArray(nodes)) {
    result = "";
    for (i = nodes.length - 1; ~i; i -= 1) {
      result = stringifyNode(nodes[i], custom) + result;
    }
    return result;
  }
  return stringifyNode(nodes, custom);
}

module.exports = stringify;


/***/ }),

/***/ "../node_modules/postcss-value-parser/lib/unit.js":
/***/ (function(module, exports) {

var minus = "-".charCodeAt(0);
var plus = "+".charCodeAt(0);
var dot = ".".charCodeAt(0);
var exp = "e".charCodeAt(0);
var EXP = "E".charCodeAt(0);

module.exports = function(value) {
  var pos = 0;
  var length = value.length;
  var dotted = false;
  var sciPos = -1;
  var containsNumber = false;
  var code;

  while (pos < length) {
    code = value.charCodeAt(pos);

    if (code >= 48 && code <= 57) {
      containsNumber = true;
    } else if (code === exp || code === EXP) {
      if (sciPos > -1) {
        break;
      }
      sciPos = pos;
    } else if (code === dot) {
      if (dotted) {
        break;
      }
      dotted = true;
    } else if (code === plus || code === minus) {
      if (pos !== 0) {
        break;
      }
    } else {
      break;
    }

    pos += 1;
  }

  if (sciPos + 1 === pos) pos--;

  return containsNumber
    ? {
        number: value.slice(0, pos),
        unit: value.slice(pos)
      }
    : false;
};


/***/ }),

/***/ "../node_modules/postcss-value-parser/lib/walk.js":
/***/ (function(module, exports) {

module.exports = function walk(nodes, cb, bubble) {
  var i, max, node, result;

  for (i = 0, max = nodes.length; i < max; i += 1) {
    node = nodes[i];
    if (!bubble) {
      result = cb(node, i, nodes);
    }

    if (
      result !== false &&
      node.type === "function" &&
      Array.isArray(node.nodes)
    ) {
      walk(node.nodes, cb, bubble);
    }

    if (bubble) {
      cb(node, i, nodes);
    }
  }
};


/***/ }),

/***/ "../node_modules/reduce-css-calc/dist/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _postcssValueParser = __webpack_require__("../node_modules/postcss-value-parser/lib/index.js");

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

var _parser = __webpack_require__("../node_modules/reduce-css-calc/dist/parser.js");

var _reducer = __webpack_require__("../node_modules/reduce-css-calc/dist/lib/reducer.js");

var _reducer2 = _interopRequireDefault(_reducer);

var _stringifier = __webpack_require__("../node_modules/reduce-css-calc/dist/lib/stringifier.js");

var _stringifier2 = _interopRequireDefault(_stringifier);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line
var MATCH_CALC = /((?:\-[a-z]+\-)?calc)/;

exports.default = function (value) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;

  return (0, _postcssValueParser2.default)(value).walk(function (node) {
    // skip anything which isn't a calc() function
    if (node.type !== 'function' || !MATCH_CALC.test(node.value)) return;

    // stringify calc expression and produce an AST
    var contents = _postcssValueParser2.default.stringify(node.nodes);

    // skip constant() and env()
    if (contents.indexOf('constant') >= 0 || contents.indexOf('env') >= 0) return;

    var ast = _parser.parser.parse(contents);

    // reduce AST to its simplest form, that is, either to a single value
    // or a simplified calc expression
    var reducedAst = (0, _reducer2.default)(ast, precision);

    // stringify AST and write it back
    node.type = 'word';
    node.value = (0, _stringifier2.default)(node.value, reducedAst, precision);
  }, true).toString();
};

module.exports = exports['default'];

/***/ }),

/***/ "../node_modules/reduce-css-calc/dist/lib/convert.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cssUnitConverter = __webpack_require__("../node_modules/css-unit-converter/index.js");

var _cssUnitConverter2 = _interopRequireDefault(_cssUnitConverter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function convertNodes(left, right, precision) {
  switch (left.type) {
    case 'LengthValue':
    case 'AngleValue':
    case 'TimeValue':
    case 'FrequencyValue':
    case 'ResolutionValue':
      return convertAbsoluteLength(left, right, precision);
    default:
      return { left: left, right: right };
  }
}

function convertAbsoluteLength(left, right, precision) {
  if (right.type === left.type) {
    right = {
      type: left.type,
      value: (0, _cssUnitConverter2.default)(right.value, right.unit, left.unit, precision),
      unit: left.unit
    };
  }
  return { left: left, right: right };
}

exports.default = convertNodes;
module.exports = exports['default'];

/***/ }),

/***/ "../node_modules/reduce-css-calc/dist/lib/reducer.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flip = flip;

var _convert = __webpack_require__("../node_modules/reduce-css-calc/dist/lib/convert.js");

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function reduce(node, precision) {
  if (node.type === "MathExpression") return reduceMathExpression(node, precision);

  return node;
}

function isEqual(left, right) {
  return left.type === right.type && left.value === right.value;
}

function isValueType(type) {
  switch (type) {
    case 'LengthValue':
    case 'AngleValue':
    case 'TimeValue':
    case 'FrequencyValue':
    case 'ResolutionValue':
    case 'EmValue':
    case 'ExValue':
    case 'ChValue':
    case 'RemValue':
    case 'VhValue':
    case 'VwValue':
    case 'VminValue':
    case 'VmaxValue':
    case 'PercentageValue':
    case 'Value':
      return true;
  }
  return false;
}

function convertMathExpression(node, precision) {
  var nodes = (0, _convert2.default)(node.left, node.right, precision);
  var left = reduce(nodes.left, precision);
  var right = reduce(nodes.right, precision);

  if (left.type === "MathExpression" && right.type === "MathExpression") {

    if (left.operator === '/' && right.operator === '*' || left.operator === '-' && right.operator === '+' || left.operator === '*' && right.operator === '/' || left.operator === '+' && right.operator === '-') {

      if (isEqual(left.right, right.right)) nodes = (0, _convert2.default)(left.left, right.left, precision);else if (isEqual(left.right, right.left)) nodes = (0, _convert2.default)(left.left, right.right, precision);

      left = reduce(nodes.left, precision);
      right = reduce(nodes.right, precision);
    }
  }

  node.left = left;
  node.right = right;
  return node;
}

function flip(operator) {
  return operator === '+' ? '-' : '+';
}

function flipValue(node) {
  if (isValueType(node.type)) node.value = -node.value;else if (node.type == 'MathExpression') {
    node.left = flipValue(node.left);
    node.right = flipValue(node.right);
  }
  return node;
}

function reduceAddSubExpression(node, precision) {
  var _node = node,
      left = _node.left,
      right = _node.right,
      op = _node.operator;


  if (left.type === 'CssVariable' || right.type === 'CssVariable') return node;

  // something + 0 => something
  // something - 0 => something
  if (right.value === 0) return left;

  // 0 + something => something
  if (left.value === 0 && op === "+") return right;

  // 0 - something => -something
  if (left.value === 0 && op === "-") return flipValue(right);

  // value + value
  // value - value
  if (left.type === right.type && isValueType(left.type)) {
    node = Object.assign({}, left);
    if (op === "+") node.value = left.value + right.value;else node.value = left.value - right.value;
  }

  // value <op> (expr)
  if (isValueType(left.type) && (right.operator === '+' || right.operator === '-') && right.type === 'MathExpression') {
    // value + (value + something) => (value + value) + something
    // value + (value - something) => (value + value) - something
    // value - (value + something) => (value - value) - something
    // value - (value - something) => (value - value) + something
    if (left.type === right.left.type) {
      node = Object.assign({}, node);
      node.left = reduce({
        type: 'MathExpression',
        operator: op,
        left: left,
        right: right.left
      }, precision);
      node.right = right.right;
      node.operator = op === '-' ? flip(right.operator) : right.operator;
      return reduce(node, precision);
    }
    // value + (something + value) => (value + value) + something
    // value + (something - value) => (value - value) + something
    // value - (something + value) => (value - value) - something
    // value - (something - value) => (value + value) - something
    else if (left.type === right.right.type) {
        node = Object.assign({}, node);
        node.left = reduce({
          type: 'MathExpression',
          operator: op === '-' ? flip(right.operator) : right.operator,
          left: left,
          right: right.right
        }, precision);
        node.right = right.left;
        return reduce(node, precision);
      }
  }

  // (expr) <op> value
  if (left.type === 'MathExpression' && (left.operator === '+' || left.operator === '-') && isValueType(right.type)) {
    // (value + something) + value => (value + value) + something
    // (value - something) + value => (value + value) - something
    // (value + something) - value => (value - value) + something
    // (value - something) - value => (value - value) - something
    if (right.type === left.left.type) {
      node = Object.assign({}, left);
      node.left = reduce({
        type: 'MathExpression',
        operator: op,
        left: left.left,
        right: right
      }, precision);
      return reduce(node, precision);
    }
    // (something + value) + value => something + (value + value)
    // (something - value1) + value2 => something - (value2 - value1)
    // (something + value) - value => something + (value - value)
    // (something - value) - value => something - (value + value)
    else if (right.type === left.right.type) {
        node = Object.assign({}, left);
        if (left.operator === '-') {
          node.right = reduce({
            type: 'MathExpression',
            operator: op === '-' ? '+' : '-',
            left: right,
            right: left.right
          }, precision);
          node.operator = op === '-' ? '-' : '+';
        } else {
          node.right = reduce({
            type: 'MathExpression',
            operator: op,
            left: left.right,
            right: right
          }, precision);
        }
        if (node.right.value < 0) {
          node.right.value *= -1;
          node.operator = node.operator === '-' ? '+' : '-';
        }
        return reduce(node, precision);
      }
  }
  return node;
}

function reduceDivisionExpression(node, precision) {
  if (!isValueType(node.right.type)) return node;

  if (node.right.type !== 'Value') throw new Error('Cannot divide by "' + node.right.unit + '", number expected');

  if (node.right.value === 0) throw new Error('Cannot divide by zero');

  // (expr) / value
  if (node.left.type === 'MathExpression') {
    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
      node.left.left.value /= node.right.value;
      node.left.right.value /= node.right.value;
      return reduce(node.left, precision);
    }
    return node;
  }
  // something / value
  else if (isValueType(node.left.type)) {
      node.left.value /= node.right.value;
      return node.left;
    }
  return node;
}

function reduceMultiplicationExpression(node) {
  // (expr) * value
  if (node.left.type === 'MathExpression' && node.right.type === 'Value') {
    if (isValueType(node.left.left.type) && isValueType(node.left.right.type)) {
      node.left.left.value *= node.right.value;
      node.left.right.value *= node.right.value;
      return node.left;
    }
  }
  // something * value
  else if (isValueType(node.left.type) && node.right.type === 'Value') {
      node.left.value *= node.right.value;
      return node.left;
    }
    // value * (expr)
    else if (node.left.type === 'Value' && node.right.type === 'MathExpression') {
        if (isValueType(node.right.left.type) && isValueType(node.right.right.type)) {
          node.right.left.value *= node.left.value;
          node.right.right.value *= node.left.value;
          return node.right;
        }
      }
      // value * something
      else if (node.left.type === 'Value' && isValueType(node.right.type)) {
          node.right.value *= node.left.value;
          return node.right;
        }
  return node;
}

function reduceMathExpression(node, precision) {
  node = convertMathExpression(node, precision);

  switch (node.operator) {
    case "+":
    case "-":
      return reduceAddSubExpression(node, precision);
    case "/":
      return reduceDivisionExpression(node, precision);
    case "*":
      return reduceMultiplicationExpression(node);
  }
  return node;
}

exports.default = reduce;

/***/ }),

/***/ "../node_modules/reduce-css-calc/dist/lib/stringifier.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (calc, node, precision) {
  var str = stringify(node, precision);

  if (node.type === "MathExpression") {
    // if calc expression couldn't be resolved to a single value, re-wrap it as
    // a calc()
    str = calc + "(" + str + ")";
  }
  return str;
};

var _reducer = __webpack_require__("../node_modules/reduce-css-calc/dist/lib/reducer.js");

var order = {
  "*": 0,
  "/": 0,
  "+": 1,
  "-": 1
};

function round(value, prec) {
  if (prec !== false) {
    var precision = Math.pow(10, prec);
    return Math.round(value * precision) / precision;
  }
  return value;
}

function stringify(node, prec) {
  switch (node.type) {
    case "MathExpression":
      {
        var left = node.left,
            right = node.right,
            op = node.operator;

        var str = "";

        if (left.type === 'MathExpression' && order[op] < order[left.operator]) str += "(" + stringify(left, prec) + ")";else str += stringify(left, prec);

        str += " " + node.operator + " ";

        if (right.type === 'MathExpression' && order[op] < order[right.operator]) str += "(" + stringify(right, prec) + ")";else if (right.type === 'MathExpression' && op === "-" && ["+", "-"].includes(right.operator)) {
          // fix #52 : a-(b+c) = a-b-c
          right.operator = (0, _reducer.flip)(right.operator);
          str += stringify(right, prec);
        } else str += stringify(right, prec);

        return str;
      }
    case "Value":
      return round(node.value, prec);
    case 'CssVariable':
      return node.value;
    default:
      return round(node.value, prec) + node.unit;
  }
}

module.exports = exports["default"];

/***/ }),

/***/ "../node_modules/reduce-css-calc/dist/parser.js":
/***/ (function(module, exports, __webpack_require__) {


/* parser generated by jison 0.6.1-215 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */

        
    
            var parser = (function () {


// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   false
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... commonjs
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "ADD": 3,
  "ANGLE": 14,
  "CHS": 20,
  "CSS_VAR": 12,
  "DIV": 6,
  "EMS": 18,
  "EOF": 1,
  "EXS": 19,
  "FREQ": 16,
  "LENGTH": 13,
  "LPAREN": 7,
  "MUL": 5,
  "NESTED_CALC": 9,
  "NUMBER": 11,
  "PERCENTAGE": 26,
  "PREFIX": 10,
  "REMS": 21,
  "RES": 17,
  "RPAREN": 8,
  "SUB": 4,
  "TIME": 15,
  "VHS": 22,
  "VMAXS": 25,
  "VMINS": 24,
  "VWS": 23,
  "css_value": 31,
  "css_variable": 30,
  "error": 2,
  "expression": 27,
  "math_expression": 28,
  "value": 29
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "ADD",
  4: "SUB",
  5: "MUL",
  6: "DIV",
  7: "LPAREN",
  8: "RPAREN",
  9: "NESTED_CALC",
  10: "PREFIX",
  11: "NUMBER",
  12: "CSS_VAR",
  13: "LENGTH",
  14: "ANGLE",
  15: "TIME",
  16: "FREQ",
  17: "RES",
  18: "EMS",
  19: "EXS",
  20: "CHS",
  21: "REMS",
  22: "VHS",
  23: "VWS",
  24: "VMINS",
  25: "VMAXS",
  26: "PERCENTAGE"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  27,
  s,
  [28, 10],
  29,
  29,
  30,
  s,
  [31, 15]
]),
  rule: u([
  2,
  s,
  [3, 5],
  4,
  7,
  s,
  [1, 4],
  2,
  s,
  [1, 15],
  2
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : expression $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    expression : math_expression EOF */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    
    
    return yyvstack[yysp - 1];
    break;

case 2:
    /*! Production::    math_expression : math_expression ADD math_expression */
case 3:
    /*! Production::    math_expression : math_expression SUB math_expression */
case 4:
    /*! Production::    math_expression : math_expression MUL math_expression */
case 5:
    /*! Production::    math_expression : math_expression DIV math_expression */

    this.$ = { type: 'MathExpression', operator: yyvstack[yysp - 1], left: yyvstack[yysp - 2], right: yyvstack[yysp] };
    break;

case 6:
    /*! Production::    math_expression : LPAREN math_expression RPAREN */
case 7:
    /*! Production::    math_expression : NESTED_CALC LPAREN math_expression RPAREN */
case 8:
    /*! Production::    math_expression : SUB PREFIX SUB NESTED_CALC LPAREN math_expression RPAREN */

    this.$ = yyvstack[yysp - 1];
    break;

case 9:
    /*! Production::    math_expression : css_variable */
case 10:
    /*! Production::    math_expression : css_value */
case 11:
    /*! Production::    math_expression : value */

    this.$ = yyvstack[yysp];
    break;

case 12:
    /*! Production::    value : NUMBER */

    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) };
    break;

case 13:
    /*! Production::    value : SUB NUMBER */

    this.$ = { type: 'Value', value: parseFloat(yyvstack[yysp]) * -1 };
    break;

case 14:
    /*! Production::    css_variable : CSS_VAR */

    this.$ = { type: 'CssVariable', value: yyvstack[yysp] };
    break;

case 15:
    /*! Production::    css_value : LENGTH */

    this.$ = { type: 'LengthValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
    break;

case 16:
    /*! Production::    css_value : ANGLE */

    this.$ = { type: 'AngleValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
    break;

case 17:
    /*! Production::    css_value : TIME */

    this.$ = { type: 'TimeValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
    break;

case 18:
    /*! Production::    css_value : FREQ */

    this.$ = { type: 'FrequencyValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
    break;

case 19:
    /*! Production::    css_value : RES */

    this.$ = { type: 'ResolutionValue', value: parseFloat(yyvstack[yysp]), unit: /[a-z]+/.exec(yyvstack[yysp])[0] };
    break;

case 20:
    /*! Production::    css_value : EMS */

    this.$ = { type: 'EmValue', value: parseFloat(yyvstack[yysp]), unit: 'em' };
    break;

case 21:
    /*! Production::    css_value : EXS */

    this.$ = { type: 'ExValue', value: parseFloat(yyvstack[yysp]), unit: 'ex' };
    break;

case 22:
    /*! Production::    css_value : CHS */

    this.$ = { type: 'ChValue', value: parseFloat(yyvstack[yysp]), unit: 'ch' };
    break;

case 23:
    /*! Production::    css_value : REMS */

    this.$ = { type: 'RemValue', value: parseFloat(yyvstack[yysp]), unit: 'rem' };
    break;

case 24:
    /*! Production::    css_value : VHS */

    this.$ = { type: 'VhValue', value: parseFloat(yyvstack[yysp]), unit: 'vh' };
    break;

case 25:
    /*! Production::    css_value : VWS */

    this.$ = { type: 'VwValue', value: parseFloat(yyvstack[yysp]), unit: 'vw' };
    break;

case 26:
    /*! Production::    css_value : VMINS */

    this.$ = { type: 'VminValue', value: parseFloat(yyvstack[yysp]), unit: 'vmin' };
    break;

case 27:
    /*! Production::    css_value : VMAXS */

    this.$ = { type: 'VmaxValue', value: parseFloat(yyvstack[yysp]), unit: 'vmax' };
    break;

case 28:
    /*! Production::    css_value : PERCENTAGE */

    this.$ = { type: 'PercentageValue', value: parseFloat(yyvstack[yysp]), unit: '%' };
    break;

case 29:
    /*! Production::    css_value : SUB css_value */

    var prev = yyvstack[yysp]; prev.value *= -1; this.$ = prev;
    break;

}
},
table: bt({
  len: u([
  24,
  1,
  5,
  23,
  1,
  18,
  s,
  [0, 20],
  s,
  [23, 4],
  c,
  [28, 3],
  0,
  0,
  16,
  6,
  6,
  s,
  [0, 3],
  5,
  1,
  0,
  1,
  23,
  5,
  0
]),
  symbol: u([
  4,
  7,
  9,
  s,
  [11, 21, 1],
  1,
  1,
  s,
  [3, 4, 1],
  c,
  [30, 19],
  c,
  [29, 4],
  7,
  4,
  10,
  11,
  c,
  [22, 14],
  31,
  c,
  [42, 23],
  c,
  [23, 69],
  c,
  [138, 4],
  8,
  c,
  [51, 24],
  4,
  c,
  [137, 15],
  c,
  [184, 5],
  8,
  c,
  [6, 6],
  c,
  [5, 5],
  9,
  7,
  c,
  [87, 28]
]),
  type: u([
  s,
  [2, 19],
  s,
  [0, 5],
  1,
  s,
  [2, 24],
  s,
  [0, 4],
  c,
  [22, 19],
  c,
  [42, 41],
  c,
  [23, 70],
  c,
  [28, 25],
  c,
  [45, 25],
  c,
  [59, 23]
]),
  state: u([
  1,
  2,
  8,
  6,
  7,
  30,
  c,
  [4, 3],
  33,
  36,
  c,
  [5, 3],
  37,
  c,
  [4, 3],
  38,
  c,
  [4, 3],
  39,
  c,
  [4, 3],
  41,
  c,
  [21, 4],
  46,
  c,
  [5, 3]
]),
  mode: u([
  s,
  [1, 177],
  s,
  [2, 3],
  c,
  [5, 5],
  c,
  [6, 4],
  s,
  [1, 31]
]),
  goto: u([
  5,
  3,
  4,
  24,
  s,
  [9, 15, 1],
  s,
  [25, 5, 1],
  c,
  [24, 19],
  31,
  35,
  32,
  34,
  c,
  [18, 14],
  c,
  [37, 19],
  c,
  [19, 57],
  c,
  [117, 4],
  40,
  c,
  [24, 19],
  42,
  35,
  c,
  [16, 14],
  s,
  [2, 3],
  28,
  29,
  2,
  s,
  [3, 3],
  28,
  29,
  3,
  c,
  [52, 4],
  43,
  44,
  45,
  c,
  [78, 23],
  47
])
}),
defaultActions: bda({
  idx: u([
  s,
  [6, 20, 1],
  33,
  34,
  38,
  39,
  40,
  43,
  47
]),
  goto: u([
  9,
  10,
  11,
  s,
  [14, 15, 1],
  12,
  1,
  29,
  13,
  s,
  [4, 5, 1]
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)

    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 48 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    function stdLex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    function fastLex() {
        var token = lexer.fastLex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }

        return token || EOF;
    }

    var lex = stdLex;


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state  

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup  
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use  
    done: false,                                /// INTERNAL USE ONLY  
    _backtrack: false,                          /// INTERNAL USE ONLY  
    _input: '',                                 /// INTERNAL USE ONLY  
    _more: false,                               /// INTERNAL USE ONLY  
    _signaled_error_token: false,               /// INTERNAL USE ONLY  
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`  
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!  
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far  
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt  
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.  
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far  
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)  
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located  
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction  

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...  
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple! 
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        } 
        // else: keep `this._input` as is.  
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this! 
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8 
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column; 
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it 
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead. 
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch. 
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL */
        /*! Rule::       \s+ */
        /* skip whitespace */
        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: INITIAL */
      /*! Rule::       \* */
      1: 5,

      /*! Conditions:: INITIAL */
      /*! Rule::       \/ */
      2: 6,

      /*! Conditions:: INITIAL */
      /*! Rule::       \+ */
      3: 3,

      /*! Conditions:: INITIAL */
      /*! Rule::       - */
      4: 4,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)px\b */
      5: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)cm\b */
      6: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)mm\b */
      7: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)in\b */
      8: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pt\b */
      9: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)pc\b */
      10: 13,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)deg\b */
      11: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)grad\b */
      12: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rad\b */
      13: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)turn\b */
      14: 14,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)s\b */
      15: 15,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ms\b */
      16: 15,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)Hz\b */
      17: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)kHz\b */
      18: 16,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpi\b */
      19: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dpcm\b */
      20: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)dppx\b */
      21: 17,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)em\b */
      22: 18,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ex\b */
      23: 19,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)ch\b */
      24: 20,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)rem\b */
      25: 21,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vw\b */
      26: 23,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vh\b */
      27: 22,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmin\b */
      28: 24,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)vmax\b */
      29: 25,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)% */
      30: 26,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([0-9]+(\.[0-9]*)?|\.[0-9]+)\b */
      31: 11,

      /*! Conditions:: INITIAL */
      /*! Rule::       (calc) */
      32: 9,

      /*! Conditions:: INITIAL */
      /*! Rule::       (var\([^\)]*\)) */
      33: 12,

      /*! Conditions:: INITIAL */
      /*! Rule::       ([a-z]+) */
      34: 10,

      /*! Conditions:: INITIAL */
      /*! Rule::       \( */
      35: 7,

      /*! Conditions:: INITIAL */
      /*! Rule::       \) */
      36: 8,

      /*! Conditions:: INITIAL */
      /*! Rule::       $ */
      37: 1
    },

    rules: [
      /*  0: */  /^(?:\s+)/,
      /*  1: */  /^(?:\*)/,
      /*  2: */  /^(?:\/)/,
      /*  3: */  /^(?:\+)/,
      /*  4: */  /^(?:-)/,
      /*  5: */  /^(?:(\d+(\.\d*)?|\.\d+)px\b)/,
      /*  6: */  /^(?:(\d+(\.\d*)?|\.\d+)cm\b)/,
      /*  7: */  /^(?:(\d+(\.\d*)?|\.\d+)mm\b)/,
      /*  8: */  /^(?:(\d+(\.\d*)?|\.\d+)in\b)/,
      /*  9: */  /^(?:(\d+(\.\d*)?|\.\d+)pt\b)/,
      /* 10: */  /^(?:(\d+(\.\d*)?|\.\d+)pc\b)/,
      /* 11: */  /^(?:(\d+(\.\d*)?|\.\d+)deg\b)/,
      /* 12: */  /^(?:(\d+(\.\d*)?|\.\d+)grad\b)/,
      /* 13: */  /^(?:(\d+(\.\d*)?|\.\d+)rad\b)/,
      /* 14: */  /^(?:(\d+(\.\d*)?|\.\d+)turn\b)/,
      /* 15: */  /^(?:(\d+(\.\d*)?|\.\d+)s\b)/,
      /* 16: */  /^(?:(\d+(\.\d*)?|\.\d+)ms\b)/,
      /* 17: */  /^(?:(\d+(\.\d*)?|\.\d+)Hz\b)/,
      /* 18: */  /^(?:(\d+(\.\d*)?|\.\d+)kHz\b)/,
      /* 19: */  /^(?:(\d+(\.\d*)?|\.\d+)dpi\b)/,
      /* 20: */  /^(?:(\d+(\.\d*)?|\.\d+)dpcm\b)/,
      /* 21: */  /^(?:(\d+(\.\d*)?|\.\d+)dppx\b)/,
      /* 22: */  /^(?:(\d+(\.\d*)?|\.\d+)em\b)/,
      /* 23: */  /^(?:(\d+(\.\d*)?|\.\d+)ex\b)/,
      /* 24: */  /^(?:(\d+(\.\d*)?|\.\d+)ch\b)/,
      /* 25: */  /^(?:(\d+(\.\d*)?|\.\d+)rem\b)/,
      /* 26: */  /^(?:(\d+(\.\d*)?|\.\d+)vw\b)/,
      /* 27: */  /^(?:(\d+(\.\d*)?|\.\d+)vh\b)/,
      /* 28: */  /^(?:(\d+(\.\d*)?|\.\d+)vmin\b)/,
      /* 29: */  /^(?:(\d+(\.\d*)?|\.\d+)vmax\b)/,
      /* 30: */  /^(?:(\d+(\.\d*)?|\.\d+)%)/,
      /* 31: */  /^(?:(\d+(\.\d*)?|\.\d+)\b)/,
      /* 32: */  /^(?:(calc))/,
      /* 33: */  /^(?:(var\([^)]*\)))/,
      /* 34: */  /^(?:([a-z]+))/,
      /* 35: */  /^(?:\()/,
      /* 36: */  /^(?:\))/,
      /* 37: */  /^(?:$)/
    ],

    conditions: {
      'INITIAL': {
        rules: [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          35,
          36,
          37
        ],

        inclusive: true
      }
    }
  };

  return lexer;
}();
parser.lexer = lexer;



function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();

        


if (true) {
  exports.parser = parser;
  exports.Parser = parser.Parser;
  exports.parse = function () {
    return parser.parse.apply(parser, arguments);
  };
  
}


/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9jb2xvci9jb2xvci1jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvY29sb3IvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvY29sb3Iva25vd24tY29sb3JzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL2Nzcy12YWx1ZS9yZXdvcmtjc3MtdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvY3NzL3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9kYXRhL29ic2VydmFibGUvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9kZWJ1Z2dlci9kZWJ1Z2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9maWxlLXN5c3RlbS9maWxlLXN5c3RlbS1hY2Nlc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvZmlsZS1zeXN0ZW0vZmlsZS1zeXN0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvaHR0cC9odHRwLXJlcXVlc3QvaHR0cC1yZXF1ZXN0LWNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9odHRwL2h0dHAtcmVxdWVzdC9odHRwLXJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvaHR0cC9odHRwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL2ltYWdlLXNvdXJjZS9pbWFnZS1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvbWF0cml4L21hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9wbGF0Zm9ybS9wbGF0Zm9ybS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS9wcm9maWxpbmcvcHJvZmlsaW5nLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3RleHQvdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS90cmFjZS90cmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS91aS9hbmltYXRpb24vYW5pbWF0aW9uLWNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS91aS9hbmltYXRpb24vYW5pbWF0aW9uLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL2J1aWxkZXIvbW9kdWxlLW5hbWUtc2FuaXRpemVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL2NvcmUvcHJvcGVydGllcy9wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL2VudW1zL2VudW1zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL3N0eWxpbmcvYmFja2dyb3VuZC1jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvdWkvc3R5bGluZy9iYWNrZ3JvdW5kLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL3N0eWxpbmcvZm9udC1jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvdWkvc3R5bGluZy9mb250LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL3N0eWxpbmcvbGluZWFyLWdyYWRpZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3VpL3N0eWxpbmcvc3R5bGUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS91aS9zdHlsaW5nL3N0eWxlL3N0eWxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3V0aWxzL2xheW91dC1oZWxwZXIvbGF5b3V0LWhlbHBlci1jb21tb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvdXRpbHMvbGF5b3V0LWhlbHBlci9sYXlvdXQtaGVscGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3V0aWxzL21haW50aHJlYWQtaGVscGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3V0aWxzL25hdGl2ZS1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9AbmF0aXZlc2NyaXB0L2NvcmUvdXRpbHMvbnVtYmVyLXV0aWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3V0aWxzL3R5cGVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQG5hdGl2ZXNjcmlwdC9jb3JlL3V0aWxzL3V0aWxzLWNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0BuYXRpdmVzY3JpcHQvY29yZS91dGlscy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2Nzcy11bml0LWNvbnZlcnRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC10aGVtZS1jb3JlL2Nzcy9jb3JlLmxpZ2h0LmNzcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9obXIvaG1yLXVwZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL25hdGl2ZXNjcmlwdC1kZXYtd2VicGFjay9obXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9uYXRpdmVzY3JpcHQtZGV2LXdlYnBhY2svaG90LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvbmF0aXZlc2NyaXB0LWRldi13ZWJwYWNrL2xvYWQtYXBwbGljYXRpb24tY3NzLWFuZ3VsYXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9uYXRpdmVzY3JpcHQtZGV2LXdlYnBhY2svbG9hZC1hcHBsaWNhdGlvbi1jc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy12YWx1ZS1wYXJzZXIvbGliL3VuaXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLXZhbHVlLXBhcnNlci9saWIvd2Fsay5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHVjZS1jc3MtY2FsYy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVkdWNlLWNzcy1jYWxjL2Rpc3QvbGliL2NvbnZlcnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWR1Y2UtY3NzLWNhbGMvZGlzdC9saWIvcmVkdWNlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHVjZS1jc3MtY2FsYy9kaXN0L2xpYi9zdHJpbmdpZmllci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlZHVjZS1jc3MtY2FsYy9kaXN0L3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBOEMsY0FBYztBQUM1RCxZQUFZLG1CQUFPLENBQUMsbURBQWdCO0FBQ3BDLGtCQUFrQixtQkFBTyxDQUFDLDBEQUFnQjtBQUMxQyxlQUFlLG1CQUFPLENBQUMsa0RBQWU7QUFDdEM7QUFDQSw2QkFBNkIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5Q0FBeUMsRUFBRTtBQUNyRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCLHlDQUF5QyxFQUFFO0FBQ3JFO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSwwQkFBMEIseUNBQXlDLEVBQUU7QUFDckU7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQix5Q0FBeUMsRUFBRTtBQUNyRTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0M7Ozs7Ozs7QUN2TkEsOENBQThDLGNBQWM7QUFDNUQsYUFBYSxtQkFBTyxDQUFDLDBEQUFnQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxxQzs7Ozs7OztBQ3BCQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0M7Ozs7Ozs7O0FDaktBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDaEhBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0Esc0NBQXNDLEVBQUUsY0FBYyxFQUFFLGNBQWMsRUFBRTtBQUN4RTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUhBQXVILDRCQUE0QjtBQUNuSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsaURBQWlEO0FBQ2xEO0FBQ0EsNkJBQTZCLHNDQUFzQztBQUNuRTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDLDZCQUE2QixzQ0FBc0M7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0Qyw2QkFBNkIsc0NBQXNDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxpQ0FBaUMsMkJBQTJCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFVBQVUscURBQXFELEVBQUUsRUFBRTtBQUMxRyx1Q0FBdUMsVUFBVSxxQ0FBcUMsRUFBRSxFQUFFO0FBQzFGLHlDQUF5QyxVQUFVLHNEQUFzRCxFQUFFLEVBQUU7QUFDN0cseUNBQXlDLFVBQVUsb0RBQW9ELEVBQUU7QUFDekc7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxhQUFhLEVBQUU7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEMsNkJBQTZCLHNDQUFzQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixpQ0FBaUMsOENBQThDO0FBQ25HO0FBQ0E7QUFDQSxvQkFBb0IsaUNBQWlDLGtDQUFrQztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEMsNkJBQTZCLHFDQUFxQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQ0FBaUMsMkJBQTJCO0FBQ3BGO0FBQ0E7QUFDQSx3QkFBd0IsaUNBQWlDLGdEQUFnRDtBQUN6RztBQUNBO0FBQ0Esd0JBQXdCLGlDQUFpQyxnREFBZ0Q7QUFDekc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsaUNBQWlDLEtBQUssMkNBQTJDLE1BQU0sMkNBQTJDLEVBQUU7QUFDNUo7QUFDQTtBQUNBLHdCQUF3QixpQ0FBaUMsS0FBSywyQ0FBMkMsZUFBZTtBQUN4SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSx5QkFBeUIsTUFBTTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlDQUFpQywwQ0FBMEM7QUFDM0Y7QUFDQSxZQUFZLGlDQUFpQyxvQkFBb0I7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUNBQWlDLCtCQUErQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksaUNBQWlDLFlBQVk7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsV0FBVztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlDQUFpQyw2REFBNkQ7QUFDOUc7QUFDQSxZQUFZLGlDQUFpQyxpQ0FBaUM7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixXQUFXO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBLHNFQUFzRSxJQUFJO0FBQzFFLHNFQUFzRSxJQUFJO0FBQzFFO0FBQ0E7QUFDQSx1RUFBdUUsSUFBSSwrQ0FBK0MsSUFBSTtBQUM5SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSwrRUFBK0U7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDhCQUE4QixFQUFFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCwyQ0FBMkMsRUFBRTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9DQUFvQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsdUNBQXVDLHdEQUF3RDtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isd0RBQXdEO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxrQzs7Ozs7OztBQzUwQ0EsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1EQUFtRDtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsT0FBTztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQSx5QkFBeUIsbUNBQW1DO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLCtCQUErQixtQkFBbUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDOzs7Ozs7O0FDNU5BLDRGQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsbUVBQW1FO0FBQ3BFLG9DOzs7Ozs7OztBQzNIQSw4Q0FBOEMsY0FBYztBQUM1RCxhQUFhLG1CQUFPLENBQUMsaURBQVM7QUFDOUIsY0FBYyxtQkFBTyxDQUFDLG1EQUFnQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGLFdBQVcsRUFBRTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaUJBQWlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0Esa0Q7Ozs7Ozs7QUN6WUEsOENBQThDLGNBQWM7QUFDNUQsMkJBQTJCLG1CQUFPLENBQUMsc0VBQXNCO0FBQ3pELGtCQUFrQixtQkFBTyxDQUFDLDJEQUFjO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFPLENBQUMseURBQWE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHlDQUF5QztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLGtEQUFrRDtBQUN2RCxDQUFDLG1FQUFtRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMkNBQTJDO0FBQzVDLHVDOzs7Ozs7O0FDbnBCQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBLGFBQWEsbUJBQU8sQ0FBQywrREFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQzs7Ozs7OztBQ2hCQSw4Q0FBOEMsY0FBYztBQUM1RCxZQUFZLG1CQUFPLENBQUMsbURBQW1CO0FBQ3ZDLHFCQUFxQixtQkFBTyxDQUFDLHlEQUF5QjtBQUN0RCw0QkFBNEIsbUJBQU8sQ0FBQyw2RUFBdUI7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDJGQUEyRjtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLG1CQUFPLENBQUMsaUVBQW9CO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsK0RBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELHVDQUF1QyxFQUFFO0FBQ3BHLHlEQUF5RCxrREFBa0QsRUFBRTtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxpQ0FBaUM7QUFDakMsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDOzs7Ozs7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVELGtCQUFrQixtQkFBTyxDQUFDLHNFQUFnQjtBQUMxQyxTQUFTLG1CQUFPLENBQUMsc0VBQWdCO0FBQ2pDO0FBQ0E7QUFDQSx1REFBdUQsMEJBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixrQkFBa0IsRUFBRTtBQUM3QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMEJBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQixrQkFBa0IsRUFBRTtBQUM3QyxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsMEJBQTBCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCwwQkFBMEI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsZ0JBQWdCLGtCQUFrQixFQUFFO0FBQzdDLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZ0M7Ozs7Ozs7QUNuRUEsOENBQThDLGNBQWM7QUFDNUQsb0JBQW9CLG1CQUFPLENBQUMsK0RBQWdCO0FBQzVDLGNBQWMsbUJBQU8sQ0FBQyxtREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsaURBQVM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEM7Ozs7Ozs7QUN4VkEsOENBQThDLGNBQWM7QUFDNUQscUJBQXFCLG1CQUFPLENBQUMsMERBQXVCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDOzs7Ozs7O0FDekVBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzRUFBc0U7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxpREFBaUQ7QUFDbEQ7QUFDQTtBQUNBLHdDOzs7Ozs7O0FDbktBLDRGQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixVQUFVO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDhDQUE4QztBQUMvQztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQW1CO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFPLENBQUMsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQzs7Ozs7Ozs7QUNqUkEsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsdURBQXVEO0FBQ3hELG9DOzs7Ozs7O0FDVkEsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFCQUFxQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRCQUE0QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdFQUFnRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw2REFBNkQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDOzs7Ozs7O0FDaE5BLDhDQUE4QyxjQUFjO0FBQzVELGNBQWMsbUJBQU8sQ0FBQyxtREFBYTtBQUNuQztBQUNBLGNBQWMsbUJBQU8sQ0FBQyxtREFBYTtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBTyxDQUFDLG1FQUE2QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDZEQUE2RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGNBQWM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw0Qzs7Ozs7OztBQ3BPQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RCx5QkFBeUIsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDckQseUJBQXlCLG1CQUFPLENBQUMsbUVBQTZCO0FBQzlELGlCQUFpQixtQkFBTyxDQUFDLHlEQUFnQjtBQUN6QyxTQUFTLG1CQUFPLENBQUMscUVBQW9CO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFlBQVk7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixZQUFZO0FBQ3RDO0FBQ0E7QUFDQSwyTUFBMk07QUFDM007QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Qzs7Ozs7Ozs7QUNqaUJBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0EscUNBQXFDLHdCQUF3QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRDs7Ozs7OztBQ3JCQSw4Q0FBOEMsY0FBYztBQUM1RCxvQkFBb0IsbUJBQU8sQ0FBQywrQ0FBaUI7QUFDN0MsbUJBQW1CLG1CQUFPLENBQUMsa0VBQTBCO0FBQ3JELGNBQWMsbUJBQU8sQ0FBQyxtREFBZ0I7QUFDdEMsY0FBYyxtQkFBTyxDQUFDLDhEQUFxQjtBQUMzQztBQUNBLGtCQUFrQixtQkFBTyxDQUFDLDJEQUFvQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHVCQUF1QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsaUJBQWlCLEVBQUUsdUJBQXVCLFlBQVksRUFBRTtBQUM3STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZ0NBQWdDLEVBQUU7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtR0FBbUc7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvR0FBb0c7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtR0FBbUc7QUFDcEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUdBQW1HO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLG1HQUFtRztBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsNEJBQTRCLEVBQUUsZ0JBQWdCLHFCQUFxQixFQUFFO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsbUdBQW1HO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUdBQW1HO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxnQkFBZ0I7QUFDdkU7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxxQ0FBcUM7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUNBQXlDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSx3Q0FBd0M7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsMENBQTBDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHVCQUF1QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsdUJBQXVCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx1QkFBdUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx1QkFBdUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLHFDQUFxQztBQUMxRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSx3Q0FBd0M7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsdUJBQXVCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLHlDQUF5QztBQUN0SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRkFBbUYsNENBQTRDO0FBQy9IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix1QkFBdUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLHVCQUF1QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSx5Q0FBeUMsdUJBQXVCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0NBQWdDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0M7Ozs7Ozs7QUNsc0NBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxtRUFBbUU7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNFQUFzRTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzRUFBc0U7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMseUVBQXlFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0VBQXNFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw2REFBNkQ7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdFQUFnRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrRkFBa0Y7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3RkFBd0Y7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrRkFBa0Y7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvREFBb0Q7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNkRBQTZEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHlFQUF5RTtBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNkRBQTZEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxrRkFBa0Y7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHVEQUF1RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDJDQUEyQztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlHQUFpRztBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxvR0FBb0c7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMseUhBQXlIO0FBQzFIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBHQUEwRztBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOEZBQThGO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdFQUFnRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsMERBQTBEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDZEQUE2RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLCtFQUErRTtBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtQkFBTyxDQUFDLDhEQUFjO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLENBQUMseUVBQXlFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx5RUFBeUU7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLCtFQUErRTtBQUNoRixpQzs7Ozs7OztBQ2hNQSw4Q0FBOEMsY0FBYztBQUM1RCx3QkFBd0IsbUJBQU8sQ0FBQyxrRUFBbUI7QUFDbkQsY0FBYyxtQkFBTyxDQUFDLG1EQUFhO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELDJCQUEyQiwyQkFBMkIsNkJBQTZCLGlDQUFpQyx5QkFBeUIsNkNBQTZDLGlEQUFpRCxtREFBbUQsK0NBQStDLDZDQUE2QyxpREFBaUQsbURBQW1ELCtDQUErQyx1REFBdUQseURBQXlELCtEQUErRCw2REFBNkQsaUNBQWlDO0FBQzEwQjtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSw2Qzs7Ozs7OztBQ2xPQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RCx3QkFBd0IsbUJBQU8sQ0FBQyxrRUFBbUI7QUFDbkQsY0FBYyxtQkFBTyxDQUFDLG1EQUFhO0FBQ25DLGNBQWMsbUJBQU8sQ0FBQyxtREFBbUI7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsaUVBQW9CO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLGlFQUFpQjtBQUMzQyxTQUFTLG1CQUFPLENBQUMsb0VBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQseUNBQXlDO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQzs7Ozs7OztBQzNyQkEsOENBQThDLGNBQWM7QUFDNUQsbUJBQW1CLG1CQUFPLENBQUMscUVBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwREFBMEQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDZEQUE2RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdGQUF3RjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx3QkFBd0IsRUFBRTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx5QkFBeUIsRUFBRTtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Qzs7Ozs7OztBQzdJQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RCxvQkFBb0IsbUJBQU8sQ0FBQyw4REFBZTtBQUMzQyxjQUFjLG1CQUFPLENBQUMsbURBQWE7QUFDbkMsaUJBQWlCLG1CQUFPLENBQUMseURBQWdCO0FBQ3pDLFNBQVMsbUJBQU8sQ0FBQywrREFBbUI7QUFDcEMsU0FBUyxtQkFBTyxDQUFDLDhEQUFlO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQzs7Ozs7OztBQ2xNQSw4Q0FBOEMsY0FBYztBQUM1RCxjQUFjLG1CQUFPLENBQUMsbURBQWE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQzs7Ozs7OztBQ3BEQSw4Q0FBOEMsY0FBYztBQUM1RCxtQkFBbUIsbUJBQU8sQ0FBQyxxRUFBb0I7QUFDL0MsY0FBYyxtQkFBTyxDQUFDLG1EQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyx1REFBdUI7QUFDNUMsY0FBYyxtQkFBTyxDQUFDLG1EQUFtQjtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyw2REFBNkI7QUFDeEQsaUJBQWlCLG1CQUFPLENBQUMseURBQWdCO0FBQ3pDLHFCQUFxQixtQkFBTyxDQUFDLDBEQUEwQjtBQUN2RCxlQUFlLG1CQUFPLENBQUMscURBQWM7QUFDckMsY0FBYyxtQkFBTyxDQUFDLG1EQUFhO0FBQ25DLGFBQWEsbUJBQU8sQ0FBQyxrREFBa0I7QUFDdkMsd0JBQXdCLG1CQUFPLENBQUMsa0VBQW1CO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUJBQW1CO0FBQzdDLDBDQUEwQyxtQ0FBbUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNFQUFzRTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGlEQUFpRDtBQUNsRCxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyREFBMkQsc0xBQXNMO0FBQ2pQO0FBQ0EsNERBQTRELHdMQUF3TDtBQUNwUDtBQUNBLDBEQUEwRCxvTEFBb0w7QUFDOU87QUFDQSw2REFBNkQsMExBQTBMO0FBQ3ZQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0ZBQXdGO0FBQ3pGLG9FQUFvRSxrTEFBa0w7QUFDdFA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCx5RkFBeUY7QUFDekk7QUFDQSxDQUFDLGtGQUFrRjtBQUNuRixrRUFBa0UsMEtBQTBLO0FBQzVPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxpRkFBaUY7QUFDako7QUFDQSxnRUFBZ0UsaUZBQWlGO0FBQ2pKO0FBQ0EsZ0VBQWdFLGlGQUFpRjtBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvRUFBb0Usd0ZBQXdGO0FBQzVKO0FBQ0Esb0VBQW9FLHdGQUF3RjtBQUM1SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBLFlBQVksYUFBYTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFVBQVUsa0NBQWtDLEVBQUUsRUFBRTtBQUMvRSxpQ0FBaUMsVUFBVSxrQ0FBa0MsRUFBRSxFQUFFO0FBQ2pGO0FBQ0E7QUFDQSxpQkFBaUIsNEJBQTRCLDJDQUEyQyxFQUFFO0FBQzFGLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUJBQWlCLDRCQUE0QiwyQ0FBMkMsRUFBRTtBQUMxRixLQUFLO0FBQ0wsbUNBQW1DLFVBQVUsc0NBQXNDLEVBQUUsRUFBRTtBQUN2RixxQ0FBcUMsVUFBVSxzQ0FBc0MsRUFBRSxFQUFFO0FBQ3pGO0FBQ0E7QUFDQSxpQkFBaUIsZ0NBQWdDLCtDQUErQyxFQUFFO0FBQ2xHLEtBQUs7QUFDTDtBQUNBO0FBQ0EsaUJBQWlCLGdDQUFnQywrQ0FBK0MsRUFBRTtBQUNsRyxLQUFLO0FBQ0wsZ0NBQWdDLFVBQVUsbUNBQW1DLEVBQUUsRUFBRTtBQUNqRixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELG1CQUFtQixFQUFFO0FBQ2hGO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsbUNBQW1DO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RSxpQ0FBaUM7QUFDbEgsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0VBQStFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RSxpQ0FBaUM7QUFDbEgsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RSxpQ0FBaUM7QUFDbEgsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RSxpQ0FBaUM7QUFDbEgsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RSxpQ0FBaUM7QUFDbEgsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCw0RUFBNEU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSx5RkFBeUY7QUFDMUo7QUFDQSwrREFBK0Qsd0dBQXdHLDZCQUE2QixFQUFFLEVBQUU7QUFDeE07QUFDQSw2REFBNkQsb0ZBQW9GO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGtDQUFrQyxzQkFBc0I7QUFDeEQsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHVGQUF1RjtBQUNoSTtBQUNBLENBQUMsNkRBQTZEO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsaUVBQWlFLHFGQUFxRjtBQUN0SjtBQUNBLDhFQUE4RSxpSEFBaUg7QUFDL0w7QUFDQSw0Qzs7Ozs7OztBQzNpQ0EsOENBQThDLGNBQWM7QUFDNUQsbUJBQW1CLG1CQUFPLENBQUMsa0VBQTBCO0FBQ3JELGNBQWMsbUJBQU8sQ0FBQyxtREFBZ0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUM7Ozs7Ozs7QUN2RUEsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEOzs7Ozs7O0FDNURBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVELDZCQUE2QixtQkFBTyxDQUFDLGdGQUF3QjtBQUM3RCxTQUFTLG1CQUFPLENBQUMsZ0ZBQXdCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDOzs7Ozs7O0FDbkNBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRDs7Ozs7OztBQ1RBLDhDQUE4QyxjQUFjO0FBQzVELGNBQWMsbUJBQU8sQ0FBQyxtREFBVTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixXQUFXO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssd0RBQXdEO0FBQzdEO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDLHdDQUF3QztBQUN6Qyw2Qzs7Ozs7OztBQ3pIQSw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLDRCQUE0QjtBQUNyRSx5Q0FBeUMsNEJBQTRCO0FBQ3JFLHdDOzs7Ozs7O0FDaENBLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxHQUFHO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDOzs7Ozs7O0FDbEhBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVELFlBQVksbUJBQU8sQ0FBQyxtREFBUztBQUM3QiwwQkFBMEIsbUJBQU8sQ0FBQywrREFBcUI7QUFDdkQsOEJBQThCLG1CQUFPLENBQUMsd0VBQXFDO0FBQzNFLGFBQWEsbUJBQU8sQ0FBQyx5RUFBaUI7QUFDdEM7QUFDQSxTQUFTLG1CQUFPLENBQUMsK0RBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxFQUFFO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHNDQUFzQyxFQUFFO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLHdDOzs7Ozs7O0FDekhBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxjQUFjO0FBQzVELHNCQUFzQixtQkFBTyxDQUFDLDJEQUFpQjtBQUMvQztBQUNBLGNBQWMsbUJBQU8sQ0FBQyxtREFBVTtBQUNoQyxTQUFTLG1CQUFPLENBQUMsMERBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUM7Ozs7Ozs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUN4SEEsa0JBQWtCLGtDQUFrQyxVQUFVLGtRQUFrUSxFQUFFLHdEQUF3RCx1REFBdUQsRUFBRSxFQUFFLDJEQUEyRCxrRUFBa0UsRUFBRSxFQUFFLHdEQUF3RCx1REFBdUQsRUFBRSxFQUFFLDJEQUEyRCxrRUFBa0UsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLDJEQUEyRCwwREFBMEQsRUFBRSxFQUFFLDhEQUE4RCxxRUFBcUUsRUFBRSxFQUFFLHdEQUF3RCwwREFBMEQsRUFBRSxFQUFFLDJEQUEyRCxxRUFBcUUsRUFBRSxFQUFFLHlEQUF5RCwwREFBMEQsRUFBRSxFQUFFLDREQUE0RCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLDZEQUE2RCwwREFBMEQsRUFBRSxFQUFFLGdFQUFnRSxxRUFBcUUsRUFBRSxFQUFFLDREQUE0RCwwREFBMEQsRUFBRSxFQUFFLCtEQUErRCxxRUFBcUUsRUFBRSxFQUFFLHlEQUF5RCwwREFBMEQsRUFBRSxFQUFFLDREQUE0RCxxRUFBcUUsRUFBRSxFQUFFLHdEQUF3RCwwREFBMEQsRUFBRSxFQUFFLDJEQUEyRCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLHlEQUF5RCwwREFBMEQsRUFBRSxFQUFFLDREQUE0RCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHlEQUF5RCxxRUFBcUUsRUFBRSxFQUFFLHVEQUF1RCx1REFBdUQsRUFBRSxFQUFFLHNEQUFzRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCx3REFBd0QsRUFBRSxFQUFFLHNEQUFzRCx1REFBdUQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG9EQUFvRCxxREFBcUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCxzREFBc0QsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLG9EQUFvRCxzREFBc0QsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSxFQUFFLHNEQUFzRCw2REFBNkQsRUFBRSxFQUFFLHNEQUFzRCwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCw0REFBNEQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHNEQUFzRCwwREFBMEQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx1REFBdUQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSxFQUFFLHVEQUF1RCw4REFBOEQsRUFBRSxFQUFFLHVEQUF1RCw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCw2REFBNkQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCwyREFBMkQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLHlEQUF5RCxxREFBcUQsRUFBRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLHdEQUF3RCxxREFBcUQsRUFBRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDBEQUEwRCw0REFBNEQsRUFBRSxFQUFFLDJEQUEyRCw2REFBNkQsRUFBRSxFQUFFLDREQUE0RCw4REFBOEQsRUFBRSxFQUFFLCtEQUErRCxxRUFBcUUsRUFBRSxFQUFFLCtEQUErRCxxRUFBcUUsRUFBRSxFQUFFLGdFQUFnRSxzRUFBc0UsRUFBRSxFQUFFLG1FQUFtRSwrREFBK0QsRUFBRSxFQUFFLGlFQUFpRSw2REFBNkQsRUFBRSxFQUFFLDREQUE0RCw4REFBOEQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLDREQUE0RCw0REFBNEQsRUFBRSxFQUFFLDJEQUEyRCw2REFBNkQsRUFBRSxFQUFFLDhEQUE4RCw0REFBNEQsRUFBRSxFQUFFLDBEQUEwRCxnRUFBZ0UsRUFBRSxFQUFFLDBEQUEwRCxrRUFBa0UsRUFBRSxFQUFFLDJEQUEyRCxtRUFBbUUsRUFBRSxFQUFFLHlEQUF5RCxvRUFBb0UsRUFBRSxFQUFFLHlEQUF5RCxrRUFBa0UsRUFBRSxFQUFFLDZEQUE2RCwwREFBMEQsRUFBRSxFQUFFLDREQUE0RCwwREFBMEQsRUFBRSxFQUFFLDJEQUEyRCwwREFBMEQsRUFBRSxFQUFFLDJEQUEyRCxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDBEQUEwRCxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDJEQUEyRCxxRUFBcUUsRUFBRSwwREFBMEQsRUFBRSxFQUFFLDZFQUE2RSw2REFBNkQsRUFBRSx5REFBeUQsRUFBRSxrRUFBa0UsRUFBRSxFQUFFLHdFQUF3RSwrREFBK0QsRUFBRSxFQUFFLG1FQUFtRSwwREFBMEQsRUFBRSxxREFBcUQsRUFBRSxzREFBc0QsRUFBRSxFQUFFLG9EQUFvRCwwREFBMEQsRUFBRSx5RUFBeUUsRUFBRSwwREFBMEQsRUFBRSx5REFBeUQsRUFBRSxnRUFBZ0UsRUFBRSx5REFBeUQsRUFBRSw2REFBNkQsRUFBRSxFQUFFLDJFQUEyRSx1REFBdUQsRUFBRSxxRUFBcUUsRUFBRSxFQUFFLDREQUE0RCxxRUFBcUUsRUFBRSxpRUFBaUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLG1GQUFtRixxRUFBcUUsRUFBRSxpRUFBaUUsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSxFQUFFLHNFQUFzRSxxRUFBcUUsRUFBRSxFQUFFLHVFQUF1RSxxRUFBcUUsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSxFQUFFLHNFQUFzRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLHVFQUF1RSxxRUFBcUUsRUFBRSxFQUFFLHVFQUF1RSxxRUFBcUUsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSxFQUFFLG9FQUFvRSxxRUFBcUUsRUFBRSxFQUFFLDREQUE0RCx5RUFBeUUsRUFBRSxpRUFBaUUsRUFBRSwwREFBMEQsRUFBRSxFQUFFLG1GQUFtRixxRUFBcUUsRUFBRSxFQUFFLHFFQUFxRSwwREFBMEQsRUFBRSxxRUFBcUUsRUFBRSxpRUFBaUUsRUFBRSxFQUFFLG1EQUFtRCx5RkFBeUYsRUFBRSxFQUFFLDREQUE0RCw4REFBOEQsRUFBRSx5RUFBeUUsRUFBRSxFQUFFLHlFQUF5RSwyREFBMkQsRUFBRSxpRUFBaUUsRUFBRSw0REFBNEQsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDBFQUEwRSwyREFBMkQsRUFBRSxpRUFBaUUsRUFBRSw2REFBNkQsRUFBRSx1REFBdUQsRUFBRSxFQUFFLCtFQUErRSxxRUFBcUUsRUFBRSxFQUFFLGtFQUFrRSxxREFBcUQsRUFBRSxFQUFFLHlFQUF5RSx5REFBeUQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHlFQUF5RSxzREFBc0QsRUFBRSwyREFBMkQsRUFBRSxFQUFFLHdIQUF3SCxxRUFBcUUsRUFBRSxFQUFFLHFGQUFxRix5REFBeUQsRUFBRSwyREFBMkQsRUFBRSxFQUFFLGlGQUFpRiw0REFBNEQsRUFBRSwrREFBK0QsRUFBRSwwREFBMEQsRUFBRSxFQUFFLDBFQUEwRSwrREFBK0QsRUFBRSwwREFBMEQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCx5REFBeUQsRUFBRSxFQUFFLHNEQUFzRCx5REFBeUQsRUFBRSxFQUFFLHlEQUF5RCx5REFBeUQsRUFBRSxFQUFFLDRFQUE0RSwwREFBMEQsRUFBRSx5REFBeUQsRUFBRSxxREFBcUQsRUFBRSx1REFBdUQsRUFBRSxFQUFFLGtGQUFrRixrRUFBa0UsRUFBRSxFQUFFLG1GQUFtRix5REFBeUQsRUFBRSxxREFBcUQsRUFBRSxzREFBc0QsRUFBRSw0REFBNEQsRUFBRSxFQUFFLG1GQUFtRixxRUFBcUUsRUFBRSxFQUFFLGtHQUFrRywwREFBMEQsRUFBRSx5REFBeUQsRUFBRSxFQUFFLHFEQUFxRCxrRUFBa0UsRUFBRSxFQUFFLHlEQUF5RCwwREFBMEQsRUFBRSxxRUFBcUUsRUFBRSxFQUFFLDhEQUE4RCx5REFBeUQsRUFBRSxrRUFBa0UsRUFBRSwwREFBMEQsRUFBRSw4RUFBOEUsRUFBRSxFQUFFLHFGQUFxRixxRUFBcUUsRUFBRSxFQUFFLGtFQUFrRSxxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSx1REFBdUQsRUFBRSxFQUFFLG1GQUFtRiwrREFBK0QsRUFBRSxFQUFFLHFGQUFxRiwrREFBK0QsRUFBRSxFQUFFLHdFQUF3RSxxRUFBcUUsRUFBRSxFQUFFLHlGQUF5RixzREFBc0QsRUFBRSxxREFBcUQsRUFBRSw2REFBNkQsRUFBRSxrRUFBa0UsRUFBRSw2REFBNkQsRUFBRSxFQUFFLDJGQUEyRixzREFBc0QsRUFBRSxxREFBcUQsRUFBRSw2REFBNkQsRUFBRSxvRUFBb0UsRUFBRSw2REFBNkQsRUFBRSxFQUFFLHdFQUF3RSwwREFBMEQsRUFBRSxFQUFFLHlGQUF5RixrRUFBa0UsRUFBRSx5REFBeUQsRUFBRSxFQUFFLDJGQUEyRixvRUFBb0UsRUFBRSx5REFBeUQsRUFBRSxFQUFFLHFFQUFxRSxzREFBc0QsRUFBRSxrRUFBa0UsRUFBRSx1REFBdUQsRUFBRSxtRUFBbUUsRUFBRSxFQUFFLGdHQUFnRyxxREFBcUQsRUFBRSw4REFBOEQsRUFBRSx5REFBeUQsRUFBRSxzREFBc0QsRUFBRSxrRUFBa0UsRUFBRSxFQUFFLDRFQUE0RSx1REFBdUQsRUFBRSxxRUFBcUUsRUFBRSxFQUFFLHVHQUF1Ryx1REFBdUQsRUFBRSxFQUFFLDJGQUEyRiw2REFBNkQsRUFBRSxFQUFFLDZGQUE2Riw0REFBNEQsRUFBRSxFQUFFLDBFQUEwRSxrRUFBa0UsRUFBRSw0REFBNEQsRUFBRSx5REFBeUQsRUFBRSx5RUFBeUUsRUFBRSw2REFBNkQsRUFBRSxzREFBc0QsRUFBRSxrRUFBa0UsRUFBRSxFQUFFLDJGQUEyRiw0REFBNEQsRUFBRSxFQUFFLDZGQUE2Riw0REFBNEQsRUFBRSxFQUFFLHVEQUF1RCxxRUFBcUUsRUFBRSxFQUFFLHdFQUF3RSxxRUFBcUUsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHFFQUFxRSxxRUFBcUUsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHNGQUFzRixxRUFBcUUsRUFBRSx1REFBdUQsRUFBRSxFQUFFLHdFQUF3RSxxRUFBcUUsRUFBRSwwREFBMEQsRUFBRSxFQUFFLHlEQUF5RCxtRUFBbUUsRUFBRSx1RUFBdUUsRUFBRSxFQUFFLHdFQUF3RSxrRUFBa0UsRUFBRSx1RUFBdUUsRUFBRSxFQUFFLGlFQUFpRSwyREFBMkQsRUFBRSxrRUFBa0UsRUFBRSx1RUFBdUUsRUFBRSxFQUFFLDJEQUEyRCx5REFBeUQsRUFBRSxFQUFFLDBEQUEwRCw2REFBNkQsRUFBRSx5REFBeUQsRUFBRSxFQUFFLHNFQUFzRSw4REFBOEQsRUFBRSx5REFBeUQsRUFBRSw2REFBNkQsRUFBRSw2REFBNkQsRUFBRSxzREFBc0QsRUFBRSwwREFBMEQsRUFBRSx1REFBdUQsRUFBRSxFQUFFLDBFQUEwRSwwREFBMEQsRUFBRSx1REFBdUQsRUFBRSw4REFBOEQsRUFBRSxFQUFFLDhEQUE4RCx1REFBdUQsRUFBRSxrRUFBa0UsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHdFQUF3RSwwREFBMEQsRUFBRSw0REFBNEQsRUFBRSxFQUFFLHdEQUF3RCx5REFBeUQsRUFBRSw4REFBOEQsRUFBRSwwREFBMEQsRUFBRSwwREFBMEQsRUFBRSxFQUFFLG9EQUFvRCwyREFBMkQsRUFBRSw0RUFBNEUsRUFBRSx5REFBeUQsRUFBRSxFQUFFLDREQUE0RCwyREFBMkQsRUFBRSxFQUFFLCtEQUErRCw0REFBNEQsRUFBRSxFQUFFLCtEQUErRCw2REFBNkQsRUFBRSxFQUFFLHFEQUFxRCw2RUFBNkUsRUFBRSxFQUFFLDREQUE0RCx5REFBeUQsRUFBRSxFQUFFLDBFQUEwRSw2REFBNkQsRUFBRSxFQUFFLG1EQUFtRCx5REFBeUQsRUFBRSxFQUFFLHVEQUF1RCx5REFBeUQsRUFBRSxFQUFFLGtHQUFrRywwREFBMEQsRUFBRSxFQUFFLHVEQUF1RCx3REFBd0QsRUFBRSxFQUFFLDRFQUE0RSxnRUFBZ0UsRUFBRSxFQUFFLG1GQUFtRiw0REFBNEQsRUFBRSxFQUFFLHFHQUFxRyw0REFBNEQsRUFBRSxFQUFFLDhEQUE4RCx3REFBd0QsRUFBRSwwREFBMEQsRUFBRSx1Qjs7Ozs7Ozs7QUNBajNzRDtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELFlBQVksbUJBQU8sQ0FBQyxpREFBUTtBQUM1QixzQkFBc0IsbUJBQU8sQ0FBQyw4QkFBOEI7QUFDNUQ7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQzs7Ozs7Ozs7QUNiYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELG1CQUFtQixtQkFBTyxDQUFDLDREQUFjO0FBQ3pDO0FBQ0EsaUM7Ozs7Ozs7QUNKQTtBQUNBO0FBQ0EsdUNBQXVDLFVBQVUsR0FBRyxRQUFRO0FBQzVELHVDQUF1QyxVQUFVLEdBQUcsUUFBUTtBQUM1RCx5Q0FBeUMsVUFBVSxHQUFHLFFBQVE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9EQUFvRCxJQUFJO0FBQ3hELEtBQUs7QUFDTDtBQUNBO0FBQ0EseURBQXlELElBQUk7QUFDN0QsS0FBSztBQUNMO0FBQ0E7QUFDQSxzREFBc0QsY0FBYyxJQUFJLFVBQVU7QUFDbEY7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHVCQUFnQjtBQUM1Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esb0NBQW9DLFNBQVM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0EsbUNBQW1DLFNBQVM7QUFDNUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw4RUFBOEUsWUFBWTtBQUMxRjs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSxZQUFZO0FBQ25GO0FBQ0EscUJBQXFCO0FBQ3JCLG9EQUFvRCx5QkFBeUI7QUFDN0U7QUFDQSxpQkFBaUI7QUFDakIsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxRQUFRO0FBQzlEO0FBQ0EsYUFBYTtBQUNiLGtEQUFrRCx5QkFBeUI7QUFDM0U7QUFDQSxTQUFTO0FBQ1Q7O0FBRUEsSUFBSSxJQUFVO0FBQ2Q7QUFDQSxDQUFDLE1BQU0sRUFFTjs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUVBQXlFLFlBQVk7QUFDckY7QUFDQSxTQUFTO0FBQ1Q7QUFDQSwwREFBMEQsT0FBTyxNQUFNLFFBQVE7QUFDL0U7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsS0FBSztBQUN4QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0EsS0FBSztBQUNMOzs7Ozs7OztBQzNLQSw4REFBZ0IsbUJBQU8sQ0FBQyxrRUFBd0I7O0FBRWhEO0FBQ0E7QUFDQSxpREFBaUQsbUJBQU8sQ0FBQyxXQUFPO0FBQ2hFLCtDQUErQyxtQkFBTyxDQUFDLFdBQU87QUFDOUQsS0FBSztBQUNMOzs7Ozs7Ozs7QUNQQTtBQUNBLHdCQUF3QixtQkFBTyxDQUFDLDhCQUE4QjtBQUM5RCxJQUFJLG1CQUFPLENBQUMseUNBQXlDOztBQUVyRDs7QUFFQTtBQUNBOzs7Ozs7OztBQ1BBLFlBQVksbUJBQU8sQ0FBQyxtREFBUztBQUM3QixXQUFXLG1CQUFPLENBQUMsa0RBQVE7QUFDM0IsZ0JBQWdCLG1CQUFPLENBQUMsdURBQWE7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsbUJBQU8sQ0FBQyxrREFBUTs7QUFFbkM7O0FBRUE7O0FBRUE7Ozs7Ozs7O0FDM0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsS0FBSztBQUNuQztBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7O0FDMVBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsSUFBSTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDaERBO0FBQ0E7O0FBRUEsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDckJhOztBQUViO0FBQ0E7QUFDQSxDQUFDOztBQUVELDBCQUEwQixtQkFBTyxDQUFDLG1EQUFzQjs7QUFFeEQ7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLGdEQUFVOztBQUVoQyxlQUFlLG1CQUFPLENBQUMscURBQWU7O0FBRXRDOztBQUVBLG1CQUFtQixtQkFBTyxDQUFDLHlEQUFtQjs7QUFFOUM7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsb0M7Ozs7Ozs7O0FDbERhOztBQUViO0FBQ0E7QUFDQSxDQUFDOztBQUVELHdCQUF3QixtQkFBTyxDQUFDLDZDQUFvQjs7QUFFcEQ7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7O0FBRUE7QUFDQSxvQzs7Ozs7Ozs7QUNyQ2E7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQSxlQUFlLG1CQUFPLENBQUMscURBQVc7O0FBRWxDOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3RjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSw2R0FBNkc7O0FBRTdHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLDBEQUEwRDtBQUMxRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Qjs7Ozs7Ozs7QUNoUWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxlQUFlLG1CQUFPLENBQUMscURBQVc7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5SEFBeUg7O0FBRXpIOztBQUVBLDRIQUE0SDtBQUM1SDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DOzs7Ozs7OztBQ2hFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQ0FBa0M7QUFDbkQsbUJBQW1CLGtDQUFrQztBQUNyRCxxQkFBcUIsaUNBQWlDLHVDQUF1QztBQUM3RixrREFBa0QseUNBQXlDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLElBQUk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsMEJBQTBCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsSUFBSTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLCtCQUErQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQSwyRUFBMkU7QUFDM0U7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsZUFBZTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGVBQWU7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLE9BQU87QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxPQUFPO0FBQ2hEO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTztBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsT0FBTztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCLEVBQUU7QUFDakM7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSxjQUFjO0FBQ2Q7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEIsa0JBQWtCO0FBQ2hEOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixnQ0FBZ0M7O0FBRWhDLGdDQUFnQzs7QUFFaEM7QUFDQSxlQUFlOzs7Ozs7QUFNZjs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBLGtFQUFrRSxNQUFNO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnRUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6Qjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFFBQVE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1SUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUzs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQSw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztBQVlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHNDQUFzQzs7QUFFdEM7QUFDQTs7Ozs7QUFLQTs7Ozs7QUFLQTs7QUFFQTtBQUNBOzs7O0FBSUEsa0VBQWtFO0FBQ2xFOzs7Ozs7Ozs7OztBQVdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQVVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFNBQVMsU0FBUztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLDREQUE0RDtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IseUJBQXlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsK0JBQStCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLGtCQUFrQjs7QUFFbEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0EseUpBQXlKO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsUUFBUTtBQUMzRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDLFNBQVM7QUFDcEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGlDQUFpQztBQUNqRjs7QUFFQSx5QkFBeUIsU0FBUztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkJBQTZCLHFCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsMEJBQTBCO0FBQzdDLFNBQVM7QUFDVCxtQkFBbUIsOENBQThDO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUI7QUFDckIsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzSkFBc0o7QUFDdEo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixVQUFVO0FBQy9COztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSx1QkFBdUI7QUFDdkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7Ozs7O0FBS0QsSUFBSSxJQUFnRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7Ozs7OztBQ250SEE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6InZlbmRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0eXBlcyA9IHJlcXVpcmUoXCIuLi91dGlscy90eXBlc1wiKTtcbnZhciBrbm93bkNvbG9ycyA9IHJlcXVpcmUoXCIuL2tub3duLWNvbG9yc1wiKTtcbnZhciBwYXJzZXJfMSA9IHJlcXVpcmUoXCIuLi9jc3MvcGFyc2VyXCIpO1xudmFyIFNIQVJQID0gXCIjXCI7XG52YXIgSEVYX1JFR0VYID0gLyheI1swLTlBLUZdezZ9JCl8KF4jWzAtOUEtRl17M30kKXwoXiNbMC05QS1GXXs4fSQpL2k7XG52YXIgQ29sb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbG9yKCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGlmICh0eXBlcy5pc1N0cmluZyhhcmcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzUmdiT3JSZ2JhKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJnYiA9IGFyZ2JGcm9tUmdiT3JSZ2JhKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzSHNsT3JIc2xhKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJnYiA9IGFyZ2JGcm9tSHNsT3JIc2xhKGFyZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGtub3duQ29sb3JzLmlzS25vd25OYW1lKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhleCA9IGtub3duQ29sb3JzLmdldEtub3duQ29sb3IoYXJnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmFtZSA9IGFyZztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXJnYiA9IHRoaXMuX2FyZ2JGcm9tU3RyaW5nKGhleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEhFWF9SRUdFWC50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhleCA9IHRoaXMuX25vcm1hbGl6ZUhleChhcmcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hcmdiID0gdGhpcy5fYXJnYkZyb21TdHJpbmcoaGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY29sb3I6IFwiICsgYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlcy5pc051bWJlcihhcmcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXJnYiA9IGFyZyA+Pj4gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIDEgb3IgNCBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICB0aGlzLl9hcmdiID0gKGFyZ3VtZW50c1swXSAmIDB4RkYpICogMHgwMTAwMDAwMFxuICAgICAgICAgICAgICAgICsgKGFyZ3VtZW50c1sxXSAmIDB4RkYpICogMHgwMDAxMDAwMFxuICAgICAgICAgICAgICAgICsgKGFyZ3VtZW50c1syXSAmIDB4RkYpICogMHgwMDAwMDEwMFxuICAgICAgICAgICAgICAgICsgKGFyZ3VtZW50c1szXSAmIDB4RkYpICogMHgwMDAwMDAwMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIDEgb3IgNCBjb25zdHJ1Y3RvciBwYXJhbWV0ZXJzLlwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImFcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9hcmdiIC8gMHgwMTAwMDAwMCkgJiAweEZGOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcInJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9hcmdiIC8gMHgwMDAxMDAwMCkgJiAweEZGOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImdcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9hcmdiIC8gMHgwMDAwMDEwMCkgJiAweEZGOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0aGlzLl9hcmdiIC8gMHgwMDAwMDAwMSkgJiAweEZGOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImFyZ2JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hcmdiO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcImhleFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYSA9PT0gMHhGRikge1xuICAgICAgICAgICAgICAgIHJldHVybiAoXCIjXCIgKyB0aGlzLl9jb21wb25lbnRUb0hleCh0aGlzLnIpICsgdGhpcy5fY29tcG9uZW50VG9IZXgodGhpcy5nKSArIHRoaXMuX2NvbXBvbmVudFRvSGV4KHRoaXMuYikpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFwiI1wiICsgdGhpcy5fY29tcG9uZW50VG9IZXgodGhpcy5hKSArIHRoaXMuX2NvbXBvbmVudFRvSGV4KHRoaXMucikgKyB0aGlzLl9jb21wb25lbnRUb0hleCh0aGlzLmcpICsgdGhpcy5fY29tcG9uZW50VG9IZXgodGhpcy5iKSkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJuYW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgXCJpb3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwiYW5kcm9pZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29sb3IucHJvdG90eXBlLl9hcmdiRnJvbVN0cmluZyA9IGZ1bmN0aW9uIChoZXgpIHtcbiAgICAgICAgaWYgKGhleC5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG4gICAgICAgICAgICBoZXggPSBoZXguc3Vic3RyKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICBoZXggPSBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgaGV4ID0gaGV4WzBdICsgaGV4WzBdICsgaGV4WzFdICsgaGV4WzFdICsgaGV4WzJdICsgaGV4WzJdICsgaGV4WzNdICsgaGV4WzNdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnRWYWwgPSBwYXJzZUludChoZXgsIDE2KTtcbiAgICAgICAgaWYgKGhleC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgICAgIGludFZhbCA9IChpbnRWYWwgJiAweDAwRkZGRkZGKSArIDB4RkYwMDAwMDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGludFZhbDtcbiAgICB9O1xuICAgIENvbG9yLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICYmIHRoaXMuYXJnYiA9PT0gdmFsdWUuYXJnYjtcbiAgICB9O1xuICAgIENvbG9yLmVxdWFscyA9IGZ1bmN0aW9uICh2YWx1ZTEsIHZhbHVlMikge1xuICAgICAgICBpZiAoIXZhbHVlMSAmJiAhdmFsdWUyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlMSB8fCAhdmFsdWUyKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlMS5lcXVhbHModmFsdWUyKTtcbiAgICB9O1xuICAgIENvbG9yLmlzVmFsaWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVzLmlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXR5cGVzLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrbm93bkNvbG9ycy5pc0tub3duTmFtZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBIRVhfUkVHRVgudGVzdCh2YWx1ZSkgfHwgaXNSZ2JPclJnYmEodmFsdWUpIHx8IGlzSHNsT3JIc2xhKHZhbHVlKTtcbiAgICB9O1xuICAgIENvbG9yLnByb3RvdHlwZS5fY29tcG9uZW50VG9IZXggPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XG4gICAgICAgIHZhciBoZXggPSBjb21wb25lbnQudG9TdHJpbmcoMTYpO1xuICAgICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaGV4ID0gXCIwXCIgKyBoZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhleDtcbiAgICB9O1xuICAgIENvbG9yLnByb3RvdHlwZS5fbm9ybWFsaXplSGV4ID0gZnVuY3Rpb24gKGhleFN0cikge1xuICAgICAgICBpZiAoaGV4U3RyLmNoYXJBdCgwKSA9PT0gU0hBUlAgJiYgaGV4U3RyLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICAgICAgaGV4U3RyID0gaGV4U3RyLmNoYXJBdCgwKVxuICAgICAgICAgICAgICAgICsgaGV4U3RyLmNoYXJBdCgxKSArIGhleFN0ci5jaGFyQXQoMSlcbiAgICAgICAgICAgICAgICArIGhleFN0ci5jaGFyQXQoMikgKyBoZXhTdHIuY2hhckF0KDIpXG4gICAgICAgICAgICAgICAgKyBoZXhTdHIuY2hhckF0KDMpICsgaGV4U3RyLmNoYXJBdCgzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4U3RyO1xuICAgIH07XG4gICAgQ29sb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oZXg7XG4gICAgfTtcbiAgICByZXR1cm4gQ29sb3I7XG59KCkpO1xuZXhwb3J0cy5Db2xvciA9IENvbG9yO1xuZnVuY3Rpb24gaXNSZ2JPclJnYmEodmFsdWUpIHtcbiAgICB2YXIgdG9Mb3dlciA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuICh0b0xvd2VyLmluZGV4T2YoXCJyZ2IoXCIpID09PSAwIHx8IHRvTG93ZXIuaW5kZXhPZihcInJnYmEoXCIpID09PSAwKSAmJiB0b0xvd2VyLmluZGV4T2YoXCIpXCIpID09PSAodG9Mb3dlci5sZW5ndGggLSAxKTtcbn1cbmZ1bmN0aW9uIGlzSHNsT3JIc2xhKHZhbHVlKSB7XG4gICAgdmFyIHRvTG93ZXIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAodG9Mb3dlci5pbmRleE9mKFwiaHNsKFwiKSA9PT0gMCB8fCB0b0xvd2VyLmluZGV4T2YoXCJoc2xhKFwiKSA9PT0gMCkgJiYgdG9Mb3dlci5pbmRleE9mKFwiKVwiKSA9PT0gKHRvTG93ZXIubGVuZ3RoIC0gMSk7XG59XG5mdW5jdGlvbiBwYXJzZUNvbG9yV2l0aEFscGhhKHZhbHVlKSB7XG4gICAgdmFyIHRvTG93ZXIgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBwYXJ0cyA9IHRvTG93ZXIucmVwbGFjZSgvKHJnYnxoc2wpYT9cXCgvLCBcIlwiKVxuICAgICAgICAucmVwbGFjZShcIilcIiwgXCJcIilcbiAgICAgICAgLnRyaW0oKS5zcGxpdChcIixcIik7XG4gICAgdmFyIGYgPSAyNTU7XG4gICAgdmFyIHMgPSAyNTU7XG4gICAgdmFyIHQgPSAyNTU7XG4gICAgdmFyIGEgPSAyNTU7XG4gICAgaWYgKHBhcnRzWzBdKSB7XG4gICAgICAgIGYgPSBwYXJzZUludChwYXJ0c1swXS50cmltKCkpO1xuICAgIH1cbiAgICBpZiAocGFydHNbMV0pIHtcbiAgICAgICAgcyA9IHBhcnNlSW50KHBhcnRzWzFdLnRyaW0oKSk7XG4gICAgfVxuICAgIGlmIChwYXJ0c1syXSkge1xuICAgICAgICB0ID0gcGFyc2VJbnQocGFydHNbMl0udHJpbSgpKTtcbiAgICB9XG4gICAgaWYgKHBhcnRzWzNdKSB7XG4gICAgICAgIGEgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQocGFydHNbM10udHJpbSgpKSAqIDI1NSk7XG4gICAgfVxuICAgIHJldHVybiB7IGY6IGYsIHM6IHMsIHQ6IHQsIGE6IGEgfTtcbn1cbmZ1bmN0aW9uIGFyZ2JGcm9tUmdiT3JSZ2JhKHZhbHVlKSB7XG4gICAgdmFyIF9hID0gcGFyc2VDb2xvcldpdGhBbHBoYSh2YWx1ZSksIHIgPSBfYS5mLCBnID0gX2EucywgYiA9IF9hLnQsIGEgPSBfYS5hO1xuICAgIHJldHVybiAoYSAmIDB4RkYpICogMHgwMTAwMDAwMFxuICAgICAgICArIChyICYgMHhGRikgKiAweDAwMDEwMDAwXG4gICAgICAgICsgKGcgJiAweEZGKSAqIDB4MDAwMDAxMDBcbiAgICAgICAgKyAoYiAmIDB4RkYpO1xufVxuZnVuY3Rpb24gYXJnYkZyb21Ic2xPckhzbGEodmFsdWUpIHtcbiAgICB2YXIgX2EgPSBwYXJzZUNvbG9yV2l0aEFscGhhKHZhbHVlKSwgaCA9IF9hLmYsIHMgPSBfYS5zLCBsID0gX2EudCwgYSA9IF9hLmE7XG4gICAgdmFyIF9iID0gcGFyc2VyXzEuY29udmVydEhTTFRvUkdCQ29sb3IoaCwgcywgbCksIHIgPSBfYi5yLCBnID0gX2IuZywgYiA9IF9iLmI7XG4gICAgcmV0dXJuIChhICYgMHhGRikgKiAweDAxMDAwMDAwXG4gICAgICAgICsgKHIgJiAweEZGKSAqIDB4MDAwMTAwMDBcbiAgICAgICAgKyAoZyAmIDB4RkYpICogMHgwMDAwMDEwMFxuICAgICAgICArIChiICYgMHhGRik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci1jb21tb24uanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbW1vbiA9IHJlcXVpcmUoXCIuL2NvbG9yLWNvbW1vblwiKTtcbnZhciBDb2xvciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbG9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbG9yKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwiaW9zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lvcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lvcyA9IFVJQ29sb3IuYWxsb2MoKS5pbml0V2l0aFJlZEdyZWVuQmx1ZUFscGhhKHRoaXMuciAvIDI1NSwgdGhpcy5nIC8gMjU1LCB0aGlzLmIgLyAyNTUsIHRoaXMuYSAvIDI1NSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW9zO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQ29sb3I7XG59KGNvbW1vbi5Db2xvcikpO1xuZXhwb3J0cy5Db2xvciA9IENvbG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sb3IuaW9zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBfYWxsQ29sb3JzID0ge307XG5mdW5jdGlvbiByZWdpc3RlckNvbG9yKG5hbWUsIHZhbHVlKSB7XG4gICAgX2FsbENvbG9yc1tuYW1lLnRvTG93ZXJDYXNlKCldID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gaXNLbm93bk5hbWUobmFtZSkge1xuICAgIGlmICghbmFtZSkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpIGluIF9hbGxDb2xvcnM7XG59XG5leHBvcnRzLmlzS25vd25OYW1lID0gaXNLbm93bk5hbWU7XG5mdW5jdGlvbiBnZXRLbm93bkNvbG9yKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIF9hbGxDb2xvcnNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbn1cbmV4cG9ydHMuZ2V0S25vd25Db2xvciA9IGdldEtub3duQ29sb3I7XG5leHBvcnRzLlRyYW5zcGFyZW50ID0gcmVnaXN0ZXJDb2xvcihcIlRyYW5zcGFyZW50XCIsIFwiIzAwMDAwMDAwXCIpO1xuZXhwb3J0cy5BbGljZUJsdWUgPSByZWdpc3RlckNvbG9yKFwiQWxpY2VCbHVlXCIsIFwiI0YwRjhGRlwiKTtcbmV4cG9ydHMuQW50aXF1ZVdoaXRlID0gcmVnaXN0ZXJDb2xvcihcIkFudGlxdWVXaGl0ZVwiLCBcIiNGQUVCRDdcIik7XG5leHBvcnRzLkFxdWEgPSByZWdpc3RlckNvbG9yKFwiQXF1YVwiLCBcIiMwMEZGRkZcIik7XG5leHBvcnRzLkFxdWFtYXJpbmUgPSByZWdpc3RlckNvbG9yKFwiQXF1YW1hcmluZVwiLCBcIiM3RkZGRDRcIik7XG5leHBvcnRzLkF6dXJlID0gcmVnaXN0ZXJDb2xvcihcIkF6dXJlXCIsIFwiI0YwRkZGRlwiKTtcbmV4cG9ydHMuQmVpZ2UgPSByZWdpc3RlckNvbG9yKFwiQmVpZ2VcIiwgXCIjRjVGNURDXCIpO1xuZXhwb3J0cy5CaXNxdWUgPSByZWdpc3RlckNvbG9yKFwiQmlzcXVlXCIsIFwiI0ZGRTRDNFwiKTtcbmV4cG9ydHMuQmxhY2sgPSByZWdpc3RlckNvbG9yKFwiQmxhY2tcIiwgXCIjMDAwMDAwXCIpO1xuZXhwb3J0cy5CbGFuY2hlZEFsbW9uZCA9IHJlZ2lzdGVyQ29sb3IoXCJCbGFuY2hlZEFsbW9uZFwiLCBcIiNGRkVCQ0RcIik7XG5leHBvcnRzLkJsdWUgPSByZWdpc3RlckNvbG9yKFwiQmx1ZVwiLCBcIiMwMDAwRkZcIik7XG5leHBvcnRzLkJsdWVWaW9sZXQgPSByZWdpc3RlckNvbG9yKFwiQmx1ZVZpb2xldFwiLCBcIiM4QTJCRTJcIik7XG5leHBvcnRzLkJyb3duID0gcmVnaXN0ZXJDb2xvcihcIkJyb3duXCIsIFwiI0E1MkEyQVwiKTtcbmV4cG9ydHMuQnVybHlXb29kID0gcmVnaXN0ZXJDb2xvcihcIkJ1cmx5V29vZFwiLCBcIiNERUI4ODdcIik7XG5leHBvcnRzLkNhZGV0Qmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJDYWRldEJsdWVcIiwgXCIjNUY5RUEwXCIpO1xuZXhwb3J0cy5DaGFydHJldXNlID0gcmVnaXN0ZXJDb2xvcihcIkNoYXJ0cmV1c2VcIiwgXCIjN0ZGRjAwXCIpO1xuZXhwb3J0cy5DaG9jb2xhdGUgPSByZWdpc3RlckNvbG9yKFwiQ2hvY29sYXRlXCIsIFwiI0QyNjkxRVwiKTtcbmV4cG9ydHMuQ29yYWwgPSByZWdpc3RlckNvbG9yKFwiQ29yYWxcIiwgXCIjRkY3RjUwXCIpO1xuZXhwb3J0cy5Db3JuZmxvd2VyQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJDb3JuZmxvd2VyQmx1ZVwiLCBcIiM2NDk1RURcIik7XG5leHBvcnRzLkNvcm5zaWxrID0gcmVnaXN0ZXJDb2xvcihcIkNvcm5zaWxrXCIsIFwiI0ZGRjhEQ1wiKTtcbmV4cG9ydHMuQ3JpbXNvbiA9IHJlZ2lzdGVyQ29sb3IoXCJDcmltc29uXCIsIFwiI0RDMTQzQ1wiKTtcbmV4cG9ydHMuQ3lhbiA9IHJlZ2lzdGVyQ29sb3IoXCJDeWFuXCIsIFwiIzAwRkZGRlwiKTtcbmV4cG9ydHMuRGFya0JsdWUgPSByZWdpc3RlckNvbG9yKFwiRGFya0JsdWVcIiwgXCIjMDAwMDhCXCIpO1xuZXhwb3J0cy5EYXJrQ3lhbiA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrQ3lhblwiLCBcIiMwMDhCOEJcIik7XG5leHBvcnRzLkRhcmtHb2xkZW5Sb2QgPSByZWdpc3RlckNvbG9yKFwiRGFya0dvbGRlblJvZFwiLCBcIiNCODg2MEJcIik7XG5leHBvcnRzLkRhcmtHcmF5ID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtHcmF5XCIsIFwiI0E5QTlBOVwiKTtcbmV4cG9ydHMuRGFya0dyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtHcmVlblwiLCBcIiMwMDY0MDBcIik7XG5leHBvcnRzLkRhcmtLaGFraSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrS2hha2lcIiwgXCIjQkRCNzZCXCIpO1xuZXhwb3J0cy5EYXJrTWFnZW50YSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrTWFnZW50YVwiLCBcIiM4QjAwOEJcIik7XG5leHBvcnRzLkRhcmtPbGl2ZUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtPbGl2ZUdyZWVuXCIsIFwiIzU1NkIyRlwiKTtcbmV4cG9ydHMuRGFya09yYW5nZSA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrT3JhbmdlXCIsIFwiI0ZGOEMwMFwiKTtcbmV4cG9ydHMuRGFya09yY2hpZCA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrT3JjaGlkXCIsIFwiIzk5MzJDQ1wiKTtcbmV4cG9ydHMuRGFya1JlZCA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrUmVkXCIsIFwiIzhCMDAwMFwiKTtcbmV4cG9ydHMuRGFya1NhbG1vbiA9IHJlZ2lzdGVyQ29sb3IoXCJEYXJrU2FsbW9uXCIsIFwiI0U5OTY3QVwiKTtcbmV4cG9ydHMuRGFya1NlYUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIkRhcmtTZWFHcmVlblwiLCBcIiM4RkJDOEZcIik7XG5leHBvcnRzLkRhcmtTbGF0ZUJsdWUgPSByZWdpc3RlckNvbG9yKFwiRGFya1NsYXRlQmx1ZVwiLCBcIiM0ODNEOEJcIik7XG5leHBvcnRzLkRhcmtTbGF0ZUdyYXkgPSByZWdpc3RlckNvbG9yKFwiRGFya1NsYXRlR3JheVwiLCBcIiMyRjRGNEZcIik7XG5leHBvcnRzLkRhcmtUdXJxdW9pc2UgPSByZWdpc3RlckNvbG9yKFwiRGFya1R1cnF1b2lzZVwiLCBcIiMwMENFRDFcIik7XG5leHBvcnRzLkRhcmtWaW9sZXQgPSByZWdpc3RlckNvbG9yKFwiRGFya1Zpb2xldFwiLCBcIiM5NDAwRDNcIik7XG5leHBvcnRzLkRlZXBQaW5rID0gcmVnaXN0ZXJDb2xvcihcIkRlZXBQaW5rXCIsIFwiI0ZGMTQ5M1wiKTtcbmV4cG9ydHMuRGVlcFNreUJsdWUgPSByZWdpc3RlckNvbG9yKFwiRGVlcFNreUJsdWVcIiwgXCIjMDBCRkZGXCIpO1xuZXhwb3J0cy5EaW1HcmF5ID0gcmVnaXN0ZXJDb2xvcihcIkRpbUdyYXlcIiwgXCIjNjk2OTY5XCIpO1xuZXhwb3J0cy5Eb2RnZXJCbHVlID0gcmVnaXN0ZXJDb2xvcihcIkRvZGdlckJsdWVcIiwgXCIjMUU5MEZGXCIpO1xuZXhwb3J0cy5GaXJlQnJpY2sgPSByZWdpc3RlckNvbG9yKFwiRmlyZUJyaWNrXCIsIFwiI0IyMjIyMlwiKTtcbmV4cG9ydHMuRmxvcmFsV2hpdGUgPSByZWdpc3RlckNvbG9yKFwiRmxvcmFsV2hpdGVcIiwgXCIjRkZGQUYwXCIpO1xuZXhwb3J0cy5Gb3Jlc3RHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJGb3Jlc3RHcmVlblwiLCBcIiMyMjhCMjJcIik7XG5leHBvcnRzLkZ1Y2hzaWEgPSByZWdpc3RlckNvbG9yKFwiRnVjaHNpYVwiLCBcIiNGRjAwRkZcIik7XG5leHBvcnRzLkdhaW5zYm9ybyA9IHJlZ2lzdGVyQ29sb3IoXCJHYWluc2Jvcm9cIiwgXCIjRENEQ0RDXCIpO1xuZXhwb3J0cy5HaG9zdFdoaXRlID0gcmVnaXN0ZXJDb2xvcihcIkdob3N0V2hpdGVcIiwgXCIjRjhGOEZGXCIpO1xuZXhwb3J0cy5Hb2xkID0gcmVnaXN0ZXJDb2xvcihcIkdvbGRcIiwgXCIjRkZENzAwXCIpO1xuZXhwb3J0cy5Hb2xkZW5Sb2QgPSByZWdpc3RlckNvbG9yKFwiR29sZGVuUm9kXCIsIFwiI0RBQTUyMFwiKTtcbmV4cG9ydHMuR3JheSA9IHJlZ2lzdGVyQ29sb3IoXCJHcmF5XCIsIFwiIzgwODA4MFwiKTtcbmV4cG9ydHMuR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiR3JlZW5cIiwgXCIjMDA4MDAwXCIpO1xuZXhwb3J0cy5HcmVlblllbGxvdyA9IHJlZ2lzdGVyQ29sb3IoXCJHcmVlblllbGxvd1wiLCBcIiNBREZGMkZcIik7XG5leHBvcnRzLkhvbmV5RGV3ID0gcmVnaXN0ZXJDb2xvcihcIkhvbmV5RGV3XCIsIFwiI0YwRkZGMFwiKTtcbmV4cG9ydHMuSG90UGluayA9IHJlZ2lzdGVyQ29sb3IoXCJIb3RQaW5rXCIsIFwiI0ZGNjlCNFwiKTtcbmV4cG9ydHMuSW5kaWFuUmVkID0gcmVnaXN0ZXJDb2xvcihcIkluZGlhblJlZFwiLCBcIiNDRDVDNUNcIik7XG5leHBvcnRzLkluZGlnbyA9IHJlZ2lzdGVyQ29sb3IoXCJJbmRpZ29cIiwgXCIjNEIwMDgyXCIpO1xuZXhwb3J0cy5Jdm9yeSA9IHJlZ2lzdGVyQ29sb3IoXCJJdm9yeVwiLCBcIiNGRkZGRjBcIik7XG5leHBvcnRzLktoYWtpID0gcmVnaXN0ZXJDb2xvcihcIktoYWtpXCIsIFwiI0YwRTY4Q1wiKTtcbmV4cG9ydHMuTGF2ZW5kZXIgPSByZWdpc3RlckNvbG9yKFwiTGF2ZW5kZXJcIiwgXCIjRTZFNkZBXCIpO1xuZXhwb3J0cy5MYXZlbmRlckJsdXNoID0gcmVnaXN0ZXJDb2xvcihcIkxhdmVuZGVyQmx1c2hcIiwgXCIjRkZGMEY1XCIpO1xuZXhwb3J0cy5MYXduR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiTGF3bkdyZWVuXCIsIFwiIzdDRkMwMFwiKTtcbmV4cG9ydHMuTGVtb25DaGlmZm9uID0gcmVnaXN0ZXJDb2xvcihcIkxlbW9uQ2hpZmZvblwiLCBcIiNGRkZBQ0RcIik7XG5leHBvcnRzLkxpZ2h0Qmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodEJsdWVcIiwgXCIjQUREOEU2XCIpO1xuZXhwb3J0cy5MaWdodENvcmFsID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0Q29yYWxcIiwgXCIjRjA4MDgwXCIpO1xuZXhwb3J0cy5MaWdodEN5YW4gPSByZWdpc3RlckNvbG9yKFwiTGlnaHRDeWFuXCIsIFwiI0UwRkZGRlwiKTtcbmV4cG9ydHMuTGlnaHRHb2xkZW5Sb2RZZWxsb3cgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRHb2xkZW5Sb2RZZWxsb3dcIiwgXCIjRkFGQUQyXCIpO1xuZXhwb3J0cy5MaWdodEdyYXkgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRHcmF5XCIsIFwiI0QzRDNEM1wiKTtcbmV4cG9ydHMuTGlnaHRHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodEdyZWVuXCIsIFwiIzkwRUU5MFwiKTtcbmV4cG9ydHMuTGlnaHRQaW5rID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0UGlua1wiLCBcIiNGRkI2QzFcIik7XG5leHBvcnRzLkxpZ2h0U2FsbW9uID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0U2FsbW9uXCIsIFwiI0ZGQTA3QVwiKTtcbmV4cG9ydHMuTGlnaHRTZWFHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodFNlYUdyZWVuXCIsIFwiIzIwQjJBQVwiKTtcbmV4cG9ydHMuTGlnaHRTa3lCbHVlID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0U2t5Qmx1ZVwiLCBcIiM4N0NFRkFcIik7XG5leHBvcnRzLkxpZ2h0U2xhdGVHcmF5ID0gcmVnaXN0ZXJDb2xvcihcIkxpZ2h0U2xhdGVHcmF5XCIsIFwiIzc3ODg5OVwiKTtcbmV4cG9ydHMuTGlnaHRTdGVlbEJsdWUgPSByZWdpc3RlckNvbG9yKFwiTGlnaHRTdGVlbEJsdWVcIiwgXCIjQjBDNERFXCIpO1xuZXhwb3J0cy5MaWdodFllbGxvdyA9IHJlZ2lzdGVyQ29sb3IoXCJMaWdodFllbGxvd1wiLCBcIiNGRkZGRTBcIik7XG5leHBvcnRzLkxpbWUgPSByZWdpc3RlckNvbG9yKFwiTGltZVwiLCBcIiMwMEZGMDBcIik7XG5leHBvcnRzLkxpbWVHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJMaW1lR3JlZW5cIiwgXCIjMzJDRDMyXCIpO1xuZXhwb3J0cy5MaW5lbiA9IHJlZ2lzdGVyQ29sb3IoXCJMaW5lblwiLCBcIiNGQUYwRTZcIik7XG5leHBvcnRzLk1hZ2VudGEgPSByZWdpc3RlckNvbG9yKFwiTWFnZW50YVwiLCBcIiNGRjAwRkZcIik7XG5leHBvcnRzLk1hcm9vbiA9IHJlZ2lzdGVyQ29sb3IoXCJNYXJvb25cIiwgXCIjODAwMDAwXCIpO1xuZXhwb3J0cy5NZWRpdW1BcXVhTWFyaW5lID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bUFxdWFNYXJpbmVcIiwgXCIjNjZDREFBXCIpO1xuZXhwb3J0cy5NZWRpdW1CbHVlID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bUJsdWVcIiwgXCIjMDAwMENEXCIpO1xuZXhwb3J0cy5NZWRpdW1PcmNoaWQgPSByZWdpc3RlckNvbG9yKFwiTWVkaXVtT3JjaGlkXCIsIFwiI0JBNTVEM1wiKTtcbmV4cG9ydHMuTWVkaXVtUHVycGxlID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVB1cnBsZVwiLCBcIiM5MzcwREJcIik7XG5leHBvcnRzLk1lZGl1bVNlYUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVNlYUdyZWVuXCIsIFwiIzNDQjM3MVwiKTtcbmV4cG9ydHMuTWVkaXVtU2xhdGVCbHVlID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVNsYXRlQmx1ZVwiLCBcIiM3QjY4RUVcIik7XG5leHBvcnRzLk1lZGl1bVNwcmluZ0dyZWVuID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVNwcmluZ0dyZWVuXCIsIFwiIzAwRkE5QVwiKTtcbmV4cG9ydHMuTWVkaXVtVHVycXVvaXNlID0gcmVnaXN0ZXJDb2xvcihcIk1lZGl1bVR1cnF1b2lzZVwiLCBcIiM0OEQxQ0NcIik7XG5leHBvcnRzLk1lZGl1bVZpb2xldFJlZCA9IHJlZ2lzdGVyQ29sb3IoXCJNZWRpdW1WaW9sZXRSZWRcIiwgXCIjQzcxNTg1XCIpO1xuZXhwb3J0cy5NaWRuaWdodEJsdWUgPSByZWdpc3RlckNvbG9yKFwiTWlkbmlnaHRCbHVlXCIsIFwiIzE5MTk3MFwiKTtcbmV4cG9ydHMuTWludENyZWFtID0gcmVnaXN0ZXJDb2xvcihcIk1pbnRDcmVhbVwiLCBcIiNGNUZGRkFcIik7XG5leHBvcnRzLk1pc3R5Um9zZSA9IHJlZ2lzdGVyQ29sb3IoXCJNaXN0eVJvc2VcIiwgXCIjRkZFNEUxXCIpO1xuZXhwb3J0cy5Nb2NjYXNpbiA9IHJlZ2lzdGVyQ29sb3IoXCJNb2NjYXNpblwiLCBcIiNGRkU0QjVcIik7XG5leHBvcnRzLk5hdmFqb1doaXRlID0gcmVnaXN0ZXJDb2xvcihcIk5hdmFqb1doaXRlXCIsIFwiI0ZGREVBRFwiKTtcbmV4cG9ydHMuTmF2eSA9IHJlZ2lzdGVyQ29sb3IoXCJOYXZ5XCIsIFwiIzAwMDA4MFwiKTtcbmV4cG9ydHMuT2xkTGFjZSA9IHJlZ2lzdGVyQ29sb3IoXCJPbGRMYWNlXCIsIFwiI0ZERjVFNlwiKTtcbmV4cG9ydHMuT2xpdmUgPSByZWdpc3RlckNvbG9yKFwiT2xpdmVcIiwgXCIjODA4MDAwXCIpO1xuZXhwb3J0cy5PbGl2ZURyYWIgPSByZWdpc3RlckNvbG9yKFwiT2xpdmVEcmFiXCIsIFwiIzZCOEUyM1wiKTtcbmV4cG9ydHMuT3JhbmdlID0gcmVnaXN0ZXJDb2xvcihcIk9yYW5nZVwiLCBcIiNGRkE1MDBcIik7XG5leHBvcnRzLk9yYW5nZVJlZCA9IHJlZ2lzdGVyQ29sb3IoXCJPcmFuZ2VSZWRcIiwgXCIjRkY0NTAwXCIpO1xuZXhwb3J0cy5PcmNoaWQgPSByZWdpc3RlckNvbG9yKFwiT3JjaGlkXCIsIFwiI0RBNzBENlwiKTtcbmV4cG9ydHMuUGFsZUdvbGRlblJvZCA9IHJlZ2lzdGVyQ29sb3IoXCJQYWxlR29sZGVuUm9kXCIsIFwiI0VFRThBQVwiKTtcbmV4cG9ydHMuUGFsZUdyZWVuID0gcmVnaXN0ZXJDb2xvcihcIlBhbGVHcmVlblwiLCBcIiM5OEZCOThcIik7XG5leHBvcnRzLlBhbGVUdXJxdW9pc2UgPSByZWdpc3RlckNvbG9yKFwiUGFsZVR1cnF1b2lzZVwiLCBcIiNBRkVFRUVcIik7XG5leHBvcnRzLlBhbGVWaW9sZXRSZWQgPSByZWdpc3RlckNvbG9yKFwiUGFsZVZpb2xldFJlZFwiLCBcIiNEQjcwOTNcIik7XG5leHBvcnRzLlBhcGF5YVdoaXAgPSByZWdpc3RlckNvbG9yKFwiUGFwYXlhV2hpcFwiLCBcIiNGRkVGRDVcIik7XG5leHBvcnRzLlBlYWNoUHVmZiA9IHJlZ2lzdGVyQ29sb3IoXCJQZWFjaFB1ZmZcIiwgXCIjRkZEQUI5XCIpO1xuZXhwb3J0cy5QZXJ1ID0gcmVnaXN0ZXJDb2xvcihcIlBlcnVcIiwgXCIjQ0Q4NTNGXCIpO1xuZXhwb3J0cy5QaW5rID0gcmVnaXN0ZXJDb2xvcihcIlBpbmtcIiwgXCIjRkZDMENCXCIpO1xuZXhwb3J0cy5QbHVtID0gcmVnaXN0ZXJDb2xvcihcIlBsdW1cIiwgXCIjRERBMEREXCIpO1xuZXhwb3J0cy5Qb3dkZXJCbHVlID0gcmVnaXN0ZXJDb2xvcihcIlBvd2RlckJsdWVcIiwgXCIjQjBFMEU2XCIpO1xuZXhwb3J0cy5QdXJwbGUgPSByZWdpc3RlckNvbG9yKFwiUHVycGxlXCIsIFwiIzgwMDA4MFwiKTtcbmV4cG9ydHMuUmViZWNjYVB1cnBsZSA9IHJlZ2lzdGVyQ29sb3IoXCJSZWJlY2NhUHVycGxlXCIsIFwiIzY2MzM5OVwiKTtcbmV4cG9ydHMuUmVkID0gcmVnaXN0ZXJDb2xvcihcIlJlZFwiLCBcIiNGRjAwMDBcIik7XG5leHBvcnRzLlJvc3lCcm93biA9IHJlZ2lzdGVyQ29sb3IoXCJSb3N5QnJvd25cIiwgXCIjQkM4RjhGXCIpO1xuZXhwb3J0cy5Sb3lhbEJsdWUgPSByZWdpc3RlckNvbG9yKFwiUm95YWxCbHVlXCIsIFwiIzQxNjlFMVwiKTtcbmV4cG9ydHMuU2FkZGxlQnJvd24gPSByZWdpc3RlckNvbG9yKFwiU2FkZGxlQnJvd25cIiwgXCIjOEI0NTEzXCIpO1xuZXhwb3J0cy5TYWxtb24gPSByZWdpc3RlckNvbG9yKFwiU2FsbW9uXCIsIFwiI0ZBODA3MlwiKTtcbmV4cG9ydHMuU2FuZHlCcm93biA9IHJlZ2lzdGVyQ29sb3IoXCJTYW5keUJyb3duXCIsIFwiI0Y0QTQ2MFwiKTtcbmV4cG9ydHMuU2VhR3JlZW4gPSByZWdpc3RlckNvbG9yKFwiU2VhR3JlZW5cIiwgXCIjMkU4QjU3XCIpO1xuZXhwb3J0cy5TZWFTaGVsbCA9IHJlZ2lzdGVyQ29sb3IoXCJTZWFTaGVsbFwiLCBcIiNGRkY1RUVcIik7XG5leHBvcnRzLlNpZW5uYSA9IHJlZ2lzdGVyQ29sb3IoXCJTaWVubmFcIiwgXCIjQTA1MjJEXCIpO1xuZXhwb3J0cy5TaWx2ZXIgPSByZWdpc3RlckNvbG9yKFwiU2lsdmVyXCIsIFwiI0MwQzBDMFwiKTtcbmV4cG9ydHMuU2t5Qmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJTa3lCbHVlXCIsIFwiIzg3Q0VFQlwiKTtcbmV4cG9ydHMuU2xhdGVCbHVlID0gcmVnaXN0ZXJDb2xvcihcIlNsYXRlQmx1ZVwiLCBcIiM2QTVBQ0RcIik7XG5leHBvcnRzLlNsYXRlR3JheSA9IHJlZ2lzdGVyQ29sb3IoXCJTbGF0ZUdyYXlcIiwgXCIjNzA4MDkwXCIpO1xuZXhwb3J0cy5Tbm93ID0gcmVnaXN0ZXJDb2xvcihcIlNub3dcIiwgXCIjRkZGQUZBXCIpO1xuZXhwb3J0cy5TcHJpbmdHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJTcHJpbmdHcmVlblwiLCBcIiMwMEZGN0ZcIik7XG5leHBvcnRzLlN0ZWVsQmx1ZSA9IHJlZ2lzdGVyQ29sb3IoXCJTdGVlbEJsdWVcIiwgXCIjNDY4MkI0XCIpO1xuZXhwb3J0cy5UYW4gPSByZWdpc3RlckNvbG9yKFwiVGFuXCIsIFwiI0QyQjQ4Q1wiKTtcbmV4cG9ydHMuVGVhbCA9IHJlZ2lzdGVyQ29sb3IoXCJUZWFsXCIsIFwiIzAwODA4MFwiKTtcbmV4cG9ydHMuVGhpc3RsZSA9IHJlZ2lzdGVyQ29sb3IoXCJUaGlzdGxlXCIsIFwiI0Q4QkZEOFwiKTtcbmV4cG9ydHMuVG9tYXRvID0gcmVnaXN0ZXJDb2xvcihcIlRvbWF0b1wiLCBcIiNGRjYzNDdcIik7XG5leHBvcnRzLlR1cnF1b2lzZSA9IHJlZ2lzdGVyQ29sb3IoXCJUdXJxdW9pc2VcIiwgXCIjNDBFMEQwXCIpO1xuZXhwb3J0cy5WaW9sZXQgPSByZWdpc3RlckNvbG9yKFwiVmlvbGV0XCIsIFwiI0VFODJFRVwiKTtcbmV4cG9ydHMuV2hlYXQgPSByZWdpc3RlckNvbG9yKFwiV2hlYXRcIiwgXCIjRjVERUIzXCIpO1xuZXhwb3J0cy5XaGl0ZSA9IHJlZ2lzdGVyQ29sb3IoXCJXaGl0ZVwiLCBcIiNGRkZGRkZcIik7XG5leHBvcnRzLldoaXRlU21va2UgPSByZWdpc3RlckNvbG9yKFwiV2hpdGVTbW9rZVwiLCBcIiNGNUY1RjVcIik7XG5leHBvcnRzLlllbGxvdyA9IHJlZ2lzdGVyQ29sb3IoXCJZZWxsb3dcIiwgXCIjRkZGRjAwXCIpO1xuZXhwb3J0cy5ZZWxsb3dHcmVlbiA9IHJlZ2lzdGVyQ29sb3IoXCJZZWxsb3dHcmVlblwiLCBcIiM5QUNEMzJcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rbm93bi1jb2xvcnMuanMubWFwIiwiXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICByZXR1cm4gbmV3IFBhcnNlcihzdHIpLnBhcnNlKCk7XG59XG5cbmZ1bmN0aW9uIFBhcnNlcihzdHIpIHtcbiAgdGhpcy5zdHIgPSBzdHI7XG59XG5cblBhcnNlci5wcm90b3R5cGUuc2tpcCA9IGZ1bmN0aW9uKG0pe1xuICB0aGlzLnN0ciA9IHRoaXMuc3RyLnNsaWNlKG1bMF0ubGVuZ3RoKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuY29tbWEgPSBmdW5jdGlvbigpe1xuICB2YXIgbSA9IC9eLCAqLy5leGVjKHRoaXMuc3RyKTtcbiAgaWYgKCFtKSByZXR1cm47XG4gIHRoaXMuc2tpcChtKTtcbiAgcmV0dXJuIHsgdHlwZTogJ2NvbW1hJywgc3RyaW5nOiAnLCcgfTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuaWRlbnQgPSBmdW5jdGlvbigpe1xuICB2YXIgbSA9IC9eKFtcXHctXSspICovLmV4ZWModGhpcy5zdHIpO1xuICBpZiAoIW0pIHJldHVybjtcbiAgdGhpcy5za2lwKG0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdpZGVudCcsXG4gICAgc3RyaW5nOiBtWzFdXG4gIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUuaW50ID0gZnVuY3Rpb24oKXtcbiAgdmFyIG0gPSAvXigoWy1cXCtdP1xcZCspKFxcUyspPykgKi8uZXhlYyh0aGlzLnN0cik7XG4gIGlmICghbSkgcmV0dXJuO1xuICB0aGlzLnNraXAobSk7XG4gIHZhciBuID0gfn5tWzJdO1xuICB2YXIgdSA9IG1bM107XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBzdHJpbmc6IG1bMV0sXG4gICAgdW5pdDogdSB8fCAnJyxcbiAgICB2YWx1ZTogblxuICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLmZsb2F0ID0gZnVuY3Rpb24oKXtcbiAgdmFyIG0gPSAvXigoKD86Wy1cXCtdP1xcZCspP1xcLlxcZCspKFxcUyspPykgKi8uZXhlYyh0aGlzLnN0cik7XG4gIGlmICghbSkgcmV0dXJuO1xuICB0aGlzLnNraXAobSk7XG4gIHZhciBuID0gcGFyc2VGbG9hdChtWzJdKTtcbiAgdmFyIHUgPSBtWzNdO1xuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ251bWJlcicsXG4gICAgc3RyaW5nOiBtWzFdLFxuICAgIHVuaXQ6IHUgfHwgJycsXG4gICAgdmFsdWU6IG5cbiAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5udW1iZXIgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5mbG9hdCgpIHx8IHRoaXMuaW50KCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLmRvdWJsZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtID0gL15cIihbXlwiXSopXCIgKi8uZXhlYyh0aGlzLnN0cik7XG4gIGlmICghbSkgcmV0dXJuIG07XG4gIHRoaXMuc2tpcChtKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBxdW90ZTogJ1wiJyxcbiAgICBzdHJpbmc6ICdcIicgKyBtWzFdICsgJ1wiJyxcbiAgICB2YWx1ZTogbVsxXVxuICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnNpbmdsZSA9IGZ1bmN0aW9uKCl7XG4gIHZhciBtID0gL14nKFteJ10qKScgKi8uZXhlYyh0aGlzLnN0cik7XG4gIGlmICghbSkgcmV0dXJuIG07XG4gIHRoaXMuc2tpcChtKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICBxdW90ZTogXCInXCIsXG4gICAgc3RyaW5nOiBcIidcIiArIG1bMV0gKyBcIidcIixcbiAgICB2YWx1ZTogbVsxXVxuICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnN0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0aGlzLnNpbmdsZSgpIHx8IHRoaXMuZG91YmxlKCk7XG59O1xuXG5cblBhcnNlci5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpe1xuICByZXR1cm4gdGhpcy5udW1iZXIoKVxuICAgIHx8IHRoaXMuaWRlbnQoKVxuICAgIHx8IHRoaXMuc3RyaW5nKClcbiAgICB8fCB0aGlzLmNvbW1hKCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oKXtcbiAgdmFyIHZhbHMgPSBbXTtcblxuICB3aGlsZSAodGhpcy5zdHIubGVuZ3RoKSB7XG4gICAgdmFyIG9iaiA9IHRoaXMudmFsdWUoKTtcbiAgICBpZiAoIW9iaikgdGhyb3cgbmV3IEVycm9yKCdmYWlsZWQgdG8gcGFyc2UgbmVhciBgJyArIHRoaXMuc3RyLnNsaWNlKDAsIDEwKSArICcuLi5gJyk7XG4gICAgdmFscy5wdXNoKG9iaik7XG4gIH1cblxuICByZXR1cm4gdmFscztcbn07XG4iLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdXJsUmVnRXggPSAvXFxzKnVybFxcKCg/OignfFwiKShbXlxcMV0qKVxcMXwoW15cXCldKikpXFwpXFxzKi9neTtcbmZ1bmN0aW9uIHBhcnNlVVJMKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdXJsUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHVybFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSB1cmxSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIHZhbHVlID0gcmVzdWx0WzJdIHx8IHJlc3VsdFszXTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VVUkwgPSBwYXJzZVVSTDtcbnZhciBoZXhDb2xvclJlZ0V4ID0gL1xccyojKCg/OlswLTlBLUZdezh9KXwoPzpbMC05QS1GXXs2fSl8KD86WzAtOUEtRl17M30pKVxccyovZ2l5O1xuZnVuY3Rpb24gcGFyc2VIZXhDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGhleENvbG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IGhleENvbG9yUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGhleENvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciBoZXggPSByZXN1bHRbMV07XG4gICAgdmFyIGFyZ2I7XG4gICAgaWYgKGhleC5sZW5ndGggPT09IDgpIHtcbiAgICAgICAgYXJnYiA9IHBhcnNlSW50KFwiMHhcIiArIGhleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhleC5sZW5ndGggPT09IDYpIHtcbiAgICAgICAgYXJnYiA9IHBhcnNlSW50KFwiMHhGRlwiICsgaGV4KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaGV4Lmxlbmd0aCA9PT0gMykge1xuICAgICAgICBhcmdiID0gcGFyc2VJbnQoXCIweEZGXCIgKyBoZXhbMF0gKyBoZXhbMF0gKyBoZXhbMV0gKyBoZXhbMV0gKyBoZXhbMl0gKyBoZXhbMl0pO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogYXJnYiB9O1xufVxuZXhwb3J0cy5wYXJzZUhleENvbG9yID0gcGFyc2VIZXhDb2xvcjtcbmZ1bmN0aW9uIHJnYmFUb0FyZ2JOdW1iZXIociwgZywgYiwgYSkge1xuICAgIGlmIChhID09PSB2b2lkIDApIHsgYSA9IDE7IH1cbiAgICBpZiAociA+PSAwICYmIHIgPD0gMjU1ICYmIGcgPj0gMCAmJiBnIDw9IDI1NSAmJiBiID49IDAgJiYgYiA8PSAyNTUgJiYgYSA+PSAwICYmIGEgPD0gMSkge1xuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQoYSAqIDB4RkYpICogMHgwMTAwMDAwMCkgKyAociAqIDB4MDEwMDAwKSArIChnICogMHgwMDAxMDApICsgYjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbnZhciByZ2JDb2xvclJlZ0V4ID0gL1xccyoocmdiXFwoXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccyosXFxzKihcXGQqKVxccypcXCkpL2d5O1xuZnVuY3Rpb24gcGFyc2VSR0JDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHJnYkNvbG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHJnYkNvbG9yUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IHJnYkNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXSAmJiByZ2JhVG9BcmdiTnVtYmVyKHBhcnNlSW50KHJlc3VsdFsyXSksIHBhcnNlSW50KHJlc3VsdFszXSksIHBhcnNlSW50KHJlc3VsdFs0XSkpO1xuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZVJHQkNvbG9yID0gcGFyc2VSR0JDb2xvcjtcbnZhciByZ2JhQ29sb3JSZWdFeCA9IC9cXHMqKHJnYmFcXChcXHMqKFxcZCopXFxzKixcXHMqKFxcZCopXFxzKixcXHMqKFxcZCopXFxzKixcXHMqKFswMV0/XFwuP1xcZCopXFxzKlxcKSkvZ3k7XG5mdW5jdGlvbiBwYXJzZVJHQkFDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHJnYmFDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSByZ2JhQ29sb3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gcmdiYUNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJnYmFUb0FyZ2JOdW1iZXIocGFyc2VJbnQocmVzdWx0WzJdKSwgcGFyc2VJbnQocmVzdWx0WzNdKSwgcGFyc2VJbnQocmVzdWx0WzRdKSwgcGFyc2VGbG9hdChyZXN1bHRbNV0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VSR0JBQ29sb3IgPSBwYXJzZVJHQkFDb2xvcjtcbmZ1bmN0aW9uIGNvbnZlcnRIU0xUb1JHQkNvbG9yKGh1ZSwgc2F0dXJhdGlvbiwgbGlnaHRuZXNzKSB7XG4gICAgaHVlIC89IDYwO1xuICAgIGxpZ2h0bmVzcyAvPSAxMDA7XG4gICAgdmFyIGNocm9tYSA9ICgxIC0gTWF0aC5hYnMoMiAqIGxpZ2h0bmVzcyAtIDEpKSAqIHNhdHVyYXRpb24gLyAxMDAsIFggPSBjaHJvbWEgKiAoMSAtIE1hdGguYWJzKGh1ZSAlIDIgLSAxKSksIF9hID0geyBtOiBsaWdodG5lc3MgLSBjaHJvbWEgLyAyIH0sIHIgPSBfYS5tLCBnID0gX2EubSwgYiA9IF9hLm07XG4gICAgaWYgKDAgPD0gaHVlICYmIGh1ZSA8IDEpIHtcbiAgICAgICAgciArPSBjaHJvbWE7XG4gICAgICAgIGcgKz0gWDtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHVlIDwgMikge1xuICAgICAgICByICs9IFg7XG4gICAgICAgIGcgKz0gY2hyb21hO1xuICAgIH1cbiAgICBlbHNlIGlmIChodWUgPCAzKSB7XG4gICAgICAgIGcgKz0gY2hyb21hO1xuICAgICAgICBiICs9IFg7XG4gICAgfVxuICAgIGVsc2UgaWYgKGh1ZSA8IDQpIHtcbiAgICAgICAgZyArPSBYO1xuICAgICAgICBiICs9IGNocm9tYTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHVlIDwgNSkge1xuICAgICAgICByICs9IFg7XG4gICAgICAgIGIgKz0gY2hyb21hO1xuICAgIH1cbiAgICBlbHNlIGlmIChodWUgPCA2KSB7XG4gICAgICAgIHIgKz0gY2hyb21hO1xuICAgICAgICBiICs9IFg7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHI6IE1hdGgucm91bmQociAqIDB4RkYpLFxuICAgICAgICBnOiBNYXRoLnJvdW5kKGcgKiAweEZGKSxcbiAgICAgICAgYjogTWF0aC5yb3VuZChiICogMHhGRilcbiAgICB9O1xufVxuZXhwb3J0cy5jb252ZXJ0SFNMVG9SR0JDb2xvciA9IGNvbnZlcnRIU0xUb1JHQkNvbG9yO1xuZnVuY3Rpb24gaHNsYVRvQXJnYk51bWJlcihoLCBzLCBsLCBhKSB7XG4gICAgaWYgKGEgPT09IHZvaWQgMCkgeyBhID0gMTsgfVxuICAgIHZhciBfYSA9IGNvbnZlcnRIU0xUb1JHQkNvbG9yKGgsIHMsIGwpLCByID0gX2EuciwgZyA9IF9hLmcsIGIgPSBfYS5iO1xuICAgIGlmIChyID49IDAgJiYgciA8PSAyNTUgJiYgZyA+PSAwICYmIGcgPD0gMjU1ICYmIGIgPj0gMCAmJiBiIDw9IDI1NSAmJiBhID49IDAgJiYgYSA8PSAxKSB7XG4gICAgICAgIHJldHVybiAoTWF0aC5yb3VuZChhICogMHhGRikgKiAweDAxMDAwMDAwKSArIChyICogMHgwMTAwMDApICsgKGcgKiAweDAwMDEwMCkgKyBiO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxudmFyIGhzbENvbG9yUmVnRXggPSAvXFxzKihoc2xcXChcXHMqKFtcXGQuXSopXFxzKixcXHMqKFtcXGQuXSopJVxccyosXFxzKihbXFxkLl0qKSVcXHMqXFwpKS9neTtcbmZ1bmN0aW9uIHBhcnNlSFNMQ29sb3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBoc2xDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBoc2xDb2xvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBoc2xDb2xvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0gJiYgaHNsYVRvQXJnYk51bWJlcihwYXJzZUZsb2F0KHJlc3VsdFsyXSksIHBhcnNlRmxvYXQocmVzdWx0WzNdKSwgcGFyc2VGbG9hdChyZXN1bHRbNF0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VIU0xDb2xvciA9IHBhcnNlSFNMQ29sb3I7XG52YXIgaHNsYUNvbG9yUmVnRXggPSAvXFxzKihoc2xhXFwoXFxzKihbXFxkLl0qKVxccyosXFxzKihbXFxkLl0qKSVcXHMqLFxccyooW1xcZC5dKiklXFxzKixcXHMqKFswMV0/XFwuP1xcZCopXFxzKlxcKSkvZ3k7XG5mdW5jdGlvbiBwYXJzZUhTTEFDb2xvcih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGhzbGFDb2xvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBoc2xhQ29sb3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gaHNsYUNvbG9yUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IGhzbGFUb0FyZ2JOdW1iZXIocGFyc2VGbG9hdChyZXN1bHRbMl0pLCBwYXJzZUZsb2F0KHJlc3VsdFszXSksIHBhcnNlRmxvYXQocmVzdWx0WzRdKSwgcGFyc2VGbG9hdChyZXN1bHRbNV0pKTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VIU0xBQ29sb3IgPSBwYXJzZUhTTEFDb2xvcjtcbnZhciBjb2xvcnM7XG4oZnVuY3Rpb24gKGNvbG9ycykge1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ0cmFuc3BhcmVudFwiXSA9IDBdID0gXCJ0cmFuc3BhcmVudFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJhbGljZWJsdWVcIl0gPSA0MjkzOTgyNDYzXSA9IFwiYWxpY2VibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImFudGlxdWV3aGl0ZVwiXSA9IDQyOTQ2MzQ0NTVdID0gXCJhbnRpcXVld2hpdGVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYXF1YVwiXSA9IDQyNzgyNTU2MTVdID0gXCJhcXVhXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImFxdWFtYXJpbmVcIl0gPSA0Mjg2NTc4NjQ0XSA9IFwiYXF1YW1hcmluZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJhenVyZVwiXSA9IDQyOTM5ODQyNTVdID0gXCJhenVyZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJiZWlnZVwiXSA9IDQyOTQzMDkzNDBdID0gXCJiZWlnZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJiaXNxdWVcIl0gPSA0Mjk0OTYwMzI0XSA9IFwiYmlzcXVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsYWNrXCJdID0gNDI3ODE5MDA4MF0gPSBcImJsYWNrXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsYW5jaGVkYWxtb25kXCJdID0gNDI5NDk2MjEyNV0gPSBcImJsYW5jaGVkYWxtb25kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImJsdWVcIl0gPSA0Mjc4MTkwMzM1XSA9IFwiYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJibHVldmlvbGV0XCJdID0gNDI4NzI0NTI4Ml0gPSBcImJsdWV2aW9sZXRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYnJvd25cIl0gPSA0Mjg5MDE0MzE0XSA9IFwiYnJvd25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiYnVybHl3b29kXCJdID0gNDI5Mjc4NjMxMV0gPSBcImJ1cmx5d29vZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjYWRldGJsdWVcIl0gPSA0Mjg0NDU2NjA4XSA9IFwiY2FkZXRibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNoYXJ0cmV1c2VcIl0gPSA0Mjg2NTc4NDMyXSA9IFwiY2hhcnRyZXVzZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjaG9jb2xhdGVcIl0gPSA0MjkxOTc5NTUwXSA9IFwiY2hvY29sYXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcmFsXCJdID0gNDI5NDkzNDM1Ml0gPSBcImNvcmFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcm5mbG93ZXJibHVlXCJdID0gNDI4NDc4MjA2MV0gPSBcImNvcm5mbG93ZXJibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNvcm5zaWxrXCJdID0gNDI5NDk2NTQ2OF0gPSBcImNvcm5zaWxrXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImNyaW1zb25cIl0gPSA0MjkyNjEzMTgwXSA9IFwiY3JpbXNvblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJjeWFuXCJdID0gNDI3ODI1NTYxNV0gPSBcImN5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2JsdWVcIl0gPSA0Mjc4MTkwMjE5XSA9IFwiZGFya2JsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2N5YW5cIl0gPSA0Mjc4MjI1ODAzXSA9IFwiZGFya2N5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2dvbGRlbnJvZFwiXSA9IDQyOTAyODMwMTldID0gXCJkYXJrZ29sZGVucm9kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtncmF5XCJdID0gNDI4OTMwOTA5N10gPSBcImRhcmtncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtncmVlblwiXSA9IDQyNzgyMTU2ODBdID0gXCJkYXJrZ3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2dyZXlcIl0gPSA0Mjg5MzA5MDk3XSA9IFwiZGFya2dyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya2toYWtpXCJdID0gNDI5MDYyMzMzOV0gPSBcImRhcmtraGFraVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrbWFnZW50YVwiXSA9IDQyODcyOTk3MjNdID0gXCJkYXJrbWFnZW50YVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrb2xpdmVncmVlblwiXSA9IDQyODM3ODgwNzldID0gXCJkYXJrb2xpdmVncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrb3JhbmdlXCJdID0gNDI5NDkzNzYwMF0gPSBcImRhcmtvcmFuZ2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya29yY2hpZFwiXSA9IDQyODgyMzAwOTJdID0gXCJkYXJrb3JjaGlkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtyZWRcIl0gPSA0Mjg3Mjk5NTg0XSA9IFwiZGFya3JlZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrc2FsbW9uXCJdID0gNDI5MzQ5ODQ5MF0gPSBcImRhcmtzYWxtb25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3NlYWdyZWVuXCJdID0gNDI4NzYwOTk5OV0gPSBcImRhcmtzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrc2xhdGVibHVlXCJdID0gNDI4MjkyNDQyN10gPSBcImRhcmtzbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3NsYXRlZ3JheVwiXSA9IDQyODEyOTA1NzVdID0gXCJkYXJrc2xhdGVncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRhcmtzbGF0ZWdyZXlcIl0gPSA0MjgxMjkwNTc1XSA9IFwiZGFya3NsYXRlZ3JleVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkYXJrdHVycXVvaXNlXCJdID0gNDI3ODI0MzAyNV0gPSBcImRhcmt0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZGFya3Zpb2xldFwiXSA9IDQyODc4ODk2MTldID0gXCJkYXJrdmlvbGV0XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRlZXBwaW5rXCJdID0gNDI5NDkwNzAyN10gPSBcImRlZXBwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRlZXBza3libHVlXCJdID0gNDI3ODIzOTIzMV0gPSBcImRlZXBza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImRpbWdyYXlcIl0gPSA0Mjg1MDk4MzQ1XSA9IFwiZGltZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJkaW1ncmV5XCJdID0gNDI4NTA5ODM0NV0gPSBcImRpbWdyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZG9kZ2VyYmx1ZVwiXSA9IDQyODAxOTMyNzldID0gXCJkb2RnZXJibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImZpcmVicmlja1wiXSA9IDQyODk4NjQyMjZdID0gXCJmaXJlYnJpY2tcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZmxvcmFsd2hpdGVcIl0gPSA0Mjk0OTY2MDAwXSA9IFwiZmxvcmFsd2hpdGVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZm9yZXN0Z3JlZW5cIl0gPSA0MjgwNDUzOTIyXSA9IFwiZm9yZXN0Z3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZnVjaHNpYVwiXSA9IDQyOTQ5MDIwMTVdID0gXCJmdWNoc2lhXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdhaW5zYm9yb1wiXSA9IDQyOTI2NjQ1NDBdID0gXCJnYWluc2Jvcm9cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiZ2hvc3R3aGl0ZVwiXSA9IDQyOTQ1MDY3NTFdID0gXCJnaG9zdHdoaXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdvbGRcIl0gPSA0Mjk0OTU2ODAwXSA9IFwiZ29sZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJnb2xkZW5yb2RcIl0gPSA0MjkyNTE5MjAwXSA9IFwiZ29sZGVucm9kXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImdyYXlcIl0gPSA0Mjg2NjExNTg0XSA9IFwiZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmVlblwiXSA9IDQyNzgyMjI4NDhdID0gXCJncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmVlbnllbGxvd1wiXSA9IDQyODk1OTMxMzVdID0gXCJncmVlbnllbGxvd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJncmV5XCJdID0gNDI4NjYxMTU4NF0gPSBcImdyZXlcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaG9uZXlkZXdcIl0gPSA0MjkzOTg0MjQwXSA9IFwiaG9uZXlkZXdcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaG90cGlua1wiXSA9IDQyOTQ5Mjg4MjBdID0gXCJob3RwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImluZGlhbnJlZFwiXSA9IDQyOTE2NDg2MDRdID0gXCJpbmRpYW5yZWRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wiaW5kaWdvXCJdID0gNDI4MzEwNTQxMF0gPSBcImluZGlnb1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJpdm9yeVwiXSA9IDQyOTQ5NjcyODBdID0gXCJpdm9yeVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJraGFraVwiXSA9IDQyOTM5Nzc3NDBdID0gXCJraGFraVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsYXZlbmRlclwiXSA9IDQyOTMzMjI0OTBdID0gXCJsYXZlbmRlclwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsYXZlbmRlcmJsdXNoXCJdID0gNDI5NDk2MzQ0NV0gPSBcImxhdmVuZGVyYmx1c2hcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGF3bmdyZWVuXCJdID0gNDI4NjM4MTA1Nl0gPSBcImxhd25ncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsZW1vbmNoaWZmb25cIl0gPSA0Mjk0OTY1OTY1XSA9IFwibGVtb25jaGlmZm9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0Ymx1ZVwiXSA9IDQyODk1ODMzMzRdID0gXCJsaWdodGJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRjb3JhbFwiXSA9IDQyOTM5NTE2MTZdID0gXCJsaWdodGNvcmFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0Y3lhblwiXSA9IDQyOTI5MzU2NzldID0gXCJsaWdodGN5YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIl0gPSA0Mjk0NjM4MjkwXSA9IFwibGlnaHRnb2xkZW5yb2R5ZWxsb3dcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRncmF5XCJdID0gNDI5MjA3MjQwM10gPSBcImxpZ2h0Z3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodGdyZWVuXCJdID0gNDI4NzY4ODMzNl0gPSBcImxpZ2h0Z3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibGlnaHRncmV5XCJdID0gNDI5MjA3MjQwM10gPSBcImxpZ2h0Z3JleVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodHBpbmtcIl0gPSA0Mjk0OTQ4NTQ1XSA9IFwibGlnaHRwaW5rXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2FsbW9uXCJdID0gNDI5NDk0Mjg0Ml0gPSBcImxpZ2h0c2FsbW9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2VhZ3JlZW5cIl0gPSA0MjgwMzMyOTcwXSA9IFwibGlnaHRzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaWdodHNreWJsdWVcIl0gPSA0Mjg3MDkwNDI2XSA9IFwibGlnaHRza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2xhdGVncmF5XCJdID0gNDI4NjAyMzgzM10gPSBcImxpZ2h0c2xhdGVncmF5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c2xhdGVncmV5XCJdID0gNDI4NjAyMzgzM10gPSBcImxpZ2h0c2xhdGVncmV5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0c3RlZWxibHVlXCJdID0gNDI4OTc3NDgxNF0gPSBcImxpZ2h0c3RlZWxibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpZ2h0eWVsbG93XCJdID0gNDI5NDk2NzI2NF0gPSBcImxpZ2h0eWVsbG93XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpbWVcIl0gPSA0Mjc4MjU1MzYwXSA9IFwibGltZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJsaW1lZ3JlZW5cIl0gPSA0MjgxNTE5NDEwXSA9IFwibGltZWdyZWVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcImxpbmVuXCJdID0gNDI5NDYzNTc1MF0gPSBcImxpbmVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1hZ2VudGFcIl0gPSA0Mjk0OTAyMDE1XSA9IFwibWFnZW50YVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtYXJvb25cIl0gPSA0Mjg2NTc4Njg4XSA9IFwibWFyb29uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bWFxdWFtYXJpbmVcIl0gPSA0Mjg0OTI3NDAyXSA9IFwibWVkaXVtYXF1YW1hcmluZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW1ibHVlXCJdID0gNDI3ODE5MDI4NV0gPSBcIm1lZGl1bWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtb3JjaGlkXCJdID0gNDI5MDQwMTc0N10gPSBcIm1lZGl1bW9yY2hpZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW1wdXJwbGVcIl0gPSA0Mjg3ODUyNzYzXSA9IFwibWVkaXVtcHVycGxlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bXNlYWdyZWVuXCJdID0gNDI4MjE2ODE3N10gPSBcIm1lZGl1bXNlYWdyZWVuXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1lZGl1bXNsYXRlYmx1ZVwiXSA9IDQyODYyNzc4NzBdID0gXCJtZWRpdW1zbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtc3ByaW5nZ3JlZW5cIl0gPSA0Mjc4MjU0MjM0XSA9IFwibWVkaXVtc3ByaW5nZ3JlZW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWVkaXVtdHVycXVvaXNlXCJdID0gNDI4Mjk2MjM4MF0gPSBcIm1lZGl1bXR1cnF1b2lzZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtZWRpdW12aW9sZXRyZWRcIl0gPSA0MjkxMjM3MjUzXSA9IFwibWVkaXVtdmlvbGV0cmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1pZG5pZ2h0Ymx1ZVwiXSA9IDQyNzk4MzQ5OTJdID0gXCJtaWRuaWdodGJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wibWludGNyZWFtXCJdID0gNDI5NDMxMTkzMF0gPSBcIm1pbnRjcmVhbVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJtaXN0eXJvc2VcIl0gPSA0Mjk0OTYwMzUzXSA9IFwibWlzdHlyb3NlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm1vY2Nhc2luXCJdID0gNDI5NDk2MDMwOV0gPSBcIm1vY2Nhc2luXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm5hdmFqb3doaXRlXCJdID0gNDI5NDk1ODc2NV0gPSBcIm5hdmFqb3doaXRlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm5hdnlcIl0gPSA0Mjc4MTkwMjA4XSA9IFwibmF2eVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJvbGRsYWNlXCJdID0gNDI5NDgzMzYzOF0gPSBcIm9sZGxhY2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib2xpdmVcIl0gPSA0Mjg2NjExNDU2XSA9IFwib2xpdmVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib2xpdmVkcmFiXCJdID0gNDI4NTIzODgxOV0gPSBcIm9saXZlZHJhYlwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJvcmFuZ2VcIl0gPSA0Mjk0OTQ0MDAwXSA9IFwib3JhbmdlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcIm9yYW5nZXJlZFwiXSA9IDQyOTQ5MTk0MjRdID0gXCJvcmFuZ2VyZWRcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wib3JjaGlkXCJdID0gNDI5MjUwNTgxNF0gPSBcIm9yY2hpZFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwYWxlZ29sZGVucm9kXCJdID0gNDI5Mzg0NzIxMF0gPSBcInBhbGVnb2xkZW5yb2RcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGFsZWdyZWVuXCJdID0gNDI4ODIxNTk2MF0gPSBcInBhbGVncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwYWxldHVycXVvaXNlXCJdID0gNDI4OTcyMDA0Nl0gPSBcInBhbGV0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGFsZXZpb2xldHJlZFwiXSA9IDQyOTI1NzEyODNdID0gXCJwYWxldmlvbGV0cmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBhcGF5YXdoaXBcIl0gPSA0Mjk0OTYzMTU3XSA9IFwicGFwYXlhd2hpcFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwZWFjaHB1ZmZcIl0gPSA0Mjk0OTU3NzUzXSA9IFwicGVhY2hwdWZmXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBlcnVcIl0gPSA0MjkxNjU5MDcxXSA9IFwicGVydVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwaW5rXCJdID0gNDI5NDk1MTExNV0gPSBcInBpbmtcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicGx1bVwiXSA9IDQyOTI3MTQ3MTddID0gXCJwbHVtXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInBvd2RlcmJsdWVcIl0gPSA0Mjg5NzgxOTkwXSA9IFwicG93ZGVyYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJwdXJwbGVcIl0gPSA0Mjg2NTc4ODE2XSA9IFwicHVycGxlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInJlYmVjY2FwdXJwbGVcIl0gPSA0Mjg0ODg3OTYxXSA9IFwicmViZWNjYXB1cnBsZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJyZWRcIl0gPSA0Mjk0OTAxNzYwXSA9IFwicmVkXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInJvc3licm93blwiXSA9IDQyOTA1NDc1OTldID0gXCJyb3N5YnJvd25cIjtcbiAgICBjb2xvcnNbY29sb3JzW1wicm95YWxibHVlXCJdID0gNDI4MjQ3NzAyNV0gPSBcInJveWFsYmx1ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzYWRkbGVicm93blwiXSA9IDQyODczMTcyNjddID0gXCJzYWRkbGVicm93blwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzYWxtb25cIl0gPSA0Mjk0NjA2OTYyXSA9IFwic2FsbW9uXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNhbmR5YnJvd25cIl0gPSA0Mjk0MjIyOTQ0XSA9IFwic2FuZHlicm93blwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzZWFncmVlblwiXSA9IDQyODEyNDA0MDddID0gXCJzZWFncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzZWFzaGVsbFwiXSA9IDQyOTQ5NjQ3MThdID0gXCJzZWFzaGVsbFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzaWVubmFcIl0gPSA0Mjg4Njk2ODc3XSA9IFwic2llbm5hXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNpbHZlclwiXSA9IDQyOTA4MjIzMzZdID0gXCJzaWx2ZXJcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wic2t5Ymx1ZVwiXSA9IDQyODcwOTA0MTFdID0gXCJza3libHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNsYXRlYmx1ZVwiXSA9IDQyODUxNjAxNDFdID0gXCJzbGF0ZWJsdWVcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wic2xhdGVncmF5XCJdID0gNDI4NTU2MzAyNF0gPSBcInNsYXRlZ3JheVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzbGF0ZWdyZXlcIl0gPSA0Mjg1NTYzMDI0XSA9IFwic2xhdGVncmV5XCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInNub3dcIl0gPSA0Mjk0OTY2MDEwXSA9IFwic25vd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzcHJpbmdncmVlblwiXSA9IDQyNzgyNTU0ODddID0gXCJzcHJpbmdncmVlblwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJzdGVlbGJsdWVcIl0gPSA0MjgyODExMDYwXSA9IFwic3RlZWxibHVlXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInRhblwiXSA9IDQyOTE5OTg4NjBdID0gXCJ0YW5cIjtcbiAgICBjb2xvcnNbY29sb3JzW1widGVhbFwiXSA9IDQyNzgyMjI5NzZdID0gXCJ0ZWFsXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInRoaXN0bGVcIl0gPSA0MjkyMzk0OTY4XSA9IFwidGhpc3RsZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ0b21hdG9cIl0gPSA0Mjk0OTI3MTc1XSA9IFwidG9tYXRvXCI7XG4gICAgY29sb3JzW2NvbG9yc1tcInR1cnF1b2lzZVwiXSA9IDQyODI0NDE5MzZdID0gXCJ0dXJxdW9pc2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1widmlvbGV0XCJdID0gNDI5MzgyMTE2Nl0gPSBcInZpb2xldFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGVhdFwiXSA9IDQyOTQzMDM0MTFdID0gXCJ3aGVhdFwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGl0ZVwiXSA9IDQyOTQ5NjcyOTVdID0gXCJ3aGl0ZVwiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ3aGl0ZXNtb2tlXCJdID0gNDI5NDMwOTM2NV0gPSBcIndoaXRlc21va2VcIjtcbiAgICBjb2xvcnNbY29sb3JzW1wieWVsbG93XCJdID0gNDI5NDk2NzA0MF0gPSBcInllbGxvd1wiO1xuICAgIGNvbG9yc1tjb2xvcnNbXCJ5ZWxsb3dncmVlblwiXSA9IDQyODgzMzUxNTRdID0gXCJ5ZWxsb3dncmVlblwiO1xufSkoY29sb3JzID0gZXhwb3J0cy5jb2xvcnMgfHwgKGV4cG9ydHMuY29sb3JzID0ge30pKTtcbmZ1bmN0aW9uIHBhcnNlQ29sb3JLZXl3b3JkKHZhbHVlLCBzdGFydCwga2V5d29yZCkge1xuICAgIGlmIChrZXl3b3JkID09PSB2b2lkIDApIHsga2V5d29yZCA9IHBhcnNlS2V5d29yZCh2YWx1ZSwgc3RhcnQpOyB9XG4gICAgaWYgKGtleXdvcmQgJiYga2V5d29yZC52YWx1ZSBpbiBjb2xvcnMpIHtcbiAgICAgICAgdmFyIGVuZCA9IGtleXdvcmQuZW5kO1xuICAgICAgICB2YXIgdmFsdWVfMSA9IGNvbG9yc1trZXl3b3JkLnZhbHVlXTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlXzEgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnRzLnBhcnNlQ29sb3JLZXl3b3JkID0gcGFyc2VDb2xvcktleXdvcmQ7XG5mdW5jdGlvbiBwYXJzZUNvbG9yKHZhbHVlLCBzdGFydCwga2V5d29yZCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGlmIChrZXl3b3JkID09PSB2b2lkIDApIHsga2V5d29yZCA9IHBhcnNlS2V5d29yZCh2YWx1ZSwgc3RhcnQpOyB9XG4gICAgcmV0dXJuIHBhcnNlSGV4Q29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZUNvbG9yS2V5d29yZCh2YWx1ZSwgc3RhcnQsIGtleXdvcmQpIHx8XG4gICAgICAgIHBhcnNlUkdCQ29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZVJHQkFDb2xvcih2YWx1ZSwgc3RhcnQpIHx8XG4gICAgICAgIHBhcnNlSFNMQ29sb3IodmFsdWUsIHN0YXJ0KSB8fFxuICAgICAgICBwYXJzZUhTTEFDb2xvcih2YWx1ZSwgc3RhcnQpO1xufVxuZXhwb3J0cy5wYXJzZUNvbG9yID0gcGFyc2VDb2xvcjtcbnZhciBrZXl3b3JkUmVnRXggPSAvXFxzKihbYS16XVtcXHdcXC1dKilcXHMqL2dpeTtcbmZ1bmN0aW9uIHBhcnNlS2V5d29yZCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGtleXdvcmRSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgcmVzdWx0ID0ga2V5d29yZFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBrZXl3b3JkUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IHJlc3VsdFsxXTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbnZhciBiYWNrZ3JvdW5kUmVwZWF0S2V5d29yZHMgPSBuZXcgU2V0KFtcInJlcGVhdFwiLCBcInJlcGVhdC14XCIsIFwicmVwZWF0LXlcIiwgXCJuby1yZXBlYXRcIl0pO1xuZnVuY3Rpb24gcGFyc2VSZXBlYXQodmFsdWUsIHN0YXJ0LCBrZXl3b3JkKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgaWYgKGtleXdvcmQgPT09IHZvaWQgMCkgeyBrZXl3b3JkID0gcGFyc2VLZXl3b3JkKHZhbHVlLCBzdGFydCk7IH1cbiAgICBpZiAoa2V5d29yZCAmJiBiYWNrZ3JvdW5kUmVwZWF0S2V5d29yZHMuaGFzKGtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgIHZhciBlbmQgPSBrZXl3b3JkLmVuZDtcbiAgICAgICAgdmFyIHZhbHVlXzIgPSBrZXl3b3JkLnZhbHVlO1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWVfMiB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMucGFyc2VSZXBlYXQgPSBwYXJzZVJlcGVhdDtcbnZhciB1bml0UmVnRXggPSAvXFxzKihbXFwrXFwtXT8oPzpcXGQrXFwuXFxkK3xcXGQrfFxcLlxcZCspKD86W2VFXVtcXCtcXC1dP1xcZCspPykoW2EtekEtWl0rfCUpP1xccyovZ3k7XG5mdW5jdGlvbiBwYXJzZVVuaXQodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB1bml0UmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHVuaXRSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gdW5pdFJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHJlc3VsdFsxXSk7XG4gICAgdmFyIHVuaXQgPSByZXN1bHRbMl0gfHwgXCJkaXBcIjtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB2YWx1ZTogdmFsdWUsIHVuaXQ6IHVuaXQgfSB9O1xufVxuZXhwb3J0cy5wYXJzZVVuaXQgPSBwYXJzZVVuaXQ7XG5mdW5jdGlvbiBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHZhciB1bml0UmVzdWx0ID0gcGFyc2VVbml0KHRleHQsIHN0YXJ0KTtcbiAgICBpZiAodW5pdFJlc3VsdCkge1xuICAgICAgICB2YXIgc3RhcnRfMSA9IHVuaXRSZXN1bHQuc3RhcnQsIGVuZCA9IHVuaXRSZXN1bHQuZW5kO1xuICAgICAgICB2YXIgdmFsdWUgPSB1bml0UmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUudW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlIC89IDEwMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdmFsdWUudW5pdCkge1xuICAgICAgICAgICAgdmFsdWUudW5pdCA9IFwiZGlwXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUudW5pdCA9PT0gXCJweFwiIHx8IHZhbHVlLnVuaXQgPT09IFwiZGlwXCIpIHtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydF8xLCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCA9IHBhcnNlUGVyY2VudGFnZU9yTGVuZ3RoO1xudmFyIGFuZ2xlVW5pdHNUb1JhZE1hcCA9IHtcbiAgICBcImRlZ1wiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZGVnKSB7IHJldHVybiAoeyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogZGVnIC8gMTgwICogTWF0aC5QSSB9KTsgfSxcbiAgICBcInJhZFwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgcmFkKSB7IHJldHVybiAoeyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogcmFkIH0pOyB9LFxuICAgIFwiZ3JhZFwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgZ3JhZCkgeyByZXR1cm4gKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IGdyYWQgLyAyMDAgKiBNYXRoLlBJIH0pOyB9LFxuICAgIFwidHVyblwiOiBmdW5jdGlvbiAoc3RhcnQsIGVuZCwgdHVybikgeyByZXR1cm4gKHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHR1cm4gKiBNYXRoLlBJICogMiB9KTsgfVxufTtcbmZ1bmN0aW9uIHBhcnNlQW5nbGUodmFsdWUsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdmFyIGFuZ2xlUmVzdWx0ID0gcGFyc2VVbml0KHZhbHVlLCBzdGFydCk7XG4gICAgaWYgKGFuZ2xlUmVzdWx0KSB7XG4gICAgICAgIHZhciBzdGFydF8yID0gYW5nbGVSZXN1bHQuc3RhcnQsIGVuZCA9IGFuZ2xlUmVzdWx0LmVuZCwgdmFsdWVfMyA9IGFuZ2xlUmVzdWx0LnZhbHVlO1xuICAgICAgICByZXR1cm4gKGFuZ2xlVW5pdHNUb1JhZE1hcFt2YWx1ZV8zLnVuaXRdIHx8IChmdW5jdGlvbiAoXywgX18sIF9fXykgeyByZXR1cm4gbnVsbDsgfSkpKHN0YXJ0XzIsIGVuZCwgdmFsdWVfMy52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZUFuZ2xlID0gcGFyc2VBbmdsZTtcbnZhciBiYWNrZ3JvdW5kU2l6ZUtleXdvcmRzID0gbmV3IFNldChbXCJhdXRvXCIsIFwiY29udGFpblwiLCBcImNvdmVyXCJdKTtcbmZ1bmN0aW9uIHBhcnNlQmFja2dyb3VuZFNpemUodmFsdWUsIHN0YXJ0LCBrZXl3b3JkKSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgaWYgKGtleXdvcmQgPT09IHZvaWQgMCkgeyBrZXl3b3JkID0gcGFyc2VLZXl3b3JkKHZhbHVlLCBzdGFydCk7IH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgaWYgKGtleXdvcmQgJiYgYmFja2dyb3VuZFNpemVLZXl3b3Jkcy5oYXMoa2V5d29yZC52YWx1ZSkpIHtcbiAgICAgICAgZW5kID0ga2V5d29yZC5lbmQ7XG4gICAgICAgIHZhciB2YWx1ZV80ID0ga2V5d29yZC52YWx1ZTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlXzQgfTtcbiAgICB9XG4gICAgdmFyIGZpcnN0TGVuZ3RoID0gcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodmFsdWUsIGVuZCk7XG4gICAgaWYgKGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgIGVuZCA9IGZpcnN0TGVuZ3RoLmVuZDtcbiAgICAgICAgdmFyIHNlY29uZExlbmd0aCA9IHBhcnNlUGVyY2VudGFnZU9yTGVuZ3RoKHZhbHVlLCBmaXJzdExlbmd0aC5lbmQpO1xuICAgICAgICBpZiAoc2Vjb25kTGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgPSBzZWNvbmRMZW5ndGguZW5kO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogZmlyc3RMZW5ndGgudmFsdWUsIHk6IHNlY29uZExlbmd0aC52YWx1ZSB9IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB4OiBmaXJzdExlbmd0aC52YWx1ZSwgeTogXCJhdXRvXCIgfSB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmRTaXplID0gcGFyc2VCYWNrZ3JvdW5kU2l6ZTtcbnZhciBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3JkcyA9IE9iamVjdC5mcmVlemUobmV3IFNldChbXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJjZW50ZXJcIl0pKTtcbnZhciBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbiA9IHtcbiAgICBcImxlZnRcIjogXCJ4XCIsXG4gICAgXCJyaWdodFwiOiBcInhcIixcbiAgICBcImNlbnRlclwiOiBcImNlbnRlclwiLFxuICAgIFwidG9wXCI6IFwieVwiLFxuICAgIFwiYm90dG9tXCI6IFwieVwiXG59O1xuZnVuY3Rpb24gcGFyc2VCYWNrZ3JvdW5kUG9zaXRpb24odGV4dCwgc3RhcnQsIGtleXdvcmQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBpZiAoa2V5d29yZCA9PT0gdm9pZCAwKSB7IGtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgc3RhcnQpOyB9XG4gICAgZnVuY3Rpb24gZm9ybWF0SChhbGlnbiwgb2Zmc2V0KSB7XG4gICAgICAgIGlmIChhbGlnbi52YWx1ZSA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiY2VudGVyXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9mZnNldCAmJiBvZmZzZXQudmFsdWUudmFsdWUgIT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IGFsaWduOiBhbGlnbi52YWx1ZSwgb2Zmc2V0OiBvZmZzZXQudmFsdWUgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxpZ24udmFsdWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFYoYWxpZ24sIG9mZnNldCkge1xuICAgICAgICBpZiAoYWxpZ24udmFsdWUgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcImNlbnRlclwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvZmZzZXQgJiYgb2Zmc2V0LnZhbHVlLnZhbHVlICE9PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhbGlnbjogYWxpZ24udmFsdWUsIG9mZnNldDogb2Zmc2V0LnZhbHVlIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsaWduLnZhbHVlO1xuICAgIH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgaWYgKGtleXdvcmQgJiYgYmFja2dyb3VuZFBvc2l0aW9uS2V5d29yZHMuaGFzKGtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgIGVuZCA9IGtleXdvcmQuZW5kO1xuICAgICAgICB2YXIgZmlyc3REaXJlY3Rpb24gPSBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbltrZXl3b3JkLnZhbHVlXTtcbiAgICAgICAgdmFyIGZpcnN0TGVuZ3RoID0gZmlyc3REaXJlY3Rpb24gIT09IFwiY2VudGVyXCIgJiYgcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKGZpcnN0TGVuZ3RoKSB7XG4gICAgICAgICAgICBlbmQgPSBmaXJzdExlbmd0aC5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlY29uZEtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKHNlY29uZEtleXdvcmQgJiYgYmFja2dyb3VuZFBvc2l0aW9uS2V5d29yZHMuaGFzKHNlY29uZEtleXdvcmQudmFsdWUpKSB7XG4gICAgICAgICAgICBlbmQgPSBzZWNvbmRLZXl3b3JkLmVuZDtcbiAgICAgICAgICAgIHZhciBzZWNvbmREaXJlY3Rpb24gPSBiYWNrZ3JvdW5kUG9zaXRpb25LZXl3b3Jkc0RpcmVjdGlvbltzZWNvbmRLZXl3b3JkLmVuZF07XG4gICAgICAgICAgICBpZiAoZmlyc3REaXJlY3Rpb24gPT09IHNlY29uZERpcmVjdGlvbiAmJiBmaXJzdERpcmVjdGlvbiAhPT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNlY29uZExlbmd0aCA9IHNlY29uZERpcmVjdGlvbiAhPT0gXCJjZW50ZXJcIiAmJiBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICAgICAgaWYgKHNlY29uZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNlY29uZExlbmd0aC5lbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGZpcnN0RGlyZWN0aW9uID09PSBzZWNvbmREaXJlY3Rpb24gJiYgc2Vjb25kRGlyZWN0aW9uID09PSBcImNlbnRlclwiKSB8fCAoZmlyc3REaXJlY3Rpb24gPT09IFwieFwiIHx8IHNlY29uZERpcmVjdGlvbiA9PT0gXCJ5XCIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGZvcm1hdEgoa2V5d29yZCwgZmlyc3RMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogZm9ybWF0VihzZWNvbmRLZXl3b3JkLCBzZWNvbmRMZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGZvcm1hdEgoc2Vjb25kS2V5d29yZCwgc2Vjb25kTGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGZvcm1hdFYoa2V5d29yZCwgZmlyc3RMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChmaXJzdERpcmVjdGlvbiA9PT0gXCJjZW50ZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IHg6IFwiY2VudGVyXCIsIHk6IFwiY2VudGVyXCIgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmlyc3REaXJlY3Rpb24gPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogZm9ybWF0SChrZXl3b3JkLCBmaXJzdExlbmd0aCksIHk6IFwiY2VudGVyXCIgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogXCJjZW50ZXJcIiwgeTogZm9ybWF0VihrZXl3b3JkLCBmaXJzdExlbmd0aCkgfSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgZmlyc3RMZW5ndGggPSBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICBpZiAoZmlyc3RMZW5ndGgpIHtcbiAgICAgICAgICAgIGVuZCA9IGZpcnN0TGVuZ3RoLmVuZDtcbiAgICAgICAgICAgIHZhciBzZWNvbmRMZW5ndGggPSBwYXJzZVBlcmNlbnRhZ2VPckxlbmd0aCh0ZXh0LCBlbmQpO1xuICAgICAgICAgICAgaWYgKHNlY29uZExlbmd0aCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNlY29uZExlbmd0aC5lbmQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgeDogeyBhbGlnbjogXCJsZWZ0XCIsIG9mZnNldDogZmlyc3RMZW5ndGgudmFsdWUgfSwgeTogeyBhbGlnbjogXCJ0b3BcIiwgb2Zmc2V0OiBzZWNvbmRMZW5ndGgudmFsdWUgfSB9IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyB4OiB7IGFsaWduOiBcImxlZnRcIiwgb2Zmc2V0OiBmaXJzdExlbmd0aC52YWx1ZSB9LCB5OiBcImNlbnRlclwiIH0gfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmRQb3NpdGlvbiA9IHBhcnNlQmFja2dyb3VuZFBvc2l0aW9uO1xudmFyIGRpcmVjdGlvblJlZ0V4ID0gL1xccyp0b1xccyoobGVmdHxyaWdodHx0b3B8Ym90dG9tKVxccyoobGVmdHxyaWdodHx0b3B8Ym90dG9tKT9cXHMqL2d5O1xudmFyIHNpZGVEaXJlY3Rpb25zID0ge1xuICAgIHRvcDogTWF0aC5QSSAqIDAgLyAyLFxuICAgIHJpZ2h0OiBNYXRoLlBJICogMSAvIDIsXG4gICAgYm90dG9tOiBNYXRoLlBJICogMiAvIDIsXG4gICAgbGVmdDogTWF0aC5QSSAqIDMgLyAyXG59O1xudmFyIGNvcm5lckRpcmVjdGlvbnMgPSB7XG4gICAgdG9wOiB7XG4gICAgICAgIHJpZ2h0OiBNYXRoLlBJICogMSAvIDQsXG4gICAgICAgIGxlZnQ6IE1hdGguUEkgKiA3IC8gNFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgICAgdG9wOiBNYXRoLlBJICogMSAvIDQsXG4gICAgICAgIGJvdHRvbTogTWF0aC5QSSAqIDMgLyA0XG4gICAgfSxcbiAgICBib3R0b206IHtcbiAgICAgICAgcmlnaHQ6IE1hdGguUEkgKiAzIC8gNCxcbiAgICAgICAgbGVmdDogTWF0aC5QSSAqIDUgLyA0XG4gICAgfSxcbiAgICBsZWZ0OiB7XG4gICAgICAgIHRvcDogTWF0aC5QSSAqIDcgLyA0LFxuICAgICAgICBib3R0b206IE1hdGguUEkgKiA1IC8gNFxuICAgIH1cbn07XG5mdW5jdGlvbiBwYXJzZURpcmVjdGlvbih0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIGRpcmVjdGlvblJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBkaXJlY3Rpb25SZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gZGlyZWN0aW9uUmVnRXgubGFzdEluZGV4O1xuICAgIHZhciBmaXJzdERpcmVjdGlvbiA9IHJlc3VsdFsxXTtcbiAgICBpZiAocmVzdWx0WzJdKSB7XG4gICAgICAgIHZhciBzZWNvbmREaXJlY3Rpb24gPSByZXN1bHRbMl07XG4gICAgICAgIHZhciB2YWx1ZSA9IGNvcm5lckRpcmVjdGlvbnNbZmlyc3REaXJlY3Rpb25dW3NlY29uZERpcmVjdGlvbl07XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogc2lkZURpcmVjdGlvbnNbZmlyc3REaXJlY3Rpb25dIH07XG4gICAgfVxufVxudmFyIG9wZW5pbmdCcmFja2V0UmVnRXggPSAvXFxzKlxcKFxccyovZ3k7XG52YXIgY2xvc2luZ0JyYWNrZXRSZWdFeCA9IC9cXHMqXFwpXFxzKi9neTtcbnZhciBjbG9zaW5nQnJhY2tldE9yQ29tbWFSZWdFeCA9IC9cXHMqKFxcKXwsKVxccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUFyZ3VtZW50c0xpc3QodGV4dCwgc3RhcnQsIGFyZ3VtZW50KSB7XG4gICAgb3BlbmluZ0JyYWNrZXRSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgb3BlbmluZ0JyYWNrZXQgPSBvcGVuaW5nQnJhY2tldFJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFvcGVuaW5nQnJhY2tldCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IG9wZW5pbmdCcmFja2V0UmVnRXgubGFzdEluZGV4O1xuICAgIHZhciB2YWx1ZSA9IFtdO1xuICAgIGNsb3NpbmdCcmFja2V0UmVnRXgubGFzdEluZGV4ID0gZW5kO1xuICAgIHZhciBjbG9zaW5nQnJhY2tldCA9IGNsb3NpbmdCcmFja2V0UmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoY2xvc2luZ0JyYWNrZXQpIHtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgfVxuICAgIGZvciAodmFyIGluZGV4XzEgPSAwOyB0cnVlOyBpbmRleF8xKyspIHtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50KHRleHQsIGVuZCwgaW5kZXhfMSk7XG4gICAgICAgIGlmICghYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbmQgPSBhcmcuZW5kO1xuICAgICAgICB2YWx1ZS5wdXNoKGFyZyk7XG4gICAgICAgIGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4Lmxhc3RJbmRleCA9IGVuZDtcbiAgICAgICAgdmFyIGNsb3NpbmdCcmFja2V0T3JDb21tYSA9IGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4LmV4ZWModGV4dCk7XG4gICAgICAgIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWEpIHtcbiAgICAgICAgICAgIGVuZCA9IGNsb3NpbmdCcmFja2V0T3JDb21tYVJlZ0V4Lmxhc3RJbmRleDtcbiAgICAgICAgICAgIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWFbMV0gPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbG9zaW5nQnJhY2tldE9yQ29tbWFbMV0gPT09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBhcnNlQ29sb3JTdG9wKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdmFyIGNvbG9yID0gcGFyc2VDb2xvcih0ZXh0LCBzdGFydCk7XG4gICAgaWYgKCFjb2xvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGNvbG9yLmVuZDtcbiAgICB2YXIgb2Zmc2V0ID0gcGFyc2VQZXJjZW50YWdlT3JMZW5ndGgodGV4dCwgZW5kKTtcbiAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgIGVuZCA9IG9mZnNldC5lbmQ7XG4gICAgICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IGFyZ2I6IGNvbG9yLnZhbHVlLCBvZmZzZXQ6IG9mZnNldC52YWx1ZSB9IH07XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB7IGFyZ2I6IGNvbG9yLnZhbHVlIH0gfTtcbn1cbmV4cG9ydHMucGFyc2VDb2xvclN0b3AgPSBwYXJzZUNvbG9yU3RvcDtcbnZhciBsaW5lYXJHcmFkaWVudFN0YXJ0UmVnRXggPSAvXFxzKmxpbmVhci1ncmFkaWVudFxccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUxpbmVhckdyYWRpZW50KHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgbGluZWFyR3JhZGllbnRTdGFydFJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciBsZ3MgPSBsaW5lYXJHcmFkaWVudFN0YXJ0UmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAoIWxncykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVuZCA9IGxpbmVhckdyYWRpZW50U3RhcnRSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIGFuZ2xlID0gTWF0aC5QSTtcbiAgICB2YXIgY29sb3JzID0gW107XG4gICAgdmFyIHBhcnNlZEFyZ3MgPSBwYXJzZUFyZ3VtZW50c0xpc3QodGV4dCwgZW5kLCBmdW5jdGlvbiAodGV4dCwgc3RhcnQsIGluZGV4KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlQXJnID0gcGFyc2VBbmdsZSh0ZXh0LCBzdGFydCkgfHwgcGFyc2VEaXJlY3Rpb24odGV4dCwgc3RhcnQpO1xuICAgICAgICAgICAgaWYgKGFuZ2xlQXJnKSB7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSBhbmdsZUFyZy52YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5nbGVBcmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvbG9yU3RvcCA9IHBhcnNlQ29sb3JTdG9wKHRleHQsIHN0YXJ0KTtcbiAgICAgICAgaWYgKGNvbG9yU3RvcCkge1xuICAgICAgICAgICAgY29sb3JzLnB1c2goY29sb3JTdG9wLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvclN0b3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG4gICAgaWYgKCFwYXJzZWRBcmdzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbmQgPSBwYXJzZWRBcmdzLmVuZDtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogeyBhbmdsZTogYW5nbGUsIGNvbG9yczogY29sb3JzIH0gfTtcbn1cbmV4cG9ydHMucGFyc2VMaW5lYXJHcmFkaWVudCA9IHBhcnNlTGluZWFyR3JhZGllbnQ7XG52YXIgc2xhc2hSZWdFeCA9IC9cXHMqKFxcLylcXHMqL2d5O1xuZnVuY3Rpb24gcGFyc2VTbGFzaCh0ZXh0LCBzdGFydCkge1xuICAgIHNsYXNoUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHNsYXNoID0gc2xhc2hSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghc2xhc2gpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzbGFzaFJlZ0V4Lmxhc3RJbmRleDtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogXCIvXCIgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlQmFja2dyb3VuZCh0ZXh0LCBzdGFydCkge1xuICAgIGlmIChzdGFydCA9PT0gdm9pZCAwKSB7IHN0YXJ0ID0gMDsgfVxuICAgIHZhciB2YWx1ZSA9IHt9O1xuICAgIHZhciBlbmQgPSBzdGFydDtcbiAgICB3aGlsZSAoZW5kIDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleXdvcmQgPSBwYXJzZUtleXdvcmQodGV4dCwgZW5kKTtcbiAgICAgICAgdmFyIGNvbG9yID0gcGFyc2VDb2xvcih0ZXh0LCBlbmQsIGtleXdvcmQpO1xuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgIHZhbHVlLmNvbG9yID0gY29sb3IudmFsdWU7XG4gICAgICAgICAgICBlbmQgPSBjb2xvci5lbmQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVwZWF0ID0gcGFyc2VSZXBlYXQodGV4dCwgZW5kLCBrZXl3b3JkKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgdmFsdWUucmVwZWF0ID0gcmVwZWF0LnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gcmVwZWF0LmVuZDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHBhcnNlQmFja2dyb3VuZFBvc2l0aW9uKHRleHQsIGVuZCwga2V5d29yZCk7XG4gICAgICAgIGlmIChwb3NpdGlvbikge1xuICAgICAgICAgICAgcG9zaXRpb24udmFsdWUudGV4dCA9IHRleHQuc3Vic3RyaW5nKHBvc2l0aW9uLnN0YXJ0LCBwb3NpdGlvbi5lbmQpO1xuICAgICAgICAgICAgdmFsdWUucG9zaXRpb24gPSBwb3NpdGlvbi52YWx1ZTtcbiAgICAgICAgICAgIGVuZCA9IHBvc2l0aW9uLmVuZDtcbiAgICAgICAgICAgIHZhciBzbGFzaCA9IHBhcnNlU2xhc2godGV4dCwgZW5kKTtcbiAgICAgICAgICAgIGlmIChzbGFzaCkge1xuICAgICAgICAgICAgICAgIGVuZCA9IHNsYXNoLmVuZDtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHBhcnNlQmFja2dyb3VuZFNpemUodGV4dCwgZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlLnNpemUgPSBzaXplLnZhbHVlO1xuICAgICAgICAgICAgICAgIGVuZCA9IHNpemUuZW5kO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVybCA9IHBhcnNlVVJMKHRleHQsIGVuZCk7XG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIHZhbHVlLmltYWdlID0gdXJsLnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gdXJsLmVuZDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncmFkaWVudCA9IHBhcnNlTGluZWFyR3JhZGllbnQodGV4dCwgZW5kKTtcbiAgICAgICAgaWYgKGdyYWRpZW50KSB7XG4gICAgICAgICAgICB2YWx1ZS5pbWFnZSA9IGdyYWRpZW50LnZhbHVlO1xuICAgICAgICAgICAgZW5kID0gZ3JhZGllbnQuZW5kO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZUJhY2tncm91bmQgPSBwYXJzZUJhY2tncm91bmQ7XG52YXIgdW5pdmVyc2FsU2VsZWN0b3JSZWdFeCA9IC9cXCovZ3k7XG5mdW5jdGlvbiBwYXJzZVVuaXZlcnNhbFNlbGVjdG9yKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgcmVzdWx0ID0gdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gdW5pdmVyc2FsU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXg7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCIqXCIgfSB9O1xufVxuZXhwb3J0cy5wYXJzZVVuaXZlcnNhbFNlbGVjdG9yID0gcGFyc2VVbml2ZXJzYWxTZWxlY3RvcjtcbnZhciBzaW1wbGVJZGVudGlmaWVyU2VsZWN0b3JSZWdFeCA9IC8oI3xcXC58OnxcXGIpKFtfLVxcd11bXy1cXHdcXGRcXFxcL10qKS9neTtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlSWRlbnRpZmllclNlbGVjdG9yKHRleHQsIHN0YXJ0KSB7XG4gICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgc2ltcGxlSWRlbnRpZmllclNlbGVjdG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IHNpbXBsZUlkZW50aWZpZXJTZWxlY3RvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzaW1wbGVJZGVudGlmaWVyU2VsZWN0b3JSZWdFeC5sYXN0SW5kZXg7XG4gICAgdmFyIHR5cGUgPSByZXN1bHRbMV07XG4gICAgdmFyIGlkZW50aWZpZXIgPSByZXN1bHRbMl0ucmVwbGFjZSgvXFxcXC9nLCBcIlwiKTtcbiAgICB2YXIgdmFsdWUgPSB7IHR5cGU6IHR5cGUsIGlkZW50aWZpZXI6IGlkZW50aWZpZXIgfTtcbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VTaW1wbGVJZGVudGlmaWVyU2VsZWN0b3IgPSBwYXJzZVNpbXBsZUlkZW50aWZpZXJTZWxlY3RvcjtcbnZhciBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4ID0gL1xcW1xccyooW18tXFx3XVtfLVxcd1xcZF0qKVxccyooPzooPXxcXF49fFxcJD18XFwqPXxcXH49fFxcfD0pXFxzKig/OihbXy1cXHddW18tXFx3XFxkXSopfFwiKCg/OlteXFxcXFwiXXxcXFxcKD86XCJ8bnxyfGZ8XFxcXHwwLTlhLWYpKSopXCJ8JygoPzpbXlxcXFwnXXxcXFxcKD86J3xufHJ8ZnxcXFxcfDAtOWEtZikpKiknKVxccyopP1xcXS9neTtcbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4Lmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHZhciByZXN1bHQgPSBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4LmV4ZWModGV4dCk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBhdHRyaWJ1dGVTZWxlY3RvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgcHJvcGVydHkgPSByZXN1bHRbMV07XG4gICAgaWYgKHJlc3VsdFsyXSkge1xuICAgICAgICB2YXIgdGVzdF8xID0gcmVzdWx0WzJdO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHRbM10gfHwgcmVzdWx0WzRdIHx8IHJlc3VsdFs1XTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCJbXVwiLCBwcm9wZXJ0eTogcHJvcGVydHksIHRlc3Q6IHRlc3RfMSwgdmFsdWU6IHZhbHVlIH0gfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHsgdHlwZTogXCJbXVwiLCBwcm9wZXJ0eTogcHJvcGVydHkgfSB9O1xufVxuZXhwb3J0cy5wYXJzZUF0dHJpYnV0ZVNlbGVjdG9yID0gcGFyc2VBdHRyaWJ1dGVTZWxlY3RvcjtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICByZXR1cm4gcGFyc2VVbml2ZXJzYWxTZWxlY3Rvcih0ZXh0LCBzdGFydCkgfHxcbiAgICAgICAgcGFyc2VTaW1wbGVJZGVudGlmaWVyU2VsZWN0b3IodGV4dCwgc3RhcnQpIHx8XG4gICAgICAgIHBhcnNlQXR0cmlidXRlU2VsZWN0b3IodGV4dCwgc3RhcnQpO1xufVxuZXhwb3J0cy5wYXJzZVNpbXBsZVNlbGVjdG9yID0gcGFyc2VTaW1wbGVTZWxlY3RvcjtcbmZ1bmN0aW9uIHBhcnNlU2ltcGxlU2VsZWN0b3JTZXF1ZW5jZSh0ZXh0LCBzdGFydCkge1xuICAgIHZhciBzaW1wbGVTZWxlY3RvciA9IHBhcnNlU2ltcGxlU2VsZWN0b3IodGV4dCwgc3RhcnQpO1xuICAgIGlmICghc2ltcGxlU2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlbmQgPSBzaW1wbGVTZWxlY3Rvci5lbmQ7XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgd2hpbGUgKHNpbXBsZVNlbGVjdG9yKSB7XG4gICAgICAgIHZhbHVlLnB1c2goc2ltcGxlU2VsZWN0b3IudmFsdWUpO1xuICAgICAgICBlbmQgPSBzaW1wbGVTZWxlY3Rvci5lbmQ7XG4gICAgICAgIHNpbXBsZVNlbGVjdG9yID0gcGFyc2VTaW1wbGVTZWxlY3Rvcih0ZXh0LCBlbmQpO1xuICAgIH1cbiAgICByZXR1cm4geyBzdGFydDogc3RhcnQsIGVuZDogZW5kLCB2YWx1ZTogdmFsdWUgfTtcbn1cbmV4cG9ydHMucGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlID0gcGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlO1xudmFyIGNvbWJpbmF0b3JSZWdFeCA9IC9cXHMqKFxcK3x+fD4pP1xccyovZ3k7XG5mdW5jdGlvbiBwYXJzZUNvbWJpbmF0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICBjb21iaW5hdG9yUmVnRXgubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIHJlc3VsdCA9IGNvbWJpbmF0b3JSZWdFeC5leGVjKHRleHQpO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZW5kID0gY29tYmluYXRvclJlZ0V4Lmxhc3RJbmRleDtcbiAgICB2YXIgdmFsdWUgPSByZXN1bHRbMV0gfHwgXCIgXCI7XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgdmFsdWU6IHZhbHVlIH07XG59XG5leHBvcnRzLnBhcnNlQ29tYmluYXRvciA9IHBhcnNlQ29tYmluYXRvcjtcbnZhciB3aGl0ZVNwYWNlUmVnRXggPSAvXFxzKi9neTtcbmZ1bmN0aW9uIHBhcnNlU2VsZWN0b3IodGV4dCwgc3RhcnQpIHtcbiAgICBpZiAoc3RhcnQgPT09IHZvaWQgMCkgeyBzdGFydCA9IDA7IH1cbiAgICB2YXIgZW5kID0gc3RhcnQ7XG4gICAgd2hpdGVTcGFjZVJlZ0V4Lmxhc3RJbmRleCA9IGVuZDtcbiAgICB2YXIgbGVhZGluZ1doaXRlU3BhY2UgPSB3aGl0ZVNwYWNlUmVnRXguZXhlYyh0ZXh0KTtcbiAgICBpZiAobGVhZGluZ1doaXRlU3BhY2UpIHtcbiAgICAgICAgZW5kID0gd2hpdGVTcGFjZVJlZ0V4Lmxhc3RJbmRleDtcbiAgICB9XG4gICAgdmFyIHZhbHVlID0gW107XG4gICAgdmFyIGNvbWJpbmF0b3I7XG4gICAgdmFyIGV4cGVjdFNpbXBsZVNlbGVjdG9yID0gdHJ1ZTtcbiAgICB2YXIgcGFpcjtcbiAgICBkbyB7XG4gICAgICAgIHZhciBzaW1wbGVTZWxlY3RvclNlcXVlbmNlID0gcGFyc2VTaW1wbGVTZWxlY3RvclNlcXVlbmNlKHRleHQsIGVuZCk7XG4gICAgICAgIGlmICghc2ltcGxlU2VsZWN0b3JTZXF1ZW5jZSkge1xuICAgICAgICAgICAgaWYgKGV4cGVjdFNpbXBsZVNlbGVjdG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbmQgPSBzaW1wbGVTZWxlY3RvclNlcXVlbmNlLmVuZDtcbiAgICAgICAgaWYgKGNvbWJpbmF0b3IpIHtcbiAgICAgICAgICAgIHBhaXJbMV0gPSBjb21iaW5hdG9yLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHBhaXIgPSBbc2ltcGxlU2VsZWN0b3JTZXF1ZW5jZS52YWx1ZSwgdW5kZWZpbmVkXTtcbiAgICAgICAgdmFsdWUucHVzaChwYWlyKTtcbiAgICAgICAgY29tYmluYXRvciA9IHBhcnNlQ29tYmluYXRvcih0ZXh0LCBlbmQpO1xuICAgICAgICBpZiAoY29tYmluYXRvcikge1xuICAgICAgICAgICAgZW5kID0gY29tYmluYXRvci5lbmQ7XG4gICAgICAgIH1cbiAgICAgICAgZXhwZWN0U2ltcGxlU2VsZWN0b3IgPSBjb21iaW5hdG9yICYmIGNvbWJpbmF0b3IudmFsdWUgIT09IFwiIFwiO1xuICAgIH0gd2hpbGUgKGNvbWJpbmF0b3IpO1xuICAgIHJldHVybiB7IHN0YXJ0OiBzdGFydCwgZW5kOiBlbmQsIHZhbHVlOiB2YWx1ZSB9O1xufVxuZXhwb3J0cy5wYXJzZVNlbGVjdG9yID0gcGFyc2VTZWxlY3RvcjtcbnZhciB3aGl0ZXNwYWNlUmVnRXggPSAvW1xcc1xcdFxcblxcclxcZl0qL2d5bTtcbnZhciBzaW5nbGVRdW90ZVN0cmluZ1JlZ0V4ID0gLycoKD86W15cXG5cXHJcXGZcXCddfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkqKSg6Pyd8JCkvZ3ltO1xudmFyIGRvdWJsZVF1b3RlU3RyaW5nUmVnRXggPSAvXCIoKD86W15cXG5cXHJcXGZcXFwiXXxcXFxcKD86XFwkfFxcbnxbMC05YS1mQS1GXXsxLDZ9XFxzPykpKikoOj9cInwkKS9neW07XG52YXIgY29tbWVudFJlZ0V4ID0gLyhcXC9cXCooPzpbXlxcKl18XFwqW15cXC9dKSpcXCpcXC8pL2d5bTtcbnZhciBudW1iZXJSZWdFeCA9IC9bXFwrXFwtXT8oPzpcXGQrXFwuXFxkK3xcXGQrfFxcLlxcZCspKD86W2VFXVtcXCtcXC1dP1xcZCspPy9neW07XG52YXIgbmFtZVJlZ0V4ID0gLy0/KD86KD86W2EtekEtWl9dfFteXFx4MDAtXFx4N0ZdfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkoPzpbYS16QS1aXzAtOVxcLV0qfFxcXFwoPzpcXCR8XFxufFswLTlhLWZBLUZdezEsNn1cXHM/KSkqKS9neW07XG52YXIgQ1NTM1BhcnNlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ1NTM1BhcnNlcih0ZXh0KSB7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSAwO1xuICAgIH1cbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS50b2tlbml6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRUb2tlbjtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaW5wdXRUb2tlbiA9IHRoaXMuY29uc3VtZUFUb2tlbigpO1xuICAgICAgICAgICAgdG9rZW5zLnB1c2goaW5wdXRUb2tlbik7XG4gICAgICAgIH0gd2hpbGUgKGlucHV0VG9rZW4pO1xuICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucmVjb25zdW1lZElucHV0VG9rZW4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLnJlY29uc3VtZWRJbnB1dFRva2VuO1xuICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVkSW5wdXRUb2tlbiA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGFyID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdO1xuICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6IHJldHVybiB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCInXCI6IHJldHVybiB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCIoXCI6XG4gICAgICAgICAgICBjYXNlIFwiKVwiOlxuICAgICAgICAgICAgY2FzZSBcIixcIjpcbiAgICAgICAgICAgIGNhc2UgXCI6XCI6XG4gICAgICAgICAgICBjYXNlIFwiO1wiOlxuICAgICAgICAgICAgY2FzZSBcIltcIjpcbiAgICAgICAgICAgIGNhc2UgXCJdXCI6XG4gICAgICAgICAgICBjYXNlIFwie1wiOlxuICAgICAgICAgICAgY2FzZSBcIn1cIjpcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4Kys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXI7XG4gICAgICAgICAgICBjYXNlIFwiI1wiOiByZXR1cm4gdGhpcy5jb25zdW1lQUhhc2hUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiIFwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcdFwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcclwiOlxuICAgICAgICAgICAgY2FzZSBcIlxcZlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBV2hpdGVzcGFjZSgpO1xuICAgICAgICAgICAgY2FzZSBcIkBcIjogcmV0dXJuIHRoaXMuY29uc3VtZUF0S2V5d29yZCgpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiXFxcXFwiOiByZXR1cm4gdGhpcy5jb25zdW1lQW5JZGVudExpa2VUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiMFwiOlxuICAgICAgICAgICAgY2FzZSBcIjFcIjpcbiAgICAgICAgICAgIGNhc2UgXCIyXCI6XG4gICAgICAgICAgICBjYXNlIFwiM1wiOlxuICAgICAgICAgICAgY2FzZSBcIjRcIjpcbiAgICAgICAgICAgIGNhc2UgXCI1XCI6XG4gICAgICAgICAgICBjYXNlIFwiNlwiOlxuICAgICAgICAgICAgY2FzZSBcIjdcIjpcbiAgICAgICAgICAgIGNhc2UgXCI4XCI6XG4gICAgICAgICAgICBjYXNlIFwiOVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBTnVtZXJpY1Rva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwidVwiOlxuICAgICAgICAgICAgY2FzZSBcIlVcIjpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggKyAxXSA9PT0gXCIrXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXJkQ2hhciA9IHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICsgMl07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlyZENoYXIgPj0gXCIwXCIgJiYgdGhpcmRDaGFyIDw9IFwiOVwiIHx8IHRoaXJkQ2hhciA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuaWNvZGUgdG9rZW5zIG5vdCBzdXBwb3J0ZWQhXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBbklkZW50TGlrZVRva2VuKCkgfHwgdGhpcy5jb25zdW1lQURlbGltVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCIkXCI6XG4gICAgICAgICAgICBjYXNlIFwiKlwiOlxuICAgICAgICAgICAgY2FzZSBcIl5cIjpcbiAgICAgICAgICAgIGNhc2UgXCJ8XCI6XG4gICAgICAgICAgICBjYXNlIFwiflwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBTWF0Y2hUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgICAgICBjYXNlIFwiLVwiOiByZXR1cm4gdGhpcy5jb25zdW1lQU51bWVyaWNUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFuSWRlbnRMaWtlVG9rZW4oKSB8fCB0aGlzLmNvbnN1bWVDREMoKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSBcIitcIjpcbiAgICAgICAgICAgIGNhc2UgXCIuXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFOdW1lcmljVG9rZW4oKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSBcIi9cIjogcmV0dXJuIHRoaXMuY29uc3VtZUFDb21tZW50KCkgfHwgdGhpcy5jb25zdW1lQURlbGltVG9rZW4oKTtcbiAgICAgICAgICAgIGNhc2UgXCI8XCI6IHJldHVybiB0aGlzLmNvbnN1bWVDRE8oKSB8fCB0aGlzLmNvbnN1bWVBRGVsaW1Ub2tlbigpO1xuICAgICAgICAgICAgY2FzZSB1bmRlZmluZWQ6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gdGhpcy5jb25zdW1lQW5JZGVudExpa2VUb2tlbigpIHx8IHRoaXMuY29uc3VtZUFEZWxpbVRva2VuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBRGVsaW1Ub2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogMiwgdGV4dDogdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrK10gfTtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBV2hpdGVzcGFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpdGVzcGFjZVJlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHdoaXRlc3BhY2VSZWdFeC5leGVjKHRoaXMudGV4dCk7XG4gICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSB3aGl0ZXNwYWNlUmVnRXgubGFzdEluZGV4O1xuICAgICAgICByZXR1cm4gXCIgXCI7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQUhhc2hUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICB2YXIgaGFzaE5hbWUgPSB0aGlzLmNvbnN1bWVBTmFtZSgpO1xuICAgICAgICBpZiAoaGFzaE5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDEyLCB0ZXh0OiBcIiNcIiArIGhhc2hOYW1lLnRleHQgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LS07XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUNETyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dC5zdWJzdHIodGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCwgNCkgPT09IFwiPCEtLVwiKSB7XG4gICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICs9IDQ7XG4gICAgICAgICAgICByZXR1cm4gXCI8IS0tXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQ0RDID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0LnN1YnN0cih0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LCAzKSA9PT0gXCItLT5cIikge1xuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCArPSAzO1xuICAgICAgICAgICAgcmV0dXJuIFwiLS0+XCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQU1hdGNoVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCArIDFdID09PSBcIj1cIikge1xuICAgICAgICAgICAgdmFyIHRva2VuID0gdGhpcy50ZXh0LnN1YnN0cih0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4LCAyKTtcbiAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggKz0gMjtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTnVtZXJpY1Rva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBudW1iZXJSZWdFeC5sYXN0SW5kZXggPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyUmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IG51bWJlclJlZ0V4Lmxhc3RJbmRleDtcbiAgICAgICAgaWYgKHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4XSA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDQsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5jb25zdW1lQU5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6IDUsIHRleHQ6IHJlc3VsdFswXSArIG5hbWUudGV4dCB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHR5cGU6IDMsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFuSWRlbnRMaWtlVG9rZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5jb25zdW1lQU5hbWUoKTtcbiAgICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdID09PSBcIihcIikge1xuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgaWYgKG5hbWUudGV4dC50b0xvd2VyQ2FzZSgpID09PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFVUkxUb2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogOCwgbmFtZTogbmFtZS50ZXh0LCB0ZXh0OiBuYW1lLnRleHQgKyBcIihcIiB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFTdHJpbmdUb2tlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNoYXIgPSB0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF07XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmIChjaGFyID09PSBcIidcIikge1xuICAgICAgICAgICAgc2luZ2xlUXVvdGVTdHJpbmdSZWdFeC5sYXN0SW5kZXggPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICAgICAgcmVzdWx0ID0gc2luZ2xlUXVvdGVTdHJpbmdSZWdFeC5leGVjKHRoaXMudGV4dCk7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IHNpbmdsZVF1b3RlU3RyaW5nUmVnRXgubGFzdEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoYXIgPT09IFwiXFxcIlwiKSB7XG4gICAgICAgICAgICBkb3VibGVRdW90ZVN0cmluZ1JlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgICAgICByZXN1bHQgPSBkb3VibGVRdW90ZVN0cmluZ1JlZ0V4LmV4ZWModGhpcy50ZXh0KTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID0gZG91YmxlUXVvdGVTdHJpbmdSZWdFeC5sYXN0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgdHlwZTogMSwgdGV4dDogcmVzdWx0WzBdIH07XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQVVSTFRva2VuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4IC0gMyAtIDE7XG4gICAgICAgIHZhciB1cmxUb2tlbiA9IHsgdHlwZTogNywgdGV4dDogdW5kZWZpbmVkIH07XG4gICAgICAgIHRoaXMuY29uc3VtZUFXaGl0ZXNwYWNlKCk7XG4gICAgICAgIGlmICh0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID49IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmxUb2tlbjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV4dElucHV0Q29kZVBvaW50ID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdO1xuICAgICAgICBpZiAobmV4dElucHV0Q29kZVBvaW50ID09PSBcIlxcXCJcIiB8fCBuZXh0SW5wdXRDb2RlUG9pbnQgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICB2YXIgc3RyaW5nVG9rZW4gPSB0aGlzLmNvbnN1bWVBU3RyaW5nVG9rZW4oKTtcbiAgICAgICAgICAgIHVybFRva2VuLnRleHQgPSBzdHJpbmdUb2tlbi50ZXh0O1xuICAgICAgICAgICAgdGhpcy5jb25zdW1lQVdoaXRlc3BhY2UoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF0gPT09IFwiKVwiIHx8IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPj0gdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgICAgICB1cmxUb2tlbi50ZXh0ID0gdGhpcy50ZXh0LnN1YnN0cmluZyhzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAodGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHZhciBjaGFyID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrK107XG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXIpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiKVwiOiByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFx0XCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJcXHJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFxmXCI6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29uc3VtZUFXaGl0ZXNwYWNlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF0gPT09IFwiKVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsVG9rZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJcXFwiXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIlxcJ1wiOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICBjYXNlIFwiXFxcXFwiOlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFc2NhcGluZyBub3QgeWV0IHN1cHBvcnRlZCFcIik7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdXJsVG9rZW4udGV4dCArPSBjaGFyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1cmxUb2tlbjtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbmFtZVJlZ0V4Lmxhc3RJbmRleCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHZhciByZXN1bHQgPSBuYW1lUmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCA9IG5hbWVSZWdFeC5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiB7IHR5cGU6IDYsIHRleHQ6IHJlc3VsdFswXSB9O1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUF0S2V5d29yZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuY29uc3VtZUFOYW1lKCk7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAxMSwgdGV4dDogbmFtZS50ZXh0IH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleC0tO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBQ29tbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFt0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ICsgMV0gPT09IFwiKlwiKSB7XG4gICAgICAgICAgICBjb21tZW50UmVnRXgubGFzdEluZGV4ID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb21tZW50UmVnRXguZXhlYyh0aGlzLnRleHQpO1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggPSBjb21tZW50UmVnRXgubGFzdEluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3VtZUFUb2tlbigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4gPSBmdW5jdGlvbiAoY3VycmVudElucHV0VG9rZW4pIHtcbiAgICAgICAgdGhpcy5yZWNvbnN1bWVkSW5wdXRUb2tlbiA9IGN1cnJlbnRJbnB1dFRva2VuO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUucGFyc2VBU3R5bGVzaGVldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b3BMZXZlbEZsYWcgPSB0cnVlO1xuICAgICAgICB2YXIgc3R5bGVzaGVldCA9IHtcbiAgICAgICAgICAgIHJ1bGVzOiB0aGlzLmNvbnN1bWVBTGlzdE9mUnVsZXMoKVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3R5bGVzaGVldDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBTGlzdE9mUnVsZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBydWxlcyA9IFtdO1xuICAgICAgICB2YXIgaW5wdXRUb2tlbjtcbiAgICAgICAgd2hpbGUgKGlucHV0VG9rZW4gPSB0aGlzLmNvbnN1bWVBVG9rZW4oKSkge1xuICAgICAgICAgICAgc3dpdGNoIChpbnB1dFRva2VuKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIiBcIjogY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSBcIjwhLS1cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiLS0+XCI6XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRvcExldmVsRmxhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVUaGVDdXJyZW50SW5wdXRUb2tlbihpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0UnVsZSA9IHRoaXMuY29uc3VtZUFuQXRSdWxlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdFJ1bGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goYXRSdWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnB1dFRva2VuLnR5cGUgPT09IDExKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN1bWVUaGVDdXJyZW50SW5wdXRUb2tlbihpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICB2YXIgYXRSdWxlID0gdGhpcy5jb25zdW1lQW5BdFJ1bGUoKTtcbiAgICAgICAgICAgICAgICBpZiAoYXRSdWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGVzLnB1c2goYXRSdWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlY29uc3VtZVRoZUN1cnJlbnRJbnB1dFRva2VuKGlucHV0VG9rZW4pO1xuICAgICAgICAgICAgdmFyIHF1YWxpZmllZFJ1bGUgPSB0aGlzLmNvbnN1bWVBUXVhbGlmaWVkUnVsZSgpO1xuICAgICAgICAgICAgaWYgKHF1YWxpZmllZFJ1bGUpIHtcbiAgICAgICAgICAgICAgICBydWxlcy5wdXNoKHF1YWxpZmllZFJ1bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydWxlcztcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBbkF0UnVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0VG9rZW4gPSB0aGlzLmNvbnN1bWVBVG9rZW4oKTtcbiAgICAgICAgdmFyIGF0UnVsZSA9IHtcbiAgICAgICAgICAgIHR5cGU6IFwiYXQtcnVsZVwiLFxuICAgICAgICAgICAgbmFtZTogaW5wdXRUb2tlbi50ZXh0LFxuICAgICAgICAgICAgcHJlbHVkZTogW10sXG4gICAgICAgICAgICBibG9jazogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHdoaWxlIChpbnB1dFRva2VuID0gdGhpcy5jb25zdW1lQVRva2VuKCkpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjtcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdFJ1bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbnB1dFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgIGF0UnVsZS5ibG9jayA9IHRoaXMuY29uc3VtZUFTaW1wbGVCbG9jayhpbnB1dFRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXRSdWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXRUb2tlbi50eXBlID09PSA5ICYmIGlucHV0VG9rZW4uYXNzb2NpYXRlZFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgIGF0UnVsZS5ibG9jayA9IGlucHV0VG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF0UnVsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4oaW5wdXRUb2tlbik7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gdGhpcy5jb25zdW1lQUNvbXBvbmVudFZhbHVlKCk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgICAgICAgYXRSdWxlLnByZWx1ZGUucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhdFJ1bGU7XG4gICAgfTtcbiAgICBDU1MzUGFyc2VyLnByb3RvdHlwZS5jb25zdW1lQVF1YWxpZmllZFJ1bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBxdWFsaWZpZWRSdWxlID0ge1xuICAgICAgICAgICAgdHlwZTogXCJxdWFsaWZpZWQtcnVsZVwiLFxuICAgICAgICAgICAgcHJlbHVkZTogW10sXG4gICAgICAgICAgICBibG9jazogdW5kZWZpbmVkXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbnB1dFRva2VuO1xuICAgICAgICB3aGlsZSAoaW5wdXRUb2tlbiA9IHRoaXMuY29uc3VtZUFUb2tlbigpKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXRUb2tlbiA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2sgPSB0aGlzLmNvbnN1bWVBU2ltcGxlQmxvY2soaW5wdXRUb2tlbik7XG4gICAgICAgICAgICAgICAgcXVhbGlmaWVkUnVsZS5ibG9jayA9IGJsb2NrO1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaWZpZWRSdWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaW5wdXRUb2tlbi50eXBlID09PSA5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpbXBsZUJsb2NrID0gaW5wdXRUb2tlbjtcbiAgICAgICAgICAgICAgICBpZiAoc2ltcGxlQmxvY2suYXNzb2NpYXRlZFRva2VuID09PSBcIntcIikge1xuICAgICAgICAgICAgICAgICAgICBxdWFsaWZpZWRSdWxlLmJsb2NrID0gc2ltcGxlQmxvY2s7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxdWFsaWZpZWRSdWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVjb25zdW1lVGhlQ3VycmVudElucHV0VG9rZW4oaW5wdXRUb2tlbik7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50VmFsdWUgPSB0aGlzLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHF1YWxpZmllZFJ1bGUucHJlbHVkZS5wdXNoKGNvbXBvbmVudFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dFRva2VuID0gdGhpcy5jb25zdW1lQVRva2VuKCk7XG4gICAgICAgIHN3aXRjaCAoaW5wdXRUb2tlbikge1xuICAgICAgICAgICAgY2FzZSBcIntcIjpcbiAgICAgICAgICAgIGNhc2UgXCJbXCI6XG4gICAgICAgICAgICBjYXNlIFwiKFwiOlxuICAgICAgICAgICAgICAgIHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXgrKztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdW1lQVNpbXBsZUJsb2NrKGlucHV0VG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaW5wdXRUb2tlbiA9PT0gXCJvYmplY3RcIiAmJiBpbnB1dFRva2VuLnR5cGUgPT09IDgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN1bWVBRnVuY3Rpb24oaW5wdXRUb2tlbi5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXRUb2tlbjtcbiAgICB9O1xuICAgIENTUzNQYXJzZXIucHJvdG90eXBlLmNvbnN1bWVBU2ltcGxlQmxvY2sgPSBmdW5jdGlvbiAoYXNzb2NpYXRlZFRva2VuKSB7XG4gICAgICAgIHZhciBlbmRpYW5Ub2tlbiA9IHtcbiAgICAgICAgICAgIFwiW1wiOiBcIl1cIixcbiAgICAgICAgICAgIFwie1wiOiBcIn1cIixcbiAgICAgICAgICAgIFwiKFwiOiBcIilcIlxuICAgICAgICB9W2Fzc29jaWF0ZWRUb2tlbl07XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXggLSAxO1xuICAgICAgICB2YXIgYmxvY2sgPSB7XG4gICAgICAgICAgICB0eXBlOiA5LFxuICAgICAgICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgYXNzb2NpYXRlZFRva2VuOiBhc3NvY2lhdGVkVG9rZW4sXG4gICAgICAgICAgICB2YWx1ZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHZhciBuZXh0SW5wdXRUb2tlbjtcbiAgICAgICAgd2hpbGUgKG5leHRJbnB1dFRva2VuID0gdGhpcy50ZXh0W3RoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXhdKSB7XG4gICAgICAgICAgICBpZiAobmV4dElucHV0VG9rZW4gPT09IGVuZGlhblRva2VuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSB0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4O1xuICAgICAgICAgICAgICAgIGJsb2NrLnRleHQgPSB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBibG9jaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuY29uc3VtZUFDb21wb25lbnRWYWx1ZSgpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sudmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJsb2NrLnRleHQgPSB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0KTtcbiAgICAgICAgcmV0dXJuIGJsb2NrO1xuICAgIH07XG4gICAgQ1NTM1BhcnNlci5wcm90b3R5cGUuY29uc3VtZUFGdW5jdGlvbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHZhciBzdGFydCA9IHRoaXMubmV4dElucHV0Q29kZVBvaW50SW5kZXg7XG4gICAgICAgIHZhciBmdW5jVG9rZW4gPSB7IHR5cGU6IDE0LCBuYW1lOiBuYW1lLCB0ZXh0OiB1bmRlZmluZWQsIGNvbXBvbmVudHM6IFtdIH07XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRJbnB1dENvZGVQb2ludEluZGV4ID49IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmdW5jVG9rZW4udGV4dCA9IG5hbWUgKyBcIihcIiArIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jVG9rZW47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV4dElucHV0VG9rZW4gPSB0aGlzLnRleHRbdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleF07XG4gICAgICAgICAgICBzd2l0Y2ggKG5leHRJbnB1dFRva2VuKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIilcIjpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kID0gdGhpcy5uZXh0SW5wdXRDb2RlUG9pbnRJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgZnVuY1Rva2VuLnRleHQgPSBuYW1lICsgXCIoXCIgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY1Rva2VuO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aGlzLmNvbnN1bWVBQ29tcG9uZW50VmFsdWUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY1Rva2VuLmNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHRydWUpO1xuICAgIH07XG4gICAgcmV0dXJuIENTUzNQYXJzZXI7XG59KCkpO1xuZXhwb3J0cy5DU1MzUGFyc2VyID0gQ1NTM1BhcnNlcjtcbnZhciBDU1NOYXRpdmVTY3JpcHQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENTU05hdGl2ZVNjcmlwdCgpIHtcbiAgICB9XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5wYXJzZVN0eWxlc2hlZXQgPSBmdW5jdGlvbiAoc3R5bGVzaGVldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJzdHlsZXNoZWV0XCIsXG4gICAgICAgICAgICBzdHlsZXNoZWV0OiB7XG4gICAgICAgICAgICAgICAgcnVsZXM6IHRoaXMucGFyc2VSdWxlcyhzdHlsZXNoZWV0LnJ1bGVzKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5wYXJzZVJ1bGVzID0gZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHsgcmV0dXJuIF90aGlzLnBhcnNlUnVsZShydWxlKTsgfSk7XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIGlmIChydWxlLnR5cGUgPT09IFwiYXQtcnVsZVwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUF0UnVsZShydWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChydWxlLnR5cGUgPT09IFwicXVhbGlmaWVkLXJ1bGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VRdWFsaWZpZWRSdWxlKHJ1bGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlQXRSdWxlID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgaWYgKHJ1bGUubmFtZSA9PT0gXCJpbXBvcnRcIikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpbXBvcnQ6IHJ1bGUucHJlbHVkZS5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIHR5cGVvZiBtID09PSBcInN0cmluZ1wiID8gbSA6IG0udGV4dDsgfSkuam9pbihcIlwiKS50cmltKCksXG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbXBvcnRcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICBDU1NOYXRpdmVTY3JpcHQucHJvdG90eXBlLnBhcnNlUXVhbGlmaWVkUnVsZSA9IGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBcInJ1bGVcIixcbiAgICAgICAgICAgIHNlbGVjdG9yczogdGhpcy5wcmVsdWRlVG9TZWxlY3RvcnNTdHJpbmdBcnJheShydWxlLnByZWx1ZGUpLFxuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiB0aGlzLnJ1bGVCbG9ja1RvRGVjbGFyYXRpb25zKHJ1bGUuYmxvY2sudmFsdWVzKVxuICAgICAgICB9O1xuICAgIH07XG4gICAgQ1NTTmF0aXZlU2NyaXB0LnByb3RvdHlwZS5ydWxlQmxvY2tUb0RlY2xhcmF0aW9ucyA9IGZ1bmN0aW9uIChkZWNsYXJhdGlvbnNJbnB1dFRva2Vucykge1xuICAgICAgICB2YXIgZGVjbGFyYXRpb25zID0gW107XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IFwiXCI7XG4gICAgICAgIHZhciB2YWx1ZSA9IFwiXCI7XG4gICAgICAgIHZhciByZWFkaW5nID0gXCJwcm9wZXJ0eVwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlY2xhcmF0aW9uc0lucHV0VG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRUb2tlbiA9IGRlY2xhcmF0aW9uc0lucHV0VG9rZW5zW2ldO1xuICAgICAgICAgICAgaWYgKHJlYWRpbmcgPT09IFwicHJvcGVydHlcIikge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjpcIikge1xuICAgICAgICAgICAgICAgICAgICByZWFkaW5nID0gXCJ2YWx1ZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5wdXRUb2tlbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSArPSBpbnB1dFRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgKz0gaW5wdXRUb2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dFRva2VuID09PSBcIjtcIikge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSA9IHByb3BlcnR5LnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9ucy5wdXNoKHsgdHlwZTogXCJkZWNsYXJhdGlvblwiLCBwcm9wZXJ0eTogcHJvcGVydHksIHZhbHVlOiB2YWx1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHJlYWRpbmcgPSBcInByb3BlcnR5XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9IGlucHV0VG9rZW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBpbnB1dFRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5ID0gcHJvcGVydHkudHJpbSgpO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgaWYgKHByb3BlcnR5IHx8IHZhbHVlKSB7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnMucHVzaCh7IHR5cGU6IFwiZGVjbGFyYXRpb25cIiwgcHJvcGVydHk6IHByb3BlcnR5LCB2YWx1ZTogdmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlY2xhcmF0aW9ucztcbiAgICB9O1xuICAgIENTU05hdGl2ZVNjcmlwdC5wcm90b3R5cGUucHJlbHVkZVRvU2VsZWN0b3JzU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAocHJlbHVkZSkge1xuICAgICAgICB2YXIgc2VsZWN0b3JzID0gW107XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFwiXCI7XG4gICAgICAgIHByZWx1ZGUuZm9yRWFjaChmdW5jdGlvbiAoaW5wdXRUb2tlbikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0VG9rZW4gPT09IFwiLFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLnB1c2goc2VsZWN0b3IudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciArPSBpbnB1dFRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dFRva2VuID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgKz0gaW5wdXRUb2tlbi50ZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBzZWxlY3RvcnMucHVzaChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWxlY3RvcnM7XG4gICAgfTtcbiAgICByZXR1cm4gQ1NTTmF0aXZlU2NyaXB0O1xufSgpKTtcbmV4cG9ydHMuQ1NTTmF0aXZlU2NyaXB0ID0gQ1NTTmF0aXZlU2NyaXB0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VyLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBfd3JhcHBlZEluZGV4ID0gMDtcbnZhciBXcmFwcGVkVmFsdWUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdyYXBwZWRWYWx1ZSh3cmFwcGVkKSB7XG4gICAgICAgIHRoaXMud3JhcHBlZCA9IHdyYXBwZWQ7XG4gICAgfVxuICAgIFdyYXBwZWRWYWx1ZS51bndyYXAgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFdyYXBwZWRWYWx1ZSkgPyB2YWx1ZS53cmFwcGVkIDogdmFsdWU7XG4gICAgfTtcbiAgICBXcmFwcGVkVmFsdWUud3JhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgdyA9IF93cmFwcGVkVmFsdWVzW193cmFwcGVkSW5kZXgrKyAlIDVdO1xuICAgICAgICB3LndyYXBwZWQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHc7XG4gICAgfTtcbiAgICByZXR1cm4gV3JhcHBlZFZhbHVlO1xufSgpKTtcbmV4cG9ydHMuV3JhcHBlZFZhbHVlID0gV3JhcHBlZFZhbHVlO1xudmFyIF93cmFwcGVkVmFsdWVzID0gW1xuICAgIG5ldyBXcmFwcGVkVmFsdWUobnVsbCksXG4gICAgbmV3IFdyYXBwZWRWYWx1ZShudWxsKSxcbiAgICBuZXcgV3JhcHBlZFZhbHVlKG51bGwpLFxuICAgIG5ldyBXcmFwcGVkVmFsdWUobnVsbCksXG4gICAgbmV3IFdyYXBwZWRWYWx1ZShudWxsKVxuXTtcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKCkge1xuICAgICAgICB0aGlzLl9vYnNlcnZlcnMgPSB7fTtcbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbbmFtZV07XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpc1tuYW1lXTtcbiAgICAgICAgaWYgKHRoaXNbbmFtZV0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gV3JhcHBlZFZhbHVlLnVud3JhcCh2YWx1ZSk7XG4gICAgICAgIHRoaXNbbmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgICAgdGhpcy5ub3RpZnlQcm9wZXJ0eUNoYW5nZShuYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnROYW1lcywgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZXMsIGNhbGxiYWNrLCB0aGlzQXJnKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIHZhciBsaXN0ID0gdGhpcy5fZ2V0RXZlbnRMaXN0KGV2ZW50LCB0cnVlKTtcbiAgICAgICAgbGlzdC5wdXNoKHsgY2FsbGJhY2s6IGNhbGxiYWNrLCB0aGlzQXJnOiB0aGlzQXJnLCBvbmNlOiB0cnVlIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKGV2ZW50TmFtZXMsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWVzLCBjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50TmFtZXMsIGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZXZlbnROYW1lcyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV2ZW50cyBuYW1lKHMpIG11c3QgYmUgc3RyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBtdXN0IGJlIGZ1bmN0aW9uLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnROYW1lcy5zcGxpdChcIixcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50XzEgPSBldmVudHNbaV0udHJpbSgpO1xuICAgICAgICAgICAgdmFyIGxpc3QgPSB0aGlzLl9nZXRFdmVudExpc3QoZXZlbnRfMSwgdHJ1ZSk7XG4gICAgICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgICAgICB0aGlzQXJnOiB0aGlzQXJnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudE5hbWVzLCBjYWxsYmFjaywgdGhpc0FyZykge1xuICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJFdmVudHMgbmFtZShzKSBtdXN0IGJlIHN0cmluZy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgbXVzdCBiZSBmdW5jdGlvbi5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGV2ZW50cyA9IGV2ZW50TmFtZXMuc3BsaXQoXCIsXCIpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBldmVudF8yID0gZXZlbnRzW2ldLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gdGhpcy5fZ2V0RXZlbnRMaXN0KGV2ZW50XzIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAobGlzdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhfMSA9IHRoaXMuX2luZGV4T2ZMaXN0ZW5lcihsaXN0LCBjYWxsYmFjaywgdGhpc0FyZyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmRleF8xID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGluZGV4XzEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29ic2VydmVyc1tldmVudF8yXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyc1tldmVudF8yXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fb2JzZXJ2ZXJzW2V2ZW50XzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5fb2JzZXJ2ZXJzW2RhdGEuZXZlbnROYW1lXTtcbiAgICAgICAgaWYgKCFvYnNlcnZlcnMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gb2JzZXJ2ZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBvYnNlcnZlcnNbaV07XG4gICAgICAgICAgICBpZiAoZW50cnkub25jZSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW50cnkudGhpc0FyZykge1xuICAgICAgICAgICAgICAgIGVudHJ5LmNhbGxiYWNrLmFwcGx5KGVudHJ5LnRoaXNBcmcsIFtkYXRhXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnRyeS5jYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubm90aWZ5UHJvcGVydHlDaGFuZ2UgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMubm90aWZ5KHRoaXMuX2NyZWF0ZVByb3BlcnR5Q2hhbmdlRGF0YShuYW1lLCB2YWx1ZSwgb2xkVmFsdWUpKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmhhc0xpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50TmFtZSBpbiB0aGlzLl9vYnNlcnZlcnM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fY3JlYXRlUHJvcGVydHlDaGFuZ2VEYXRhID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSwgdmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybiB7IGV2ZW50TmFtZTogT2JzZXJ2YWJsZS5wcm9wZXJ0eUNoYW5nZUV2ZW50LCBvYmplY3Q6IHRoaXMsIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLCB2YWx1ZTogdmFsdWUsIG9sZFZhbHVlOiBvbGRWYWx1ZSB9O1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX2VtaXQgPSBmdW5jdGlvbiAoZXZlbnROYW1lcykge1xuICAgICAgICB2YXIgZXZlbnRzID0gZXZlbnROYW1lcy5zcGxpdChcIixcIik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdmFyIGV2ZW50XzMgPSBldmVudHNbaV0udHJpbSgpO1xuICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyBldmVudE5hbWU6IGV2ZW50XzMsIG9iamVjdDogdGhpcyB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX2dldEV2ZW50TGlzdCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNyZWF0ZUlmTmVlZGVkKSB7XG4gICAgICAgIGlmICghZXZlbnROYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRXZlbnROYW1lIG11c3QgYmUgdmFsaWQgc3RyaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGlzdCA9IHRoaXMuX29ic2VydmVyc1tldmVudE5hbWVdO1xuICAgICAgICBpZiAoIWxpc3QgJiYgY3JlYXRlSWZOZWVkZWQpIHtcbiAgICAgICAgICAgIGxpc3QgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX29ic2VydmVyc1tldmVudE5hbWVdID0gbGlzdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9pbmRleE9mTGlzdGVuZXIgPSBmdW5jdGlvbiAobGlzdCwgY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBsaXN0W2ldO1xuICAgICAgICAgICAgaWYgKHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuY2FsbGJhY2sgPT09IGNhbGxiYWNrICYmIGVudHJ5LnRoaXNBcmcgPT09IHRoaXNBcmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmNhbGxiYWNrID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm9wZXJ0eUNoYW5nZUV2ZW50ID0gXCJwcm9wZXJ0eUNoYW5nZVwiO1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IE9ic2VydmFibGU7XG52YXIgT2JzZXJ2YWJsZUZyb21PYmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPYnNlcnZhYmxlRnJvbU9iamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlRnJvbU9iamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9tYXAgPSB7fTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYnNlcnZhYmxlRnJvbU9iamVjdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcFtuYW1lXTtcbiAgICB9O1xuICAgIE9ic2VydmFibGVGcm9tT2JqZWN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuX21hcFtuYW1lXTtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3VmFsdWUgPSBXcmFwcGVkVmFsdWUudW53cmFwKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fbWFwW25hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlDaGFuZ2UobmFtZSwgbmV3VmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZUZyb21PYmplY3Q7XG59KE9ic2VydmFibGUpKTtcbmZ1bmN0aW9uIGRlZmluZU5ld1Byb3BlcnR5KHRhcmdldCwgcHJvcGVydHlOYW1lKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlOYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5fbWFwW3Byb3BlcnR5TmFtZV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0YXJnZXQuc2V0KHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGFkZFByb3BlcnRpZXNGcm9tT2JqZWN0KG9ic2VydmFibGUsIHNvdXJjZSwgcmVjdXJzaXZlKSB7XG4gICAgaWYgKHJlY3Vyc2l2ZSA9PT0gdm9pZCAwKSB7IHJlY3Vyc2l2ZSA9IGZhbHNlOyB9XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZVxuICAgICAgICAgICAgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICAmJiB2YWx1ZVxuICAgICAgICAgICAgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiXG4gICAgICAgICAgICAmJiAhKHZhbHVlIGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gZnJvbU9iamVjdFJlY3Vyc2l2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVmaW5lTmV3UHJvcGVydHkob2JzZXJ2YWJsZSwgcHJvcCk7XG4gICAgICAgIG9ic2VydmFibGUuc2V0KHByb3AsIHZhbHVlKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZyb21PYmplY3Qoc291cmNlKSB7XG4gICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZUZyb21PYmplY3QoKTtcbiAgICBhZGRQcm9wZXJ0aWVzRnJvbU9iamVjdChvYnNlcnZhYmxlLCBzb3VyY2UsIGZhbHNlKTtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmV4cG9ydHMuZnJvbU9iamVjdCA9IGZyb21PYmplY3Q7XG5mdW5jdGlvbiBmcm9tT2JqZWN0UmVjdXJzaXZlKHNvdXJjZSkge1xuICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVGcm9tT2JqZWN0KCk7XG4gICAgYWRkUHJvcGVydGllc0Zyb21PYmplY3Qob2JzZXJ2YWJsZSwgc291cmNlLCB0cnVlKTtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cbmV4cG9ydHMuZnJvbU9iamVjdFJlY3Vyc2l2ZSA9IGZyb21PYmplY3RSZWN1cnNpdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuZXR3b3JrO1xuZnVuY3Rpb24gZ2V0TmV0d29yaygpIHtcbiAgICByZXR1cm4gbmV0d29yaztcbn1cbmV4cG9ydHMuZ2V0TmV0d29yayA9IGdldE5ldHdvcms7XG5mdW5jdGlvbiBzZXROZXR3b3JrKG5ld05ldHdvcmspIHtcbiAgICBuZXR3b3JrID0gbmV3TmV0d29yaztcbn1cbmV4cG9ydHMuc2V0TmV0d29yayA9IHNldE5ldHdvcms7XG52YXIgZG9tO1xuZnVuY3Rpb24gZ2V0RE9NKCkge1xuICAgIHJldHVybiBkb207XG59XG5leHBvcnRzLmdldERPTSA9IGdldERPTTtcbmZ1bmN0aW9uIHNldERPTShuZXdET00pIHtcbiAgICBkb20gPSBuZXdET007XG59XG5leHBvcnRzLnNldERPTSA9IHNldERPTTtcbnZhciBjc3M7XG5mdW5jdGlvbiBnZXRDU1MoKSB7XG4gICAgcmV0dXJuIGNzcztcbn1cbmV4cG9ydHMuZ2V0Q1NTID0gZ2V0Q1NTO1xuZnVuY3Rpb24gc2V0Q1NTKG5ld0NTUykge1xuICAgIGNzcyA9IG5ld0NTUztcbn1cbmV4cG9ydHMuc2V0Q1NTID0gc2V0Q1NTO1xudmFyIE5ldHdvcmtBZ2VudDtcbihmdW5jdGlvbiAoTmV0d29ya0FnZW50KSB7XG4gICAgZnVuY3Rpb24gcmVzcG9uc2VSZWNlaXZlZChyZXF1ZXN0SWQsIHJlc3VsdCwgaGVhZGVycykge1xuICAgICAgICB2YXIgcmVxdWVzdElkU3RyID0gcmVxdWVzdElkLnRvU3RyaW5nKCk7XG4gICAgICAgIHZhciBtaW1lVHlwZSA9IGhlYWRlcnNbXCJDb250ZW50LVR5cGVcIl0gfHwgaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSB8fCBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiO1xuICAgICAgICB2YXIgY29udGVudExlbmd0aEhlYWRlciA9IGhlYWRlcnNbXCJDb250ZW50LUxlbmd0aFwiXSB8fCBoZWFkZXJzW1wiY29udGVudC1sZW5ndGhcIl07XG4gICAgICAgIHZhciBjb250ZW50TGVuZ3RoID0gcGFyc2VJbnQoY29udGVudExlbmd0aEhlYWRlciwgMTApO1xuICAgICAgICBpZiAoaXNOYU4oY29udGVudExlbmd0aCkpIHtcbiAgICAgICAgICAgIGNvbnRlbnRMZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHVybDogcmVzdWx0LnVybCB8fCBcIlwiLFxuICAgICAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3VsdC5zdGF0dXNUZXh0IHx8IFwiXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxuICAgICAgICAgICAgbWltZVR5cGU6IG1pbWVUeXBlLFxuICAgICAgICAgICAgZnJvbURpc2tDYWNoZTogZmFsc2UsXG4gICAgICAgICAgICBjb25uZWN0aW9uUmV1c2VkOiB0cnVlLFxuICAgICAgICAgICAgY29ubmVjdGlvbklkOiAwLFxuICAgICAgICAgICAgZW5jb2RlZERhdGFMZW5ndGg6IGNvbnRlbnRMZW5ndGgsXG4gICAgICAgICAgICBzZWN1cml0eVN0YXRlOiBcImluZm9cIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVzcG9uc2VEYXRhID0ge1xuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWRTdHIsXG4gICAgICAgICAgICB0eXBlOiBtaW1lVHlwZVRvVHlwZShyZXNwb25zZS5taW1lVHlwZSksXG4gICAgICAgICAgICByZXNwb25zZTogcmVzcG9uc2UsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGdldFRpbWVTdGFtcCgpXG4gICAgICAgIH07XG4gICAgICAgIGdsb2JhbC5fX2luc3BlY3Rvci5yZXNwb25zZVJlY2VpdmVkKHJlc3BvbnNlRGF0YSk7XG4gICAgICAgIGdsb2JhbC5fX2luc3BlY3Rvci5sb2FkaW5nRmluaXNoZWQoe1xuICAgICAgICAgICAgcmVxdWVzdElkOiByZXF1ZXN0SWRTdHIsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGdldFRpbWVTdGFtcCgpLFxuICAgICAgICAgICAgZW5jb2RlZERhdGFMZW5ndGg6IGNvbnRlbnRMZW5ndGhcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBoYXNUZXh0Q29udGVudCA9IHJlc3BvbnNlRGF0YS50eXBlID09PSBcIkRvY3VtZW50XCIgfHwgcmVzcG9uc2VEYXRhLnR5cGUgPT09IFwiU2NyaXB0XCI7XG4gICAgICAgIHZhciBkYXRhO1xuICAgICAgICBpZiAoIWhhc1RleHRDb250ZW50KSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VEYXRhLnR5cGUgPT09IFwiSW1hZ2VcIikge1xuICAgICAgICAgICAgICAgIHZhciBiaXRtYXAgPSByZXN1bHQucmVzcG9uc2VBc0ltYWdlO1xuICAgICAgICAgICAgICAgIGlmIChiaXRtYXApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG91dHB1dFN0cmVhbSA9IG5ldyBqYXZhLmlvLkJ5dGVBcnJheU91dHB1dFN0cmVhbSgpO1xuICAgICAgICAgICAgICAgICAgICBiaXRtYXAuY29tcHJlc3MoYW5kcm9pZC5ncmFwaGljcy5CaXRtYXAuQ29tcHJlc3NGb3JtYXQuUE5HLCAxMDAsIG91dHB1dFN0cmVhbSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXNlNjRJbWFnZSA9IGFuZHJvaWQudXRpbC5CYXNlNjQuZW5jb2RlVG9TdHJpbmcob3V0cHV0U3RyZWFtLnRvQnl0ZUFycmF5KCksIGFuZHJvaWQudXRpbC5CYXNlNjQuREVGQVVMVCk7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBiYXNlNjRJbWFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkYXRhID0gcmVzdWx0LnJlc3BvbnNlQXNTdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1Y2Nlc3NmdWxSZXF1ZXN0RGF0YSA9IHtcbiAgICAgICAgICAgIHJlcXVlc3RJZDogcmVxdWVzdElkU3RyLFxuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGhhc1RleHRDb250ZW50OiBoYXNUZXh0Q29udGVudFxuICAgICAgICB9O1xuICAgICAgICBnbG9iYWwuX19pbnNwZWN0b3IuZGF0YUZvclJlcXVlc3RJZChzdWNjZXNzZnVsUmVxdWVzdERhdGEpO1xuICAgIH1cbiAgICBOZXR3b3JrQWdlbnQucmVzcG9uc2VSZWNlaXZlZCA9IHJlc3BvbnNlUmVjZWl2ZWQ7XG4gICAgZnVuY3Rpb24gcmVxdWVzdFdpbGxCZVNlbnQocmVxdWVzdElkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybCxcbiAgICAgICAgICAgIG1ldGhvZDogb3B0aW9ucy5tZXRob2QsXG4gICAgICAgICAgICBoZWFkZXJzOiBvcHRpb25zLmhlYWRlcnMgfHwge30sXG4gICAgICAgICAgICBwb3N0RGF0YTogb3B0aW9ucy5jb250ZW50ID8gb3B0aW9ucy5jb250ZW50LnRvU3RyaW5nKCkgOiBcIlwiLFxuICAgICAgICAgICAgaW5pdGlhbFByaW9yaXR5OiBcIk1lZGl1bVwiLFxuICAgICAgICAgICAgcmVmZXJyZXJQb2xpY3k6IFwibm8tcmVmZXJyZXItd2hlbi1kb3duZ3JhZGVcIlxuICAgICAgICB9O1xuICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICByZXF1ZXN0SWQ6IHJlcXVlc3RJZC50b1N0cmluZygpLFxuICAgICAgICAgICAgdXJsOiByZXF1ZXN0LnVybCxcbiAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IGdldFRpbWVTdGFtcCgpLFxuICAgICAgICAgICAgdHlwZTogXCJEb2N1bWVudFwiLFxuICAgICAgICAgICAgd2FsbFRpbWU6IDBcbiAgICAgICAgfTtcbiAgICAgICAgZ2xvYmFsLl9faW5zcGVjdG9yLnJlcXVlc3RXaWxsQmVTZW50KHJlcXVlc3REYXRhKTtcbiAgICB9XG4gICAgTmV0d29ya0FnZW50LnJlcXVlc3RXaWxsQmVTZW50ID0gcmVxdWVzdFdpbGxCZVNlbnQ7XG4gICAgZnVuY3Rpb24gZ2V0VGltZVN0YW1wKCkge1xuICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKCk7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGQuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1pbWVUeXBlVG9UeXBlKG1pbWVUeXBlKSB7XG4gICAgICAgIHZhciB0eXBlID0gXCJEb2N1bWVudFwiO1xuICAgICAgICBpZiAobWltZVR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtaW1lVHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gXCJJbWFnZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWltZVR5cGUuaW5kZXhPZihcImphdmFzY3JpcHRcIikgIT09IC0xIHx8IG1pbWVUeXBlLmluZGV4T2YoXCJqc29uXCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHR5cGUgPSBcIlNjcmlwdFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbn0pKE5ldHdvcmtBZ2VudCA9IGV4cG9ydHMuTmV0d29ya0FnZW50IHx8IChleHBvcnRzLk5ldHdvcmtBZ2VudCA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJ1Z2dlci5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdGV4dF8xID0gcmVxdWlyZShcIi4uL3RleHRcIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc1wiKTtcbnZhciBGaWxlU3lzdGVtQWNjZXNzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWxlU3lzdGVtQWNjZXNzKCkge1xuICAgICAgICB0aGlzLnJlYWRUZXh0ID0gdGhpcy5yZWFkVGV4dFN5bmMuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5yZWFkID0gdGhpcy5yZWFkU3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLndyaXRlVGV4dCA9IHRoaXMud3JpdGVUZXh0U3luYy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLndyaXRlID0gdGhpcy53cml0ZVN5bmMuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuZ2V0TGFzdE1vZGlmaWVkID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGZpbGVNYW5hZ2VyID0gTlNGaWxlTWFuYWdlci5kZWZhdWx0TWFuYWdlcjtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBmaWxlTWFuYWdlci5hdHRyaWJ1dGVzT2ZJdGVtQXRQYXRoRXJyb3IocGF0aCk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcy5vYmplY3RGb3JLZXkoXCJOU0ZpbGVNb2RpZmljYXRpb25EYXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldEZpbGVTaXplID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGZpbGVNYW5hZ2VyID0gTlNGaWxlTWFuYWdlci5kZWZhdWx0TWFuYWdlcjtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBmaWxlTWFuYWdlci5hdHRyaWJ1dGVzT2ZJdGVtQXRQYXRoRXJyb3IocGF0aCk7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXR0cmlidXRlcy5vYmplY3RGb3JLZXkoXCJOU0ZpbGVTaXplXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uIChwYXRoLCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICAgICAgdmFyIG5zU3RyaW5nID0gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyhwYXRoKTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRQYXRoID0gbnNTdHJpbmcuc3RyaW5nQnlEZWxldGluZ0xhc3RQYXRoQ29tcG9uZW50O1xuICAgICAgICAgICAgdmFyIG5hbWVfMSA9IGZpbGVNYW5hZ2VyLmRpc3BsYXlOYW1lQXRQYXRoKHBhcmVudFBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXJlbnRQYXRoLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZV8xXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihleGNlcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuZ2V0RmlsZSA9IGZ1bmN0aW9uIChwYXRoLCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICAgICAgdmFyIGV4aXN0cyA9IGZpbGVNYW5hZ2VyLmZpbGVFeGlzdHNBdFBhdGgocGF0aCk7XG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnRQYXRoID0gdGhpcy5nZXRQYXJlbnQocGF0aCwgb25FcnJvcikucGF0aDtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGVNYW5hZ2VyLmNyZWF0ZURpcmVjdG9yeUF0UGF0aFdpdGhJbnRlcm1lZGlhdGVEaXJlY3Rvcmllc0F0dHJpYnV0ZXNFcnJvcihwYXJlbnRQYXRoLCB0cnVlLCBudWxsKVxuICAgICAgICAgICAgICAgICAgICB8fCAhZmlsZU1hbmFnZXIuY3JlYXRlRmlsZUF0UGF0aENvbnRlbnRzQXR0cmlidXRlcyhwYXRoLCBudWxsLCBudWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGZpbGUgYXQgcGF0aCAnXCIgKyBwYXRoICsgXCInXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IGZpbGVNYW5hZ2VyLmRpc3BsYXlOYW1lQXRQYXRoKHBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgICAgICAgIG5hbWU6IGZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbjogdGhpcy5nZXRGaWxlRXh0ZW5zaW9uKHBhdGgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihleGNlcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuZ2V0Rm9sZGVyID0gZnVuY3Rpb24gKHBhdGgsIG9uRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBmaWxlTWFuYWdlciA9IE5TRmlsZU1hbmFnZXIuZGVmYXVsdE1hbmFnZXI7XG4gICAgICAgICAgICB2YXIgZXhpc3RzID0gdGhpcy5mb2xkZXJFeGlzdHMocGF0aCk7XG4gICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVNYW5hZ2VyLmNyZWF0ZURpcmVjdG9yeUF0UGF0aFdpdGhJbnRlcm1lZGlhdGVEaXJlY3Rvcmllc0F0dHJpYnV0ZXNFcnJvcihwYXRoLCB0cnVlLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgZm9sZGVyIGF0IHBhdGggJ1wiICsgcGF0aCArIFwiJzogXCIgKyBleCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpck5hbWUgPSBmaWxlTWFuYWdlci5kaXNwbGF5TmFtZUF0UGF0aChwYXRoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICBuYW1lOiBkaXJOYW1lXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgZm9sZGVyIGF0IHBhdGggJ1wiICsgcGF0aCArIFwiJ1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXRFeGlzdGluZ0ZvbGRlciA9IGZ1bmN0aW9uIChwYXRoLCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICAgICAgdmFyIGV4aXN0cyA9IHRoaXMuZm9sZGVyRXhpc3RzKHBhdGgpO1xuICAgICAgICAgICAgaWYgKGV4aXN0cykge1xuICAgICAgICAgICAgICAgIHZhciBkaXJOYW1lID0gZmlsZU1hbmFnZXIuZGlzcGxheU5hbWVBdFBhdGgocGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGlyTmFtZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgZm9sZGVyIGF0IHBhdGggJ1wiICsgcGF0aCArIFwiJ1wiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5lYWNoRW50aXR5ID0gZnVuY3Rpb24gKHBhdGgsIG9uRW50aXR5LCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghb25FbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVudW1FbnRpdGllcyhwYXRoLCBvbkVudGl0eSwgb25FcnJvcik7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXRFbnRpdGllcyA9IGZ1bmN0aW9uIChwYXRoLCBvbkVycm9yKSB7XG4gICAgICAgIHZhciBmaWxlSW5mb3MgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdmFyIG9uRW50aXR5ID0gZnVuY3Rpb24gKGVudGl0eSkge1xuICAgICAgICAgICAgZmlsZUluZm9zLnB1c2goZW50aXR5KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgZXJyb3JPY2N1cnJlZDtcbiAgICAgICAgdmFyIGxvY2FsRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlcnJvck9jY3VycmVkID0gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5lbnVtRW50aXRpZXMocGF0aCwgb25FbnRpdHksIGxvY2FsRXJyb3IpO1xuICAgICAgICBpZiAoIWVycm9yT2NjdXJyZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlSW5mb3M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5maWxlRXhpc3RzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuZXhpc3RzKHBhdGgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmV4aXN0cztcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmZvbGRlckV4aXN0cyA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmV4aXN0cyhwYXRoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5leGlzdHMgJiYgcmVzdWx0LmlzRGlyZWN0b3J5O1xuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuZXhpc3RzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGZpbGVNYW5hZ2VyID0gTlNGaWxlTWFuYWdlci5kZWZhdWx0TWFuYWdlcjtcbiAgICAgICAgdmFyIGlzRGlyZWN0b3J5ID0gbmV3IGludGVyb3AuUmVmZXJlbmNlKGludGVyb3AudHlwZXMuYm9vbCwgZmFsc2UpO1xuICAgICAgICB2YXIgZXhpc3RzID0gZmlsZU1hbmFnZXIuZmlsZUV4aXN0c0F0UGF0aElzRGlyZWN0b3J5KHBhdGgsIGlzRGlyZWN0b3J5KTtcbiAgICAgICAgcmV0dXJuIHsgZXhpc3RzOiBleGlzdHMsIGlzRGlyZWN0b3J5OiBpc0RpcmVjdG9yeS52YWx1ZSB9O1xuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuY29uY2F0UGF0aCA9IGZ1bmN0aW9uIChsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gTlNTdHJpbmcucGF0aFdpdGhDb21wb25lbnRzKFtsZWZ0LCByaWdodF0pLnRvU3RyaW5nKCk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKHBhdGgsIG9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5kZWxldGVFbnRpdHkocGF0aCwgb25FcnJvcik7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5kZWxldGVGb2xkZXIgPSBmdW5jdGlvbiAocGF0aCwgb25FcnJvcikge1xuICAgICAgICB0aGlzLmRlbGV0ZUVudGl0eShwYXRoLCBvbkVycm9yKTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmVtcHR5Rm9sZGVyID0gZnVuY3Rpb24gKHBhdGgsIG9uRXJyb3IpIHtcbiAgICAgICAgdmFyIGZpbGVNYW5hZ2VyID0gTlNGaWxlTWFuYWdlci5kZWZhdWx0TWFuYWdlcjtcbiAgICAgICAgdmFyIGVudGl0aWVzID0gdGhpcy5nZXRFbnRpdGllcyhwYXRoLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKCFlbnRpdGllcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZmlsZU1hbmFnZXIucmVtb3ZlSXRlbUF0UGF0aEVycm9yKGVudGl0aWVzW2ldLnBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZW1wdHkgZm9sZGVyICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5yZW5hbWUgPSBmdW5jdGlvbiAocGF0aCwgbmV3UGF0aCwgb25FcnJvcikge1xuICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmlsZU1hbmFnZXIubW92ZUl0ZW1BdFBhdGhUb1BhdGhFcnJvcihwYXRoLCBuZXdQYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVuYW1lICdcIiArIHBhdGggKyBcIicgdG8gJ1wiICsgbmV3UGF0aCArIFwiJzogXCIgKyBleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXRMb2dpY2FsUm9vdFBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtYWluQnVuZGxlUGF0aCA9IE5TQnVuZGxlLm1haW5CdW5kbGUuYnVuZGxlUGF0aDtcbiAgICAgICAgdmFyIHJlc29sdmVkUGF0aCA9IE5TU3RyaW5nLnN0cmluZ1dpdGhTdHJpbmcobWFpbkJ1bmRsZVBhdGgpLnN0cmluZ0J5UmVzb2x2aW5nU3ltbGlua3NJblBhdGg7XG4gICAgICAgIHJldHVybiByZXNvbHZlZFBhdGg7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXREb2N1bWVudHNGb2xkZXJQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRLbm93blBhdGgoOSk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXRUZW1wRm9sZGVyUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0S25vd25QYXRoKDEzKTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldEN1cnJlbnRBcHBQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdXRpbHNfMS5pb3MuZ2V0Q3VycmVudEFwcFBhdGgoKTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLnJlYWRUZXh0QXN5bmMgPSBmdW5jdGlvbiAocGF0aCwgZW5jb2RpbmcpIHtcbiAgICAgICAgdmFyIGFjdHVhbEVuY29kaW5nID0gZW5jb2RpbmcgfHwgdGV4dF8xLmVuY29kaW5nLlVURl84O1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBOU1N0cmluZy5zdHJpbmdXaXRoQ29udGVudHNPZkZpbGVFbmNvZGluZ0NvbXBsZXRpb24ocGF0aCwgYWN0dWFsRW5jb2RpbmcsIGZ1bmN0aW9uIChyZXN1bHQsIGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlYWQgZmlsZSBhdCBwYXRoICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5yZWFkVGV4dFN5bmMgPSBmdW5jdGlvbiAocGF0aCwgb25FcnJvciwgZW5jb2RpbmcpIHtcbiAgICAgICAgdmFyIGFjdHVhbEVuY29kaW5nID0gZW5jb2RpbmcgfHwgdGV4dF8xLmVuY29kaW5nLlVURl84O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIG5zU3RyaW5nID0gTlNTdHJpbmcuc3RyaW5nV2l0aENvbnRlbnRzT2ZGaWxlRW5jb2RpbmdFcnJvcihwYXRoLCBhY3R1YWxFbmNvZGluZyk7XG4gICAgICAgICAgICByZXR1cm4gbnNTdHJpbmcudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmVhZCBmaWxlIGF0IHBhdGggJ1wiICsgcGF0aCArIFwiJzogXCIgKyBleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5yZWFkQXN5bmMgPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBOU0RhdGEuZGF0YVdpdGhDb250ZW50c09mRmlsZUNvbXBsZXRpb24ocGF0aCwgcmVzb2x2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlYWQgZmlsZSBhdCBwYXRoICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5yZWFkU3luYyA9IGZ1bmN0aW9uIChwYXRoLCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gTlNEYXRhLmRhdGFXaXRoQ29udGVudHNPZkZpbGUocGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IobmV3IEVycm9yKFwiRmFpbGVkIHRvIHJlYWQgZmlsZSBhdCBwYXRoICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUud3JpdGVUZXh0QXN5bmMgPSBmdW5jdGlvbiAocGF0aCwgY29udGVudCwgZW5jb2RpbmcpIHtcbiAgICAgICAgdmFyIG5zU3RyaW5nID0gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyhjb250ZW50KTtcbiAgICAgICAgdmFyIGFjdHVhbEVuY29kaW5nID0gZW5jb2RpbmcgfHwgdGV4dF8xLmVuY29kaW5nLlVURl84O1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBuc1N0cmluZy53cml0ZVRvRmlsZUF0b21pY2FsbHlFbmNvZGluZ0NvbXBsZXRpb24ocGF0aCwgdHJ1ZSwgYWN0dWFsRW5jb2RpbmcsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gd3JpdGUgZmlsZSBhdCBwYXRoICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS53cml0ZVRleHRTeW5jID0gZnVuY3Rpb24gKHBhdGgsIGNvbnRlbnQsIG9uRXJyb3IsIGVuY29kaW5nKSB7XG4gICAgICAgIHZhciBuc1N0cmluZyA9IE5TU3RyaW5nLnN0cmluZ1dpdGhTdHJpbmcoY29udGVudCk7XG4gICAgICAgIHZhciBhY3R1YWxFbmNvZGluZyA9IGVuY29kaW5nIHx8IHRleHRfMS5lbmNvZGluZy5VVEZfODtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG5zU3RyaW5nLndyaXRlVG9GaWxlQXRvbWljYWxseUVuY29kaW5nRXJyb3IocGF0aCwgZmFsc2UsIGFjdHVhbEVuY29kaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gd3JpdGUgdG8gZmlsZSAnXCIgKyBwYXRoICsgXCInOiBcIiArIGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLndyaXRlQXN5bmMgPSBmdW5jdGlvbiAocGF0aCwgY29udGVudCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb250ZW50LndyaXRlVG9GaWxlQXRvbWljYWxseUNvbXBsZXRpb24ocGF0aCwgdHJ1ZSwgZnVuY3Rpb24gKCkgeyByZXNvbHZlKCk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB3cml0ZSBmaWxlIGF0IHBhdGggJ1wiICsgcGF0aCArIFwiJzogXCIgKyBleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLndyaXRlU3luYyA9IGZ1bmN0aW9uIChwYXRoLCBjb250ZW50LCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb250ZW50LndyaXRlVG9GaWxlQXRvbWljYWxseShwYXRoLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJGYWlsZWQgdG8gd3JpdGUgdG8gZmlsZSAnXCIgKyBwYXRoICsgXCInOiBcIiArIGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldEtub3duUGF0aCA9IGZ1bmN0aW9uIChmb2xkZXJUeXBlKSB7XG4gICAgICAgIHZhciBmaWxlTWFuYWdlciA9IE5TRmlsZU1hbmFnZXIuZGVmYXVsdE1hbmFnZXI7XG4gICAgICAgIHZhciBwYXRocyA9IGZpbGVNYW5hZ2VyLlVSTHNGb3JEaXJlY3RvcnlJbkRvbWFpbnMoZm9sZGVyVHlwZSwgMSk7XG4gICAgICAgIHZhciB1cmwgPSBwYXRocy5vYmplY3RBdEluZGV4KDApO1xuICAgICAgICByZXR1cm4gdXJsLnBhdGg7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5nZXRGaWxlRXh0ZW5zaW9uID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgdmFyIGRvdEluZGV4ID0gcGF0aC5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgICAgIGlmIChkb3RJbmRleCAmJiBkb3RJbmRleCA+PSAwICYmIGRvdEluZGV4IDwgcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnN1YnN0cmluZyhkb3RJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5kZWxldGVFbnRpdHkgPSBmdW5jdGlvbiAocGF0aCwgb25FcnJvcikge1xuICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZmlsZU1hbmFnZXIucmVtb3ZlSXRlbUF0UGF0aEVycm9yKHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIkZhaWxlZCB0byBkZWxldGUgZmlsZSBhdCBwYXRoICdcIiArIHBhdGggKyBcIic6IFwiICsgZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuZW51bUVudGl0aWVzID0gZnVuY3Rpb24gKHBhdGgsIGNhbGxiYWNrLCBvbkVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZmlsZU1hbmFnZXIgPSBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyO1xuICAgICAgICAgICAgdmFyIGZpbGVzID0gdm9pZCAwO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmaWxlcyA9IGZpbGVNYW5hZ2VyLmNvbnRlbnRzT2ZEaXJlY3RvcnlBdFBhdGhFcnJvcihwYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IobmV3IEVycm9yKFwiRmFpbGVkIHRvIGVudW0gZmlsZXMgZm9yIGZvbGRlciAnXCIgKyBwYXRoICsgXCInOiBcIiArIGV4KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlsZXMuY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZmlsZXMub2JqZWN0QXRJbmRleChpKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogdGhpcy5jb25jYXRQYXRoKHBhdGgsIGZpbGUpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBmaWxlLFxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb246IFwiXCJcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5mb2xkZXJFeGlzdHModGhpcy5qb2luUGF0aChwYXRoLCBmaWxlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5mby5leHRlbnNpb24gPSB0aGlzLmdldEZpbGVFeHRlbnNpb24oaW5mby5wYXRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHJldFZhbCA9IGNhbGxiYWNrKGluZm8pO1xuICAgICAgICAgICAgICAgIGlmIChyZXRWYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLmdldFBhdGhTZXBhcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIi9cIjtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1BY2Nlc3MucHJvdG90eXBlLm5vcm1hbGl6ZVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgbnNTdHJpbmcgPSBOU1N0cmluZy5zdHJpbmdXaXRoU3RyaW5nKHBhdGgpO1xuICAgICAgICB2YXIgbm9ybWFsaXplZCA9IG5zU3RyaW5nLnN0cmluZ0J5U3RhbmRhcmRpemluZ1BhdGg7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVkO1xuICAgIH07XG4gICAgRmlsZVN5c3RlbUFjY2Vzcy5wcm90b3R5cGUuam9pblBhdGggPSBmdW5jdGlvbiAobGVmdCwgcmlnaHQpIHtcbiAgICAgICAgdmFyIG5zU3RyaW5nID0gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyhsZWZ0KTtcbiAgICAgICAgcmV0dXJuIG5zU3RyaW5nLnN0cmluZ0J5QXBwZW5kaW5nUGF0aENvbXBvbmVudChyaWdodCk7XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtQWNjZXNzLnByb3RvdHlwZS5qb2luUGF0aHMgPSBmdW5jdGlvbiAocGF0aHMpIHtcbiAgICAgICAgcmV0dXJuIHV0aWxzXzEuaW9zLmpvaW5QYXRocy5hcHBseSh1dGlsc18xLmlvcywgcGF0aHMpO1xuICAgIH07XG4gICAgcmV0dXJuIEZpbGVTeXN0ZW1BY2Nlc3M7XG59KCkpO1xuZXhwb3J0cy5GaWxlU3lzdGVtQWNjZXNzID0gRmlsZVN5c3RlbUFjY2Vzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUtc3lzdGVtLWFjY2Vzcy5pb3MuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGZpbGVfc3lzdGVtX2FjY2Vzc18xID0gcmVxdWlyZShcIi4vZmlsZS1zeXN0ZW0tYWNjZXNzXCIpO1xudmFyIHByb2ZpbGluZ18xID0gcmVxdWlyZShcIi4uL3Byb2ZpbGluZ1wiKTtcbnZhciBmaWxlQWNjZXNzO1xuZnVuY3Rpb24gZ2V0RmlsZUFjY2VzcygpIHtcbiAgICBpZiAoIWZpbGVBY2Nlc3MpIHtcbiAgICAgICAgZmlsZUFjY2VzcyA9IG5ldyBmaWxlX3N5c3RlbV9hY2Nlc3NfMS5GaWxlU3lzdGVtQWNjZXNzKCk7XG4gICAgfVxuICAgIHJldHVybiBmaWxlQWNjZXNzO1xufVxudmFyIHBsYXRmb3JtO1xuZnVuY3Rpb24gZW5zdXJlUGxhdGZvcm0oKSB7XG4gICAgaWYgKCFwbGF0Zm9ybSkge1xuICAgICAgICBwbGF0Zm9ybSA9IHJlcXVpcmUoXCIuLi9wbGF0Zm9ybVwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVGaWxlKGluZm8pIHtcbiAgICB2YXIgZmlsZSA9IG5ldyBGaWxlKCk7XG4gICAgZmlsZS5fcGF0aCA9IGluZm8ucGF0aDtcbiAgICBmaWxlLl9uYW1lID0gaW5mby5uYW1lO1xuICAgIGZpbGUuX2V4dGVuc2lvbiA9IGluZm8uZXh0ZW5zaW9uO1xuICAgIHJldHVybiBmaWxlO1xufVxuZnVuY3Rpb24gY3JlYXRlRm9sZGVyKGluZm8pIHtcbiAgICB2YXIgZG9jdW1lbnRzID0ga25vd25Gb2xkZXJzLmRvY3VtZW50cygpO1xuICAgIGlmIChpbmZvLnBhdGggPT09IGRvY3VtZW50cy5wYXRoKSB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudHM7XG4gICAgfVxuICAgIHZhciB0ZW1wID0ga25vd25Gb2xkZXJzLnRlbXAoKTtcbiAgICBpZiAoaW5mby5wYXRoID09PSB0ZW1wLnBhdGgpIHtcbiAgICAgICAgcmV0dXJuIHRlbXA7XG4gICAgfVxuICAgIHZhciBmb2xkZXIgPSBuZXcgRm9sZGVyKCk7XG4gICAgZm9sZGVyLl9wYXRoID0gaW5mby5wYXRoO1xuICAgIGZvbGRlci5fbmFtZSA9IGluZm8ubmFtZTtcbiAgICByZXR1cm4gZm9sZGVyO1xufVxudmFyIEZpbGVTeXN0ZW1FbnRpdHkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGVTeXN0ZW1FbnRpdHkoKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWxlU3lzdGVtRW50aXR5LnByb3RvdHlwZSwgXCJwYXJlbnRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGZvbGRlckluZm8gPSBnZXRGaWxlQWNjZXNzKCkuZ2V0UGFyZW50KHRoaXMucGF0aCwgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoIWZvbGRlckluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZvbGRlcihmb2xkZXJJbmZvKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRmlsZVN5c3RlbUVudGl0eS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLnJlbW92ZVN5bmMobG9jYWxFcnJvcik7XG4gICAgICAgICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1FbnRpdHkucHJvdG90eXBlLnJlbW92ZVN5bmMgPSBmdW5jdGlvbiAob25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5faXNLbm93bikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHsgbWVzc2FnZTogXCJDYW5ub3QgZGVsZXRlIGtub3duIGZvbGRlci5cIiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlsZUFjY2VzcyA9IGdldEZpbGVBY2Nlc3MoKTtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBGaWxlKSB7XG4gICAgICAgICAgICBmaWxlQWNjZXNzLmRlbGV0ZUZpbGUodGhpcy5wYXRoLCBvbkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzIGluc3RhbmNlb2YgRm9sZGVyKSB7XG4gICAgICAgICAgICBmaWxlQWNjZXNzLmRlbGV0ZUZvbGRlcih0aGlzLnBhdGgsIG9uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBGaWxlU3lzdGVtRW50aXR5LnByb3RvdHlwZS5yZW5hbWUgPSBmdW5jdGlvbiAobmV3TmFtZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLnJlbmFtZVN5bmMobmV3TmFtZSwgbG9jYWxFcnJvcik7XG4gICAgICAgICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZpbGVTeXN0ZW1FbnRpdHkucHJvdG90eXBlLnJlbmFtZVN5bmMgPSBmdW5jdGlvbiAobmV3TmFtZSwgb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5faXNLbm93bikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIkNhbm5vdCByZW5hbWUga25vd24gZm9sZGVyLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBhcmVudEZvbGRlciA9IHRoaXMucGFyZW50O1xuICAgICAgICBpZiAoIXBhcmVudEZvbGRlcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKG5ldyBFcnJvcihcIk5vIHBhcmVudCBmb2xkZXIuXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmlsZUFjY2VzcyA9IGdldEZpbGVBY2Nlc3MoKTtcbiAgICAgICAgdmFyIHBhdGggPSBwYXJlbnRGb2xkZXIucGF0aDtcbiAgICAgICAgdmFyIG5ld1BhdGggPSBmaWxlQWNjZXNzLmpvaW5QYXRoKHBhdGgsIG5ld05hbWUpO1xuICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBmaWxlQWNjZXNzLnJlbmFtZSh0aGlzLnBhdGgsIG5ld1BhdGgsIGxvY2FsRXJyb3IpO1xuICAgICAgICB0aGlzLl9wYXRoID0gbmV3UGF0aDtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5ld05hbWU7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgRmlsZSkge1xuICAgICAgICAgICAgdGhpcy5fZXh0ZW5zaW9uID0gZmlsZUFjY2Vzcy5nZXRGaWxlRXh0ZW5zaW9uKG5ld1BhdGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmlsZVN5c3RlbUVudGl0eS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWxlU3lzdGVtRW50aXR5LnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGF0aDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpbGVTeXN0ZW1FbnRpdHkucHJvdG90eXBlLCBcImxhc3RNb2RpZmllZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fbGFzdE1vZGlmaWVkO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sYXN0TW9kaWZpZWQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX2xhc3RNb2RpZmllZCA9IGdldEZpbGVBY2Nlc3MoKS5nZXRMYXN0TW9kaWZpZWQodGhpcy5wYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEZpbGVTeXN0ZW1FbnRpdHk7XG59KCkpO1xuZXhwb3J0cy5GaWxlU3lzdGVtRW50aXR5ID0gRmlsZVN5c3RlbUVudGl0eTtcbnZhciBGaWxlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRmlsZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGaWxlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIEZpbGUuZnJvbVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmaWxlSW5mbyA9IGdldEZpbGVBY2Nlc3MoKS5nZXRGaWxlKHBhdGgsIG9uRXJyb3IpO1xuICAgICAgICBpZiAoIWZpbGVJbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWxlKGZpbGVJbmZvKTtcbiAgICB9O1xuICAgIEZpbGUuZXhpc3RzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGdldEZpbGVBY2Nlc3MoKS5maWxlRXhpc3RzKHBhdGgpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpbGUucHJvdG90eXBlLCBcImV4dGVuc2lvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V4dGVuc2lvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpbGUucHJvdG90eXBlLCBcImlzTG9ja2VkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gISF0aGlzLl9sb2NrZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWxlLnByb3RvdHlwZSwgXCJzaXplXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0RmlsZUFjY2VzcygpLmdldEZpbGVTaXplKHRoaXMucGF0aCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEZpbGUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrQWNjZXNzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgZ2V0RmlsZUFjY2VzcygpLnJlYWRBc3luYyhfdGhpcy5wYXRoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGaWxlLnByb3RvdHlwZS5yZWFkU3luYyA9IGZ1bmN0aW9uIChvbkVycm9yKSB7XG4gICAgICAgIHRoaXMuY2hlY2tBY2Nlc3MoKTtcbiAgICAgICAgdGhpcy5fbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhhdC5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29udGVudCA9IGdldEZpbGVBY2Nlc3MoKS5yZWFkU3luYyh0aGlzLnBhdGgsIGxvY2FsRXJyb3IpO1xuICAgICAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfTtcbiAgICBGaWxlLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrQWNjZXNzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgZ2V0RmlsZUFjY2VzcygpLndyaXRlQXN5bmMoX3RoaXMucGF0aCwgY29udGVudCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRmlsZS5wcm90b3R5cGUud3JpdGVTeW5jID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9uRXJyb3IpIHtcbiAgICAgICAgdGhpcy5jaGVja0FjY2VzcygpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciB0aGF0XzEgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGxvY2FsRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGF0XzEuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnZXRGaWxlQWNjZXNzKCkud3JpdGVTeW5jKHRoaXMucGF0aCwgY29udGVudCwgbG9jYWxFcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRmlsZS5wcm90b3R5cGUucmVhZFRleHQgPSBmdW5jdGlvbiAoZW5jb2RpbmcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hlY2tBY2Nlc3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChleCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2xvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICBnZXRGaWxlQWNjZXNzKCkucmVhZFRleHRBc3luYyhfdGhpcy5wYXRoLCBlbmNvZGluZykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRmlsZS5wcm90b3R5cGUucmVhZFRleHRTeW5jID0gZnVuY3Rpb24gKG9uRXJyb3IsIGVuY29kaW5nKSB7XG4gICAgICAgIHRoaXMuY2hlY2tBY2Nlc3MoKTtcbiAgICAgICAgdGhpcy5fbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhhdC5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAob25FcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY29udGVudCA9IGdldEZpbGVBY2Nlc3MoKS5yZWFkVGV4dFN5bmModGhpcy5wYXRoLCBsb2NhbEVycm9yLCBlbmNvZGluZyk7XG4gICAgICAgIHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9O1xuICAgIEZpbGUucHJvdG90eXBlLndyaXRlVGV4dCA9IGZ1bmN0aW9uIChjb250ZW50LCBlbmNvZGluZykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBfdGhpcy5jaGVja0FjY2VzcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fbG9ja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGdldEZpbGVBY2Nlc3MoKS53cml0ZVRleHRBc3luYyhfdGhpcy5wYXRoLCBjb250ZW50LCBlbmNvZGluZykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9sb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2xvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRmlsZS5wcm90b3R5cGUud3JpdGVUZXh0U3luYyA9IGZ1bmN0aW9uIChjb250ZW50LCBvbkVycm9yLCBlbmNvZGluZykge1xuICAgICAgICB0aGlzLmNoZWNrQWNjZXNzKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLl9sb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIHRoYXRfMiA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgbG9jYWxFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHRoYXRfMi5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdldEZpbGVBY2Nlc3MoKS53cml0ZVRleHRTeW5jKHRoaXMucGF0aCwgY29udGVudCwgbG9jYWxFcnJvciwgZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5fbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEZpbGUucHJvdG90eXBlLmNoZWNrQWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc0xvY2tlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGFjY2VzcyBhIGxvY2tlZCBmaWxlLlwiKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHByb2ZpbGluZ18xLnByb2ZpbGVcbiAgICBdLCBGaWxlLnByb3RvdHlwZSwgXCJyZWFkVGV4dFN5bmNcIiwgbnVsbCk7XG4gICAgcmV0dXJuIEZpbGU7XG59KEZpbGVTeXN0ZW1FbnRpdHkpKTtcbmV4cG9ydHMuRmlsZSA9IEZpbGU7XG52YXIgRm9sZGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9sZGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEZvbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBGb2xkZXIuZnJvbVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmb2xkZXJJbmZvID0gZ2V0RmlsZUFjY2VzcygpLmdldEZvbGRlcihwYXRoLCBvbkVycm9yKTtcbiAgICAgICAgaWYgKCFmb2xkZXJJbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVGb2xkZXIoZm9sZGVySW5mbyk7XG4gICAgfTtcbiAgICBGb2xkZXIuZXhpc3RzID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGdldEZpbGVBY2Nlc3MoKS5mb2xkZXJFeGlzdHMocGF0aCk7XG4gICAgfTtcbiAgICBGb2xkZXIucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGZpbGVBY2Nlc3MgPSBnZXRGaWxlQWNjZXNzKCk7XG4gICAgICAgIHZhciBwYXRoID0gZmlsZUFjY2Vzcy5qb2luUGF0aCh0aGlzLnBhdGgsIG5hbWUpO1xuICAgICAgICBpZiAoZmlsZUFjY2Vzcy5maWxlRXhpc3RzKHBhdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZUFjY2Vzcy5mb2xkZXJFeGlzdHMocGF0aCk7XG4gICAgfTtcbiAgICBGb2xkZXIucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIGhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyU3luYyhvbkVycm9yKTtcbiAgICAgICAgICAgIGlmICghaGFzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRm9sZGVyLnByb3RvdHlwZS5jbGVhclN5bmMgPSBmdW5jdGlvbiAob25FcnJvcikge1xuICAgICAgICBnZXRGaWxlQWNjZXNzKCkuZW1wdHlGb2xkZXIodGhpcy5wYXRoLCBvbkVycm9yKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb2xkZXIucHJvdG90eXBlLCBcImlzS25vd25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0tub3duO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBGb2xkZXIucHJvdG90eXBlLmdldEZpbGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgZmlsZUFjY2VzcyA9IGdldEZpbGVBY2Nlc3MoKTtcbiAgICAgICAgdmFyIHBhdGggPSBmaWxlQWNjZXNzLmpvaW5QYXRoKHRoaXMucGF0aCwgbmFtZSk7XG4gICAgICAgIHZhciBvbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGZpbGVJbmZvID0gZmlsZUFjY2Vzcy5nZXRGaWxlKHBhdGgsIG9uRXJyb3IpO1xuICAgICAgICBpZiAoIWZpbGVJbmZvKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWxlKGZpbGVJbmZvKTtcbiAgICB9O1xuICAgIEZvbGRlci5wcm90b3R5cGUuZ2V0Rm9sZGVyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGZpbGVBY2Nlc3MgPSBnZXRGaWxlQWNjZXNzKCk7XG4gICAgICAgIHZhciBwYXRoID0gZmlsZUFjY2Vzcy5qb2luUGF0aCh0aGlzLnBhdGgsIG5hbWUpO1xuICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBmb2xkZXJJbmZvID0gZmlsZUFjY2Vzcy5nZXRGb2xkZXIocGF0aCwgb25FcnJvcik7XG4gICAgICAgIGlmICghZm9sZGVySW5mbykge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3JlYXRlRm9sZGVyKGZvbGRlckluZm8pO1xuICAgIH07XG4gICAgRm9sZGVyLnByb3RvdHlwZS5nZXRFbnRpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBoYXNFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGxvY2FsRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgZW50aXRpZXMgPSBfdGhpcy5nZXRFbnRpdGllc1N5bmMobG9jYWxFcnJvcik7XG4gICAgICAgICAgICBpZiAoIWhhc0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShlbnRpdGllcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRm9sZGVyLnByb3RvdHlwZS5nZXRFbnRpdGllc1N5bmMgPSBmdW5jdGlvbiAob25FcnJvcikge1xuICAgICAgICB2YXIgZmlsZUluZm9zID0gZ2V0RmlsZUFjY2VzcygpLmdldEVudGl0aWVzKHRoaXMucGF0aCwgb25FcnJvcik7XG4gICAgICAgIGlmICghZmlsZUluZm9zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50aXRpZXMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWxlSW5mb3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChmaWxlSW5mb3NbaV0uZXh0ZW5zaW9uKSB7XG4gICAgICAgICAgICAgICAgZW50aXRpZXMucHVzaChjcmVhdGVGaWxlKGZpbGVJbmZvc1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50aXRpZXMucHVzaChjcmVhdGVGb2xkZXIoZmlsZUluZm9zW2ldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVudGl0aWVzO1xuICAgIH07XG4gICAgRm9sZGVyLnByb3RvdHlwZS5lYWNoRW50aXR5ID0gZnVuY3Rpb24gKG9uRW50aXR5KSB7XG4gICAgICAgIGlmICghb25FbnRpdHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb25TdWNjZXNzID0gZnVuY3Rpb24gKGZpbGVJbmZvKSB7XG4gICAgICAgICAgICB2YXIgZW50aXR5O1xuICAgICAgICAgICAgaWYgKGZpbGVJbmZvLmV4dGVuc2lvbikge1xuICAgICAgICAgICAgICAgIGVudGl0eSA9IGNyZWF0ZUZpbGUoZmlsZUluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW50aXR5ID0gY3JlYXRlRm9sZGVyKGZpbGVJbmZvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvbkVudGl0eShlbnRpdHkpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH07XG4gICAgICAgIGdldEZpbGVBY2Nlc3MoKS5lYWNoRW50aXR5KHRoaXMucGF0aCwgb25TdWNjZXNzLCBvbkVycm9yKTtcbiAgICB9O1xuICAgIHJldHVybiBGb2xkZXI7XG59KEZpbGVTeXN0ZW1FbnRpdHkpKTtcbmV4cG9ydHMuRm9sZGVyID0gRm9sZGVyO1xudmFyIGtub3duRm9sZGVycztcbihmdW5jdGlvbiAoa25vd25Gb2xkZXJzKSB7XG4gICAgdmFyIF9kb2N1bWVudHM7XG4gICAgdmFyIF90ZW1wO1xuICAgIHZhciBfYXBwO1xuICAgIGZ1bmN0aW9uIGRvY3VtZW50cygpIHtcbiAgICAgICAgaWYgKCFfZG9jdW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgcGF0aF8xID0gZ2V0RmlsZUFjY2VzcygpLmdldERvY3VtZW50c0ZvbGRlclBhdGgoKTtcbiAgICAgICAgICAgIF9kb2N1bWVudHMgPSBuZXcgRm9sZGVyKCk7XG4gICAgICAgICAgICBfZG9jdW1lbnRzLl9wYXRoID0gcGF0aF8xO1xuICAgICAgICAgICAgX2RvY3VtZW50cy5faXNLbm93biA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9kb2N1bWVudHM7XG4gICAgfVxuICAgIGtub3duRm9sZGVycy5kb2N1bWVudHMgPSBkb2N1bWVudHM7XG4gICAgZnVuY3Rpb24gdGVtcCgpIHtcbiAgICAgICAgaWYgKCFfdGVtcCkge1xuICAgICAgICAgICAgdmFyIHBhdGhfMiA9IGdldEZpbGVBY2Nlc3MoKS5nZXRUZW1wRm9sZGVyUGF0aCgpO1xuICAgICAgICAgICAgX3RlbXAgPSBuZXcgRm9sZGVyKCk7XG4gICAgICAgICAgICBfdGVtcC5fcGF0aCA9IHBhdGhfMjtcbiAgICAgICAgICAgIF90ZW1wLl9pc0tub3duID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RlbXA7XG4gICAgfVxuICAgIGtub3duRm9sZGVycy50ZW1wID0gdGVtcDtcbiAgICBmdW5jdGlvbiBjdXJyZW50QXBwKCkge1xuICAgICAgICBpZiAoIV9hcHApIHtcbiAgICAgICAgICAgIHZhciBwYXRoXzMgPSBnZXRGaWxlQWNjZXNzKCkuZ2V0Q3VycmVudEFwcFBhdGgoKTtcbiAgICAgICAgICAgIF9hcHAgPSBuZXcgRm9sZGVyKCk7XG4gICAgICAgICAgICBfYXBwLl9wYXRoID0gcGF0aF8zO1xuICAgICAgICAgICAgX2FwcC5faXNLbm93biA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9hcHA7XG4gICAgfVxuICAgIGtub3duRm9sZGVycy5jdXJyZW50QXBwID0gY3VycmVudEFwcDtcbiAgICB2YXIgaW9zO1xuICAgIChmdW5jdGlvbiAoaW9zKSB7XG4gICAgICAgIGZ1bmN0aW9uIF9jaGVja1BsYXRmb3JtKGtub3duRm9sZGVyTmFtZSkge1xuICAgICAgICAgICAgZW5zdXJlUGxhdGZvcm0oKTtcbiAgICAgICAgICAgIGlmICghcGxhdGZvcm0uaXNJT1MpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgXFxcIlwiICsga25vd25Gb2xkZXJOYW1lICsgXCJcXFwiIGtub3duIGZvbGRlciBpcyBhdmFpbGFibGUgb24gaU9TIG9ubHkhXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBfbGlicmFyeTtcbiAgICAgICAgZnVuY3Rpb24gbGlicmFyeSgpIHtcbiAgICAgICAgICAgIF9jaGVja1BsYXRmb3JtKFwibGlicmFyeVwiKTtcbiAgICAgICAgICAgIGlmICghX2xpYnJhcnkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdGb2xkZXJJbmZvID0gZ2V0RXhpc3RpbmdGb2xkZXJJbmZvKDUpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0ZvbGRlckluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgX2xpYnJhcnkgPSBleGlzdGluZ0ZvbGRlckluZm8uZm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICBfbGlicmFyeS5fcGF0aCA9IGV4aXN0aW5nRm9sZGVySW5mby5wYXRoO1xuICAgICAgICAgICAgICAgICAgICBfbGlicmFyeS5faXNLbm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9saWJyYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlvcy5saWJyYXJ5ID0gbGlicmFyeTtcbiAgICAgICAgdmFyIF9kZXZlbG9wZXI7XG4gICAgICAgIGZ1bmN0aW9uIGRldmVsb3BlcigpIHtcbiAgICAgICAgICAgIF9jaGVja1BsYXRmb3JtKFwiZGV2ZWxvcGVyXCIpO1xuICAgICAgICAgICAgaWYgKCFfZGV2ZWxvcGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nRm9sZGVySW5mbyA9IGdldEV4aXN0aW5nRm9sZGVySW5mbyg2KTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdGb2xkZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kZXZlbG9wZXIgPSBleGlzdGluZ0ZvbGRlckluZm8uZm9sZGVyO1xuICAgICAgICAgICAgICAgICAgICBfZGV2ZWxvcGVyLl9wYXRoID0gZXhpc3RpbmdGb2xkZXJJbmZvLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIF9kZXZlbG9wZXIuX2lzS25vd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfZGV2ZWxvcGVyO1xuICAgICAgICB9XG4gICAgICAgIGlvcy5kZXZlbG9wZXIgPSBkZXZlbG9wZXI7XG4gICAgICAgIHZhciBfZGVza3RvcDtcbiAgICAgICAgZnVuY3Rpb24gZGVza3RvcCgpIHtcbiAgICAgICAgICAgIF9jaGVja1BsYXRmb3JtKFwiZGVza3RvcFwiKTtcbiAgICAgICAgICAgIGlmICghX2Rlc2t0b3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdGb2xkZXJJbmZvID0gZ2V0RXhpc3RpbmdGb2xkZXJJbmZvKDEyKTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdGb2xkZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIF9kZXNrdG9wID0gZXhpc3RpbmdGb2xkZXJJbmZvLmZvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgX2Rlc2t0b3AuX3BhdGggPSBleGlzdGluZ0ZvbGRlckluZm8ucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgX2Rlc2t0b3AuX2lzS25vd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfZGVza3RvcDtcbiAgICAgICAgfVxuICAgICAgICBpb3MuZGVza3RvcCA9IGRlc2t0b3A7XG4gICAgICAgIHZhciBfZG93bmxvYWRzO1xuICAgICAgICBmdW5jdGlvbiBkb3dubG9hZHMoKSB7XG4gICAgICAgICAgICBfY2hlY2tQbGF0Zm9ybShcImRvd25sb2Fkc1wiKTtcbiAgICAgICAgICAgIGlmICghX2Rvd25sb2Fkcykge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZvbGRlckluZm8gPSBnZXRFeGlzdGluZ0ZvbGRlckluZm8oMTUpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0ZvbGRlckluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgX2Rvd25sb2FkcyA9IGV4aXN0aW5nRm9sZGVySW5mby5mb2xkZXI7XG4gICAgICAgICAgICAgICAgICAgIF9kb3dubG9hZHMuX3BhdGggPSBleGlzdGluZ0ZvbGRlckluZm8ucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgX2Rvd25sb2Fkcy5faXNLbm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9kb3dubG9hZHM7XG4gICAgICAgIH1cbiAgICAgICAgaW9zLmRvd25sb2FkcyA9IGRvd25sb2FkcztcbiAgICAgICAgdmFyIF9tb3ZpZXM7XG4gICAgICAgIGZ1bmN0aW9uIG1vdmllcygpIHtcbiAgICAgICAgICAgIF9jaGVja1BsYXRmb3JtKFwibW92aWVzXCIpO1xuICAgICAgICAgICAgaWYgKCFfbW92aWVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nRm9sZGVySW5mbyA9IGdldEV4aXN0aW5nRm9sZGVySW5mbygxNyk7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nRm9sZGVySW5mbykge1xuICAgICAgICAgICAgICAgICAgICBfbW92aWVzID0gZXhpc3RpbmdGb2xkZXJJbmZvLmZvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgX21vdmllcy5fcGF0aCA9IGV4aXN0aW5nRm9sZGVySW5mby5wYXRoO1xuICAgICAgICAgICAgICAgICAgICBfbW92aWVzLl9pc0tub3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX21vdmllcztcbiAgICAgICAgfVxuICAgICAgICBpb3MubW92aWVzID0gbW92aWVzO1xuICAgICAgICB2YXIgX211c2ljO1xuICAgICAgICBmdW5jdGlvbiBtdXNpYygpIHtcbiAgICAgICAgICAgIF9jaGVja1BsYXRmb3JtKFwibXVzaWNcIik7XG4gICAgICAgICAgICBpZiAoIV9tdXNpYykge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZvbGRlckluZm8gPSBnZXRFeGlzdGluZ0ZvbGRlckluZm8oMTgpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0ZvbGRlckluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgX211c2ljID0gZXhpc3RpbmdGb2xkZXJJbmZvLmZvbGRlcjtcbiAgICAgICAgICAgICAgICAgICAgX211c2ljLl9wYXRoID0gZXhpc3RpbmdGb2xkZXJJbmZvLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIF9tdXNpYy5faXNLbm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9tdXNpYztcbiAgICAgICAgfVxuICAgICAgICBpb3MubXVzaWMgPSBtdXNpYztcbiAgICAgICAgdmFyIF9waWN0dXJlcztcbiAgICAgICAgZnVuY3Rpb24gcGljdHVyZXMoKSB7XG4gICAgICAgICAgICBfY2hlY2tQbGF0Zm9ybShcInBpY3R1cmVzXCIpO1xuICAgICAgICAgICAgaWYgKCFfcGljdHVyZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdGb2xkZXJJbmZvID0gZ2V0RXhpc3RpbmdGb2xkZXJJbmZvKDE5KTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdGb2xkZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgICAgIF9waWN0dXJlcyA9IGV4aXN0aW5nRm9sZGVySW5mby5mb2xkZXI7XG4gICAgICAgICAgICAgICAgICAgIF9waWN0dXJlcy5fcGF0aCA9IGV4aXN0aW5nRm9sZGVySW5mby5wYXRoO1xuICAgICAgICAgICAgICAgICAgICBfcGljdHVyZXMuX2lzS25vd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBfcGljdHVyZXM7XG4gICAgICAgIH1cbiAgICAgICAgaW9zLnBpY3R1cmVzID0gcGljdHVyZXM7XG4gICAgICAgIHZhciBfc2hhcmVkUHVibGljO1xuICAgICAgICBmdW5jdGlvbiBzaGFyZWRQdWJsaWMoKSB7XG4gICAgICAgICAgICBfY2hlY2tQbGF0Zm9ybShcInNoYXJlZFB1YmxpY1wiKTtcbiAgICAgICAgICAgIGlmICghX3NoYXJlZFB1YmxpYykge1xuICAgICAgICAgICAgICAgIHZhciBleGlzdGluZ0ZvbGRlckluZm8gPSBnZXRFeGlzdGluZ0ZvbGRlckluZm8oMjEpO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZ0ZvbGRlckluZm8pIHtcbiAgICAgICAgICAgICAgICAgICAgX3NoYXJlZFB1YmxpYyA9IGV4aXN0aW5nRm9sZGVySW5mby5mb2xkZXI7XG4gICAgICAgICAgICAgICAgICAgIF9zaGFyZWRQdWJsaWMuX3BhdGggPSBleGlzdGluZ0ZvbGRlckluZm8ucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgX3NoYXJlZFB1YmxpYy5faXNLbm93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIF9zaGFyZWRQdWJsaWM7XG4gICAgICAgIH1cbiAgICAgICAgaW9zLnNoYXJlZFB1YmxpYyA9IHNoYXJlZFB1YmxpYztcbiAgICAgICAgZnVuY3Rpb24gZ2V0RXhpc3RpbmdGb2xkZXJJbmZvKHBhdGhEaXJlY3RvcnkpIHtcbiAgICAgICAgICAgIHZhciBmaWxlQWNjZXNzID0gZ2V0RmlsZUFjY2VzcygpO1xuICAgICAgICAgICAgdmFyIGZvbGRlclBhdGggPSBmaWxlQWNjZXNzLmdldEtub3duUGF0aChwYXRoRGlyZWN0b3J5KTtcbiAgICAgICAgICAgIHZhciBmb2xkZXJJbmZvID0gZmlsZUFjY2Vzcy5nZXRFeGlzdGluZ0ZvbGRlcihmb2xkZXJQYXRoKTtcbiAgICAgICAgICAgIGlmIChmb2xkZXJJbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgZm9sZGVyOiBjcmVhdGVGb2xkZXIoZm9sZGVySW5mbyksXG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IGZvbGRlclBhdGhcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH0pKGlvcyA9IGtub3duRm9sZGVycy5pb3MgfHwgKGtub3duRm9sZGVycy5pb3MgPSB7fSkpO1xufSkoa25vd25Gb2xkZXJzID0gZXhwb3J0cy5rbm93bkZvbGRlcnMgfHwgKGV4cG9ydHMua25vd25Gb2xkZXJzID0ge30pKTtcbnZhciBwYXRoO1xuKGZ1bmN0aW9uIChwYXRoXzQpIHtcbiAgICBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xuICAgICAgICByZXR1cm4gZ2V0RmlsZUFjY2VzcygpLm5vcm1hbGl6ZVBhdGgocGF0aCk7XG4gICAgfVxuICAgIHBhdGhfNC5ub3JtYWxpemUgPSBub3JtYWxpemU7XG4gICAgZnVuY3Rpb24gam9pbigpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXRoc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmaWxlQWNjZXNzID0gZ2V0RmlsZUFjY2VzcygpO1xuICAgICAgICByZXR1cm4gZmlsZUFjY2Vzcy5qb2luUGF0aHMocGF0aHMpO1xuICAgIH1cbiAgICBwYXRoXzQuam9pbiA9IGpvaW47XG4gICAgcGF0aF80LnNlcGFyYXRvciA9IGdldEZpbGVBY2Nlc3MoKS5nZXRQYXRoU2VwYXJhdG9yKCk7XG59KShwYXRoID0gZXhwb3J0cy5wYXRoIHx8IChleHBvcnRzLnBhdGggPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1zeXN0ZW0uanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gZ2V0RmlsZW5hbWVGcm9tVXJsKHVybCkge1xuICAgIHZhciBmcyA9IHJlcXVpcmUoXCIuLi8uLi9maWxlLXN5c3RlbVwiKTtcbiAgICB2YXIgc2xhc2hQb3MgPSB1cmwubGFzdEluZGV4T2YoXCIvXCIpICsgMTtcbiAgICB2YXIgcXVlc3Rpb25NYXJrUG9zID0gdXJsLmxhc3RJbmRleE9mKFwiP1wiKTtcbiAgICB2YXIgYWN0dWFsRmlsZU5hbWU7XG4gICAgaWYgKHF1ZXN0aW9uTWFya1BvcyAhPT0gLTEpIHtcbiAgICAgICAgYWN0dWFsRmlsZU5hbWUgPSB1cmwuc3Vic3RyaW5nKHNsYXNoUG9zLCBxdWVzdGlvbk1hcmtQb3MpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYWN0dWFsRmlsZU5hbWUgPSB1cmwuc3Vic3RyaW5nKHNsYXNoUG9zKTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZzLnBhdGguam9pbihmcy5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCkucGF0aCwgYWN0dWFsRmlsZU5hbWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLmdldEZpbGVuYW1lRnJvbVVybCA9IGdldEZpbGVuYW1lRnJvbVVybDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAtcmVxdWVzdC1jb21tb24uanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHR5cGVzID0gcmVxdWlyZShcIi4uLy4uL3V0aWxzL3R5cGVzXCIpO1xudmFyIGRvbWFpbkRlYnVnZ2VyID0gcmVxdWlyZShcIi4uLy4uL2RlYnVnZ2VyL2RlYnVnZ2VyXCIpO1xudmFyIGh0dHBfcmVxdWVzdF9jb21tb25fMSA9IHJlcXVpcmUoXCIuL2h0dHAtcmVxdWVzdC1jb21tb25cIik7XG52YXIgSHR0cFJlc3BvbnNlRW5jb2Rpbmc7XG4oZnVuY3Rpb24gKEh0dHBSZXNwb25zZUVuY29kaW5nKSB7XG4gICAgSHR0cFJlc3BvbnNlRW5jb2RpbmdbSHR0cFJlc3BvbnNlRW5jb2RpbmdbXCJVVEY4XCJdID0gMF0gPSBcIlVURjhcIjtcbiAgICBIdHRwUmVzcG9uc2VFbmNvZGluZ1tIdHRwUmVzcG9uc2VFbmNvZGluZ1tcIkdCS1wiXSA9IDFdID0gXCJHQktcIjtcbn0pKEh0dHBSZXNwb25zZUVuY29kaW5nID0gZXhwb3J0cy5IdHRwUmVzcG9uc2VFbmNvZGluZyB8fCAoZXhwb3J0cy5IdHRwUmVzcG9uc2VFbmNvZGluZyA9IHt9KSk7XG52YXIgY3VycmVudERldmljZSA9IFVJRGV2aWNlLmN1cnJlbnREZXZpY2U7XG52YXIgZGV2aWNlID0gY3VycmVudERldmljZS51c2VySW50ZXJmYWNlSWRpb20gPT09IDAgPyBcIlBob25lXCIgOiBcIlBhZFwiO1xudmFyIG9zVmVyc2lvbiA9IGN1cnJlbnREZXZpY2Uuc3lzdGVtVmVyc2lvbjtcbnZhciBHRVQgPSBcIkdFVFwiO1xudmFyIFVTRVJfQUdFTlRfSEVBREVSID0gXCJVc2VyLUFnZW50XCI7XG52YXIgVVNFUl9BR0VOVCA9IFwiTW96aWxsYS81LjAgKGlcIiArIGRldmljZSArIFwiOyBDUFUgT1MgXCIgKyBvc1ZlcnNpb24ucmVwbGFjZShcIi5cIiwgXCJfXCIpICsgXCIgbGlrZSBNYWMgT1MgWCkgQXBwbGVXZWJLaXQvNTM2LjI2IChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi9cIiArIG9zVmVyc2lvbiArIFwiIE1vYmlsZS8xMEE1MzU1ZCBTYWZhcmkvODUzNi4yNVwiO1xudmFyIHNlc3Npb25Db25maWcgPSBOU1VSTFNlc3Npb25Db25maWd1cmF0aW9uLmRlZmF1bHRTZXNzaW9uQ29uZmlndXJhdGlvbjtcbnZhciBxdWV1ZSA9IE5TT3BlcmF0aW9uUXVldWUubWFpblF1ZXVlO1xuZnVuY3Rpb24gcGFyc2VKU09OKHNvdXJjZSkge1xuICAgIHZhciBzcmMgPSBzb3VyY2UudHJpbSgpO1xuICAgIGlmIChzcmMubGFzdEluZGV4T2YoXCIpXCIpID09PSBzcmMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzcmMuc3Vic3RyaW5nKHNyYy5pbmRleE9mKFwiKFwiKSArIDEsIHNyYy5sYXN0SW5kZXhPZihcIilcIikpKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04ucGFyc2Uoc3JjKTtcbn1cbnZhciBOU1VSTFNlc3Npb25UYXNrRGVsZWdhdGVJbXBsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTlNVUkxTZXNzaW9uVGFza0RlbGVnYXRlSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOU1VSTFNlc3Npb25UYXNrRGVsZWdhdGVJbXBsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE5TVVJMU2Vzc2lvblRhc2tEZWxlZ2F0ZUltcGwucHJvdG90eXBlLlVSTFNlc3Npb25UYXNrV2lsbFBlcmZvcm1IVFRQUmVkaXJlY3Rpb25OZXdSZXF1ZXN0Q29tcGxldGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgdGFzaywgcmVzcG9uc2UsIHJlcXVlc3QsIGNvbXBsZXRpb25IYW5kbGVyKSB7XG4gICAgICAgIGNvbXBsZXRpb25IYW5kbGVyKG51bGwpO1xuICAgIH07XG4gICAgTlNVUkxTZXNzaW9uVGFza0RlbGVnYXRlSW1wbC5PYmpDUHJvdG9jb2xzID0gW05TVVJMU2Vzc2lvblRhc2tEZWxlZ2F0ZV07XG4gICAgcmV0dXJuIE5TVVJMU2Vzc2lvblRhc2tEZWxlZ2F0ZUltcGw7XG59KE5TT2JqZWN0KSk7XG52YXIgc2Vzc2lvblRhc2tEZWxlZ2F0ZUluc3RhbmNlID0gTlNVUkxTZXNzaW9uVGFza0RlbGVnYXRlSW1wbC5uZXcoKTtcbnZhciBkZWZhdWx0U2Vzc2lvbjtcbmZ1bmN0aW9uIGVuc3VyZURlZmF1bHRTZXNzaW9uKCkge1xuICAgIGlmICghZGVmYXVsdFNlc3Npb24pIHtcbiAgICAgICAgZGVmYXVsdFNlc3Npb24gPSBOU1VSTFNlc3Npb24uc2Vzc2lvbldpdGhDb25maWd1cmF0aW9uRGVsZWdhdGVEZWxlZ2F0ZVF1ZXVlKHNlc3Npb25Db25maWcsIG51bGwsIHF1ZXVlKTtcbiAgICB9XG59XG52YXIgc2Vzc2lvbk5vdEZvbGxvd2luZ1JlZGlyZWN0cztcbmZ1bmN0aW9uIGVuc3VyZVNlc3Npb25Ob3RGb2xsb3dpbmdSZWRpcmVjdHMoKSB7XG4gICAgaWYgKCFzZXNzaW9uTm90Rm9sbG93aW5nUmVkaXJlY3RzKSB7XG4gICAgICAgIHNlc3Npb25Ob3RGb2xsb3dpbmdSZWRpcmVjdHMgPSBOU1VSTFNlc3Npb24uc2Vzc2lvbldpdGhDb25maWd1cmF0aW9uRGVsZWdhdGVEZWxlZ2F0ZVF1ZXVlKHNlc3Npb25Db25maWcsIHNlc3Npb25UYXNrRGVsZWdhdGVJbnN0YW5jZSwgcXVldWUpO1xuICAgIH1cbn1cbnZhciBpbWFnZVNvdXJjZTtcbmZ1bmN0aW9uIGVuc3VyZUltYWdlU291cmNlKCkge1xuICAgIGlmICghaW1hZ2VTb3VyY2UpIHtcbiAgICAgICAgaW1hZ2VTb3VyY2UgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2Utc291cmNlXCIpO1xuICAgIH1cbn1cbnZhciBmcztcbmZ1bmN0aW9uIGVuc3VyZUZpbGVTeXN0ZW0oKSB7XG4gICAgaWYgKCFmcykge1xuICAgICAgICBmcyA9IHJlcXVpcmUoXCIuLi8uLi9maWxlLXN5c3RlbVwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoIW9wdGlvbnMudXJsKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiUmVxdWVzdCB1cmwgd2FzIGVtcHR5LlwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBuZXR3b3JrID0gZG9tYWluRGVidWdnZXIuZ2V0TmV0d29yaygpO1xuICAgICAgICAgICAgdmFyIGRlYnVnUmVxdWVzdF8xID0gbmV0d29yayAmJiBuZXR3b3JrLmNyZWF0ZSgpO1xuICAgICAgICAgICAgdmFyIHVybFJlcXVlc3QgPSBOU011dGFibGVVUkxSZXF1ZXN0LnJlcXVlc3RXaXRoVVJMKE5TVVJMLlVSTFdpdGhTdHJpbmcob3B0aW9ucy51cmwpKTtcbiAgICAgICAgICAgIHVybFJlcXVlc3QuSFRUUE1ldGhvZCA9IHR5cGVzLmlzRGVmaW5lZChvcHRpb25zLm1ldGhvZCkgPyBvcHRpb25zLm1ldGhvZCA6IEdFVDtcbiAgICAgICAgICAgIHVybFJlcXVlc3Quc2V0VmFsdWVGb3JIVFRQSGVhZGVyRmllbGQoVVNFUl9BR0VOVCwgVVNFUl9BR0VOVF9IRUFERVIpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGhlYWRlciBpbiBvcHRpb25zLmhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXJsUmVxdWVzdC5zZXRWYWx1ZUZvckhUVFBIZWFkZXJGaWVsZChvcHRpb25zLmhlYWRlcnNbaGVhZGVyXSArIFwiXCIsIGhlYWRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVzLmlzU3RyaW5nKG9wdGlvbnMuY29udGVudCkgfHwgb3B0aW9ucy5jb250ZW50IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICAgICAgICAgICAgICB1cmxSZXF1ZXN0LkhUVFBCb2R5ID0gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyhvcHRpb25zLmNvbnRlbnQudG9TdHJpbmcoKSkuZGF0YVVzaW5nRW5jb2RpbmcoNCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZXMuaXNOdW1iZXIob3B0aW9ucy50aW1lb3V0KSkge1xuICAgICAgICAgICAgICAgIHVybFJlcXVlc3QudGltZW91dEludGVydmFsID0gb3B0aW9ucy50aW1lb3V0IC8gMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzZXNzaW9uID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHR5cGVzLmlzQm9vbGVhbihvcHRpb25zLmRvbnRGb2xsb3dSZWRpcmVjdHMpICYmIG9wdGlvbnMuZG9udEZvbGxvd1JlZGlyZWN0cykge1xuICAgICAgICAgICAgICAgIGVuc3VyZVNlc3Npb25Ob3RGb2xsb3dpbmdSZWRpcmVjdHMoKTtcbiAgICAgICAgICAgICAgICBzZXNzaW9uID0gc2Vzc2lvbk5vdEZvbGxvd2luZ1JlZGlyZWN0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGVuc3VyZURlZmF1bHRTZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbiA9IGRlZmF1bHRTZXNzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRhdGFUYXNrID0gc2Vzc2lvbi5kYXRhVGFza1dpdGhSZXF1ZXN0Q29tcGxldGlvbkhhbmRsZXIodXJsUmVxdWVzdCwgZnVuY3Rpb24gKGRhdGEsIHJlc3BvbnNlLCBlcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGVycm9yLmxvY2FsaXplZERlc2NyaXB0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZGVyc18xID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5hbGxIZWFkZXJGaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkZXJGaWVsZHMgPSByZXNwb25zZS5hbGxIZWFkZXJGaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJGaWVsZHMuZW51bWVyYXRlS2V5c0FuZE9iamVjdHNVc2luZ0Jsb2NrKGZ1bmN0aW9uIChrZXksIHZhbHVlLCBzdG9wKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkSGVhZGVyKGhlYWRlcnNfMSwga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVidWdSZXF1ZXN0XzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnUmVxdWVzdF8xLm1pbWVUeXBlID0gcmVzcG9uc2UuTUlNRVR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z1JlcXVlc3RfMS5kYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWJ1Z1Jlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogb3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiByZXNwb25zZS5zdGF0dXNDb2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IE5TSFRUUFVSTFJlc3BvbnNlLmxvY2FsaXplZFN0cmluZ0ZvclN0YXR1c0NvZGUocmVzcG9uc2Uuc3RhdHVzQ29kZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyc18xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiByZXNwb25zZS5NSU1FVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tRGlza0NhY2hlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnUmVxdWVzdF8xLnJlc3BvbnNlUmVjZWl2ZWQoZGVidWdSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Z1JlcXVlc3RfMS5sb2FkaW5nRmluaXNoZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXc6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uIChlbmNvZGluZykgeyByZXR1cm4gTlNEYXRhVG9TdHJpbmcoZGF0YSwgZW5jb2RpbmcpOyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvSlNPTjogZnVuY3Rpb24gKGVuY29kaW5nKSB7IHJldHVybiBwYXJzZUpTT04oTlNEYXRhVG9TdHJpbmcoZGF0YSwgZW5jb2RpbmcpKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0ltYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuc3VyZUltYWdlU291cmNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVSUltYWdlLnRuc19kZWNvZGVJbWFnZVdpdGhEYXRhQ29tcGxldGlvbihkYXRhLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgaW1hZ2VTb3VyY2UuSW1hZ2VTb3VyY2UoaW1hZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJSZXNwb25zZSBjb250ZW50IG1heSBub3QgYmUgY29udmVydGVkIHRvIGFuIEltYWdlXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0ZpbGU6IGZ1bmN0aW9uIChkZXN0aW5hdGlvbkZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuc3VyZUZpbGVTeXN0ZW0oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXN0aW5hdGlvbkZpbGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbkZpbGVQYXRoID0gaHR0cF9yZXF1ZXN0X2NvbW1vbl8xLmdldEZpbGVuYW1lRnJvbVVybChvcHRpb25zLnVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBOU0RhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gZnMuRmlsZS5mcm9tUGF0aChkZXN0aW5hdGlvbkZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEud3JpdGVUb0ZpbGVBdG9taWNhbGx5KGRlc3RpbmF0aW9uRmlsZVBhdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKFwiQ2Fubm90IHNhdmUgZmlsZSB3aXRoIHBhdGg6IFwiICsgZGVzdGluYXRpb25GaWxlUGF0aCArIFwiLlwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNfMVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnVybCAmJiBkZWJ1Z1JlcXVlc3RfMSkge1xuICAgICAgICAgICAgICAgIHZhciByZXF1ZXN0XzEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVybDogb3B0aW9ucy51cmwsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogb3B0aW9ucy5oZWFkZXJzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBkZWJ1Z1JlcXVlc3RfMS5yZXF1ZXN0V2lsbEJlU2VudChyZXF1ZXN0XzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YVRhc2sucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZWplY3QoZXgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlcXVlc3QgPSByZXF1ZXN0O1xuZnVuY3Rpb24gTlNEYXRhVG9TdHJpbmcoZGF0YSwgZW5jb2RpbmcpIHtcbiAgICB2YXIgY29kZSA9IE5TVVRGOFN0cmluZ0VuY29kaW5nO1xuICAgIGlmIChlbmNvZGluZyA9PT0gSHR0cFJlc3BvbnNlRW5jb2RpbmcuR0JLKSB7XG4gICAgICAgIGNvZGUgPSAxNTg2O1xuICAgIH1cbiAgICB2YXIgZW5jb2RlZFN0cmluZyA9IE5TU3RyaW5nLmFsbG9jKCkuaW5pdFdpdGhEYXRhRW5jb2RpbmcoZGF0YSwgY29kZSk7XG4gICAgaWYgKCFlbmNvZGVkU3RyaW5nKSB7XG4gICAgICAgIGNvZGUgPSBOU0lTT0xhdGluMVN0cmluZ0VuY29kaW5nO1xuICAgICAgICBlbmNvZGVkU3RyaW5nID0gTlNTdHJpbmcuYWxsb2MoKS5pbml0V2l0aERhdGFFbmNvZGluZyhkYXRhLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuY29kZWRTdHJpbmcudG9TdHJpbmcoKTtcbn1cbmZ1bmN0aW9uIGFkZEhlYWRlcihoZWFkZXJzLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFoZWFkZXJzW2tleV0pIHtcbiAgICAgICAgaGVhZGVyc1trZXldID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVyc1trZXldKSkge1xuICAgICAgICBoZWFkZXJzW2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWVzID0gW2hlYWRlcnNba2V5XV07XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgaGVhZGVyc1trZXldID0gdmFsdWVzO1xuICAgIH1cbn1cbmV4cG9ydHMuYWRkSGVhZGVyID0gYWRkSGVhZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC1yZXF1ZXN0Lmlvcy5qcy5tYXAiLCJmdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGh0dHBSZXF1ZXN0ID0gcmVxdWlyZShcIi4vaHR0cC1yZXF1ZXN0XCIpO1xuX19leHBvcnQocmVxdWlyZShcIi4vaHR0cC1yZXF1ZXN0XCIpKTtcbmZ1bmN0aW9uIGdldFN0cmluZyhhcmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBodHRwUmVxdWVzdC5yZXF1ZXN0KHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgPyB7IHVybDogYXJnLCBtZXRob2Q6IFwiR0VUXCIgfSA6IGFyZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBzdHIgPSByLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHN0cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHJlamVjdChlKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmdldFN0cmluZyA9IGdldFN0cmluZztcbmZ1bmN0aW9uIGdldEpTT04oYXJnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaHR0cFJlcXVlc3QucmVxdWVzdCh0eXBlb2YgYXJnID09PSBcInN0cmluZ1wiID8geyB1cmw6IGFyZywgbWV0aG9kOiBcIkdFVFwiIH0gOiBhcmcpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IHIuY29udGVudC50b0pTT04oKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGpzb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7IHJldHVybiByZWplY3QoZSk7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRKU09OID0gZ2V0SlNPTjtcbmZ1bmN0aW9uIGdldEltYWdlKGFyZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGh0dHBSZXF1ZXN0LnJlcXVlc3QodHlwZW9mIGFyZyA9PT0gXCJzdHJpbmdcIiA/IHsgdXJsOiBhcmcsIG1ldGhvZDogXCJHRVRcIiB9IDogYXJnKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyLmNvbnRlbnQudG9JbWFnZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRJbWFnZSA9IGdldEltYWdlO1xuZnVuY3Rpb24gZ2V0RmlsZShhcmcsIGRlc3RpbmF0aW9uRmlsZVBhdGgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBodHRwUmVxdWVzdC5yZXF1ZXN0KHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIgPyB7IHVybDogYXJnLCBtZXRob2Q6IFwiR0VUXCIgfSA6IGFyZylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBmaWxlID0gci5jb250ZW50LnRvRmlsZShkZXN0aW5hdGlvbkZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7IHJldHVybiByZWplY3QoZSk7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5nZXRGaWxlID0gZ2V0RmlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGZpbGVfc3lzdGVtXzEgPSByZXF1aXJlKFwiLi4vZmlsZS1zeXN0ZW1cIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy91dGlsc1wiKTtcbmV4cG9ydHMuaXNGaWxlT3JSZXNvdXJjZVBhdGggPSB1dGlsc18xLmlzRmlsZU9yUmVzb3VyY2VQYXRoO1xudmFyIGh0dHA7XG5mdW5jdGlvbiBlbnN1cmVIdHRwKCkge1xuICAgIGlmICghaHR0cCkge1xuICAgICAgICBodHRwID0gcmVxdWlyZShcIi4uL2h0dHBcIik7XG4gICAgfVxufVxudmFyIEltYWdlU291cmNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbWFnZVNvdXJjZShuYXRpdmVTb3VyY2UpIHtcbiAgICAgICAgaWYgKG5hdGl2ZVNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5zZXROYXRpdmVTb3VyY2UobmF0aXZlU291cmNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW1hZ2VTb3VyY2UucHJvdG90eXBlLCBcImhlaWdodFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW9zLnNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEltYWdlU291cmNlLnByb3RvdHlwZSwgXCJ3aWR0aFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW9zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW9zLnNpemUud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW1hZ2VTb3VyY2UucHJvdG90eXBlLCBcInJvdGF0aW9uQW5nbGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF92YWx1ZSkge1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBJbWFnZVNvdXJjZS5mcm9tQXNzZXQgPSBmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGFzc2V0LmdldEltYWdlQXN5bmMoZnVuY3Rpb24gKGltYWdlLCBlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgSW1hZ2VTb3VyY2UoaW1hZ2UpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21VcmwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGVuc3VyZUh0dHAoKTtcbiAgICAgICAgcmV0dXJuIGh0dHAuZ2V0SW1hZ2UodXJsKTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21SZXNvdXJjZVN5bmMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgbmF0aXZlU291cmNlID0gVUlJbWFnZS50bnNfc2FmZUltYWdlTmFtZWQobmFtZSkgfHwgVUlJbWFnZS50bnNfc2FmZUltYWdlTmFtZWQobmFtZSArIFwiLmpwZ1wiKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNvdXJjZSA/IG5ldyBJbWFnZVNvdXJjZShuYXRpdmVTb3VyY2UpIDogbnVsbDtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21SZXNvdXJjZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFVJSW1hZ2UudG5zX3NhZmVEZWNvZGVJbWFnZU5hbWVkQ29tcGxldGlvbihuYW1lLCBmdW5jdGlvbiAoaW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBJbWFnZVNvdXJjZShpbWFnZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgVUlJbWFnZS50bnNfc2FmZURlY29kZUltYWdlTmFtZWRDb21wbGV0aW9uKG5hbWUgKyBcIi5qcGdcIiwgZnVuY3Rpb24gKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgSW1hZ2VTb3VyY2UoaW1hZ2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21GaWxlU3luYyA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciB1aUltYWdlID0gVUlJbWFnZS5pbWFnZVdpdGhDb250ZW50c09mRmlsZShnZXRGaWxlTmFtZShwYXRoKSk7XG4gICAgICAgIHJldHVybiB1aUltYWdlID8gbmV3IEltYWdlU291cmNlKHVpSW1hZ2UpIDogbnVsbDtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21GaWxlID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgVUlJbWFnZS50bnNfZGVjb2RlSW1hZ2VXaWR0aENvbnRlbnRzT2ZGaWxlQ29tcGxldGlvbihnZXRGaWxlTmFtZShwYXRoKSwgZnVuY3Rpb24gKHVpSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgSW1hZ2VTb3VyY2UodWlJbWFnZSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5mcm9tRmlsZU9yUmVzb3VyY2VTeW5jID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgaWYgKCF1dGlsc18xLmlzRmlsZU9yUmVzb3VyY2VQYXRoKHBhdGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQYXRoIFxcXCJcIiArIFwiXFxcIiBpcyBub3QgYSB2YWxpZCBmaWxlIG9yIHJlc291cmNlLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGF0aC5pbmRleE9mKHV0aWxzXzEuUkVTT1VSQ0VfUFJFRklYKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21SZXNvdXJjZVN5bmMocGF0aC5zdWJzdHIodXRpbHNfMS5SRVNPVVJDRV9QUkVGSVgubGVuZ3RoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21GaWxlU3luYyhwYXRoKTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21EYXRhU3luYyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciB1aUltYWdlID0gVUlJbWFnZS5pbWFnZVdpdGhEYXRhKGRhdGEpO1xuICAgICAgICByZXR1cm4gdWlJbWFnZSA/IG5ldyBJbWFnZVNvdXJjZSh1aUltYWdlKSA6IG51bGw7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5mcm9tRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIFVJSW1hZ2UudG5zX2RlY29kZUltYWdlV2l0aERhdGFDb21wbGV0aW9uKGRhdGEsIGZ1bmN0aW9uICh1aUltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEltYWdlU291cmNlKHVpSW1hZ2UpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgICAgIHJlamVjdChleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UuZnJvbUJhc2U2NFN5bmMgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciB1aUltYWdlO1xuICAgICAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBOU0RhdGEuYWxsb2MoKS5pbml0V2l0aEJhc2U2NEVuY29kZWRTdHJpbmdPcHRpb25zKHNvdXJjZSwgMSk7XG4gICAgICAgICAgICB1aUltYWdlID0gVUlJbWFnZS5pbWFnZVdpdGhEYXRhKGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1aUltYWdlID8gbmV3IEltYWdlU291cmNlKHVpSW1hZ2UpIDogbnVsbDtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21CYXNlNjQgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gTlNEYXRhLmFsbG9jKCkuaW5pdFdpdGhCYXNlNjRFbmNvZGVkU3RyaW5nT3B0aW9ucyhzb3VyY2UsIDEpO1xuICAgICAgICAgICAgICAgIFVJSW1hZ2UuaW1hZ2VXaXRoRGF0YVtcImFzeW5jXCJdKFVJSW1hZ2UsIFtkYXRhXSkudGhlbihmdW5jdGlvbiAodWlJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBJbWFnZVNvdXJjZSh1aUltYWdlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLmZyb21Gb250SWNvbkNvZGVTeW5jID0gZnVuY3Rpb24gKHNvdXJjZSwgZm9udCwgY29sb3IpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgZm9udFNpemUgPSB1dGlsc18xLmxheW91dC50b0RldmljZVBpeGVscyhmb250LmZvbnRTaXplKTtcbiAgICAgICAgaWYgKCFmb250U2l6ZSkge1xuICAgICAgICAgICAgZm9udFNpemUgPSBVSUZvbnQubGFiZWxGb250U2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVuc2l0eSA9IHV0aWxzXzEubGF5b3V0LmdldERpc3BsYXlEZW5zaXR5KCk7XG4gICAgICAgIHZhciBzY2FsZWRGb250U2l6ZSA9IGZvbnRTaXplICogZGVuc2l0eTtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW05TRm9udEF0dHJpYnV0ZU5hbWVdID0gZm9udC5nZXRVSUZvbnQoVUlGb250LnN5c3RlbUZvbnRPZlNpemUoc2NhbGVkRm9udFNpemUpKSxcbiAgICAgICAgICAgIF9hKTtcbiAgICAgICAgaWYgKGNvbG9yKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzW05TRm9yZWdyb3VuZENvbG9yQXR0cmlidXRlTmFtZV0gPSBjb2xvci5pb3M7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZWRTdHJpbmcgPSBOU0F0dHJpYnV0ZWRTdHJpbmcuYWxsb2MoKS5pbml0V2l0aFN0cmluZ0F0dHJpYnV0ZXMoc291cmNlLCBhdHRyaWJ1dGVzKTtcbiAgICAgICAgVUlHcmFwaGljc0JlZ2luSW1hZ2VDb250ZXh0V2l0aE9wdGlvbnMoYXR0cmlidXRlZFN0cmluZy5zaXplKCksIGZhbHNlLCAwLjApO1xuICAgICAgICBhdHRyaWJ1dGVkU3RyaW5nLmRyYXdBdFBvaW50KENHUG9pbnRNYWtlKDAsIDApKTtcbiAgICAgICAgdmFyIGljb25JbWFnZSA9IFVJR3JhcGhpY3NHZXRJbWFnZUZyb21DdXJyZW50SW1hZ2VDb250ZXh0KCk7XG4gICAgICAgIFVJR3JhcGhpY3NFbmRJbWFnZUNvbnRleHQoKTtcbiAgICAgICAgcmV0dXJuIGljb25JbWFnZSA/IG5ldyBJbWFnZVNvdXJjZShpY29uSW1hZ2UpIDogbnVsbDtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLnByb3RvdHlwZS5mcm9tQXNzZXQgPSBmdW5jdGlvbiAoYXNzZXQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY29uc29sZS5sb2coXCJmcm9tQXNzZXQoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbUFzc2V0KCkgaW5zdGVhZC5cIik7XG4gICAgICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tQXNzZXQoYXNzZXQpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW1nU291cmNlKSB7XG4gICAgICAgICAgICBfdGhpcy5zZXROYXRpdmVTb3VyY2UoaW1nU291cmNlLmlvcyk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLmxvYWRGcm9tUmVzb3VyY2UgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRGcm9tUmVzb3VyY2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbVJlc291cmNlU3luYygpIGluc3RlYWQuXCIpO1xuICAgICAgICB2YXIgaW1nU291cmNlID0gSW1hZ2VTb3VyY2UuZnJvbVJlc291cmNlU3luYyhuYW1lKTtcbiAgICAgICAgdGhpcy5pb3MgPSBpbWdTb3VyY2UgPyBpbWdTb3VyY2UuaW9zIDogbnVsbDtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5pb3M7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5wcm90b3R5cGUuZnJvbVJlc291cmNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY29uc29sZS5sb2coXCJmcm9tUmVzb3VyY2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbVJlc291cmNlKCkgaW5zdGVhZC5cIik7XG4gICAgICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tUmVzb3VyY2UobmFtZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWdTb3VyY2UpIHtcbiAgICAgICAgICAgIF90aGlzLmlvcyA9IGltZ1NvdXJjZS5pb3M7XG4gICAgICAgICAgICByZXR1cm4gISFfdGhpcy5pb3M7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLmxvYWRGcm9tRmlsZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9hZEZyb21GaWxlKCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21GaWxlU3luYygpIGluc3RlYWQuXCIpO1xuICAgICAgICB2YXIgaW1nU291cmNlID0gSW1hZ2VTb3VyY2UuZnJvbUZpbGVTeW5jKHBhdGgpO1xuICAgICAgICB0aGlzLmlvcyA9IGltZ1NvdXJjZSA/IGltZ1NvdXJjZS5pb3MgOiBudWxsO1xuICAgICAgICByZXR1cm4gISF0aGlzLmlvcztcbiAgICB9O1xuICAgIEltYWdlU291cmNlLnByb3RvdHlwZS5mcm9tRmlsZSA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZnJvbUZpbGUoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbUZpbGUoKSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21GaWxlKHBhdGgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW1nU291cmNlKSB7XG4gICAgICAgICAgICBfdGhpcy5pb3MgPSBpbWdTb3VyY2UuaW9zO1xuICAgICAgICAgICAgcmV0dXJuICEhX3RoaXMuaW9zO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEltYWdlU291cmNlLnByb3RvdHlwZS5sb2FkRnJvbURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRGcm9tRGF0YSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tRGF0YVN5bmMoKSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgdmFyIGltZ1NvdXJjZSA9IEltYWdlU291cmNlLmZyb21EYXRhU3luYyhkYXRhKTtcbiAgICAgICAgdGhpcy5pb3MgPSBpbWdTb3VyY2UgPyBpbWdTb3VyY2UuaW9zIDogbnVsbDtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5pb3M7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5wcm90b3R5cGUuZnJvbURhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBjb25zb2xlLmxvZyhcImZyb21EYXRhKCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21EYXRhKCkgaW5zdGVhZC5cIik7XG4gICAgICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tRGF0YShkYXRhKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGltZ1NvdXJjZSkge1xuICAgICAgICAgICAgX3RoaXMuaW9zID0gaW1nU291cmNlLmlvcztcbiAgICAgICAgICAgIHJldHVybiAhIV90aGlzLmlvcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5wcm90b3R5cGUubG9hZEZyb21CYXNlNjQgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibG9hZEZyb21CYXNlNjQoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbUJhc2U2NFN5bmMoKSBpbnN0ZWFkLlwiKTtcbiAgICAgICAgdmFyIGltZ1NvdXJjZSA9IEltYWdlU291cmNlLmZyb21CYXNlNjRTeW5jKHNvdXJjZSk7XG4gICAgICAgIHRoaXMuaW9zID0gaW1nU291cmNlID8gaW1nU291cmNlLmlvcyA6IG51bGw7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaW9zO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLmZyb21CYXNlNjQgPSBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZnJvbUJhc2U2NCgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tQmFzZTY0KCkgaW5zdGVhZC5cIik7XG4gICAgICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tQmFzZTY0KHNvdXJjZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWdTb3VyY2UpIHtcbiAgICAgICAgICAgIF90aGlzLmlvcyA9IGltZ1NvdXJjZS5pb3M7XG4gICAgICAgICAgICByZXR1cm4gISFfdGhpcy5pb3M7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLmxvYWRGcm9tRm9udEljb25Db2RlID0gZnVuY3Rpb24gKHNvdXJjZSwgZm9udCwgY29sb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJsb2FkRnJvbUZvbnRJY29uQ29kZSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tRm9udEljb25Db2RlU3luYygpIGluc3RlYWQuXCIpO1xuICAgICAgICB2YXIgaW1nU291cmNlID0gSW1hZ2VTb3VyY2UuZnJvbUZvbnRJY29uQ29kZVN5bmMoc291cmNlLCBmb250LCBjb2xvcik7XG4gICAgICAgIHRoaXMuaW9zID0gaW1nU291cmNlID8gaW1nU291cmNlLmlvcyA6IG51bGw7XG4gICAgICAgIHJldHVybiAhIXRoaXMuaW9zO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLnNldE5hdGl2ZVNvdXJjZSA9IGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSAmJiAhKHNvdXJjZSBpbnN0YW5jZW9mIFVJSW1hZ2UpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgbWV0aG9kIHNldE5hdGl2ZVNvdXJjZSgpIGV4cGVjdHMgVUlJbWFnZSBpbnN0YW5jZS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pb3MgPSBzb3VyY2U7XG4gICAgfTtcbiAgICBJbWFnZVNvdXJjZS5wcm90b3R5cGUuc2F2ZVRvRmlsZSA9IGZ1bmN0aW9uIChwYXRoLCBmb3JtYXQsIHF1YWxpdHkpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlvcykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChxdWFsaXR5KSB7XG4gICAgICAgICAgICBxdWFsaXR5ID0gKHF1YWxpdHkgLSAwKSAvICgxMDAgLSAwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0YSA9IGdldEltYWdlRGF0YSh0aGlzLmlvcywgZm9ybWF0LCBxdWFsaXR5KTtcbiAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiBOU0ZpbGVNYW5hZ2VyLmRlZmF1bHRNYW5hZ2VyLmNyZWF0ZUZpbGVBdFBhdGhDb250ZW50c0F0dHJpYnV0ZXMocGF0aCwgZGF0YSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgSW1hZ2VTb3VyY2UucHJvdG90eXBlLnRvQmFzZTY0U3RyaW5nID0gZnVuY3Rpb24gKGZvcm1hdCwgcXVhbGl0eSkge1xuICAgICAgICB2YXIgcmVzID0gbnVsbDtcbiAgICAgICAgaWYgKCF0aGlzLmlvcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVhbGl0eSkge1xuICAgICAgICAgICAgcXVhbGl0eSA9IChxdWFsaXR5IC0gMCkgLyAoMTAwIC0gMCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGEgPSBnZXRJbWFnZURhdGEodGhpcy5pb3MsIGZvcm1hdCwgcXVhbGl0eSk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICByZXMgPSBkYXRhLmJhc2U2NEVuY29kaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9O1xuICAgIHJldHVybiBJbWFnZVNvdXJjZTtcbn0oKSk7XG5leHBvcnRzLkltYWdlU291cmNlID0gSW1hZ2VTb3VyY2U7XG5mdW5jdGlvbiBnZXRGaWxlTmFtZShwYXRoKSB7XG4gICAgdmFyIGZpbGVOYW1lID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXRoLnRyaW0oKSA6IFwiXCI7XG4gICAgaWYgKGZpbGVOYW1lLmluZGV4T2YoXCJ+L1wiKSA9PT0gMCkge1xuICAgICAgICBmaWxlTmFtZSA9IGZpbGVfc3lzdGVtXzEucGF0aC5qb2luKGZpbGVfc3lzdGVtXzEua25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCBmaWxlTmFtZS5yZXBsYWNlKFwifi9cIiwgXCJcIikpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZU5hbWU7XG59XG5mdW5jdGlvbiBnZXRJbWFnZURhdGEoaW5zdGFuY2UsIGZvcm1hdCwgcXVhbGl0eSkge1xuICAgIGlmIChxdWFsaXR5ID09PSB2b2lkIDApIHsgcXVhbGl0eSA9IDAuOTsgfVxuICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgICAgICBjYXNlIFwicG5nXCI6XG4gICAgICAgICAgICBkYXRhID0gVUlJbWFnZVBOR1JlcHJlc2VudGF0aW9uKGluc3RhbmNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwianBlZ1wiOlxuICAgICAgICBjYXNlIFwianBnXCI6XG4gICAgICAgICAgICBkYXRhID0gVUlJbWFnZUpQRUdSZXByZXNlbnRhdGlvbihpbnN0YW5jZSwgcXVhbGl0eSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBmcm9tQXNzZXQoYXNzZXQpIHtcbiAgICBjb25zb2xlLmxvZyhcImZyb21Bc3NldCgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tQXNzZXQoKSBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gSW1hZ2VTb3VyY2UuZnJvbUFzc2V0KGFzc2V0KTtcbn1cbmV4cG9ydHMuZnJvbUFzc2V0ID0gZnJvbUFzc2V0O1xuZnVuY3Rpb24gZnJvbVJlc291cmNlKG5hbWUpIHtcbiAgICBjb25zb2xlLmxvZyhcImZyb21SZXNvdXJjZSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tUmVzb3VyY2VTeW5jKCkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21SZXNvdXJjZVN5bmMobmFtZSk7XG59XG5leHBvcnRzLmZyb21SZXNvdXJjZSA9IGZyb21SZXNvdXJjZTtcbmZ1bmN0aW9uIGZyb21GaWxlKHBhdGgpIHtcbiAgICBjb25zb2xlLmxvZyhcImZyb21GaWxlKCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21GaWxlU3luYygpIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tRmlsZVN5bmMocGF0aCk7XG59XG5leHBvcnRzLmZyb21GaWxlID0gZnJvbUZpbGU7XG5mdW5jdGlvbiBmcm9tRGF0YShkYXRhKSB7XG4gICAgY29uc29sZS5sb2coXCJmcm9tRGF0YSgpIGlzIGRlcHJlY2F0ZWQuIFVzZSBJbWFnZVNvdXJjZS5mcm9tRGF0YVN5bmMoKSBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gSW1hZ2VTb3VyY2UuZnJvbURhdGFTeW5jKGRhdGEpO1xufVxuZXhwb3J0cy5mcm9tRGF0YSA9IGZyb21EYXRhO1xuZnVuY3Rpb24gZnJvbUZvbnRJY29uQ29kZShzb3VyY2UsIGZvbnQsIGNvbG9yKSB7XG4gICAgY29uc29sZS5sb2coXCJmcm9tRm9udEljb25Db2RlKCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21Gb250SWNvbkNvZGVTeW5jKCkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21Gb250SWNvbkNvZGVTeW5jKHNvdXJjZSwgZm9udCwgY29sb3IpO1xufVxuZXhwb3J0cy5mcm9tRm9udEljb25Db2RlID0gZnJvbUZvbnRJY29uQ29kZTtcbmZ1bmN0aW9uIGZyb21CYXNlNjQoc291cmNlKSB7XG4gICAgY29uc29sZS5sb2coXCJmcm9tQmFzZTY0KCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21CYXNlNjRTeW5jKCkgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIEltYWdlU291cmNlLmZyb21CYXNlNjRTeW5jKHNvdXJjZSk7XG59XG5leHBvcnRzLmZyb21CYXNlNjQgPSBmcm9tQmFzZTY0O1xuZnVuY3Rpb24gZnJvbU5hdGl2ZVNvdXJjZShuYXRpdmVTb3VyY2UpIHtcbiAgICBjb25zb2xlLmxvZyhcImZyb21OYXRpdmVTb3VyY2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UgY29uc3RydWN0b3IgaW5zdGVhZC5cIik7XG4gICAgcmV0dXJuIG5ldyBJbWFnZVNvdXJjZShuYXRpdmVTb3VyY2UpO1xufVxuZXhwb3J0cy5mcm9tTmF0aXZlU291cmNlID0gZnJvbU5hdGl2ZVNvdXJjZTtcbmZ1bmN0aW9uIGZyb21VcmwodXJsKSB7XG4gICAgY29uc29sZS5sb2coXCJmcm9tVXJsKCkgaXMgZGVwcmVjYXRlZC4gVXNlIEltYWdlU291cmNlLmZyb21VcmwoKSBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gSW1hZ2VTb3VyY2UuZnJvbVVybCh1cmwpO1xufVxuZXhwb3J0cy5mcm9tVXJsID0gZnJvbVVybDtcbmZ1bmN0aW9uIGZyb21GaWxlT3JSZXNvdXJjZShwYXRoKSB7XG4gICAgY29uc29sZS5sb2coXCJmcm9tRmlsZU9yUmVzb3VyY2UoKSBpcyBkZXByZWNhdGVkLiBVc2UgSW1hZ2VTb3VyY2UuZnJvbUZpbGVPclJlc291cmNlU3luYygpIGluc3RlYWQuXCIpO1xuICAgIHJldHVybiBJbWFnZVNvdXJjZS5mcm9tRmlsZU9yUmVzb3VyY2VTeW5jKHBhdGgpO1xufVxuZXhwb3J0cy5mcm9tRmlsZU9yUmVzb3VyY2UgPSBmcm9tRmlsZU9yUmVzb3VyY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbWFnZS1zb3VyY2UuaW9zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBudW1iZXJfdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9udW1iZXItdXRpbHNcIik7XG5leHBvcnRzLmdldFRyYW5zZm9ybU1hdHJpeCA9IGZ1bmN0aW9uIChfYSkge1xuICAgIHZhciBwcm9wZXJ0eSA9IF9hLnByb3BlcnR5LCB2YWx1ZSA9IF9hLnZhbHVlO1xuICAgIHJldHVybiBUUkFOU0ZPUk1fTUFUUklYRVNbcHJvcGVydHldKHZhbHVlKTtcbn07XG52YXIgVFJBTlNGT1JNX01BVFJJWEVTID0ge1xuICAgIFwic2NhbGVcIjogZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB4ID0gX2EueCwgeSA9IF9hLnk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB4LCAwLCAwLFxuICAgICAgICAgICAgMCwgeSwgMCxcbiAgICAgICAgICAgIDAsIDAsIDEsXG4gICAgICAgIF07XG4gICAgfSxcbiAgICBcInRyYW5zbGF0ZVwiOiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHggPSBfYS54LCB5ID0gX2EueTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIDEsIDAsIHgsXG4gICAgICAgICAgICAwLCAxLCB5LFxuICAgICAgICAgICAgMCwgMCwgMSxcbiAgICAgICAgXTtcbiAgICB9LFxuICAgIFwicm90YXRlXCI6IGZ1bmN0aW9uIChhbmdsZUluRGVnKSB7XG4gICAgICAgIHZhciBhbmdsZUluUmFkID0gbnVtYmVyX3V0aWxzXzEuZGVncmVlc1RvUmFkaWFucyhhbmdsZUluRGVnKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIE1hdGguY29zKGFuZ2xlSW5SYWQpLCAtTWF0aC5zaW4oYW5nbGVJblJhZCksIDAsXG4gICAgICAgICAgICBNYXRoLnNpbihhbmdsZUluUmFkKSwgTWF0aC5jb3MoYW5nbGVJblJhZCksIDAsXG4gICAgICAgICAgICAwLCAwLCAxLFxuICAgICAgICBdO1xuICAgIH0sXG59O1xuZXhwb3J0cy5tYXRyaXhBcnJheVRvQ3NzTWF0cml4ID0gZnVuY3Rpb24gKG0pIHsgcmV0dXJuIFtcbiAgICBtWzBdLCBtWzNdLCBtWzFdLFxuICAgIG1bNF0sIG1bMl0sIG1bNV0sXG5dOyB9O1xuZnVuY3Rpb24gbXVsdGlwbHlBZmZpbmUyZChtMSwgbTIpIHtcbiAgICByZXR1cm4gW1xuICAgICAgICBtMVswXSAqIG0yWzBdICsgbTFbMV0gKiBtMlszXSxcbiAgICAgICAgbTFbMF0gKiBtMlsxXSArIG0xWzFdICogbTJbNF0sXG4gICAgICAgIG0xWzBdICogbTJbMl0gKyBtMVsxXSAqIG0yWzVdICsgbTFbMl0sXG4gICAgICAgIG0xWzNdICogbTJbMF0gKyBtMVs0XSAqIG0yWzNdLFxuICAgICAgICBtMVszXSAqIG0yWzFdICsgbTFbNF0gKiBtMls0XSxcbiAgICAgICAgbTFbM10gKiBtMlsyXSArIG0xWzRdICogbTJbNV0gKyBtMVs1XVxuICAgIF07XG59XG5leHBvcnRzLm11bHRpcGx5QWZmaW5lMmQgPSBtdWx0aXBseUFmZmluZTJkO1xuZnVuY3Rpb24gZGVjb21wb3NlMkRUcmFuc2Zvcm1NYXRyaXgobWF0cml4KSB7XG4gICAgdmVyaWZ5VHJhbnNmb3JtTWF0cml4KG1hdHJpeCk7XG4gICAgdmFyIF9hID0gX19zcHJlYWRBcnJheXMobWF0cml4KSwgQSA9IF9hWzBdLCBCID0gX2FbMV0sIEMgPSBfYVsyXSwgRCA9IF9hWzNdLCBFID0gX2FbNF0sIEYgPSBfYVs1XTtcbiAgICB2YXIgZGV0ZXJtaW5hbnQgPSBBICogRCAtIEIgKiBDO1xuICAgIHZhciB0cmFuc2xhdGUgPSB7IHg6IEUgfHwgMCwgeTogRiB8fCAwIH07XG4gICAgdmFyIHJvdGF0ZSA9IDA7XG4gICAgdmFyIHNjYWxlID0geyB4OiAxLCB5OiAxIH07XG4gICAgaWYgKEEgfHwgQikge1xuICAgICAgICB2YXIgUiA9IE1hdGguc3FydChBICogQSArIEIgKiBCKTtcbiAgICAgICAgcm90YXRlID0gQiA+IDAgPyBNYXRoLmFjb3MoQSAvIFIpIDogLU1hdGguYWNvcyhBIC8gUik7XG4gICAgICAgIHNjYWxlID0geyB4OiBSLCB5OiBkZXRlcm1pbmFudCAvIFIgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAoQyB8fCBEKSB7XG4gICAgICAgIHZhciBSID0gTWF0aC5zcXJ0KEMgKiBDICsgRCAqIEQpO1xuICAgICAgICByb3RhdGUgPSBNYXRoLlBJIC8gMiAtIChEID4gMCA/IE1hdGguYWNvcygtQyAvIFIpIDogLU1hdGguYWNvcyhDIC8gUikpO1xuICAgICAgICBzY2FsZSA9IHsgeDogZGV0ZXJtaW5hbnQgLyBSLCB5OiBSIH07XG4gICAgfVxuICAgIHJvdGF0ZSA9IG51bWJlcl91dGlsc18xLnJhZGlhbnNUb0RlZ3JlZXMocm90YXRlKTtcbiAgICByZXR1cm4geyB0cmFuc2xhdGU6IHRyYW5zbGF0ZSwgcm90YXRlOiByb3RhdGUsIHNjYWxlOiBzY2FsZSB9O1xufVxuZXhwb3J0cy5kZWNvbXBvc2UyRFRyYW5zZm9ybU1hdHJpeCA9IGRlY29tcG9zZTJEVHJhbnNmb3JtTWF0cml4O1xuZnVuY3Rpb24gdmVyaWZ5VHJhbnNmb3JtTWF0cml4KG1hdHJpeCkge1xuICAgIGlmIChtYXRyaXgubGVuZ3RoIDwgNikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUcmFuc2Zvcm0gbWF0cml4IHNob3VsZCBiZSAyeDMuXCIpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdHJpeC5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcGxhdGZvcm1OYW1lcztcbihmdW5jdGlvbiAocGxhdGZvcm1OYW1lcykge1xuICAgIHBsYXRmb3JtTmFtZXMuYW5kcm9pZCA9IFwiQW5kcm9pZFwiO1xuICAgIHBsYXRmb3JtTmFtZXMuaW9zID0gXCJpT1NcIjtcbn0pKHBsYXRmb3JtTmFtZXMgPSBleHBvcnRzLnBsYXRmb3JtTmFtZXMgfHwgKGV4cG9ydHMucGxhdGZvcm1OYW1lcyA9IHt9KSk7XG52YXIgRGV2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2UoKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UucHJvdG90eXBlLCBcIm1hbnVmYWN0dXJlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiQXBwbGVcIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERldmljZS5wcm90b3R5cGUsIFwib3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBwbGF0Zm9ybU5hbWVzLmlvcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERldmljZS5wcm90b3R5cGUsIFwib3NWZXJzaW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX29zVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX29zVmVyc2lvbiA9IFVJRGV2aWNlLmN1cnJlbnREZXZpY2Uuc3lzdGVtVmVyc2lvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9vc1ZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UucHJvdG90eXBlLCBcIm1vZGVsXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX21vZGVsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBVSURldmljZS5jdXJyZW50RGV2aWNlLm1vZGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV2aWNlLnByb3RvdHlwZSwgXCJzZGtWZXJzaW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3Nka1ZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZGtWZXJzaW9uID0gVUlEZXZpY2UuY3VycmVudERldmljZS5zeXN0ZW1WZXJzaW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nka1ZlcnNpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UucHJvdG90eXBlLCBcImRldmljZVR5cGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGV2aWNlVHlwZSkge1xuICAgICAgICAgICAgICAgIGlmIChVSURldmljZS5jdXJyZW50RGV2aWNlLnVzZXJJbnRlcmZhY2VJZGlvbSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXZpY2VUeXBlID0gXCJQaG9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGV2aWNlVHlwZSA9IFwiVGFibGV0XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RldmljZVR5cGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UucHJvdG90eXBlLCBcInV1aWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB1c2VyRGVmYXVsdHMgPSBOU1VzZXJEZWZhdWx0cy5zdGFuZGFyZFVzZXJEZWZhdWx0cztcbiAgICAgICAgICAgIHZhciB1dWlkX2tleSA9IFwiVE5TVVVJRFwiO1xuICAgICAgICAgICAgdmFyIGFwcF91dWlkID0gdXNlckRlZmF1bHRzLnN0cmluZ0ZvcktleSh1dWlkX2tleSk7XG4gICAgICAgICAgICBpZiAoIWFwcF91dWlkKSB7XG4gICAgICAgICAgICAgICAgYXBwX3V1aWQgPSBOU1VVSUQuVVVJRCgpLlVVSURTdHJpbmc7XG4gICAgICAgICAgICAgICAgdXNlckRlZmF1bHRzLnNldE9iamVjdEZvcktleShhcHBfdXVpZCwgdXVpZF9rZXkpO1xuICAgICAgICAgICAgICAgIHVzZXJEZWZhdWx0cy5zeW5jaHJvbml6ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFwcF91dWlkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGV2aWNlLnByb3RvdHlwZSwgXCJsYW5ndWFnZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9sYW5ndWFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZXMgPSBOU0xvY2FsZS5wcmVmZXJyZWRMYW5ndWFnZXM7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFuZ3VhZ2UgPSBsYW5ndWFnZXNbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFuZ3VhZ2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UucHJvdG90eXBlLCBcInJlZ2lvblwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9yZWdpb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWdpb24gPSBOU0xvY2FsZS5jdXJyZW50TG9jYWxlLm9iamVjdEZvcktleShOU0xvY2FsZUNvdW50cnlDb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWdpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBEZXZpY2U7XG59KCkpO1xudmFyIE1haW5TY3JlZW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1haW5TY3JlZW4oKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluU2NyZWVuLnByb3RvdHlwZSwgXCJzY3JlZW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2NyZWVuID0gVUlTY3JlZW4ubWFpblNjcmVlbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY3JlZW47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluU2NyZWVuLnByb3RvdHlwZSwgXCJ3aWR0aFBpeGVsc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGhESVBzICogdGhpcy5zY2FsZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1haW5TY3JlZW4ucHJvdG90eXBlLCBcImhlaWdodFBpeGVsc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGVpZ2h0RElQcyAqIHRoaXMuc2NhbGU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluU2NyZWVuLnByb3RvdHlwZSwgXCJzY2FsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NyZWVuLnNjYWxlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFpblNjcmVlbi5wcm90b3R5cGUsIFwid2lkdGhESVBzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JlZW4uYm91bmRzLnNpemUud2lkdGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYWluU2NyZWVuLnByb3RvdHlwZSwgXCJoZWlnaHRESVBzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zY3JlZW4uYm91bmRzLnNpemUuaGVpZ2h0O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gTWFpblNjcmVlbjtcbn0oKSk7XG5leHBvcnRzLmRldmljZSA9IG5ldyBEZXZpY2UoKTtcbnZhciBzY3JlZW47XG4oZnVuY3Rpb24gKHNjcmVlbikge1xuICAgIHNjcmVlbi5tYWluU2NyZWVuID0gbmV3IE1haW5TY3JlZW4oKTtcbn0pKHNjcmVlbiA9IGV4cG9ydHMuc2NyZWVuIHx8IChleHBvcnRzLnNjcmVlbiA9IHt9KSk7XG5leHBvcnRzLmlzSU9TID0gdHJ1ZTtcbmV4cG9ydHMuaXNBbmRyb2lkID0gZmFsc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wbGF0Zm9ybS5pb3MuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gdXB0aW1lKCkge1xuICAgIHJldHVybiBnbG9iYWwuYW5kcm9pZCA/IG9yZy5uYXRpdmVzY3JpcHQuUHJvY2Vzcy5nZXRVcFRpbWUoKSA6IGdsb2JhbC5fX3Ruc191cHRpbWUoKTtcbn1cbmV4cG9ydHMudXB0aW1lID0gdXB0aW1lO1xuZnVuY3Rpb24gbG9nKG1lc3NhZ2UpIHtcbiAgICBpZiAoZ2xvYmFsLl9fbnNsb2cpIHtcbiAgICAgICAgZ2xvYmFsLl9fbnNsb2coXCJDT05TT0xFIExPRzogXCIgKyBtZXNzYWdlKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG59XG5leHBvcnRzLmxvZyA9IGxvZztcbnZhciB0aW1lcnMgPSB7fTtcbnZhciBhbnlHbG9iYWwgPSBnbG9iYWw7XG52YXIgcHJvZmlsZU5hbWVzID0gW107XG5leHBvcnRzLnRpbWUgPSBnbG9iYWwuX190aW1lIHx8IERhdGUubm93O1xuZnVuY3Rpb24gc3RhcnQobmFtZSkge1xuICAgIHZhciBpbmZvID0gdGltZXJzW25hbWVdO1xuICAgIGlmIChpbmZvKSB7XG4gICAgICAgIGluZm8uY3VycmVudFN0YXJ0ID0gZXhwb3J0cy50aW1lKCk7XG4gICAgICAgIGluZm8ucnVuQ291bnQrKztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluZm8gPSB7XG4gICAgICAgICAgICB0b3RhbFRpbWU6IDAsXG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIGN1cnJlbnRTdGFydDogZXhwb3J0cy50aW1lKCksXG4gICAgICAgICAgICBydW5Db3VudDogMVxuICAgICAgICB9O1xuICAgICAgICB0aW1lcnNbbmFtZV0gPSBpbmZvO1xuICAgICAgICBwcm9maWxlTmFtZXMucHVzaChuYW1lKTtcbiAgICB9XG59XG5leHBvcnRzLnN0YXJ0ID0gc3RhcnQ7XG5mdW5jdGlvbiBzdG9wKG5hbWUpIHtcbiAgICB2YXIgaW5mbyA9IHRpbWVyc1tuYW1lXTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGltZXIgc3RhcnRlZDogXCIgKyBuYW1lKTtcbiAgICB9XG4gICAgaWYgKGluZm8ucnVuQ291bnQpIHtcbiAgICAgICAgaW5mby5ydW5Db3VudC0tO1xuICAgICAgICBpZiAoaW5mby5ydW5Db3VudCkge1xuICAgICAgICAgICAgaW5mby5jb3VudCsrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5mby5sYXN0VGltZSA9IGV4cG9ydHMudGltZSgpIC0gaW5mby5jdXJyZW50U3RhcnQ7XG4gICAgICAgICAgICBpbmZvLnRvdGFsVGltZSArPSBpbmZvLmxhc3RUaW1lO1xuICAgICAgICAgICAgaW5mby5jb3VudCsrO1xuICAgICAgICAgICAgaW5mby5jdXJyZW50U3RhcnQgPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaW1lciBcIiArIG5hbWUgKyBcIiBwYXVzZWQgbW9yZSB0aW1lcyB0aGFuIHN0YXJ0ZWQuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaW5mbztcbn1cbmV4cG9ydHMuc3RvcCA9IHN0b3A7XG5mdW5jdGlvbiB0aW1lcihuYW1lKSB7XG4gICAgcmV0dXJuIHRpbWVyc1tuYW1lXTtcbn1cbmV4cG9ydHMudGltZXIgPSB0aW1lcjtcbmZ1bmN0aW9uIHByaW50KG5hbWUpIHtcbiAgICB2YXIgaW5mbyA9IHRpbWVyc1tuYW1lXTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGltZXIgc3RhcnRlZDogXCIgKyBuYW1lKTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCItLS0tIFtcIiArIG5hbWUgKyBcIl0gU1RPUCB0b3RhbDogXCIgKyBpbmZvLnRvdGFsVGltZSArIFwiIGNvdW50OlwiICsgaW5mby5jb3VudCk7XG4gICAgcmV0dXJuIGluZm87XG59XG5leHBvcnRzLnByaW50ID0gcHJpbnQ7XG5mdW5jdGlvbiBpc1J1bm5pbmcobmFtZSkge1xuICAgIHZhciBpbmZvID0gdGltZXJzW25hbWVdO1xuICAgIHJldHVybiAhIShpbmZvICYmIGluZm8ucnVuQ291bnQpO1xufVxuZXhwb3J0cy5pc1J1bm5pbmcgPSBpc1J1bm5pbmc7XG5mdW5jdGlvbiBjb3VudGVyc1Byb2ZpbGVGdW5jdGlvbkZhY3RvcnkoZm4sIG5hbWUsIHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAxOyB9XG4gICAgcHJvZmlsZU5hbWVzLnB1c2gobmFtZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc3RhcnQobmFtZSk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN0b3AobmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gdGltZWxpbmVQcm9maWxlRnVuY3Rpb25GYWN0b3J5KGZuLCBuYW1lLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09IHZvaWQgMCkgeyB0eXBlID0gMTsgfVxuICAgIHJldHVybiB0eXBlID09PSAxID8gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhcnQgPSBleHBvcnRzLnRpbWUoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdmFyIGVuZCA9IGV4cG9ydHMudGltZSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUaW1lbGluZTogTW9kdWxlczogXCIgKyBuYW1lICsgXCIgXCIgKyB0aGlzICsgXCIgIChcIiArIHN0YXJ0ICsgXCJtcy4gLSBcIiArIGVuZCArIFwibXMuKVwiKTtcbiAgICAgICAgfVxuICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGFydCA9IGV4cG9ydHMudGltZSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB2YXIgZW5kID0gZXhwb3J0cy50aW1lKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRpbWVsaW5lOiBNb2R1bGVzOiBcIiArIG5hbWUgKyBcIiAgKFwiICsgc3RhcnQgKyBcIm1zLiAtIFwiICsgZW5kICsgXCJtcy4pXCIpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbnZhciBMZXZlbDtcbihmdW5jdGlvbiAoTGV2ZWwpIHtcbiAgICBMZXZlbFtMZXZlbFtcIm5vbmVcIl0gPSAwXSA9IFwibm9uZVwiO1xuICAgIExldmVsW0xldmVsW1wibGlmZWN5Y2xlXCJdID0gMV0gPSBcImxpZmVjeWNsZVwiO1xuICAgIExldmVsW0xldmVsW1widGltZWxpbmVcIl0gPSAyXSA9IFwidGltZWxpbmVcIjtcbn0pKExldmVsID0gZXhwb3J0cy5MZXZlbCB8fCAoZXhwb3J0cy5MZXZlbCA9IHt9KSk7XG52YXIgdHJhY2luZ0xldmVsID0gTGV2ZWwubm9uZTtcbnZhciBwcm9maWxlRnVuY3Rpb25GYWN0b3J5O1xuZnVuY3Rpb24gZW5hYmxlKG1vZGUpIHtcbiAgICBpZiAobW9kZSA9PT0gdm9pZCAwKSB7IG1vZGUgPSBcImNvdW50ZXJzXCI7IH1cbiAgICBwcm9maWxlRnVuY3Rpb25GYWN0b3J5ID0gbW9kZSAmJiB7XG4gICAgICAgIGNvdW50ZXJzOiBjb3VudGVyc1Byb2ZpbGVGdW5jdGlvbkZhY3RvcnksXG4gICAgICAgIHRpbWVsaW5lOiB0aW1lbGluZVByb2ZpbGVGdW5jdGlvbkZhY3RvcnlcbiAgICB9W21vZGVdO1xuICAgIHRyYWNpbmdMZXZlbCA9IHtcbiAgICAgICAgbGlmZWN5Y2xlOiBMZXZlbC5saWZlY3ljbGUsXG4gICAgICAgIHRpbWVsaW5lOiBMZXZlbC50aW1lbGluZSxcbiAgICB9W21vZGVdIHx8IExldmVsLm5vbmU7XG59XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbnRyeSB7XG4gICAgdmFyIGFwcENvbmZpZyA9IHJlcXVpcmUoXCJ+L3BhY2thZ2UuanNvblwiKTtcbiAgICBpZiAoYXBwQ29uZmlnICYmIGFwcENvbmZpZy5wcm9maWxpbmcpIHtcbiAgICAgICAgZW5hYmxlKGFwcENvbmZpZy5wcm9maWxpbmcpO1xuICAgIH1cbn1cbmNhdGNoIChlMSkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUHJvZmlsaW5nIHN0YXJ0dXAgZmFpbGVkIHRvIGZpZ3VyZSBvdXQgZGVmYXVsdHMgZnJvbSBwYWNrYWdlLmpzb24sIGVycm9yOiBcIiArIGUxKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUyKSB7XG4gICAgfVxufVxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBwcm9maWxlRnVuY3Rpb25GYWN0b3J5ID0gdW5kZWZpbmVkO1xufVxuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmZ1bmN0aW9uIHByb2ZpbGVGdW5jdGlvbihmbiwgY3VzdG9tTmFtZSkge1xuICAgIHJldHVybiBwcm9maWxlRnVuY3Rpb25GYWN0b3J5KGZuLCBjdXN0b21OYW1lIHx8IGZuLm5hbWUpO1xufVxudmFyIHByb2ZpbGVNZXRob2RVbm5hbWVkID0gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKGRlc2NyaXB0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgfVxuICAgIHZhciBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgdmFyIGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKHRhcmdldCAmJiB0YXJnZXQuY29uc3RydWN0b3IgJiYgdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgICAgY2xhc3NOYW1lID0gdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUgKyBcIi5cIjtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBjbGFzc05hbWUgKyBrZXk7XG4gICAgZGVzY3JpcHRvci52YWx1ZSA9IHByb2ZpbGVGdW5jdGlvbkZhY3Rvcnkob3JpZ2luYWxNZXRob2QsIG5hbWUsIDEpO1xuICAgIHJldHVybiBkZXNjcmlwdG9yO1xufTtcbnZhciBwcm9maWxlU3RhdGljTWV0aG9kVW5uYW1lZCA9IGZ1bmN0aW9uIChjdG9yLCBrZXksIGRlc2NyaXB0b3IpIHtcbiAgICBpZiAoZGVzY3JpcHRvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGN0b3IsIGtleSk7XG4gICAgfVxuICAgIHZhciBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgdmFyIGNsYXNzTmFtZSA9IFwiXCI7XG4gICAgaWYgKGN0b3IgJiYgY3Rvci5uYW1lKSB7XG4gICAgICAgIGNsYXNzTmFtZSA9IGN0b3IubmFtZSArIFwiLlwiO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IGNsYXNzTmFtZSArIGtleTtcbiAgICBkZXNjcmlwdG9yLnZhbHVlID0gcHJvZmlsZUZ1bmN0aW9uRmFjdG9yeShvcmlnaW5hbE1ldGhvZCwgbmFtZSwgMCk7XG4gICAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuZnVuY3Rpb24gcHJvZmlsZU1ldGhvZE5hbWVkKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xuICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gcHJvZmlsZUZ1bmN0aW9uRmFjdG9yeShvcmlnaW5hbE1ldGhvZCwgbmFtZSk7XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9yO1xuICAgIH07XG59XG52YXIgdm9pZE1ldGhvZERlY29yYXRvciA9IGZ1bmN0aW9uICgpIHtcbn07XG5mdW5jdGlvbiBwcm9maWxlKG5hbWVGbk9yVGFyZ2V0LCBmbk9yS2V5LCBkZXNjcmlwdG9yKSB7XG4gICAgaWYgKHR5cGVvZiBuYW1lRm5PclRhcmdldCA9PT0gXCJvYmplY3RcIiAmJiAodHlwZW9mIGZuT3JLZXkgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIGZuT3JLZXkgPT09IFwic3ltYm9sXCIpKSB7XG4gICAgICAgIGlmICghcHJvZmlsZUZ1bmN0aW9uRmFjdG9yeSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9maWxlTWV0aG9kVW5uYW1lZChuYW1lRm5PclRhcmdldCwgZm5PcktleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBuYW1lRm5PclRhcmdldCA9PT0gXCJmdW5jdGlvblwiICYmICh0eXBlb2YgZm5PcktleSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgZm5PcktleSA9PT0gXCJzeW1ib2xcIikpIHtcbiAgICAgICAgaWYgKCFwcm9maWxlRnVuY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2ZpbGVTdGF0aWNNZXRob2RVbm5hbWVkKG5hbWVGbk9yVGFyZ2V0LCBmbk9yS2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG5hbWVGbk9yVGFyZ2V0ID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBmbk9yS2V5ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFwcm9maWxlRnVuY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm5PcktleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZmlsZUZ1bmN0aW9uKGZuT3JLZXksIG5hbWVGbk9yVGFyZ2V0KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG5hbWVGbk9yVGFyZ2V0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFwcm9maWxlRnVuY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gbmFtZUZuT3JUYXJnZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb2ZpbGVGdW5jdGlvbihuYW1lRm5PclRhcmdldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBuYW1lRm5PclRhcmdldCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoIXByb2ZpbGVGdW5jdGlvbkZhY3RvcnkpIHtcbiAgICAgICAgICAgIHJldHVybiB2b2lkTWV0aG9kRGVjb3JhdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9maWxlTWV0aG9kTmFtZWQobmFtZUZuT3JUYXJnZXQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKCFwcm9maWxlRnVuY3Rpb25GYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZE1ldGhvZERlY29yYXRvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZmlsZU1ldGhvZFVubmFtZWQ7XG4gICAgfVxufVxuZXhwb3J0cy5wcm9maWxlID0gcHJvZmlsZTtcbmZ1bmN0aW9uIGR1bXBQcm9maWxlcygpIHtcbiAgICBwcm9maWxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgaW5mbyA9IHRpbWVyc1tuYW1lXTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLSBbXCIgKyBuYW1lICsgXCJdIFNUT1AgdG90YWw6IFwiICsgaW5mby50b3RhbFRpbWUgKyBcIiBjb3VudDpcIiArIGluZm8uY291bnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCItLS0tIFtcIiArIG5hbWUgKyBcIl0gTmV2ZXIgY2FsbGVkXCIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmR1bXBQcm9maWxlcyA9IGR1bXBQcm9maWxlcztcbmZ1bmN0aW9uIHJlc2V0UHJvZmlsZXMoKSB7XG4gICAgcHJvZmlsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgdmFyIGluZm8gPSB0aW1lcnNbbmFtZV07XG4gICAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5ydW5Db3VudCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLSB0aW1lciB3aXRoIG5hbWUgW1wiICsgbmFtZSArIFwiXSBpcyBjdXJyZW50bHkgcnVubmluZyBhbmQgd29uJ3QgYmUgcmVzZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aW1lcnNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVzZXRQcm9maWxlcyA9IHJlc2V0UHJvZmlsZXM7XG5mdW5jdGlvbiBzdGFydENQVVByb2ZpbGUobmFtZSkge1xuICAgIGlmIChhbnlHbG9iYWwuYW5kcm9pZCkge1xuICAgICAgICBfX3N0YXJ0Q1BVUHJvZmlsZXIobmFtZSk7XG4gICAgfVxufVxuZXhwb3J0cy5zdGFydENQVVByb2ZpbGUgPSBzdGFydENQVVByb2ZpbGU7XG5mdW5jdGlvbiBzdG9wQ1BVUHJvZmlsZShuYW1lKSB7XG4gICAgaWYgKGFueUdsb2JhbC5hbmRyb2lkKSB7XG4gICAgICAgIF9fc3RvcENQVVByb2ZpbGVyKG5hbWUpO1xuICAgIH1cbn1cbmV4cG9ydHMuc3RvcENQVVByb2ZpbGUgPSBzdG9wQ1BVUHJvZmlsZTtcbmZ1bmN0aW9uIGxldmVsKCkge1xuICAgIHJldHVybiB0cmFjaW5nTGV2ZWw7XG59XG5leHBvcnRzLmxldmVsID0gbGV2ZWw7XG5mdW5jdGlvbiB0cmFjZShtZXNzYWdlLCBzdGFydCwgZW5kKSB7XG4gICAgbG9nKFwiVGltZWxpbmU6IE1vZHVsZXM6IFwiICsgbWVzc2FnZSArIFwiICAoXCIgKyBzdGFydCArIFwibXMuIC0gXCIgKyBlbmQgKyBcIm1zLilcIik7XG59XG5leHBvcnRzLnRyYWNlID0gdHJhY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9maWxpbmcuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVuY29kaW5nO1xuKGZ1bmN0aW9uIChlbmNvZGluZykge1xuICAgIGVuY29kaW5nLklTT184ODU5XzEgPSA1O1xuICAgIGVuY29kaW5nLlVTX0FTQ0lJID0gMTtcbiAgICBlbmNvZGluZy5VVEZfMTYgPSAxMDtcbiAgICBlbmNvZGluZy5VVEZfMTZCRSA9IDB4OTAwMDAxMDA7XG4gICAgZW5jb2RpbmcuVVRGXzE2TEUgPSAweDk0MDAwMTAwO1xuICAgIGVuY29kaW5nLlVURl84ID0gNDtcbn0pKGVuY29kaW5nID0gZXhwb3J0cy5lbmNvZGluZyB8fCAoZXhwb3J0cy5lbmNvZGluZyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0Lmlvcy5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZW5hYmxlZCA9IGZhbHNlO1xudmFyIF9jYXRlZ29yaWVzID0ge307XG52YXIgX3dyaXRlcnMgPSBbXTtcbnZhciBfZXZlbnRMaXN0ZW5lcnMgPSBbXTtcbnZhciBfZXJyb3JIYW5kbGVyO1xuZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGVuYWJsZWQgPSB0cnVlO1xufVxuZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7XG5mdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGVuYWJsZWQgPSBmYWxzZTtcbn1cbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5mdW5jdGlvbiBpc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIGVuYWJsZWQ7XG59XG5leHBvcnRzLmlzRW5hYmxlZCA9IGlzRW5hYmxlZDtcbmZ1bmN0aW9uIGlzQ2F0ZWdvcnlTZXQoY2F0ZWdvcnkpIHtcbiAgICByZXR1cm4gY2F0ZWdvcnkgaW4gX2NhdGVnb3JpZXM7XG59XG5leHBvcnRzLmlzQ2F0ZWdvcnlTZXQgPSBpc0NhdGVnb3J5U2V0O1xuZnVuY3Rpb24gYWRkV3JpdGVyKHdyaXRlcikge1xuICAgIF93cml0ZXJzLnB1c2god3JpdGVyKTtcbn1cbmV4cG9ydHMuYWRkV3JpdGVyID0gYWRkV3JpdGVyO1xuZnVuY3Rpb24gcmVtb3ZlV3JpdGVyKHdyaXRlcikge1xuICAgIHZhciBpbmRleCA9IF93cml0ZXJzLmluZGV4T2Yod3JpdGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBfd3JpdGVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbmV4cG9ydHMucmVtb3ZlV3JpdGVyID0gcmVtb3ZlV3JpdGVyO1xuZnVuY3Rpb24gY2xlYXJXcml0ZXJzKCkge1xuICAgIGlmIChfd3JpdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIF93cml0ZXJzLnNwbGljZSgwLCBfd3JpdGVycy5sZW5ndGgpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2xlYXJXcml0ZXJzID0gY2xlYXJXcml0ZXJzO1xuZnVuY3Rpb24gc2V0Q2F0ZWdvcmllcyhjYXRlZ29yaWVzKSB7XG4gICAgX2NhdGVnb3JpZXMgPSB7fTtcbiAgICBhZGRDYXRlZ29yaWVzKGNhdGVnb3JpZXMpO1xufVxuZXhwb3J0cy5zZXRDYXRlZ29yaWVzID0gc2V0Q2F0ZWdvcmllcztcbmZ1bmN0aW9uIGFkZENhdGVnb3JpZXMoY2F0ZWdvcmllcykge1xuICAgIHZhciBzcGxpdCA9IGNhdGVnb3JpZXMuc3BsaXQoXCIsXCIpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3BsaXQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX2NhdGVnb3JpZXNbc3BsaXRbaV0udHJpbSgpXSA9IHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5hZGRDYXRlZ29yaWVzID0gYWRkQ2F0ZWdvcmllcztcbmZ1bmN0aW9uIHdyaXRlKG1lc3NhZ2UsIGNhdGVnb3J5LCB0eXBlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKHR5cGUgPT09IG1lc3NhZ2VUeXBlLmVycm9yKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBfd3JpdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgX3dyaXRlcnNbaV0ud3JpdGUobWVzc2FnZSwgY2F0ZWdvcnksIHR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCEoY2F0ZWdvcnkgaW4gX2NhdGVnb3JpZXMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IF93cml0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIF93cml0ZXJzW2ldLndyaXRlKG1lc3NhZ2UsIGNhdGVnb3J5LCB0eXBlKTtcbiAgICB9XG59XG5leHBvcnRzLndyaXRlID0gd3JpdGU7XG5mdW5jdGlvbiBub3RpZnlFdmVudChvYmplY3QsIG5hbWUsIGRhdGEpIHtcbiAgICBpZiAoIWVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaSwgbGlzdGVuZXIsIGZpbHRlcnM7XG4gICAgZm9yIChpID0gMDsgaSA8IF9ldmVudExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5lciA9IF9ldmVudExpc3RlbmVyc1tpXTtcbiAgICAgICAgaWYgKGxpc3RlbmVyLmZpbHRlcikge1xuICAgICAgICAgICAgZmlsdGVycyA9IGxpc3RlbmVyLmZpbHRlci5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBmaWx0ZXJzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLnRyaW0oKSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5vbihvYmplY3QsIG5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIub24ob2JqZWN0LCBuYW1lLCBkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMubm90aWZ5RXZlbnQgPSBub3RpZnlFdmVudDtcbmZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgICBfZXZlbnRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG59XG5leHBvcnRzLmFkZEV2ZW50TGlzdGVuZXIgPSBhZGRFdmVudExpc3RlbmVyO1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcikge1xuICAgIHZhciBpbmRleCA9IF9ldmVudExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBfZXZlbnRMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5leHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSByZW1vdmVFdmVudExpc3RlbmVyO1xudmFyIG1lc3NhZ2VUeXBlO1xuKGZ1bmN0aW9uIChtZXNzYWdlVHlwZSkge1xuICAgIG1lc3NhZ2VUeXBlLmxvZyA9IDA7XG4gICAgbWVzc2FnZVR5cGUuaW5mbyA9IDE7XG4gICAgbWVzc2FnZVR5cGUud2FybiA9IDI7XG4gICAgbWVzc2FnZVR5cGUuZXJyb3IgPSAzO1xufSkobWVzc2FnZVR5cGUgPSBleHBvcnRzLm1lc3NhZ2VUeXBlIHx8IChleHBvcnRzLm1lc3NhZ2VUeXBlID0ge30pKTtcbnZhciBjYXRlZ29yaWVzO1xuKGZ1bmN0aW9uIChjYXRlZ29yaWVzKSB7XG4gICAgY2F0ZWdvcmllcy5WaXN1YWxUcmVlRXZlbnRzID0gXCJWaXN1YWxUcmVlRXZlbnRzXCI7XG4gICAgY2F0ZWdvcmllcy5MYXlvdXQgPSBcIkxheW91dFwiO1xuICAgIGNhdGVnb3JpZXMuU3R5bGUgPSBcIlN0eWxlXCI7XG4gICAgY2F0ZWdvcmllcy5WaWV3SGllcmFyY2h5ID0gXCJWaWV3SGllcmFyY2h5XCI7XG4gICAgY2F0ZWdvcmllcy5OYXRpdmVMaWZlY3ljbGUgPSBcIk5hdGl2ZUxpZmVjeWNsZVwiO1xuICAgIGNhdGVnb3JpZXMuRGVidWcgPSBcIkRlYnVnXCI7XG4gICAgY2F0ZWdvcmllcy5OYXZpZ2F0aW9uID0gXCJOYXZpZ2F0aW9uXCI7XG4gICAgY2F0ZWdvcmllcy5UZXN0ID0gXCJUZXN0XCI7XG4gICAgY2F0ZWdvcmllcy5CaW5kaW5nID0gXCJCaW5kaW5nXCI7XG4gICAgY2F0ZWdvcmllcy5CaW5kaW5nRXJyb3IgPSBcIkJpbmRpbmdFcnJvclwiO1xuICAgIGNhdGVnb3JpZXMuRXJyb3IgPSBcIkVycm9yXCI7XG4gICAgY2F0ZWdvcmllcy5BbmltYXRpb24gPSBcIkFuaW1hdGlvblwiO1xuICAgIGNhdGVnb3JpZXMuVHJhbnNpdGlvbiA9IFwiVHJhbnNpdGlvblwiO1xuICAgIGNhdGVnb3JpZXMuTGl2ZXN5bmMgPSBcIkxpdmVzeW5jXCI7XG4gICAgY2F0ZWdvcmllcy5Nb2R1bGVOYW1lUmVzb2x2ZXIgPSBcIk1vZHVsZU5hbWVSZXNvbHZlclwiO1xuICAgIGNhdGVnb3JpZXMuc2VwYXJhdG9yID0gXCIsXCI7XG4gICAgY2F0ZWdvcmllcy5BbGwgPSBbXG4gICAgICAgIGNhdGVnb3JpZXMuVmlzdWFsVHJlZUV2ZW50cywgY2F0ZWdvcmllcy5MYXlvdXQsIGNhdGVnb3JpZXMuU3R5bGUsXG4gICAgICAgIGNhdGVnb3JpZXMuVmlld0hpZXJhcmNoeSwgY2F0ZWdvcmllcy5OYXRpdmVMaWZlY3ljbGUsXG4gICAgICAgIGNhdGVnb3JpZXMuRGVidWcsIGNhdGVnb3JpZXMuTmF2aWdhdGlvbiwgY2F0ZWdvcmllcy5UZXN0LCBjYXRlZ29yaWVzLkJpbmRpbmcsXG4gICAgICAgIGNhdGVnb3JpZXMuRXJyb3IsIGNhdGVnb3JpZXMuQW5pbWF0aW9uLCBjYXRlZ29yaWVzLlRyYW5zaXRpb24sIGNhdGVnb3JpZXMuTGl2ZXN5bmMsXG4gICAgICAgIGNhdGVnb3JpZXMuTW9kdWxlTmFtZVJlc29sdmVyXG4gICAgXVxuICAgICAgICAuam9pbihjYXRlZ29yaWVzLnNlcGFyYXRvcik7XG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGNhdGVnb3JpZXMuc2VwYXJhdG9yLCBhcmd1bWVudHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGNhdGVnb3JpZXMuY29uY2F0ID0gY29uY2F0O1xufSkoY2F0ZWdvcmllcyA9IGV4cG9ydHMuY2F0ZWdvcmllcyB8fCAoZXhwb3J0cy5jYXRlZ29yaWVzID0ge30pKTtcbnZhciBDb25zb2xlV3JpdGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zb2xlV3JpdGVyKCkge1xuICAgIH1cbiAgICBDb25zb2xlV3JpdGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChtZXNzYWdlLCBjYXRlZ29yeSwgdHlwZSkge1xuICAgICAgICBpZiAoIWNvbnNvbGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbXNnVHlwZTtcbiAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbXNnVHlwZSA9IG1lc3NhZ2VUeXBlLmxvZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1zZ1R5cGUgPSB0eXBlO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAobXNnVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBtZXNzYWdlVHlwZS5sb2c6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2F0ZWdvcnkgKyBcIjogXCIgKyBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgbWVzc2FnZVR5cGUuaW5mbzpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oY2F0ZWdvcnkgKyBcIjogXCIgKyBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgbWVzc2FnZVR5cGUud2FybjpcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oY2F0ZWdvcnkgKyBcIjogXCIgKyBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgbWVzc2FnZVR5cGUuZXJyb3I6XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihjYXRlZ29yeSArIFwiOiBcIiArIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc29sZVdyaXRlcjtcbn0oKSk7XG5hZGRXcml0ZXIobmV3IENvbnNvbGVXcml0ZXIoKSk7XG52YXIgRGVmYXVsdEVycm9ySGFuZGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmYXVsdEVycm9ySGFuZGxlcigpIHtcbiAgICB9XG4gICAgRGVmYXVsdEVycm9ySGFuZGxlci5wcm90b3R5cGUuaGFuZGxlckVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH07XG4gICAgcmV0dXJuIERlZmF1bHRFcnJvckhhbmRsZXI7XG59KCkpO1xuZXhwb3J0cy5EZWZhdWx0RXJyb3JIYW5kbGVyID0gRGVmYXVsdEVycm9ySGFuZGxlcjtcbnNldEVycm9ySGFuZGxlcihuZXcgRGVmYXVsdEVycm9ySGFuZGxlcigpKTtcbmZ1bmN0aW9uIGdldEVycm9ySGFuZGxlcigpIHtcbiAgICByZXR1cm4gX2Vycm9ySGFuZGxlcjtcbn1cbmV4cG9ydHMuZ2V0RXJyb3JIYW5kbGVyID0gZ2V0RXJyb3JIYW5kbGVyO1xuZnVuY3Rpb24gc2V0RXJyb3JIYW5kbGVyKGhhbmRsZXIpIHtcbiAgICBfZXJyb3JIYW5kbGVyID0gaGFuZGxlcjtcbn1cbmV4cG9ydHMuc2V0RXJyb3JIYW5kbGVyID0gc2V0RXJyb3JIYW5kbGVyO1xuZnVuY3Rpb24gZXJyb3IoZXJyb3IpIHtcbiAgICBpZiAoIV9lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVycm9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKGVycm9yKTtcbiAgICB9XG4gICAgX2Vycm9ySGFuZGxlci5oYW5kbGVyRXJyb3IoZXJyb3IpO1xufVxuZXhwb3J0cy5lcnJvciA9IGVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhY2UuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvbG9yXzEgPSByZXF1aXJlKFwiLi4vLi4vY29sb3JcIik7XG5leHBvcnRzLkNvbG9yID0gY29sb3JfMS5Db2xvcjtcbnZhciB0cmFjZV8xID0gcmVxdWlyZShcIi4uLy4uL3RyYWNlXCIpO1xuZXhwb3J0cy50cmFjZUVuYWJsZWQgPSB0cmFjZV8xLmlzRW5hYmxlZDtcbmV4cG9ydHMudHJhY2VXcml0ZSA9IHRyYWNlXzEud3JpdGU7XG5leHBvcnRzLnRyYWNlQ2F0ZWdvcmllcyA9IHRyYWNlXzEuY2F0ZWdvcmllcztcbmV4cG9ydHMudHJhY2VUeXBlID0gdHJhY2VfMS5tZXNzYWdlVHlwZTtcbnZhciBzdHlsZV9wcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi4vc3R5bGluZy9zdHlsZS1wcm9wZXJ0aWVzXCIpO1xudmFyIFByb3BlcnRpZXM7XG4oZnVuY3Rpb24gKFByb3BlcnRpZXMpIHtcbiAgICBQcm9wZXJ0aWVzLm9wYWNpdHkgPSBcIm9wYWNpdHlcIjtcbiAgICBQcm9wZXJ0aWVzLmJhY2tncm91bmRDb2xvciA9IFwiYmFja2dyb3VuZENvbG9yXCI7XG4gICAgUHJvcGVydGllcy50cmFuc2xhdGUgPSBcInRyYW5zbGF0ZVwiO1xuICAgIFByb3BlcnRpZXMucm90YXRlID0gXCJyb3RhdGVcIjtcbiAgICBQcm9wZXJ0aWVzLnNjYWxlID0gXCJzY2FsZVwiO1xuICAgIFByb3BlcnRpZXMuaGVpZ2h0ID0gXCJoZWlnaHRcIjtcbiAgICBQcm9wZXJ0aWVzLndpZHRoID0gXCJ3aWR0aFwiO1xufSkoUHJvcGVydGllcyA9IGV4cG9ydHMuUHJvcGVydGllcyB8fCAoZXhwb3J0cy5Qcm9wZXJ0aWVzID0ge30pKTtcbnZhciBDdWJpY0JlemllckFuaW1hdGlvbkN1cnZlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDdWJpY0JlemllckFuaW1hdGlvbkN1cnZlKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgICAgIHRoaXMueDEgPSB4MTtcbiAgICAgICAgdGhpcy55MSA9IHkxO1xuICAgICAgICB0aGlzLngyID0geDI7XG4gICAgICAgIHRoaXMueTIgPSB5MjtcbiAgICB9XG4gICAgcmV0dXJuIEN1YmljQmV6aWVyQW5pbWF0aW9uQ3VydmU7XG59KCkpO1xuZXhwb3J0cy5DdWJpY0JlemllckFuaW1hdGlvbkN1cnZlID0gQ3ViaWNCZXppZXJBbmltYXRpb25DdXJ2ZTtcbnZhciBBbmltYXRpb25CYXNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25CYXNlKGFuaW1hdGlvbkRlZmluaXRpb25zLCBwbGF5U2VxdWVudGlhbGx5KSB7XG4gICAgICAgIGlmICghYW5pbWF0aW9uRGVmaW5pdGlvbnMgfHwgYW5pbWF0aW9uRGVmaW5pdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhbmltYXRpb24gZGVmaW5pdGlvbnMgc3BlY2lmaWVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZV8xLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICB0cmFjZV8xLndyaXRlKFwiQW5hbHl6aW5nIFwiICsgYW5pbWF0aW9uRGVmaW5pdGlvbnMubGVuZ3RoICsgXCIgYW5pbWF0aW9uIGRlZmluaXRpb25zLi4uXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5BbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Byb3BlcnR5QW5pbWF0aW9ucyA9IG5ldyBBcnJheSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoXzEgPSBhbmltYXRpb25EZWZpbml0aW9ucy5sZW5ndGg7IGkgPCBsZW5ndGhfMTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGVmaW5pdGlvbnNbaV0uY3VydmUpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25EZWZpbml0aW9uc1tpXS5jdXJ2ZSA9IHRoaXMuX3Jlc29sdmVBbmltYXRpb25DdXJ2ZShhbmltYXRpb25EZWZpbml0aW9uc1tpXS5jdXJ2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wcm9wZXJ0eUFuaW1hdGlvbnMgPSB0aGlzLl9wcm9wZXJ0eUFuaW1hdGlvbnMuY29uY2F0KEFuaW1hdGlvbkJhc2UuX2NyZWF0ZVByb3BlcnR5QW5pbWF0aW9ucyhhbmltYXRpb25EZWZpbml0aW9uc1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3RoaW5nIHRvIGFuaW1hdGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFjZV8xLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICB0cmFjZV8xLndyaXRlKFwiQ3JlYXRlZCBcIiArIHRoaXMuX3Byb3BlcnR5QW5pbWF0aW9ucy5sZW5ndGggKyBcIiBpbmRpdmlkdWFsIHByb3BlcnR5IGFuaW1hdGlvbnMuXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5BbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BsYXlTZXF1ZW50aWFsbHkgPSBwbGF5U2VxdWVudGlhbGx5O1xuICAgIH1cbiAgICBBbmltYXRpb25CYXNlLnByb3RvdHlwZS5fcmVqZWN0QWxyZWFkeVBsYXlpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZWFzb24gPSBcIkFuaW1hdGlvbiBpcyBhbHJlYWR5IHBsYXlpbmcuXCI7XG4gICAgICAgIHRyYWNlXzEud3JpdGUocmVhc29uLCB0cmFjZV8xLmNhdGVnb3JpZXMuQW5pbWF0aW9uLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLndhcm4pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQW5pbWF0aW9uQmFzZS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzXzEgPSB0aGlzO1xuICAgICAgICB2YXIgYW5pbWF0aW9uRmluaXNoZWRQcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgX3RoaXNfMS5fcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICBfdGhpc18xLl9yZWplY3QgPSByZWplY3Q7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpeHVwQW5pbWF0aW9uUHJvbWlzZShhbmltYXRpb25GaW5pc2hlZFByb21pc2UpO1xuICAgICAgICB0aGlzLl9pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYW5pbWF0aW9uRmluaXNoZWRQcm9taXNlO1xuICAgIH07XG4gICAgQW5pbWF0aW9uQmFzZS5wcm90b3R5cGUuZml4dXBBbmltYXRpb25Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5jYW5jZWwoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF90aGVuID0gcHJvbWlzZS50aGVuO1xuICAgICAgICBwcm9taXNlLnRoZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgciA9IF90aGVuLmFwcGx5KHByb21pc2UsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBfdGhpcy5maXh1cEFuaW1hdGlvblByb21pc2Uocik7XG4gICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIF9jYXRjaCA9IHByb21pc2UuY2F0Y2g7XG4gICAgICAgIHByb21pc2UuY2F0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgciA9IF9jYXRjaC5hcHBseShwcm9taXNlLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgX3RoaXMuZml4dXBBbmltYXRpb25Qcm9taXNlKHIpO1xuICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBBbmltYXRpb25CYXNlLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uQmFzZS5wcm90b3R5cGUsIFwiaXNQbGF5aW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNQbGF5aW5nO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBBbmltYXRpb25CYXNlLnByb3RvdHlwZS5fcmVzb2x2ZUFuaW1hdGlvbkZpbmlzaGVkUHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Jlc29sdmUoKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkJhc2UucHJvdG90eXBlLl9yZWplY3RBbmltYXRpb25GaW5pc2hlZFByb21pc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKFwiQW5pbWF0aW9uIGNhbmNlbGxlZC5cIikpO1xuICAgIH07XG4gICAgQW5pbWF0aW9uQmFzZS5fY3JlYXRlUHJvcGVydHlBbmltYXRpb25zID0gZnVuY3Rpb24gKGFuaW1hdGlvbkRlZmluaXRpb24pIHtcbiAgICAgICAgaWYgKCFhbmltYXRpb25EZWZpbml0aW9uLnRhcmdldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYW5pbWF0aW9uIHRhcmdldCBzcGVjaWZpZWQuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGl0ZW0gaW4gYW5pbWF0aW9uRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRlZmluaXRpb25baXRlbV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChpdGVtID09PSBQcm9wZXJ0aWVzLm9wYWNpdHkgfHxcbiAgICAgICAgICAgICAgICBpdGVtID09PSBQcm9wZXJ0aWVzLnJvdGF0ZSB8fFxuICAgICAgICAgICAgICAgIGl0ZW0gPT09IFwiZHVyYXRpb25cIiB8fFxuICAgICAgICAgICAgICAgIGl0ZW0gPT09IFwiZGVsYXlcIiB8fFxuICAgICAgICAgICAgICAgIGl0ZW0gPT09IFwiaXRlcmF0aW9uc1wiKSAmJiB0eXBlb2YgYW5pbWF0aW9uRGVmaW5pdGlvbltpdGVtXSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3BlcnR5IFwiICsgaXRlbSArIFwiIG11c3QgYmUgdmFsaWQgbnVtYmVyLiBWYWx1ZTogXCIgKyBhbmltYXRpb25EZWZpbml0aW9uW2l0ZW1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKChpdGVtID09PSBQcm9wZXJ0aWVzLnNjYWxlIHx8IGl0ZW0gPT09IFByb3BlcnRpZXMudHJhbnNsYXRlKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgYW5pbWF0aW9uRGVmaW5pdGlvbltpdGVtXS54ICE9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBhbmltYXRpb25EZWZpbml0aW9uW2l0ZW1dLnkgIT09IFwibnVtYmVyXCIpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkgXCIgKyBpdGVtICsgXCIgbXVzdCBiZSB2YWxpZCBQYWlyLiBWYWx1ZTogXCIgKyBhbmltYXRpb25EZWZpbml0aW9uW2l0ZW1dKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0gPT09IFByb3BlcnRpZXMuYmFja2dyb3VuZENvbG9yICYmICFjb2xvcl8xLkNvbG9yLmlzVmFsaWQoYW5pbWF0aW9uRGVmaW5pdGlvbi5iYWNrZ3JvdW5kQ29sb3IpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkgXCIgKyBpdGVtICsgXCIgbXVzdCBiZSB2YWxpZCBjb2xvci4gVmFsdWU6IFwiICsgYW5pbWF0aW9uRGVmaW5pdGlvbltpdGVtXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtID09PSBQcm9wZXJ0aWVzLndpZHRoIHx8IGl0ZW0gPT09IFByb3BlcnRpZXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uRGVmaW5pdGlvbltpdGVtXSA9IHN0eWxlX3Byb3BlcnRpZXNfMS5QZXJjZW50TGVuZ3RoLnBhcnNlKGFuaW1hdGlvbkRlZmluaXRpb25baXRlbV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9wZXJ0eUFuaW1hdGlvbnMgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgaWYgKGFuaW1hdGlvbkRlZmluaXRpb24ub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eUFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBhbmltYXRpb25EZWZpbml0aW9uLnRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogUHJvcGVydGllcy5vcGFjaXR5LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhbmltYXRpb25EZWZpbml0aW9uLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGFuaW1hdGlvbkRlZmluaXRpb24uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZGVsYXk6IGFuaW1hdGlvbkRlZmluaXRpb24uZGVsYXksXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogYW5pbWF0aW9uRGVmaW5pdGlvbi5pdGVyYXRpb25zLFxuICAgICAgICAgICAgICAgIGN1cnZlOiBhbmltYXRpb25EZWZpbml0aW9uLmN1cnZlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uRGVmaW5pdGlvbi5iYWNrZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcGVydHlBbmltYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhcmdldDogYW5pbWF0aW9uRGVmaW5pdGlvbi50YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFByb3BlcnRpZXMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0eXBlb2YgYW5pbWF0aW9uRGVmaW5pdGlvbi5iYWNrZ3JvdW5kQ29sb3IgPT09IFwic3RyaW5nXCIgP1xuICAgICAgICAgICAgICAgICAgICBuZXcgY29sb3JfMS5Db2xvcihhbmltYXRpb25EZWZpbml0aW9uLmJhY2tncm91bmRDb2xvcikgOiBhbmltYXRpb25EZWZpbml0aW9uLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogYW5pbWF0aW9uRGVmaW5pdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBkZWxheTogYW5pbWF0aW9uRGVmaW5pdGlvbi5kZWxheSxcbiAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiBhbmltYXRpb25EZWZpbml0aW9uLml0ZXJhdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VydmU6IGFuaW1hdGlvbkRlZmluaXRpb24uY3VydmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltYXRpb25EZWZpbml0aW9uLnRyYW5zbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eUFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBhbmltYXRpb25EZWZpbml0aW9uLnRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogUHJvcGVydGllcy50cmFuc2xhdGUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbkRlZmluaXRpb24udHJhbnNsYXRlLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBhbmltYXRpb25EZWZpbml0aW9uLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGRlbGF5OiBhbmltYXRpb25EZWZpbml0aW9uLmRlbGF5LFxuICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IGFuaW1hdGlvbkRlZmluaXRpb24uaXRlcmF0aW9ucyxcbiAgICAgICAgICAgICAgICBjdXJ2ZTogYW5pbWF0aW9uRGVmaW5pdGlvbi5jdXJ2ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbkRlZmluaXRpb24uc2NhbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcGVydHlBbmltYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhcmdldDogYW5pbWF0aW9uRGVmaW5pdGlvbi50YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFByb3BlcnRpZXMuc2NhbGUsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbkRlZmluaXRpb24uc2NhbGUsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGFuaW1hdGlvbkRlZmluaXRpb24uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZGVsYXk6IGFuaW1hdGlvbkRlZmluaXRpb24uZGVsYXksXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogYW5pbWF0aW9uRGVmaW5pdGlvbi5pdGVyYXRpb25zLFxuICAgICAgICAgICAgICAgIGN1cnZlOiBhbmltYXRpb25EZWZpbml0aW9uLmN1cnZlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uRGVmaW5pdGlvbi5yb3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcGVydHlBbmltYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhcmdldDogYW5pbWF0aW9uRGVmaW5pdGlvbi50YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFByb3BlcnRpZXMucm90YXRlLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhbmltYXRpb25EZWZpbml0aW9uLnJvdGF0ZSxcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogYW5pbWF0aW9uRGVmaW5pdGlvbi5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBkZWxheTogYW5pbWF0aW9uRGVmaW5pdGlvbi5kZWxheSxcbiAgICAgICAgICAgICAgICBpdGVyYXRpb25zOiBhbmltYXRpb25EZWZpbml0aW9uLml0ZXJhdGlvbnMsXG4gICAgICAgICAgICAgICAgY3VydmU6IGFuaW1hdGlvbkRlZmluaXRpb24uY3VydmVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbmltYXRpb25EZWZpbml0aW9uLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eUFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBhbmltYXRpb25EZWZpbml0aW9uLnRhcmdldCxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eTogUHJvcGVydGllcy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbkRlZmluaXRpb24uaGVpZ2h0LFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBhbmltYXRpb25EZWZpbml0aW9uLmR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGRlbGF5OiBhbmltYXRpb25EZWZpbml0aW9uLmRlbGF5LFxuICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IGFuaW1hdGlvbkRlZmluaXRpb24uaXRlcmF0aW9ucyxcbiAgICAgICAgICAgICAgICBjdXJ2ZTogYW5pbWF0aW9uRGVmaW5pdGlvbi5jdXJ2ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFuaW1hdGlvbkRlZmluaXRpb24ud2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcGVydHlBbmltYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhcmdldDogYW5pbWF0aW9uRGVmaW5pdGlvbi50YXJnZXQsXG4gICAgICAgICAgICAgICAgcHJvcGVydHk6IFByb3BlcnRpZXMud2lkdGgsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGFuaW1hdGlvbkRlZmluaXRpb24ud2lkdGgsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGFuaW1hdGlvbkRlZmluaXRpb24uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgZGVsYXk6IGFuaW1hdGlvbkRlZmluaXRpb24uZGVsYXksXG4gICAgICAgICAgICAgICAgaXRlcmF0aW9uczogYW5pbWF0aW9uRGVmaW5pdGlvbi5pdGVyYXRpb25zLFxuICAgICAgICAgICAgICAgIGN1cnZlOiBhbmltYXRpb25EZWZpbml0aW9uLmN1cnZlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcGVydHlBbmltYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8ga25vd24gYW5pbWF0aW9uIHByb3BlcnRpZXMgc3BlY2lmaWVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUFuaW1hdGlvbnM7XG4gICAgfTtcbiAgICBBbmltYXRpb25CYXNlLl9nZXRBbmltYXRpb25JbmZvID0gZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdGFyZ2V0OiBhbmltYXRpb24udGFyZ2V0LmlkLFxuICAgICAgICAgICAgcHJvcGVydHk6IGFuaW1hdGlvbi5wcm9wZXJ0eSxcbiAgICAgICAgICAgIHZhbHVlOiBhbmltYXRpb24udmFsdWUsXG4gICAgICAgICAgICBkdXJhdGlvbjogYW5pbWF0aW9uLmR1cmF0aW9uLFxuICAgICAgICAgICAgZGVsYXk6IGFuaW1hdGlvbi5kZWxheSxcbiAgICAgICAgICAgIGl0ZXJhdGlvbnM6IGFuaW1hdGlvbi5pdGVyYXRpb25zLFxuICAgICAgICAgICAgY3VydmU6IGFuaW1hdGlvbi5jdXJ2ZVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25CYXNlO1xufSgpKTtcbmV4cG9ydHMuQW5pbWF0aW9uQmFzZSA9IEFuaW1hdGlvbkJhc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmltYXRpb24tY29tbW9uLmpzLm1hcCIsImZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgYW5pbWF0aW9uX2NvbW1vbl8xID0gcmVxdWlyZShcIi4vYW5pbWF0aW9uLWNvbW1vblwiKTtcbnZhciBzdHlsZV9wcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi4vc3R5bGluZy9zdHlsZS1wcm9wZXJ0aWVzXCIpO1xudmFyIHBsYXRmb3JtXzEgPSByZXF1aXJlKFwiLi4vLi4vcGxhdGZvcm1cIik7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9hbmltYXRpb24tY29tbW9uXCIpKTtcbnZhciBfdHJhbnNmb3JtID0gXCJfdHJhbnNmb3JtXCI7XG52YXIgX3NraXAgPSBcIl9za2lwXCI7XG52YXIgRkxUX01BWCA9IDM0MDI4MjM0NjYzODUyODg1OTgxMTcwNDE4MzQ4NDUxNjkyNTQ0MC4wMDAwMDA7XG52YXIgQW5pbWF0aW9uSW5mbyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uSW5mbygpIHtcbiAgICB9XG4gICAgcmV0dXJuIEFuaW1hdGlvbkluZm87XG59KCkpO1xudmFyIEFuaW1hdGlvbkRlbGVnYXRlSW1wbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFuaW1hdGlvbkRlbGVnYXRlSW1wbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbmltYXRpb25EZWxlZ2F0ZUltcGwoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uRGVsZWdhdGVJbXBsLmluaXRXaXRoRmluaXNoZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChmaW5pc2hlZENhbGxiYWNrLCBwcm9wZXJ0eUFuaW1hdGlvbiwgdmFsdWVTb3VyY2UpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gQW5pbWF0aW9uRGVsZWdhdGVJbXBsLm5ldygpO1xuICAgICAgICBkZWxlZ2F0ZS5fZmluaXNoZWRDYWxsYmFjayA9IGZpbmlzaGVkQ2FsbGJhY2s7XG4gICAgICAgIGRlbGVnYXRlLl9wcm9wZXJ0eUFuaW1hdGlvbiA9IHByb3BlcnR5QW5pbWF0aW9uO1xuICAgICAgICBkZWxlZ2F0ZS5fdmFsdWVTb3VyY2UgPSB2YWx1ZVNvdXJjZTtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlO1xuICAgIH07XG4gICAgQW5pbWF0aW9uRGVsZWdhdGVJbXBsLnByb3RvdHlwZS5hbmltYXRpb25EaWRTdGFydCA9IGZ1bmN0aW9uIChhbmltKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX3Byb3BlcnR5QW5pbWF0aW9uLnZhbHVlO1xuICAgICAgICB2YXIgc2V0TG9jYWwgPSB0aGlzLl92YWx1ZVNvdXJjZSA9PT0gXCJhbmltYXRpb25cIjtcbiAgICAgICAgdmFyIHRhcmdldFN0eWxlID0gdGhpcy5fcHJvcGVydHlBbmltYXRpb24udGFyZ2V0LnN0eWxlO1xuICAgICAgICB0aGlzLl9wcm9wZXJ0eUFuaW1hdGlvbi50YXJnZXQuX3N1c3BlbmRQcmVzZW50YXRpb25MYXllclVwZGF0ZXMoKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9wcm9wZXJ0eUFuaW1hdGlvbi5wcm9wZXJ0eSkge1xuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5iYWNrZ3JvdW5kQ29sb3I6XG4gICAgICAgICAgICAgICAgdGFyZ2V0U3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEuYmFja2dyb3VuZENvbG9yUHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5iYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMub3BhY2l0eTpcbiAgICAgICAgICAgICAgICB0YXJnZXRTdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5vcGFjaXR5UHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5vcGFjaXR5UHJvcGVydHkua2V5ZnJhbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnJvdGF0ZTpcbiAgICAgICAgICAgICAgICB0YXJnZXRTdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5yb3RhdGVQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnJvdGF0ZVByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGU6XG4gICAgICAgICAgICAgICAgdGFyZ2V0U3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWFByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWFByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlLng7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWVByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWVByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlLnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLmhlaWdodDpcbiAgICAgICAgICAgICAgICB0YXJnZXRTdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5oZWlnaHRQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLmhlaWdodFByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy53aWR0aDpcbiAgICAgICAgICAgICAgICB0YXJnZXRTdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS53aWR0aFByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEud2lkdGhQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMuc2NhbGU6XG4gICAgICAgICAgICAgICAgdGFyZ2V0U3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEuc2NhbGVYUHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5zY2FsZVhQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZS54ID09PSAwID8gMC4wMDEgOiB2YWx1ZS54O1xuICAgICAgICAgICAgICAgIHRhcmdldFN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWVByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEuc2NhbGVZUHJvcGVydHkua2V5ZnJhbWVdID0gdmFsdWUueSA9PT0gMCA/IDAuMDAxIDogdmFsdWUueTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgX3RyYW5zZm9ybTpcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVbYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMudHJhbnNsYXRlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVhQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVhQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGVdLng7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGVdLnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5zY2FsZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IHZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnNjYWxlXS54O1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnNjYWxlXS55O1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5zY2FsZVhQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWFByb3BlcnR5LmtleWZyYW1lXSA9IHggPT09IDAgPyAwLjAwMSA6IHg7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWVByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEuc2NhbGVZUHJvcGVydHkua2V5ZnJhbWVdID0geSA9PT0gMCA/IDAuMDAxIDogeTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcHJvcGVydHlBbmltYXRpb24udGFyZ2V0Ll9yZXN1bWVQcmVzZW50YXRpb25MYXllclVwZGF0ZXMoKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbkRlbGVnYXRlSW1wbC5wcm90b3R5cGUuYW5pbWF0aW9uRGlkU3RvcEZpbmlzaGVkID0gZnVuY3Rpb24gKGFuaW0sIGZpbmlzaGVkKSB7XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hlZENhbGxiYWNrKCFmaW5pc2hlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbmlzaGVkICYmIHRoaXMubmV4dEFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5uZXh0QW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFuaW1hdGlvbkRlbGVnYXRlSW1wbC5PYmpDUHJvdG9jb2xzID0gZ2xvYmFsLkNBQW5pbWF0aW9uRGVsZWdhdGUgPyBbZ2xvYmFsLkNBQW5pbWF0aW9uRGVsZWdhdGVdIDogW107XG4gICAgcmV0dXJuIEFuaW1hdGlvbkRlbGVnYXRlSW1wbDtcbn0oTlNPYmplY3QpKTtcbmZ1bmN0aW9uIF9yZXNvbHZlQW5pbWF0aW9uQ3VydmUoY3VydmUpIHtcbiAgICBzd2l0Y2ggKGN1cnZlKSB7XG4gICAgICAgIGNhc2UgXCJlYXNlSW5cIjpcbiAgICAgICAgICAgIHJldHVybiBDQU1lZGlhVGltaW5nRnVuY3Rpb24uZnVuY3Rpb25XaXRoTmFtZShrQ0FNZWRpYVRpbWluZ0Z1bmN0aW9uRWFzZUluKTtcbiAgICAgICAgY2FzZSBcImVhc2VPdXRcIjpcbiAgICAgICAgICAgIHJldHVybiBDQU1lZGlhVGltaW5nRnVuY3Rpb24uZnVuY3Rpb25XaXRoTmFtZShrQ0FNZWRpYVRpbWluZ0Z1bmN0aW9uRWFzZU91dCk7XG4gICAgICAgIGNhc2UgXCJlYXNlSW5PdXRcIjpcbiAgICAgICAgICAgIHJldHVybiBDQU1lZGlhVGltaW5nRnVuY3Rpb24uZnVuY3Rpb25XaXRoTmFtZShrQ0FNZWRpYVRpbWluZ0Z1bmN0aW9uRWFzZUluRWFzZU91dCk7XG4gICAgICAgIGNhc2UgXCJsaW5lYXJcIjpcbiAgICAgICAgICAgIHJldHVybiBDQU1lZGlhVGltaW5nRnVuY3Rpb24uZnVuY3Rpb25XaXRoTmFtZShrQ0FNZWRpYVRpbWluZ0Z1bmN0aW9uTGluZWFyKTtcbiAgICAgICAgY2FzZSBcInNwcmluZ1wiOlxuICAgICAgICAgICAgcmV0dXJuIGN1cnZlO1xuICAgICAgICBjYXNlIFwiZWFzZVwiOlxuICAgICAgICAgICAgcmV0dXJuIENBTWVkaWFUaW1pbmdGdW5jdGlvbi5mdW5jdGlvbldpdGhDb250cm9sUG9pbnRzKDAuMjUsIDAuMSwgMC4yNSwgMS4wKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChjdXJ2ZSBpbnN0YW5jZW9mIENBTWVkaWFUaW1pbmdGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXJ2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnZlIGluc3RhbmNlb2YgYW5pbWF0aW9uX2NvbW1vbl8xLkN1YmljQmV6aWVyQW5pbWF0aW9uQ3VydmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uQ3VydmUgPSBjdXJ2ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gQ0FNZWRpYVRpbWluZ0Z1bmN0aW9uLmZ1bmN0aW9uV2l0aENvbnRyb2xQb2ludHMoYW5pbWF0aW9uQ3VydmUueDEsIGFuaW1hdGlvbkN1cnZlLnkxLCBhbmltYXRpb25DdXJ2ZS54MiwgYW5pbWF0aW9uQ3VydmUueTIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhbmltYXRpb24gY3VydmU6IFwiICsgY3VydmUpO1xuICAgICAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuX3Jlc29sdmVBbmltYXRpb25DdXJ2ZSA9IF9yZXNvbHZlQW5pbWF0aW9uQ3VydmU7XG52YXIgQW5pbWF0aW9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5pbWF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFuaW1hdGlvbihhbmltYXRpb25EZWZpbml0aW9ucywgcGxheVNlcXVlbnRpYWxseSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBhbmltYXRpb25EZWZpbml0aW9ucywgcGxheVNlcXVlbnRpYWxseSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlU291cmNlID0gXCJhbmltYXRpb25cIjtcbiAgICAgICAgaWYgKGFuaW1hdGlvbkRlZmluaXRpb25zLmxlbmd0aCA+IDAgJiYgYW5pbWF0aW9uRGVmaW5pdGlvbnNbMF0udmFsdWVTb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgX3RoaXMuX3ZhbHVlU291cmNlID0gYW5pbWF0aW9uRGVmaW5pdGlvbnNbMF0udmFsdWVTb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwbGF5U2VxdWVudGlhbGx5KSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlV3JpdGUoXCJOb24tbWVyZ2VkIFByb3BlcnR5IEFuaW1hdGlvbnM6IFwiICsgX3RoaXMuX3Byb3BlcnR5QW5pbWF0aW9ucy5sZW5ndGgsIGFuaW1hdGlvbl9jb21tb25fMS50cmFjZUNhdGVnb3JpZXMuQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9tZXJnZWRQcm9wZXJ0eUFuaW1hdGlvbnMgPSBBbmltYXRpb24uX21lcmdlQWZmaW5lVHJhbnNmb3JtQW5pbWF0aW9ucyhfdGhpcy5fcHJvcGVydHlBbmltYXRpb25zKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb25fY29tbW9uXzEudHJhY2VFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fY29tbW9uXzEudHJhY2VXcml0ZShcIk1lcmdlZCBQcm9wZXJ0eSBBbmltYXRpb25zOiBcIiArIF90aGlzLl9tZXJnZWRQcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoLCBhbmltYXRpb25fY29tbW9uXzEudHJhY2VDYXRlZ29yaWVzLkFuaW1hdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5fbWVyZ2VkUHJvcGVydHlBbmltYXRpb25zID0gX3RoaXMuX3Byb3BlcnR5QW5pbWF0aW9ucztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhhdCA9IF90aGlzO1xuICAgICAgICB2YXIgYW5pbWF0aW9uRmluaXNoZWRDYWxsYmFjayA9IGZ1bmN0aW9uIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGF0Ll9wbGF5U2VxdWVudGlhbGx5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGF0Ll9yZWplY3RBbmltYXRpb25GaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3Jlc29sdmVBbmltYXRpb25GaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2NhbmNlbGxlZEFuaW1hdGlvbnMrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2ZpbmlzaGVkQW5pbWF0aW9ucysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhhdC5fY2FuY2VsbGVkQW5pbWF0aW9ucyA+IDAgJiYgKHRoYXQuX2NhbmNlbGxlZEFuaW1hdGlvbnMgKyB0aGF0Ll9maW5pc2hlZEFuaW1hdGlvbnMpID09PSB0aGF0Ll9tZXJnZWRQcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fY29tbW9uXzEudHJhY2VFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9jb21tb25fMS50cmFjZVdyaXRlKHRoYXQuX2NhbmNlbGxlZEFuaW1hdGlvbnMgKyBcIiBhbmltYXRpb25zIGNhbmNlbGxlZC5cIiwgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlQ2F0ZWdvcmllcy5BbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3JlamVjdEFuaW1hdGlvbkZpbmlzaGVkUHJvbWlzZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGF0Ll9maW5pc2hlZEFuaW1hdGlvbnMgPT09IHRoYXQuX21lcmdlZFByb3BlcnR5QW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9jb21tb25fMS50cmFjZUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlV3JpdGUodGhhdC5fZmluaXNoZWRBbmltYXRpb25zICsgXCIgYW5pbWF0aW9ucyBmaW5pc2hlZC5cIiwgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlQ2F0ZWdvcmllcy5BbmltYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX3Jlc29sdmVBbmltYXRpb25GaW5pc2hlZFByb21pc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLl9pT1NBbmltYXRpb25GdW5jdGlvbiA9IEFuaW1hdGlvbi5fY3JlYXRlaU9TQW5pbWF0aW9uRnVuY3Rpb24oX3RoaXMuX21lcmdlZFByb3BlcnR5QW5pbWF0aW9ucywgMCwgX3RoaXMuX3BsYXlTZXF1ZW50aWFsbHksIF90aGlzLl92YWx1ZVNvdXJjZSwgYW5pbWF0aW9uRmluaXNoZWRDYWxsYmFjayk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWplY3RBbHJlYWR5UGxheWluZygpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhbmltYXRpb25GaW5pc2hlZFByb21pc2UgPSBfc3VwZXIucHJvdG90eXBlLnBsYXkuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fZmluaXNoZWRBbmltYXRpb25zID0gMDtcbiAgICAgICAgdGhpcy5fY2FuY2VsbGVkQW5pbWF0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuX2lPU0FuaW1hdGlvbkZ1bmN0aW9uKCk7XG4gICAgICAgIHJldHVybiBhbmltYXRpb25GaW5pc2hlZFByb21pc2U7XG4gICAgfTtcbiAgICBBbmltYXRpb24ucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUGxheWluZykge1xuICAgICAgICAgICAgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlV3JpdGUoXCJBbmltYXRpb24gaXMgbm90IGN1cnJlbnRseSBwbGF5aW5nLlwiLCBhbmltYXRpb25fY29tbW9uXzEudHJhY2VDYXRlZ29yaWVzLkFuaW1hdGlvbiwgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlVHlwZS53YXJuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLl9tZXJnZWRQcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoO1xuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlBbmltYXRpb24gPSB0aGlzLl9tZXJnZWRQcm9wZXJ0eUFuaW1hdGlvbnNbaV07XG4gICAgICAgICAgICBwcm9wZXJ0eUFuaW1hdGlvbi50YXJnZXQubmF0aXZlVmlld1Byb3RlY3RlZC5sYXllci5yZW1vdmVBbGxBbmltYXRpb25zKCk7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlBbmltYXRpb24uX3Byb3BlcnR5UmVzZXRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5QW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2socHJvcGVydHlBbmltYXRpb24uX29yaWdpbmFsVmFsdWUsIHRoaXMuX3ZhbHVlU291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5fcmVzb2x2ZUFuaW1hdGlvbkN1cnZlID0gZnVuY3Rpb24gKGN1cnZlKSB7XG4gICAgICAgIHJldHVybiBfcmVzb2x2ZUFuaW1hdGlvbkN1cnZlKGN1cnZlKTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbi5fY3JlYXRlaU9TQW5pbWF0aW9uRnVuY3Rpb24gPSBmdW5jdGlvbiAocHJvcGVydHlBbmltYXRpb25zLCBpbmRleCwgcGxheVNlcXVlbnRpYWxseSwgdmFsdWVTb3VyY2UsIGZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIGlmIChjYW5jZWxsZWQgJiYgZmluaXNoZWRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fY29tbW9uXzEudHJhY2VFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlV3JpdGUoXCJBbmltYXRpb24gXCIgKyAoaW5kZXggLSAxKS50b1N0cmluZygpICsgXCIgd2FzIGNhbmNlbGxlZC4gV2lsbCBza2lwIHRoZSByZXN0IG9mIGFuaW1hdGlvbnMgYW5kIGNhbGwgZmluaXNoZWRDYWxsYmFjayh0cnVlKS5cIiwgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlQ2F0ZWdvcmllcy5BbmltYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5pc2hlZENhbGxiYWNrKGNhbmNlbGxlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHByb3BlcnR5QW5pbWF0aW9uc1tpbmRleF07XG4gICAgICAgICAgICB2YXIgYXJncyA9IEFuaW1hdGlvbi5fZ2V0TmF0aXZlQW5pbWF0aW9uQXJndW1lbnRzKGFuaW1hdGlvbiwgdmFsdWVTb3VyY2UpO1xuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5jdXJ2ZSA9PT0gXCJzcHJpbmdcIikge1xuICAgICAgICAgICAgICAgIEFuaW1hdGlvbi5fY3JlYXRlTmF0aXZlU3ByaW5nQW5pbWF0aW9uKHByb3BlcnR5QW5pbWF0aW9ucywgaW5kZXgsIHBsYXlTZXF1ZW50aWFsbHksIGFyZ3MsIGFuaW1hdGlvbiwgdmFsdWVTb3VyY2UsIGZpbmlzaGVkQ2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uLl9jcmVhdGVOYXRpdmVBbmltYXRpb24ocHJvcGVydHlBbmltYXRpb25zLCBpbmRleCwgcGxheVNlcXVlbnRpYWxseSwgYXJncywgYW5pbWF0aW9uLCB2YWx1ZVNvdXJjZSwgZmluaXNoZWRDYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBBbmltYXRpb24uX2dldE5hdGl2ZUFuaW1hdGlvbkFyZ3VtZW50cyA9IGZ1bmN0aW9uIChhbmltYXRpb24sIHZhbHVlU291cmNlKSB7XG4gICAgICAgIHZhciBuYXRpdmVWaWV3ID0gYW5pbWF0aW9uLnRhcmdldC5uYXRpdmVWaWV3UHJvdGVjdGVkO1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lVG9BbmltYXRlID0gYW5pbWF0aW9uLnByb3BlcnR5O1xuICAgICAgICB2YXIgdG9WYWx1ZSA9IGFuaW1hdGlvbi52YWx1ZTtcbiAgICAgICAgdmFyIGZyb21WYWx1ZTtcbiAgICAgICAgdmFyIHBhcmVudCA9IGFuaW1hdGlvbi50YXJnZXQucGFyZW50O1xuICAgICAgICB2YXIgc2NyZWVuU2NhbGUgPSBwbGF0Zm9ybV8xLnNjcmVlbi5tYWluU2NyZWVuLnNjYWxlO1xuICAgICAgICB2YXIgdGVtcFJvdGF0ZSA9IChhbmltYXRpb24udGFyZ2V0LnJvdGF0ZSB8fCAwKSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgIHZhciBhYnM7XG4gICAgICAgIHZhciBzZXRMb2NhbCA9IHZhbHVlU291cmNlID09PSBcImFuaW1hdGlvblwiO1xuICAgICAgICBzd2l0Y2ggKGFuaW1hdGlvbi5wcm9wZXJ0eSkge1xuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5iYWNrZ3JvdW5kQ29sb3I6XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9vcmlnaW5hbFZhbHVlID0gYW5pbWF0aW9uLnRhcmdldC5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXQuc3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEuYmFja2dyb3VuZENvbG9yUHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5iYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IG5hdGl2ZVZpZXcubGF5ZXIuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgICAgIGlmIChuYXRpdmVWaWV3IGluc3RhbmNlb2YgVUlMYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBuYXRpdmVWaWV3LnNldFZhbHVlRm9yS2V5KFVJQ29sb3IuY2xlYXJDb2xvciwgXCJiYWNrZ3JvdW5kQ29sb3JcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRvVmFsdWUgPSB0b1ZhbHVlLkNHQ29sb3I7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLm9wYWNpdHk6XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9vcmlnaW5hbFZhbHVlID0gYW5pbWF0aW9uLnRhcmdldC5vcGFjaXR5O1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fcHJvcGVydHlSZXNldENhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLm9wYWNpdHlQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLm9wYWNpdHlQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IG5hdGl2ZVZpZXcubGF5ZXIub3BhY2l0eTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMucm90YXRlOlxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fb3JpZ2luYWxWYWx1ZSA9IGFuaW1hdGlvbi50YXJnZXQucm90YXRlICE9PSB1bmRlZmluZWQgPyBhbmltYXRpb24udGFyZ2V0LnJvdGF0ZSA6IDA7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXQuc3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEucm90YXRlUHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5yb3RhdGVQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZVRvQW5pbWF0ZSA9IFwidHJhbnNmb3JtLnJvdGF0aW9uXCI7XG4gICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gbmF0aXZlVmlldy5sYXllci52YWx1ZUZvcktleVBhdGgoXCJ0cmFuc2Zvcm0ucm90YXRpb25cIik7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi50YXJnZXQucm90YXRlICE9PSB1bmRlZmluZWQgJiYgYW5pbWF0aW9uLnRhcmdldC5yb3RhdGUgIT09IDAgJiYgTWF0aC5mbG9vcih0b1ZhbHVlIC8gMzYwKSAtIHRvVmFsdWUgLyAzNjAgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gYW5pbWF0aW9uLnRhcmdldC5yb3RhdGUgKiBNYXRoLlBJIC8gMTgwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b1ZhbHVlID0gdG9WYWx1ZSAqIE1hdGguUEkgLyAxODA7XG4gICAgICAgICAgICAgICAgYWJzID0gZmFicyhmcm9tVmFsdWUgLSB0b1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoYWJzIDwgMC4wMDEgJiYgZnJvbVZhbHVlICE9PSB0ZW1wUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IHRlbXBSb3RhdGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGU6XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9vcmlnaW5hbFZhbHVlID0geyB4OiBhbmltYXRpb24udGFyZ2V0LnRyYW5zbGF0ZVgsIHk6IGFuaW1hdGlvbi50YXJnZXQudHJhbnNsYXRlWSB9O1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fcHJvcGVydHlSZXNldENhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVhQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVhQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZS54O1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZS55O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lVG9BbmltYXRlID0gXCJ0cmFuc2Zvcm1cIjtcbiAgICAgICAgICAgICAgICBmcm9tVmFsdWUgPSBOU1ZhbHVlLnZhbHVlV2l0aENBVHJhbnNmb3JtM0QobmF0aXZlVmlldy5sYXllci50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIHRvVmFsdWUgPSBOU1ZhbHVlLnZhbHVlV2l0aENBVHJhbnNmb3JtM0QoQ0FUcmFuc2Zvcm0zRFRyYW5zbGF0ZShuYXRpdmVWaWV3LmxheWVyLnRyYW5zZm9ybSwgdG9WYWx1ZS54LCB0b1ZhbHVlLnksIDApKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMuc2NhbGU6XG4gICAgICAgICAgICAgICAgaWYgKHRvVmFsdWUueCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0b1ZhbHVlLnggPSAwLjAwMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRvVmFsdWUueSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0b1ZhbHVlLnkgPSAwLjAwMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9vcmlnaW5hbFZhbHVlID0geyB4OiBhbmltYXRpb24udGFyZ2V0LnNjYWxlWCwgeTogYW5pbWF0aW9uLnRhcmdldC5zY2FsZVkgfTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24uX3Byb3BlcnR5UmVzZXRDYWxsYmFjayA9IGZ1bmN0aW9uICh2YWx1ZSwgdmFsdWVTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldC5zdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5zY2FsZVhQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWFByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlLng7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXQuc3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEuc2NhbGVZUHJvcGVydHkubmFtZSA6IHN0eWxlX3Byb3BlcnRpZXNfMS5zY2FsZVlQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZS55O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lVG9BbmltYXRlID0gXCJ0cmFuc2Zvcm1cIjtcbiAgICAgICAgICAgICAgICBmcm9tVmFsdWUgPSBOU1ZhbHVlLnZhbHVlV2l0aENBVHJhbnNmb3JtM0QobmF0aXZlVmlldy5sYXllci50cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgIHRvVmFsdWUgPSBOU1ZhbHVlLnZhbHVlV2l0aENBVHJhbnNmb3JtM0QoQ0FUcmFuc2Zvcm0zRFNjYWxlKG5hdGl2ZVZpZXcubGF5ZXIudHJhbnNmb3JtLCB0b1ZhbHVlLngsIHRvVmFsdWUueSwgMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBfdHJhbnNmb3JtOlxuICAgICAgICAgICAgICAgIGZyb21WYWx1ZSA9IE5TVmFsdWUudmFsdWVXaXRoQ0FUcmFuc2Zvcm0zRChuYXRpdmVWaWV3LmxheWVyLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9vcmlnaW5hbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICB4czogYW5pbWF0aW9uLnRhcmdldC5zY2FsZVgsIHlzOiBhbmltYXRpb24udGFyZ2V0LnNjYWxlWSxcbiAgICAgICAgICAgICAgICAgICAgeHQ6IGFuaW1hdGlvbi50YXJnZXQudHJhbnNsYXRlWCwgeXQ6IGFuaW1hdGlvbi50YXJnZXQudHJhbnNsYXRlWVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUsIHZhbHVlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXQuc3R5bGVbc2V0TG9jYWwgPyBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWFByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEudHJhbnNsYXRlWFByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlLnh0O1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnRyYW5zbGF0ZVlQcm9wZXJ0eS5rZXlmcmFtZV0gPSB2YWx1ZS55dDtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldC5zdHlsZVtzZXRMb2NhbCA/IHN0eWxlX3Byb3BlcnRpZXNfMS5zY2FsZVhQcm9wZXJ0eS5uYW1lIDogc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWFByb3BlcnR5LmtleWZyYW1lXSA9IHZhbHVlLnhzO1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnN0eWxlW3NldExvY2FsID8gc3R5bGVfcHJvcGVydGllc18xLnNjYWxlWVByb3BlcnR5Lm5hbWUgOiBzdHlsZV9wcm9wZXJ0aWVzXzEuc2NhbGVZUHJvcGVydHkua2V5ZnJhbWVdID0gdmFsdWUueXM7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVUb0FuaW1hdGUgPSBcInRyYW5zZm9ybVwiO1xuICAgICAgICAgICAgICAgIHRvVmFsdWUgPSBOU1ZhbHVlLnZhbHVlV2l0aENBVHJhbnNmb3JtM0QoQW5pbWF0aW9uLl9jcmVhdGVOYXRpdmVBZmZpbmVUcmFuc2Zvcm0oYW5pbWF0aW9uKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLndpZHRoOlxuICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5oZWlnaHQ6XG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGFuaW1hdGlvbi5wcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICB2YXIgaXNIZWlnaHRfMSA9IGRpcmVjdGlvbiA9PT0gXCJoZWlnaHRcIjtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWVUb0FuaW1hdGUgPSBcImJvdW5kc1wiO1xuICAgICAgICAgICAgICAgIGlmICghcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBhbmltYXRlIFwiICsgZGlyZWN0aW9uICsgXCIgb24gcm9vdCB2aWV3XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50RXh0ZW50ID0gaXNIZWlnaHRfMSA/IHBhcmVudC5nZXRNZWFzdXJlZEhlaWdodCgpIDogcGFyZW50LmdldE1lYXN1cmVkV2lkdGgoKTtcbiAgICAgICAgICAgICAgICB2YXIgYXNOdW1iZXIgPSBzdHlsZV9wcm9wZXJ0aWVzXzEuUGVyY2VudExlbmd0aC50b0RldmljZVBpeGVscyhzdHlsZV9wcm9wZXJ0aWVzXzEuUGVyY2VudExlbmd0aC5wYXJzZSh0b1ZhbHVlKSwgcGFyZW50RXh0ZW50LCBwYXJlbnRFeHRlbnQpIC8gc2NyZWVuU2NhbGU7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRCb3VuZHMgPSBuYXRpdmVWaWV3LmxheWVyLmJvdW5kcztcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZW50WCA9IGlzSGVpZ2h0XzEgPyBjdXJyZW50Qm91bmRzLnNpemUud2lkdGggOiBhc051bWJlcjtcbiAgICAgICAgICAgICAgICB2YXIgZXh0ZW50WSA9IGlzSGVpZ2h0XzEgPyBhc051bWJlciA6IGN1cnJlbnRCb3VuZHMuc2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgZnJvbVZhbHVlID0gTlNWYWx1ZS52YWx1ZVdpdGhDR1JlY3QoY3VycmVudEJvdW5kcyk7XG4gICAgICAgICAgICAgICAgdG9WYWx1ZSA9IE5TVmFsdWUudmFsdWVXaXRoQ0dSZWN0KENHUmVjdE1ha2UoY3VycmVudEJvdW5kcy5vcmlnaW4ueCwgY3VycmVudEJvdW5kcy5vcmlnaW4ueSwgZXh0ZW50WCwgZXh0ZW50WSkpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fb3JpZ2luYWxWYWx1ZSA9IGFuaW1hdGlvbi50YXJnZXQuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fcHJvcGVydHlSZXNldENhbGxiYWNrID0gZnVuY3Rpb24gKHZhbHVlLCB2YWx1ZVNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IGlzSGVpZ2h0XzEgPyBzdHlsZV9wcm9wZXJ0aWVzXzEuaGVpZ2h0UHJvcGVydHkgOiBzdHlsZV9wcm9wZXJ0aWVzXzEud2lkdGhQcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldC5zdHlsZVtzZXRMb2NhbCA/IHByb3AubmFtZSA6IHByb3Aua2V5ZnJhbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQW5pbWF0aW5nIHByb3BlcnR5ICdcIiArIGFuaW1hdGlvbi5wcm9wZXJ0eSArIFwiJyBpcyB1bnN1cHBvcnRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZHVyYXRpb24gPSAwLjM7XG4gICAgICAgIGlmIChhbmltYXRpb24uZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSBhbmltYXRpb24uZHVyYXRpb24gLyAxMDAwLjA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoYW5pbWF0aW9uLmRlbGF5KSB7XG4gICAgICAgICAgICBkZWxheSA9IGFuaW1hdGlvbi5kZWxheSAvIDEwMDAuMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVwZWF0Q291bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChhbmltYXRpb24uaXRlcmF0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uLml0ZXJhdGlvbnMgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICAgICAgICAgIHJlcGVhdENvdW50ID0gRkxUX01BWDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcGVhdENvdW50ID0gYW5pbWF0aW9uLml0ZXJhdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHByb3BlcnR5TmFtZVRvQW5pbWF0ZTogcHJvcGVydHlOYW1lVG9BbmltYXRlLFxuICAgICAgICAgICAgZnJvbVZhbHVlOiBmcm9tVmFsdWUsXG4gICAgICAgICAgICB0b1ZhbHVlOiB0b1ZhbHVlLFxuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgcmVwZWF0Q291bnQ6IHJlcGVhdENvdW50LFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5XG4gICAgICAgIH07XG4gICAgfTtcbiAgICBBbmltYXRpb24uX2NyZWF0ZU5hdGl2ZUFuaW1hdGlvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eUFuaW1hdGlvbnMsIGluZGV4LCBwbGF5U2VxdWVudGlhbGx5LCBhcmdzLCBhbmltYXRpb24sIHZhbHVlU291cmNlLCBmaW5pc2hlZENhbGxiYWNrKSB7XG4gICAgICAgIHZhciBuYXRpdmVWaWV3ID0gYW5pbWF0aW9uLnRhcmdldC5uYXRpdmVWaWV3UHJvdGVjdGVkO1xuICAgICAgICB2YXIgbmF0aXZlQW5pbWF0aW9uID0gQ0FCYXNpY0FuaW1hdGlvbi5hbmltYXRpb25XaXRoS2V5UGF0aChhcmdzLnByb3BlcnR5TmFtZVRvQW5pbWF0ZSk7XG4gICAgICAgIG5hdGl2ZUFuaW1hdGlvbi5mcm9tVmFsdWUgPSBhcmdzLmZyb21WYWx1ZTtcbiAgICAgICAgbmF0aXZlQW5pbWF0aW9uLnRvVmFsdWUgPSBhcmdzLnRvVmFsdWU7XG4gICAgICAgIG5hdGl2ZUFuaW1hdGlvbi5kdXJhdGlvbiA9IGFyZ3MuZHVyYXRpb247XG4gICAgICAgIGlmIChhcmdzLnJlcGVhdENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZUFuaW1hdGlvbi5yZXBlYXRDb3VudCA9IGFyZ3MucmVwZWF0Q291bnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyZ3MuZGVsYXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmF0aXZlQW5pbWF0aW9uLmJlZ2luVGltZSA9IENBQ3VycmVudE1lZGlhVGltZSgpICsgYXJncy5kZWxheTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0aW9uLmN1cnZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5hdGl2ZUFuaW1hdGlvbi50aW1pbmdGdW5jdGlvbiA9IGFuaW1hdGlvbi5jdXJ2ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYW5pbWF0aW9uRGVsZWdhdGUgPSBBbmltYXRpb25EZWxlZ2F0ZUltcGwuaW5pdFdpdGhGaW5pc2hlZENhbGxiYWNrKGZpbmlzaGVkQ2FsbGJhY2ssIGFuaW1hdGlvbiwgdmFsdWVTb3VyY2UpO1xuICAgICAgICBuYXRpdmVBbmltYXRpb24uc2V0VmFsdWVGb3JLZXkoYW5pbWF0aW9uRGVsZWdhdGUsIFwiZGVsZWdhdGVcIik7XG4gICAgICAgIG5hdGl2ZVZpZXcubGF5ZXIuYWRkQW5pbWF0aW9uRm9yS2V5KG5hdGl2ZUFuaW1hdGlvbiwgYXJncy5wcm9wZXJ0eU5hbWVUb0FuaW1hdGUpO1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpbmRleCArIDEgPCBwcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IEFuaW1hdGlvbi5fY3JlYXRlaU9TQW5pbWF0aW9uRnVuY3Rpb24ocHJvcGVydHlBbmltYXRpb25zLCBpbmRleCArIDEsIHBsYXlTZXF1ZW50aWFsbHksIHZhbHVlU291cmNlLCBmaW5pc2hlZENhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmICghcGxheVNlcXVlbnRpYWxseSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25EZWxlZ2F0ZS5uZXh0QW5pbWF0aW9uID0gY2FsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFuaW1hdGlvbi5fY3JlYXRlTmF0aXZlU3ByaW5nQW5pbWF0aW9uID0gZnVuY3Rpb24gKHByb3BlcnR5QW5pbWF0aW9ucywgaW5kZXgsIHBsYXlTZXF1ZW50aWFsbHksIGFyZ3MsIGFuaW1hdGlvbiwgdmFsdWVTb3VyY2UsIGZpbmlzaGVkQ2FsbGJhY2spIHtcbiAgICAgICAgdmFyIG5hdGl2ZVZpZXcgPSBhbmltYXRpb24udGFyZ2V0Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQ7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5leHRBbmltYXRpb247XG4gICAgICAgIGlmIChpbmRleCArIDEgPCBwcm9wZXJ0eUFuaW1hdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IEFuaW1hdGlvbi5fY3JlYXRlaU9TQW5pbWF0aW9uRnVuY3Rpb24ocHJvcGVydHlBbmltYXRpb25zLCBpbmRleCArIDEsIHBsYXlTZXF1ZW50aWFsbHksIHZhbHVlU291cmNlLCBmaW5pc2hlZENhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmICghcGxheVNlcXVlbnRpYWxseSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXh0QW5pbWF0aW9uID0gY2FsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ID0gMDtcbiAgICAgICAgaWYgKGFyZ3MuZGVsYXkpIHtcbiAgICAgICAgICAgIGRlbGF5ID0gYXJncy5kZWxheTtcbiAgICAgICAgfVxuICAgICAgICBVSVZpZXcuYW5pbWF0ZVdpdGhEdXJhdGlvbkRlbGF5VXNpbmdTcHJpbmdXaXRoRGFtcGluZ0luaXRpYWxTcHJpbmdWZWxvY2l0eU9wdGlvbnNBbmltYXRpb25zQ29tcGxldGlvbihhcmdzLmR1cmF0aW9uLCBkZWxheSwgMC4yLCAwLCAxOTY2MDgsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChhcmdzLnJlcGVhdENvdW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBVSVZpZXcuc2V0QW5pbWF0aW9uUmVwZWF0Q291bnQoYXJncy5yZXBlYXRDb3VudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGFuaW1hdGlvbi5wcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMuYmFja2dyb3VuZENvbG9yOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LmJhY2tncm91bmRDb2xvciA9IGFyZ3MudG9WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBhbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5vcGFjaXR5OlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0Lm9wYWNpdHkgPSBhcmdzLnRvVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMuaGVpZ2h0OlxuICAgICAgICAgICAgICAgIGNhc2UgYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMud2lkdGg6XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5fb3JpZ2luYWxWYWx1ZSA9IGFuaW1hdGlvbi50YXJnZXRbYW5pbWF0aW9uLnByb3BlcnR5XTtcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVmlldy5sYXllci5zZXRWYWx1ZUZvcktleShhcmdzLnRvVmFsdWUsIGFyZ3MucHJvcGVydHlOYW1lVG9BbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXRbYW5pbWF0aW9uLnByb3BlcnR5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnJvdGF0ZTpcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVmlldy5sYXllci5zZXRWYWx1ZUZvcktleShhcmdzLnRvVmFsdWUsIGFyZ3MucHJvcGVydHlOYW1lVG9BbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBfdHJhbnNmb3JtOlxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uX29yaWdpbmFsVmFsdWUgPSBuYXRpdmVWaWV3LmxheWVyLnRyYW5zZm9ybTtcbiAgICAgICAgICAgICAgICAgICAgbmF0aXZlVmlldy5sYXllci5zZXRWYWx1ZUZvcktleShhcmdzLnRvVmFsdWUsIGFyZ3MucHJvcGVydHlOYW1lVG9BbmltYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLl9wcm9wZXJ0eVJlc2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVZpZXcubGF5ZXIudHJhbnNmb3JtID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoYW5pbWF0aW9uRGlkRmluaXNoKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGlkRmluaXNoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi5wcm9wZXJ0eSA9PT0gX3RyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uLnZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnRyYW5zbGF0ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldC50cmFuc2xhdGVYID0gYW5pbWF0aW9uLnZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnRyYW5zbGF0ZV0ueDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbi50YXJnZXQudHJhbnNsYXRlWSA9IGFuaW1hdGlvbi52YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGVdLnk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbi52YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5zY2FsZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnRhcmdldC5zY2FsZVggPSBhbmltYXRpb24udmFsdWVbYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMuc2NhbGVdLng7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udGFyZ2V0LnNjYWxlWSA9IGFuaW1hdGlvbi52YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5zY2FsZV0ueTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb24uX3Byb3BlcnR5UmVzZXRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uX3Byb3BlcnR5UmVzZXRDYWxsYmFjayhhbmltYXRpb24uX29yaWdpbmFsVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaW5pc2hlZENhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbmNlbGxlZCA9ICFhbmltYXRpb25EaWRGaW5pc2g7XG4gICAgICAgICAgICAgICAgZmluaXNoZWRDYWxsYmFjayhjYW5jZWxsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRpZEZpbmlzaCAmJiBuZXh0QW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgbmV4dEFuaW1hdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEFuaW1hdGlvbi5fY3JlYXRlTmF0aXZlQWZmaW5lVHJhbnNmb3JtID0gZnVuY3Rpb24gKGFuaW1hdGlvbikge1xuICAgICAgICB2YXIgdmFsdWUgPSBhbmltYXRpb24udmFsdWU7XG4gICAgICAgIHZhciByZXN1bHQgPSBDQVRyYW5zZm9ybTNESWRlbnRpdHk7XG4gICAgICAgIGlmICh2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHZhciB4ID0gdmFsdWVbYW5pbWF0aW9uX2NvbW1vbl8xLlByb3BlcnRpZXMudHJhbnNsYXRlXS54O1xuICAgICAgICAgICAgdmFyIHkgPSB2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy50cmFuc2xhdGVdLnk7XG4gICAgICAgICAgICByZXN1bHQgPSBDQVRyYW5zZm9ybTNEVHJhbnNsYXRlKHJlc3VsdCwgeCwgeSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnNjYWxlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHZhbHVlW2FuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnNjYWxlXS54O1xuICAgICAgICAgICAgdmFyIHkgPSB2YWx1ZVthbmltYXRpb25fY29tbW9uXzEuUHJvcGVydGllcy5zY2FsZV0ueTtcbiAgICAgICAgICAgIHJlc3VsdCA9IENBVHJhbnNmb3JtM0RTY2FsZShyZXN1bHQsIHggPT09IDAgPyAwLjAwMSA6IHgsIHkgPT09IDAgPyAwLjAwMSA6IHksIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBBbmltYXRpb24uX2lzQWZmaW5lVHJhbnNmb3JtID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eSA9PT0gX3RyYW5zZm9ybVxuICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09IGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnRyYW5zbGF0ZVxuICAgICAgICAgICAgfHwgcHJvcGVydHkgPT09IGFuaW1hdGlvbl9jb21tb25fMS5Qcm9wZXJ0aWVzLnNjYWxlO1xuICAgIH07XG4gICAgQW5pbWF0aW9uLl9jYW5CZU1lcmdlZCA9IGZ1bmN0aW9uIChhbmltYXRpb24xLCBhbmltYXRpb24yKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBBbmltYXRpb24uX2lzQWZmaW5lVHJhbnNmb3JtKGFuaW1hdGlvbjEucHJvcGVydHkpICYmXG4gICAgICAgICAgICBBbmltYXRpb24uX2lzQWZmaW5lVHJhbnNmb3JtKGFuaW1hdGlvbjIucHJvcGVydHkpICYmXG4gICAgICAgICAgICBhbmltYXRpb24xLnRhcmdldCA9PT0gYW5pbWF0aW9uMi50YXJnZXQgJiZcbiAgICAgICAgICAgIGFuaW1hdGlvbjEuZHVyYXRpb24gPT09IGFuaW1hdGlvbjIuZHVyYXRpb24gJiZcbiAgICAgICAgICAgIGFuaW1hdGlvbjEuZGVsYXkgPT09IGFuaW1hdGlvbjIuZGVsYXkgJiZcbiAgICAgICAgICAgIGFuaW1hdGlvbjEuaXRlcmF0aW9ucyA9PT0gYW5pbWF0aW9uMi5pdGVyYXRpb25zICYmXG4gICAgICAgICAgICBhbmltYXRpb24xLmN1cnZlID09PSBhbmltYXRpb24yLmN1cnZlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgQW5pbWF0aW9uLl9tZXJnZUFmZmluZVRyYW5zZm9ybUFuaW1hdGlvbnMgPSBmdW5jdGlvbiAocHJvcGVydHlBbmltYXRpb25zKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHByb3BlcnR5QW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eUFuaW1hdGlvbnNbaV1bX3NraXBdKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUFuaW1hdGlvbi5faXNBZmZpbmVUcmFuc2Zvcm0ocHJvcGVydHlBbmltYXRpb25zW2ldLnByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3BlcnR5QW5pbWF0aW9uc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3VHJhbnNmb3JtQW5pbWF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb3BlcnR5QW5pbWF0aW9uc1tpXS50YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5OiBfdHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZToge30sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBwcm9wZXJ0eUFuaW1hdGlvbnNbaV0uZHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiBwcm9wZXJ0eUFuaW1hdGlvbnNbaV0uZGVsYXksXG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGlvbnM6IHByb3BlcnR5QW5pbWF0aW9uc1tpXS5pdGVyYXRpb25zLFxuICAgICAgICAgICAgICAgICAgICBjdXJ2ZTogcHJvcGVydHlBbmltYXRpb25zW2ldLmN1cnZlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9jb21tb25fMS50cmFjZVdyaXRlKFwiQ3VydmU6IFwiICsgcHJvcGVydHlBbmltYXRpb25zW2ldLmN1cnZlLCBhbmltYXRpb25fY29tbW9uXzEudHJhY2VDYXRlZ29yaWVzLkFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1RyYW5zZm9ybUFuaW1hdGlvbi52YWx1ZVtwcm9wZXJ0eUFuaW1hdGlvbnNbaV0ucHJvcGVydHldID0gcHJvcGVydHlBbmltYXRpb25zW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fY29tbW9uXzEudHJhY2VFbmFibGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlV3JpdGUoXCJDcmVhdGVkIG5ldyB0cmFuc2Zvcm0gYW5pbWF0aW9uOiBcIiArIEFuaW1hdGlvbi5fZ2V0QW5pbWF0aW9uSW5mbyhuZXdUcmFuc2Zvcm1BbmltYXRpb24pLCBhbmltYXRpb25fY29tbW9uXzEudHJhY2VDYXRlZ29yaWVzLkFuaW1hdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgICAgICAgICBpZiAoaiA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaiA8IGxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5pbWF0aW9uLl9jYW5CZU1lcmdlZChwcm9wZXJ0eUFuaW1hdGlvbnNbaV0sIHByb3BlcnR5QW5pbWF0aW9uc1tqXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX2NvbW1vbl8xLnRyYWNlRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9jb21tb25fMS50cmFjZVdyaXRlKFwiTWVyZ2luZyBhbmltYXRpb25zOiBcIiArIEFuaW1hdGlvbi5fZ2V0QW5pbWF0aW9uSW5mbyhuZXdUcmFuc2Zvcm1BbmltYXRpb24pICsgXCIgKyBcIiArIEFuaW1hdGlvbi5fZ2V0QW5pbWF0aW9uSW5mbyhwcm9wZXJ0eUFuaW1hdGlvbnNbal0pICsgXCI7XCIsIGFuaW1hdGlvbl9jb21tb25fMS50cmFjZUNhdGVnb3JpZXMuQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3VHJhbnNmb3JtQW5pbWF0aW9uLnZhbHVlW3Byb3BlcnR5QW5pbWF0aW9uc1tqXS5wcm9wZXJ0eV0gPSBwcm9wZXJ0eUFuaW1hdGlvbnNbal0udmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlBbmltYXRpb25zW2pdW19za2lwXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobmV3VHJhbnNmb3JtQW5pbWF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgcmV0dXJuIEFuaW1hdGlvbjtcbn0oYW5pbWF0aW9uX2NvbW1vbl8xLkFuaW1hdGlvbkJhc2UpKTtcbmV4cG9ydHMuQW5pbWF0aW9uID0gQW5pbWF0aW9uO1xuZnVuY3Rpb24gX2dldFRyYW5zZm9ybU1pc21hdGNoRXJyb3JNZXNzYWdlKHZpZXcpIHtcbiAgICB2YXIgcmVzdWx0ID0gQ0dBZmZpbmVUcmFuc2Zvcm1JZGVudGl0eTtcbiAgICB2YXIgdHggPSB2aWV3LnRyYW5zbGF0ZVg7XG4gICAgdmFyIHR5ID0gdmlldy50cmFuc2xhdGVZO1xuICAgIHJlc3VsdCA9IENHQWZmaW5lVHJhbnNmb3JtVHJhbnNsYXRlKHJlc3VsdCwgdHgsIHR5KTtcbiAgICByZXN1bHQgPSBDR0FmZmluZVRyYW5zZm9ybVJvdGF0ZShyZXN1bHQsICh2aWV3LnJvdGF0ZSB8fCAwKSAqIE1hdGguUEkgLyAxODApO1xuICAgIHJlc3VsdCA9IENHQWZmaW5lVHJhbnNmb3JtU2NhbGUocmVzdWx0LCB2aWV3LnNjYWxlWCB8fCAxLCB2aWV3LnNjYWxlWSB8fCAxKTtcbiAgICB2YXIgdmlld1RyYW5zZm9ybSA9IE5TU3RyaW5nRnJvbUNHQWZmaW5lVHJhbnNmb3JtKHJlc3VsdCk7XG4gICAgdmFyIG5hdGl2ZVRyYW5zZm9ybSA9IE5TU3RyaW5nRnJvbUNHQWZmaW5lVHJhbnNmb3JtKHZpZXcubmF0aXZlVmlld1Byb3RlY3RlZC50cmFuc2Zvcm0pO1xuICAgIGlmICh2aWV3VHJhbnNmb3JtICE9PSBuYXRpdmVUcmFuc2Zvcm0pIHtcbiAgICAgICAgcmV0dXJuIFwiVmlldyBhbmQgTmF0aXZlIHRyYW5zZm9ybXMgZG8gbm90IG1hdGNoLiBWaWV3OiBcIiArIHZpZXdUcmFuc2Zvcm0gKyBcIjsgTmF0aXZlOiBcIiArIG5hdGl2ZVRyYW5zZm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuX2dldFRyYW5zZm9ybU1pc21hdGNoRXJyb3JNZXNzYWdlID0gX2dldFRyYW5zZm9ybU1pc21hdGNoRXJyb3JNZXNzYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uLmlvcy5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBzYW5pdGl6ZU1vZHVsZU5hbWUobW9kdWxlTmFtZSwgcmVtb3ZlRXh0ZW5zaW9uKSB7XG4gICAgaWYgKHJlbW92ZUV4dGVuc2lvbiA9PT0gdm9pZCAwKSB7IHJlbW92ZUV4dGVuc2lvbiA9IHRydWU7IH1cbiAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZS50cmltKCk7XG4gICAgaWYgKG1vZHVsZU5hbWUuc3RhcnRzV2l0aChcIn4vXCIpKSB7XG4gICAgICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lLnN1YnN0cmluZygyKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kdWxlTmFtZS5zdGFydHNXaXRoKFwiflwiKSkge1xuICAgICAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1vZHVsZU5hbWUuc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgbW9kdWxlTmFtZSA9IG1vZHVsZU5hbWUuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlRXh0ZW5zaW9uKSB7XG4gICAgICAgIHZhciBleHRUb1JlbW92ZSA9IFtcImpzXCIsIFwidHNcIiwgXCJ4bWxcIiwgXCJodG1sXCIsIFwiY3NzXCIsIFwic2Nzc1wiXTtcbiAgICAgICAgdmFyIGV4dGVuc2lvblJlZ0V4ID0gbmV3IFJlZ0V4cChcIiguKilcXFxcLig/OlwiICsgZXh0VG9SZW1vdmUuam9pbihcInxcIikgKyBcIilcIiwgXCJpXCIpO1xuICAgICAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZS5yZXBsYWNlKGV4dGVuc2lvblJlZ0V4LCBcIiQxXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbW9kdWxlTmFtZTtcbn1cbmV4cG9ydHMuc2FuaXRpemVNb2R1bGVOYW1lID0gc2FuaXRpemVNb2R1bGVOYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLW5hbWUtc2FuaXRpemVyLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciByZWR1Y2VDU1NDYWxjID0gcmVxdWlyZShcInJlZHVjZS1jc3MtY2FsY1wiKTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vZGF0YS9vYnNlcnZhYmxlXCIpO1xudmFyIHRyYWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vdHJhY2VcIik7XG52YXIgc3R5bGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9zdHlsaW5nL3N0eWxlXCIpO1xuZXhwb3J0cy5TdHlsZSA9IHN0eWxlXzEuU3R5bGU7XG52YXIgcHJvZmlsaW5nXzEgPSByZXF1aXJlKFwiLi4vLi4vLi4vcHJvZmlsaW5nXCIpO1xuZXhwb3J0cy51bnNldFZhbHVlID0gbmV3IE9iamVjdCgpO1xudmFyIGNzc1Byb3BlcnR5TmFtZXMgPSBbXTtcbnZhciBzeW1ib2xQcm9wZXJ0eU1hcCA9IHt9O1xudmFyIGNzc1N5bWJvbFByb3BlcnR5TWFwID0ge307XG52YXIgaW5oZXJpdGFibGVQcm9wZXJ0aWVzID0gbmV3IEFycmF5KCk7XG52YXIgaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzID0gbmV3IEFycmF5KCk7XG5mdW5jdGlvbiBwcmludChtYXApIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHN5bWJvbHNfMSA9IHN5bWJvbHM7IF9pIDwgc3ltYm9sc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sc18xW19pXTtcbiAgICAgICAgdmFyIHByb3AgPSBtYXBbc3ltYm9sXTtcbiAgICAgICAgaWYgKCFwcm9wLnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUHJvcGVydHkgXCIgKyBwcm9wLm5hbWUgKyBcIiBub3QgUmVnaXN0ZXJlZCEhISEhXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gX3ByaW50VW5yZWdpc3RlcmVkUHJvcGVydGllcygpIHtcbiAgICBwcmludChzeW1ib2xQcm9wZXJ0eU1hcCk7XG4gICAgcHJpbnQoY3NzU3ltYm9sUHJvcGVydHlNYXApO1xufVxuZXhwb3J0cy5fcHJpbnRVbnJlZ2lzdGVyZWRQcm9wZXJ0aWVzID0gX3ByaW50VW5yZWdpc3RlcmVkUHJvcGVydGllcztcbmZ1bmN0aW9uIF9nZXRQcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiBnZXRQcm9wZXJ0aWVzRnJvbU1hcChzeW1ib2xQcm9wZXJ0eU1hcCk7XG59XG5leHBvcnRzLl9nZXRQcm9wZXJ0aWVzID0gX2dldFByb3BlcnRpZXM7XG5mdW5jdGlvbiBfZ2V0U3R5bGVQcm9wZXJ0aWVzKCkge1xuICAgIHJldHVybiBnZXRQcm9wZXJ0aWVzRnJvbU1hcChjc3NTeW1ib2xQcm9wZXJ0eU1hcCk7XG59XG5leHBvcnRzLl9nZXRTdHlsZVByb3BlcnRpZXMgPSBfZ2V0U3R5bGVQcm9wZXJ0aWVzO1xuZnVuY3Rpb24gaXNDc3NWYXJpYWJsZShwcm9wZXJ0eSkge1xuICAgIHJldHVybiAvXi0tW14sXFxzXSs/JC8udGVzdChwcm9wZXJ0eSk7XG59XG5leHBvcnRzLmlzQ3NzVmFyaWFibGUgPSBpc0Nzc1ZhcmlhYmxlO1xuZnVuY3Rpb24gaXNDc3NDYWxjRXhwcmVzc2lvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5pbmNsdWRlcyhcImNhbGMoXCIpO1xufVxuZXhwb3J0cy5pc0Nzc0NhbGNFeHByZXNzaW9uID0gaXNDc3NDYWxjRXhwcmVzc2lvbjtcbmZ1bmN0aW9uIGlzQ3NzVmFyaWFibGVFeHByZXNzaW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLmluY2x1ZGVzKFwidmFyKC0tXCIpO1xufVxuZXhwb3J0cy5pc0Nzc1ZhcmlhYmxlRXhwcmVzc2lvbiA9IGlzQ3NzVmFyaWFibGVFeHByZXNzaW9uO1xuZnVuY3Rpb24gX2V2YWx1YXRlQ3NzVmFyaWFibGVFeHByZXNzaW9uKHZpZXcsIGNzc05hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICghaXNDc3NWYXJpYWJsZUV4cHJlc3Npb24odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdmFyIG91dHB1dCA9IHZhbHVlLnRyaW0oKTtcbiAgICB2YXIgbGFzdFZhbHVlO1xuICAgIHdoaWxlIChsYXN0VmFsdWUgIT09IG91dHB1dCkge1xuICAgICAgICBsYXN0VmFsdWUgPSBvdXRwdXQ7XG4gICAgICAgIHZhciBpZHggPSBvdXRwdXQubGFzdEluZGV4T2YoXCJ2YXIoXCIpO1xuICAgICAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVuZElkeCA9IG91dHB1dC5pbmRleE9mKFwiKVwiLCBpZHgpO1xuICAgICAgICBpZiAoZW5kSWR4ID09PSAtMSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBvdXRwdXQuc3Vic3RyaW5nKGlkeCArIDQsIGVuZElkeCkuc3BsaXQoXCIsXCIpLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdi50cmltKCk7IH0pLmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gISF2OyB9KTtcbiAgICAgICAgdmFyIGNzc1ZhcmlhYmxlTmFtZSA9IG1hdGNoZWQuc2hpZnQoKTtcbiAgICAgICAgdmFyIGNzc1ZhcmlhYmxlVmFsdWUgPSB2aWV3LnN0eWxlLmdldENzc1ZhcmlhYmxlKGNzc1ZhcmlhYmxlTmFtZSk7XG4gICAgICAgIGlmIChjc3NWYXJpYWJsZVZhbHVlID09PSBudWxsICYmIG1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjc3NWYXJpYWJsZVZhbHVlID0gX2V2YWx1YXRlQ3NzVmFyaWFibGVFeHByZXNzaW9uKHZpZXcsIGNzc05hbWUsIG1hdGNoZWQuam9pbihcIiwgXCIpKS5zcGxpdChcIixcIilbMF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjc3NWYXJpYWJsZVZhbHVlKSB7XG4gICAgICAgICAgICBjc3NWYXJpYWJsZVZhbHVlID0gXCJ1bnNldFwiO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dCA9IFwiXCIgKyBvdXRwdXQuc3Vic3RyaW5nKDAsIGlkeCkgKyBjc3NWYXJpYWJsZVZhbHVlICsgb3V0cHV0LnN1YnN0cmluZyhlbmRJZHggKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbmV4cG9ydHMuX2V2YWx1YXRlQ3NzVmFyaWFibGVFeHByZXNzaW9uID0gX2V2YWx1YXRlQ3NzVmFyaWFibGVFeHByZXNzaW9uO1xuZnVuY3Rpb24gX2V2YWx1YXRlQ3NzQ2FsY0V4cHJlc3Npb24odmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKGlzQ3NzQ2FsY0V4cHJlc3Npb24odmFsdWUpKSB7XG4gICAgICAgIHJldHVybiByZWR1Y2VDU1NDYWxjKHZhbHVlLnJlcGxhY2UoLyhbMC05XSsoXFwuWzAtOV0rKT8pZGlwXFxiL2csIFwiJDFcIikpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cbmV4cG9ydHMuX2V2YWx1YXRlQ3NzQ2FsY0V4cHJlc3Npb24gPSBfZXZhbHVhdGVDc3NDYWxjRXhwcmVzc2lvbjtcbmZ1bmN0aW9uIGdldFByb3BlcnRpZXNGcm9tTWFwKG1hcCkge1xuICAgIHZhciBwcm9wcyA9IFtdO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChzeW1ib2wpIHsgcmV0dXJuIHByb3BzLnB1c2gobWFwW3N5bWJvbF0pOyB9KTtcbiAgICByZXR1cm4gcHJvcHM7XG59XG52YXIgUHJvcGVydHkgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFByb3BlcnR5KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5lbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgIHZhciBrZXkgPSBTeW1ib2wocHJvcGVydHlOYW1lICsgXCI6cHJvcGVydHlLZXlcIik7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB2YXIgZ2V0RGVmYXVsdCA9IFN5bWJvbChwcm9wZXJ0eU5hbWUgKyBcIjpnZXREZWZhdWx0XCIpO1xuICAgICAgICB0aGlzLmdldERlZmF1bHQgPSBnZXREZWZhdWx0O1xuICAgICAgICB2YXIgc2V0TmF0aXZlID0gU3ltYm9sKHByb3BlcnR5TmFtZSArIFwiOnNldE5hdGl2ZVwiKTtcbiAgICAgICAgdGhpcy5zZXROYXRpdmUgPSBzZXROYXRpdmU7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWVLZXkgPSBTeW1ib2wocHJvcGVydHlOYW1lICsgXCI6bmF0aXZlRGVmYXVsdFZhbHVlXCIpO1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZUtleSA9IGRlZmF1bHRWYWx1ZUtleTtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHByb3BlcnR5TmFtZSArIFwiQ2hhbmdlXCI7XG4gICAgICAgIHZhciBlcXVhbGl0eUNvbXBhcmVyID0gb3B0aW9ucy5lcXVhbGl0eUNvbXBhcmVyO1xuICAgICAgICB2YXIgYWZmZWN0c0xheW91dCA9IG9wdGlvbnMuYWZmZWN0c0xheW91dDtcbiAgICAgICAgdmFyIHZhbHVlQ2hhbmdlZCA9IG9wdGlvbnMudmFsdWVDaGFuZ2VkO1xuICAgICAgICB2YXIgdmFsdWVDb252ZXJ0ZXIgPSBvcHRpb25zLnZhbHVlQ29udmVydGVyO1xuICAgICAgICB2YXIgcHJvcGVydHkgPSB0aGlzO1xuICAgICAgICB0aGlzLnNldCA9IGZ1bmN0aW9uIChib3hlZFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzZXQgPSBib3hlZFZhbHVlID09PSBleHBvcnRzLnVuc2V0VmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICB2YXIgd3JhcHBlZDtcbiAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgd3JhcHBlZCA9IGJveGVkVmFsdWUgJiYgYm94ZWRWYWx1ZS53cmFwcGVkO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gd3JhcHBlZCA/IG9ic2VydmFibGVfMS5XcmFwcGVkVmFsdWUudW53cmFwKGJveGVkVmFsdWUpIDogYm94ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVDb252ZXJ0ZXIgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVDb252ZXJ0ZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBvbGRWYWx1ZSA9IGtleSBpbiB0aGlzID8gdGhpc1trZXldIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgdmFyIGNoYW5nZWQgPSBlcXVhbGl0eUNvbXBhcmVyID8gIWVxdWFsaXR5Q29tcGFyZXIob2xkVmFsdWUsIHZhbHVlKSA6IG9sZFZhbHVlICE9PSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh3cmFwcGVkIHx8IGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWZmZWN0c0xheW91dCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQ2hhbmdlZCh0aGlzLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3NldE5hdGl2ZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdXNwZW5kTmF0aXZlVXBkYXRlc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N1c3BlbmRlZFVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3VzcGVuZGVkVXBkYXRlc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZUtleSBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbc2V0TmF0aXZlXSh0aGlzW2RlZmF1bHRWYWx1ZUtleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tkZWZhdWx0VmFsdWVLZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tzZXROYXRpdmVdKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VkKHRoaXMsIG9sZFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbc2V0TmF0aXZlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N1c3BlbmROYXRpdmVVcGRhdGVzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3VzcGVuZGVkVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdXNwZW5kZWRVcGRhdGVzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShkZWZhdWx0VmFsdWVLZXkgaW4gdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tkZWZhdWx0VmFsdWVLZXldID0gdGhpc1tnZXREZWZhdWx0XSA/IHRoaXNbZ2V0RGVmYXVsdF0oKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tzZXROYXRpdmVdKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSh7IG9iamVjdDogdGhpcywgZXZlbnROYW1lOiBldmVudE5hbWUsIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLCB2YWx1ZTogdmFsdWUsIG9sZFZhbHVlOiBvbGRWYWx1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tTm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5hdHRyaWJ1dGVSZW1vdmVkKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbU5vZGUuYXR0cmlidXRlTW9kaWZpZWQocHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiB0aGlzID8gdGhpc1trZXldIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm5hdGl2ZVZhbHVlQ2hhbmdlID0gZnVuY3Rpb24gKG93bmVyLCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0ga2V5IGluIG93bmVyID8gb3duZXJba2V5XSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VkID0gZXF1YWxpdHlDb21wYXJlciA/ICFlcXVhbGl0eUNvbXBhcmVyKG9sZFZhbHVlLCB2YWx1ZSkgOiBvbGRWYWx1ZSAhPT0gdmFsdWU7XG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIG93bmVyW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQ2hhbmdlZChvd25lciwgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG93bmVyLm5hdGl2ZVZpZXdQcm90ZWN0ZWQgJiYgIShkZWZhdWx0VmFsdWVLZXkgaW4gb3duZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG93bmVyW2RlZmF1bHRWYWx1ZUtleV0gPSBvd25lcltnZXREZWZhdWx0XSA/IG93bmVyW2dldERlZmF1bHRdKCkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvd25lci5oYXNMaXN0ZW5lcnMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBvd25lci5ub3RpZnkoeyBvYmplY3Q6IG93bmVyLCBldmVudE5hbWU6IGV2ZW50TmFtZSwgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsIHZhbHVlOiB2YWx1ZSwgb2xkVmFsdWU6IG9sZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWZmZWN0c0xheW91dCkge1xuICAgICAgICAgICAgICAgICAgICBvd25lci5yZXF1ZXN0TGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvd25lci5kb21Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIG93bmVyLmRvbU5vZGUuYXR0cmlidXRlTW9kaWZpZWQocHJvcGVydHlOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzeW1ib2xQcm9wZXJ0eU1hcFtrZXldID0gdGhpcztcbiAgICB9XG4gICAgUHJvcGVydHkucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGNscykge1xuICAgICAgICBpZiAodGhpcy5yZWdpc3RlcmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9wZXJ0eSBcIiArIHRoaXMubmFtZSArIFwiIGFscmVhZHkgcmVnaXN0ZXJlZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWdpc3RlcmVkID0gdHJ1ZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscy5wcm90b3R5cGUsIHRoaXMubmFtZSwgdGhpcyk7XG4gICAgfTtcbiAgICBQcm9wZXJ0eS5wcm90b3R5cGUuaXNTZXQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMua2V5IGluIGluc3RhbmNlO1xuICAgIH07XG4gICAgcmV0dXJuIFByb3BlcnR5O1xufSgpKTtcbmV4cG9ydHMuUHJvcGVydHkgPSBQcm9wZXJ0eTtcblByb3BlcnR5LnByb3RvdHlwZS5pc1N0eWxlUHJvcGVydHkgPSBmYWxzZTtcbnZhciBDb2VyY2libGVQcm9wZXJ0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvZXJjaWJsZVByb3BlcnR5LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvZXJjaWJsZVByb3BlcnR5KG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgb3B0aW9ucykgfHwgdGhpcztcbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgICAgdmFyIGtleSA9IF90aGlzLmtleTtcbiAgICAgICAgdmFyIGdldERlZmF1bHQgPSBfdGhpcy5nZXREZWZhdWx0O1xuICAgICAgICB2YXIgc2V0TmF0aXZlID0gX3RoaXMuc2V0TmF0aXZlO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlS2V5ID0gX3RoaXMuZGVmYXVsdFZhbHVlS2V5O1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gX3RoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB2YXIgY29lcmNlS2V5ID0gU3ltYm9sKHByb3BlcnR5TmFtZSArIFwiOmNvZXJjZUtleVwiKTtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHByb3BlcnR5TmFtZSArIFwiQ2hhbmdlXCI7XG4gICAgICAgIHZhciBhZmZlY3RzTGF5b3V0ID0gb3B0aW9ucy5hZmZlY3RzTGF5b3V0O1xuICAgICAgICB2YXIgZXF1YWxpdHlDb21wYXJlciA9IG9wdGlvbnMuZXF1YWxpdHlDb21wYXJlcjtcbiAgICAgICAgdmFyIHZhbHVlQ2hhbmdlZCA9IG9wdGlvbnMudmFsdWVDaGFuZ2VkO1xuICAgICAgICB2YXIgdmFsdWVDb252ZXJ0ZXIgPSBvcHRpb25zLnZhbHVlQ29udmVydGVyO1xuICAgICAgICB2YXIgY29lcmNlQ2FsbGJhY2sgPSBvcHRpb25zLmNvZXJjZVZhbHVlO1xuICAgICAgICB2YXIgcHJvcGVydHkgPSBfdGhpcztcbiAgICAgICAgX3RoaXMuY29lcmNlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAgICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBjb2VyY2VLZXkgaW4gdGFyZ2V0ID8gdGFyZ2V0W2NvZXJjZUtleV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB0YXJnZXRbcHJvcGVydHlOYW1lXSA9IG9yaWdpbmFsVmFsdWU7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnNldCA9IGZ1bmN0aW9uIChib3hlZFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcmVzZXQgPSBib3hlZFZhbHVlID09PSBleHBvcnRzLnVuc2V0VmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICB2YXIgd3JhcHBlZDtcbiAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2NvZXJjZUtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB3cmFwcGVkID0gYm94ZWRWYWx1ZSAmJiBib3hlZFZhbHVlLndyYXBwZWQ7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB3cmFwcGVkID8gb2JzZXJ2YWJsZV8xLldyYXBwZWRWYWx1ZS51bndyYXAoYm94ZWRWYWx1ZSkgOiBib3hlZFZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUNvbnZlcnRlciAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUNvbnZlcnRlcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXNbY29lcmNlS2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHZhbHVlID0gY29lcmNlQ2FsbGJhY2sodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0ga2V5IGluIHRoaXMgPyB0aGlzW2tleV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGVxdWFsaXR5Q29tcGFyZXIgPyAhZXF1YWxpdHlDb21wYXJlcihvbGRWYWx1ZSwgdmFsdWUpIDogb2xkVmFsdWUgIT09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHdyYXBwZWQgfHwgY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoYW5nZWQodGhpcywgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tzZXROYXRpdmVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3VzcGVuZE5hdGl2ZVVwZGF0ZXNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdXNwZW5kZWRVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1c3BlbmRlZFVwZGF0ZXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWVLZXkgaW4gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3NldE5hdGl2ZV0odGhpc1tkZWZhdWx0VmFsdWVLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbZGVmYXVsdFZhbHVlS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbc2V0TmF0aXZlXShkZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlQ2hhbmdlZCh0aGlzLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3NldE5hdGl2ZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdXNwZW5kTmF0aXZlVXBkYXRlc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N1c3BlbmRlZFVwZGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3VzcGVuZGVkVXBkYXRlc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZGVmYXVsdFZhbHVlS2V5IGluIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZGVmYXVsdFZhbHVlS2V5XSA9IHRoaXNbZ2V0RGVmYXVsdF0gPyB0aGlzW2dldERlZmF1bHRdKCkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbc2V0TmF0aXZlXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzTGlzdGVuZXJzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyBvYmplY3Q6IHRoaXMsIGV2ZW50TmFtZTogZXZlbnROYW1lLCBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSwgdmFsdWU6IHZhbHVlLCBvbGRWYWx1ZTogb2xkVmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhZmZlY3RzTGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVxdWVzdExheW91dCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb21Ob2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb21Ob2RlLmF0dHJpYnV0ZVJlbW92ZWQocHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tTm9kZS5hdHRyaWJ1dGVNb2RpZmllZChwcm9wZXJ0eU5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gQ29lcmNpYmxlUHJvcGVydHk7XG59KFByb3BlcnR5KSk7XG5leHBvcnRzLkNvZXJjaWJsZVByb3BlcnR5ID0gQ29lcmNpYmxlUHJvcGVydHk7XG52YXIgSW5oZXJpdGVkUHJvcGVydHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbmhlcml0ZWRQcm9wZXJ0eSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmhlcml0ZWRQcm9wZXJ0eShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB2YXIga2V5ID0gX3RoaXMua2V5O1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIHZhciBzb3VyY2VLZXkgPSBTeW1ib2wobmFtZSArIFwiOnZhbHVlU291cmNlS2V5XCIpO1xuICAgICAgICBfdGhpcy5zb3VyY2VLZXkgPSBzb3VyY2VLZXk7XG4gICAgICAgIHZhciBzZXRCYXNlID0gX3RoaXMuc2V0O1xuICAgICAgICB2YXIgc2V0RnVuYyA9IGZ1bmN0aW9uICh2YWx1ZVNvdXJjZSkgeyByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdW5ib3hlZFZhbHVlO1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlU291cmNlO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBleHBvcnRzLnVuc2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzEgPSB0aGF0LnBhcmVudDtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50XzEgJiYgcGFyZW50XzFbc291cmNlS2V5XSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB1bmJveGVkVmFsdWUgPSBwYXJlbnRfMVtuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVTb3VyY2UgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdW5ib3hlZFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVNvdXJjZSA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdW5ib3hlZFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgbmV3VmFsdWVTb3VyY2UgPSB2YWx1ZVNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGF0W2tleV07XG4gICAgICAgICAgICBzZXRCYXNlLmNhbGwodGhhdCwgdW5ib3hlZFZhbHVlKTtcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHRoYXRba2V5XTtcbiAgICAgICAgICAgIHRoYXRbc291cmNlS2V5XSA9IG5ld1ZhbHVlU291cmNlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzZXRfMSA9IG5ld1ZhbHVlU291cmNlID09PSAwO1xuICAgICAgICAgICAgICAgIHRoYXQuZWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRWYWx1ZVNvdXJjZSA9IGNoaWxkW3NvdXJjZUtleV0gfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc2V0XzEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFZhbHVlU291cmNlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RnVuYy5jYWxsKGNoaWxkLCBleHBvcnRzLnVuc2V0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkVmFsdWVTb3VyY2UgPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEluaGVyaXRlZFZhbHVlLmNhbGwoY2hpbGQsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTsgfTtcbiAgICAgICAgdmFyIHNldEluaGVyaXRlZFZhbHVlID0gc2V0RnVuYygxKTtcbiAgICAgICAgX3RoaXMuc2V0SW5oZXJpdGVkVmFsdWUgPSBzZXRJbmhlcml0ZWRWYWx1ZTtcbiAgICAgICAgX3RoaXMuc2V0ID0gc2V0RnVuYygzKTtcbiAgICAgICAgaW5oZXJpdGFibGVQcm9wZXJ0aWVzLnB1c2goX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbmhlcml0ZWRQcm9wZXJ0eTtcbn0oUHJvcGVydHkpKTtcbmV4cG9ydHMuSW5oZXJpdGVkUHJvcGVydHkgPSBJbmhlcml0ZWRQcm9wZXJ0eTtcbnZhciBDc3NQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ3NzUHJvcGVydHkob3B0aW9ucykge1xuICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICB0aGlzLm5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgIGNzc1Byb3BlcnR5TmFtZXMucHVzaChvcHRpb25zLmNzc05hbWUpO1xuICAgICAgICB0aGlzLmNzc05hbWUgPSBcImNzczpcIiArIG9wdGlvbnMuY3NzTmFtZTtcbiAgICAgICAgdGhpcy5jc3NMb2NhbE5hbWUgPSBvcHRpb25zLmNzc05hbWU7XG4gICAgICAgIHZhciBrZXkgPSBTeW1ib2wocHJvcGVydHlOYW1lICsgXCI6cHJvcGVydHlLZXlcIik7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB2YXIgc291cmNlS2V5ID0gU3ltYm9sKHByb3BlcnR5TmFtZSArIFwiOnZhbHVlU291cmNlS2V5XCIpO1xuICAgICAgICB0aGlzLnNvdXJjZUtleSA9IHNvdXJjZUtleTtcbiAgICAgICAgdmFyIGdldERlZmF1bHQgPSBTeW1ib2wocHJvcGVydHlOYW1lICsgXCI6Z2V0RGVmYXVsdFwiKTtcbiAgICAgICAgdGhpcy5nZXREZWZhdWx0ID0gZ2V0RGVmYXVsdDtcbiAgICAgICAgdmFyIHNldE5hdGl2ZSA9IFN5bWJvbChwcm9wZXJ0eU5hbWUgKyBcIjpzZXROYXRpdmVcIik7XG4gICAgICAgIHRoaXMuc2V0TmF0aXZlID0gc2V0TmF0aXZlO1xuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlS2V5ID0gU3ltYm9sKHByb3BlcnR5TmFtZSArIFwiOm5hdGl2ZURlZmF1bHRWYWx1ZVwiKTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWVLZXkgPSBkZWZhdWx0VmFsdWVLZXk7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdGhpcy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBwcm9wZXJ0eU5hbWUgKyBcIkNoYW5nZVwiO1xuICAgICAgICB2YXIgYWZmZWN0c0xheW91dCA9IG9wdGlvbnMuYWZmZWN0c0xheW91dDtcbiAgICAgICAgdmFyIGVxdWFsaXR5Q29tcGFyZXIgPSBvcHRpb25zLmVxdWFsaXR5Q29tcGFyZXI7XG4gICAgICAgIHZhciB2YWx1ZUNoYW5nZWQgPSBvcHRpb25zLnZhbHVlQ2hhbmdlZDtcbiAgICAgICAgdmFyIHZhbHVlQ29udmVydGVyID0gb3B0aW9ucy52YWx1ZUNvbnZlcnRlcjtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcztcbiAgICAgICAgZnVuY3Rpb24gc2V0TG9jYWxWYWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIHZpZXcgPSB0aGlzLnZpZXdSZWYuZ2V0KCk7XG4gICAgICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgICAgICB0cmFjZV8xLndyaXRlKG5ld1ZhbHVlICsgXCIgbm90IHNldCB0byB2aWV3IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5TdHlsZSwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzZXQgPSBuZXdWYWx1ZSA9PT0gZXhwb3J0cy51bnNldFZhbHVlIHx8IG5ld1ZhbHVlID09PSBcIlwiO1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNbc291cmNlS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXNbc291cmNlS2V5XSA9IDM7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAodmFsdWVDb252ZXJ0ZXIgJiYgdHlwZW9mIG5ld1ZhbHVlID09PSBcInN0cmluZ1wiKSA/XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQ29udmVydGVyKG5ld1ZhbHVlKSA6XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0ga2V5IGluIHRoaXMgPyB0aGlzW2tleV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGVxdWFsaXR5Q29tcGFyZXIgPyAhZXF1YWxpdHlDb21wYXJlcihvbGRWYWx1ZSwgdmFsdWUpIDogb2xkVmFsdWUgIT09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VkKHRoaXMsIG9sZFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdbc2V0TmF0aXZlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuX3N1c3BlbmROYXRpdmVVcGRhdGVzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZGVkVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Ll9zdXNwZW5kZWRVcGRhdGVzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlS2V5IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHRoaXNbZGVmYXVsdFZhbHVlS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2RlZmF1bHRWYWx1ZUtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0oZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoYW5nZWQodGhpcywgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmlld1tzZXROYXRpdmVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZE5hdGl2ZVVwZGF0ZXNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Ll9zdXNwZW5kZWRVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuX3N1c3BlbmRlZFVwZGF0ZXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGRlZmF1bHRWYWx1ZUtleSBpbiB0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2RlZmF1bHRWYWx1ZUtleV0gPSB2aWV3W2dldERlZmF1bHRdID8gdmlld1tnZXREZWZhdWx0XSgpIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgb2JqZWN0OiB0aGlzLCBldmVudE5hbWU6IGV2ZW50TmFtZSwgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsIHZhbHVlOiB2YWx1ZSwgb2xkVmFsdWU6IG9sZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWZmZWN0c0xheW91dCkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gc2V0Q3NzVmFsdWUobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3UmVmLmdldCgpO1xuICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VfMS53cml0ZShuZXdWYWx1ZSArIFwiIG5vdCBzZXQgdG8gdmlldyBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZVNvdXJjZSA9IHRoaXNbc291cmNlS2V5XSB8fCAwO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZVNvdXJjZSA9PT0gMykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNldCA9IG5ld1ZhbHVlID09PSBleHBvcnRzLnVuc2V0VmFsdWUgfHwgbmV3VmFsdWUgPT09IFwiXCI7XG4gICAgICAgICAgICB2YXIgdmFsdWU7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tzb3VyY2VLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUNvbnZlcnRlciAmJiB0eXBlb2YgbmV3VmFsdWUgPT09IFwic3RyaW5nXCIgP1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZUNvbnZlcnRlcihuZXdWYWx1ZSkgOlxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzW3NvdXJjZUtleV0gPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0ga2V5IGluIHRoaXMgPyB0aGlzW2tleV0gOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGVxdWFsaXR5Q29tcGFyZXIgPyAhZXF1YWxpdHlDb21wYXJlcihvbGRWYWx1ZSwgdmFsdWUpIDogb2xkVmFsdWUgIT09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVDaGFuZ2VkKHRoaXMsIG9sZFZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXdbc2V0TmF0aXZlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuX3N1c3BlbmROYXRpdmVVcGRhdGVzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZGVkVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Ll9zdXNwZW5kZWRVcGRhdGVzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlS2V5IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHRoaXNbZGVmYXVsdFZhbHVlS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2RlZmF1bHRWYWx1ZUtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0oZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoYW5nZWQodGhpcywgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmlld1tzZXROYXRpdmVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZE5hdGl2ZVVwZGF0ZXNDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Ll9zdXNwZW5kZWRVcGRhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuX3N1c3BlbmRlZFVwZGF0ZXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGRlZmF1bHRWYWx1ZUtleSBpbiB0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2RlZmF1bHRWYWx1ZUtleV0gPSB2aWV3W2dldERlZmF1bHRdID8gdmlld1tnZXREZWZhdWx0XSgpIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0odmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycyhldmVudE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KHsgb2JqZWN0OiB0aGlzLCBldmVudE5hbWU6IGV2ZW50TmFtZSwgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsIHZhbHVlOiB2YWx1ZSwgb2xkVmFsdWU6IG9sZFZhbHVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYWZmZWN0c0xheW91dCkge1xuICAgICAgICAgICAgICAgICAgICB2aWV3LnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGtleSBpbiB0aGlzID8gdGhpc1trZXldIDogZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3NzVmFsdWVEZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgc2V0OiBzZXRDc3NWYWx1ZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgc2V0OiBzZXRMb2NhbFZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGNzc1N5bWJvbFByb3BlcnR5TWFwW2tleV0gPSB0aGlzO1xuICAgIH1cbiAgICBDc3NQcm9wZXJ0eS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoY2xzKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3BlcnR5IFwiICsgdGhpcy5uYW1lICsgXCIgYWxyZWFkeSByZWdpc3RlcmVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgdGhpcy5uYW1lLCB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscy5wcm90b3R5cGUsIHRoaXMuY3NzTmFtZSwgdGhpcy5jc3NWYWx1ZURlc2NyaXB0b3IpO1xuICAgICAgICBpZiAodGhpcy5jc3NMb2NhbE5hbWUgIT09IHRoaXMuY3NzTmFtZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscy5wcm90b3R5cGUsIHRoaXMuY3NzTG9jYWxOYW1lLCB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ3NzUHJvcGVydHkucHJvdG90eXBlLmlzU2V0ID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmtleSBpbiBpbnN0YW5jZTtcbiAgICB9O1xuICAgIHJldHVybiBDc3NQcm9wZXJ0eTtcbn0oKSk7XG5leHBvcnRzLkNzc1Byb3BlcnR5ID0gQ3NzUHJvcGVydHk7XG5Dc3NQcm9wZXJ0eS5wcm90b3R5cGUuaXNTdHlsZVByb3BlcnR5ID0gdHJ1ZTtcbnZhciBDc3NBbmltYXRpb25Qcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ3NzQW5pbWF0aW9uUHJvcGVydHkob3B0aW9ucykge1xuICAgICAgICB2YXIgdmFsdWVDb252ZXJ0ZXIgPSBvcHRpb25zLnZhbHVlQ29udmVydGVyLCBlcXVhbGl0eUNvbXBhcmVyID0gb3B0aW9ucy5lcXVhbGl0eUNvbXBhcmVyLCB2YWx1ZUNoYW5nZWQgPSBvcHRpb25zLnZhbHVlQ2hhbmdlZCwgZGVmYXVsdFZhbHVlID0gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIHRoaXMubmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgY3NzUHJvcGVydHlOYW1lcy5wdXNoKG9wdGlvbnMuY3NzTmFtZSk7XG4gICAgICAgIENzc0FuaW1hdGlvblByb3BlcnR5LnByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSA9IHRoaXM7XG4gICAgICAgIGlmIChvcHRpb25zLmNzc05hbWUgJiYgb3B0aW9ucy5jc3NOYW1lICE9PSBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgIENzc0FuaW1hdGlvblByb3BlcnR5LnByb3BlcnRpZXNbb3B0aW9ucy5jc3NOYW1lXSA9IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdmFsdWVDb252ZXJ0ZXIgPSBvcHRpb25zLnZhbHVlQ29udmVydGVyO1xuICAgICAgICB2YXIgY3NzTG9jYWxOYW1lID0gKG9wdGlvbnMuY3NzTmFtZSB8fCBwcm9wZXJ0eU5hbWUpO1xuICAgICAgICB0aGlzLmNzc0xvY2FsTmFtZSA9IGNzc0xvY2FsTmFtZTtcbiAgICAgICAgdmFyIGNzc05hbWUgPSBcImNzczpcIiArIGNzc0xvY2FsTmFtZTtcbiAgICAgICAgdGhpcy5jc3NOYW1lID0gY3NzTmFtZTtcbiAgICAgICAgdmFyIGtleWZyYW1lTmFtZSA9IFwia2V5ZnJhbWU6XCIgKyBwcm9wZXJ0eU5hbWU7XG4gICAgICAgIHRoaXMua2V5ZnJhbWUgPSBrZXlmcmFtZU5hbWU7XG4gICAgICAgIHZhciBkZWZhdWx0TmFtZSA9IFwiZGVmYXVsdDpcIiArIHByb3BlcnR5TmFtZTtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZUtleSA9IFN5bWJvbChkZWZhdWx0TmFtZSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdFZhbHVlS2V5ID0gZGVmYXVsdFZhbHVlS2V5O1xuICAgICAgICB0aGlzLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdmFyIGNzc1ZhbHVlID0gU3ltYm9sKGNzc05hbWUpO1xuICAgICAgICB2YXIgc3R5bGVWYWx1ZSA9IFN5bWJvbChcImxvY2FsOlwiICsgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgdmFyIGtleWZyYW1lVmFsdWUgPSBTeW1ib2woa2V5ZnJhbWVOYW1lKTtcbiAgICAgICAgdmFyIGNvbXB1dGVkVmFsdWUgPSBTeW1ib2woXCJjb21wdXRlZC12YWx1ZTpcIiArIHByb3BlcnR5TmFtZSk7XG4gICAgICAgIHRoaXMua2V5ID0gY29tcHV0ZWRWYWx1ZTtcbiAgICAgICAgdmFyIGNvbXB1dGVkU291cmNlID0gU3ltYm9sKFwiY29tcHV0ZWQtc291cmNlOlwiICsgcHJvcGVydHlOYW1lKTtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBjb21wdXRlZFNvdXJjZTtcbiAgICAgICAgdGhpcy5nZXREZWZhdWx0ID0gU3ltYm9sKHByb3BlcnR5TmFtZSArIFwiOmdldERlZmF1bHRcIik7XG4gICAgICAgIHZhciBnZXREZWZhdWx0ID0gdGhpcy5nZXREZWZhdWx0O1xuICAgICAgICB2YXIgc2V0TmF0aXZlID0gdGhpcy5zZXROYXRpdmUgPSBTeW1ib2wocHJvcGVydHlOYW1lICsgXCI6c2V0TmF0aXZlXCIpO1xuICAgICAgICB2YXIgZXZlbnROYW1lID0gcHJvcGVydHlOYW1lICsgXCJDaGFuZ2VcIjtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcztcbiAgICAgICAgZnVuY3Rpb24gZGVzY3JpcHRvcihzeW1ib2wsIHByb3BlcnR5U291cmNlLCBlbnVtZXJhYmxlLCBjb25maWd1cmFibGUsIGdldHNDb21wdXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiBlbnVtZXJhYmxlLCBjb25maWd1cmFibGU6IGNvbmZpZ3VyYWJsZSxcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHNDb21wdXRlZCA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXNbY29tcHV0ZWRWYWx1ZV07IH0gOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW3N5bWJvbF07IH0sXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYm94ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlld1JlZi5nZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjZV8xLndyaXRlKGJveGVkVmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcgYmVjYXVzZSBcXFwiLnZpZXdSZWZcXFwiIGlzIGNsZWFyZWRcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLkFuaW1hdGlvbiwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzW2NvbXB1dGVkVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkU291cmNlID0gdGhpc1tjb21wdXRlZFNvdXJjZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciB3YXNTZXQgPSBvbGRTb3VyY2UgIT09IDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldCA9IGJveGVkVmFsdWUgPT09IGV4cG9ydHMudW5zZXRWYWx1ZSB8fCBib3hlZFZhbHVlID09PSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbc3ltYm9sXSA9IGV4cG9ydHMudW5zZXRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2NvbXB1dGVkU291cmNlXSA9PT0gcHJvcGVydHlTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tzdHlsZVZhbHVlXSAhPT0gZXhwb3J0cy51bnNldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbY29tcHV0ZWRTb3VyY2VdID0gMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tjb21wdXRlZFZhbHVlXSA9IHRoaXNbc3R5bGVWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXNbY3NzVmFsdWVdICE9PSBleHBvcnRzLnVuc2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tjb21wdXRlZFNvdXJjZV0gPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbXB1dGVkVmFsdWVdID0gdGhpc1tjc3NWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tjb21wdXRlZFNvdXJjZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2NvbXB1dGVkVmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZUNvbnZlcnRlciAmJiB0eXBlb2YgYm94ZWRWYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveGVkVmFsdWUgPSB2YWx1ZUNvbnZlcnRlcihib3hlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbc3ltYm9sXSA9IGJveGVkVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1tjb21wdXRlZFNvdXJjZV0gPD0gcHJvcGVydHlTb3VyY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2NvbXB1dGVkU291cmNlXSA9IHByb3BlcnR5U291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbY29tcHV0ZWRWYWx1ZV0gPSBib3hlZFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXNbY29tcHV0ZWRWYWx1ZV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSB0aGlzW2NvbXB1dGVkU291cmNlXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzU2V0ID0gc291cmNlICE9PSAwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29tcHV0ZWRWYWx1ZUNoYW5nZWQgPSBvbGRWYWx1ZSAhPT0gdmFsdWUgJiYgKCFlcXVhbGl0eUNvbXBhcmVyIHx8ICFlcXVhbGl0eUNvbXBhcmVyKG9sZFZhbHVlLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZWRWYWx1ZUNoYW5nZWQgJiYgdmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoYW5nZWQodGhpcywgb2xkVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmlld1tzZXROYXRpdmVdICYmIChjb21wdXRlZFZhbHVlQ2hhbmdlZCB8fCBpc1NldCAhPT0gd2FzU2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuX3N1c3BlbmROYXRpdmVVcGRhdGVzQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZGVkVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3Ll9zdXNwZW5kZWRVcGRhdGVzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXNTZXQgJiYgIShkZWZhdWx0VmFsdWVLZXkgaW4gdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbZGVmYXVsdFZhbHVlS2V5XSA9IHZpZXdbZ2V0RGVmYXVsdF0gPyB2aWV3W2dldERlZmF1bHRdKCkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAod2FzU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmFsdWVLZXkgaW4gdGhpcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHRoaXNbZGVmYXVsdFZhbHVlS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0oZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcHV0ZWRWYWx1ZUNoYW5nZWQgJiYgdGhpcy5oYXNMaXN0ZW5lcnMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnkoeyBvYmplY3Q6IHRoaXMsIGV2ZW50TmFtZTogZXZlbnROYW1lLCBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSwgdmFsdWU6IHZhbHVlLCBvbGRWYWx1ZTogb2xkVmFsdWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWZhdWx0UHJvcGVydHlEZXNjcmlwdG9yID0gZGVzY3JpcHRvcihkZWZhdWx0VmFsdWVLZXksIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICB2YXIgY3NzUHJvcGVydHlEZXNjcmlwdG9yID0gZGVzY3JpcHRvcihjc3NWYWx1ZSwgMiwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIHZhciBzdHlsZVByb3BlcnR5RGVzY3JpcHRvciA9IGRlc2NyaXB0b3Ioc3R5bGVWYWx1ZSwgMywgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgIHZhciBrZXlmcmFtZVByb3BlcnR5RGVzY3JpcHRvciA9IGRlc2NyaXB0b3Ioa2V5ZnJhbWVWYWx1ZSwgNCwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIHN5bWJvbFByb3BlcnR5TWFwW2NvbXB1dGVkVmFsdWVdID0gdGhpcztcbiAgICAgICAgY3NzU3ltYm9sUHJvcGVydHlNYXBbY29tcHV0ZWRWYWx1ZV0gPSB0aGlzO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGNscykge1xuICAgICAgICAgICAgY2xzLnByb3RvdHlwZVtjb21wdXRlZFZhbHVlXSA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgY2xzLnByb3RvdHlwZVtjb21wdXRlZFNvdXJjZV0gPSAwO1xuICAgICAgICAgICAgY2xzLnByb3RvdHlwZVtjc3NWYWx1ZV0gPSBleHBvcnRzLnVuc2V0VmFsdWU7XG4gICAgICAgICAgICBjbHMucHJvdG90eXBlW3N0eWxlVmFsdWVdID0gZXhwb3J0cy51bnNldFZhbHVlO1xuICAgICAgICAgICAgY2xzLnByb3RvdHlwZVtrZXlmcmFtZVZhbHVlXSA9IGV4cG9ydHMudW5zZXRWYWx1ZTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbHMucHJvdG90eXBlLCBkZWZhdWx0TmFtZSwgZGVmYXVsdFByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgY3NzTmFtZSwgY3NzUHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbHMucHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIHN0eWxlUHJvcGVydHlEZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmNzc05hbWUgJiYgb3B0aW9ucy5jc3NOYW1lICE9PSBvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgb3B0aW9ucy5jc3NOYW1lLCBzdHlsZVByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwga2V5ZnJhbWVOYW1lLCBrZXlmcmFtZVByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIENzc0FuaW1hdGlvblByb3BlcnR5LnByb3RvdHlwZS5faW5pdERlZmF1bHROYXRpdmVWYWx1ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0YXJnZXQudmlld1JlZi5nZXQoKTtcbiAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICB0cmFjZV8xLndyaXRlKFwiX2luaXREZWZhdWx0TmF0aXZlVmFsdWUgbm90IGV4ZWN1dGVkIHRvIHZpZXcgYmVjYXVzZSBcXFwiLnZpZXdSZWZcXFwiIGlzIGNsZWFyZWRcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLkFuaW1hdGlvbiwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlS2V5ID0gdGhpcy5kZWZhdWx0VmFsdWVLZXk7XG4gICAgICAgIGlmICghKGRlZmF1bHRWYWx1ZUtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgICAgICB2YXIgZ2V0RGVmYXVsdCA9IHRoaXMuZ2V0RGVmYXVsdDtcbiAgICAgICAgICAgIHRhcmdldFtkZWZhdWx0VmFsdWVLZXldID0gdmlld1tnZXREZWZhdWx0XSA/IHZpZXdbZ2V0RGVmYXVsdF0oKSA6IHRoaXMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDc3NBbmltYXRpb25Qcm9wZXJ0eS5fZ2V0QnlDc3NOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcGVydGllc1tuYW1lXTtcbiAgICB9O1xuICAgIENzc0FuaW1hdGlvblByb3BlcnR5Ll9nZXRQcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoQ3NzQW5pbWF0aW9uUHJvcGVydHkucHJvcGVydGllcyk7XG4gICAgfTtcbiAgICBDc3NBbmltYXRpb25Qcm9wZXJ0eS5wcm90b3R5cGUuaXNTZXQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlW3RoaXMuc291cmNlXSAhPT0gMDtcbiAgICB9O1xuICAgIENzc0FuaW1hdGlvblByb3BlcnR5LnByb3BlcnRpZXMgPSB7fTtcbiAgICByZXR1cm4gQ3NzQW5pbWF0aW9uUHJvcGVydHk7XG59KCkpO1xuZXhwb3J0cy5Dc3NBbmltYXRpb25Qcm9wZXJ0eSA9IENzc0FuaW1hdGlvblByb3BlcnR5O1xuQ3NzQW5pbWF0aW9uUHJvcGVydHkucHJvdG90eXBlLmlzU3R5bGVQcm9wZXJ0eSA9IHRydWU7XG52YXIgSW5oZXJpdGVkQ3NzUHJvcGVydHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhJbmhlcml0ZWRDc3NQcm9wZXJ0eSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBJbmhlcml0ZWRDc3NQcm9wZXJ0eShvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG9wdGlvbnMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIHZhciBrZXkgPSBfdGhpcy5rZXk7XG4gICAgICAgIHZhciBzb3VyY2VLZXkgPSBfdGhpcy5zb3VyY2VLZXk7XG4gICAgICAgIHZhciBnZXREZWZhdWx0ID0gX3RoaXMuZ2V0RGVmYXVsdDtcbiAgICAgICAgdmFyIHNldE5hdGl2ZSA9IF90aGlzLnNldE5hdGl2ZTtcbiAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZUtleSA9IF90aGlzLmRlZmF1bHRWYWx1ZUtleTtcbiAgICAgICAgdmFyIGV2ZW50TmFtZSA9IHByb3BlcnR5TmFtZSArIFwiQ2hhbmdlXCI7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgdmFyIGFmZmVjdHNMYXlvdXQgPSBvcHRpb25zLmFmZmVjdHNMYXlvdXQ7XG4gICAgICAgIHZhciBlcXVhbGl0eUNvbXBhcmVyID0gb3B0aW9ucy5lcXVhbGl0eUNvbXBhcmVyO1xuICAgICAgICB2YXIgdmFsdWVDaGFuZ2VkID0gb3B0aW9ucy52YWx1ZUNoYW5nZWQ7XG4gICAgICAgIHZhciB2YWx1ZUNvbnZlcnRlciA9IG9wdGlvbnMudmFsdWVDb252ZXJ0ZXI7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IF90aGlzO1xuICAgICAgICB2YXIgc2V0RnVuYyA9IGZ1bmN0aW9uICh2YWx1ZVNvdXJjZSkgeyByZXR1cm4gZnVuY3Rpb24gKGJveGVkVmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3UmVmLmdldCgpO1xuICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VfMS53cml0ZShib3hlZFZhbHVlICsgXCIgbm90IHNldCB0byB2aWV3J3MgcHJvcGVydHkgYmVjYXVzZSBcXFwiLnZpZXdSZWZcXFwiIGlzIGNsZWFyZWRcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLlN0eWxlLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLndhcm4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByZXNldCA9IGJveGVkVmFsdWUgPT09IGV4cG9ydHMudW5zZXRWYWx1ZSB8fCBib3hlZFZhbHVlID09PSBcIlwiO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZVNvdXJjZSA9IHRoaXNbc291cmNlS2V5XSB8fCAwO1xuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlU291cmNlID09PSAyICYmIGN1cnJlbnRWYWx1ZVNvdXJjZSA9PT0gMykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZVNvdXJjZSA+IHZhbHVlU291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSBrZXkgaW4gdGhpcyA/IHRoaXNba2V5XSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIHZhciB1bnNldE5hdGl2ZVZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFyZW50XzIgPSB2aWV3LnBhcmVudDtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSBwYXJlbnRfMiA/IHBhcmVudF8yLnN0eWxlIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGUgJiYgc3R5bGVbc291cmNlS2V5XSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBzdHlsZVtwcm9wZXJ0eU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB0aGlzW3NvdXJjZUtleV0gPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1tzb3VyY2VLZXldO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1trZXldO1xuICAgICAgICAgICAgICAgICAgICB1bnNldE5hdGl2ZVZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzW3NvdXJjZUtleV0gPSB2YWx1ZVNvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVDb252ZXJ0ZXIgJiYgdHlwZW9mIGJveGVkVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUNvbnZlcnRlcihib3hlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYm94ZWRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgY2hhbmdlZCA9IGVxdWFsaXR5Q29tcGFyZXIgPyAhZXF1YWxpdHlDb21wYXJlcihvbGRWYWx1ZSwgdmFsdWUpIDogb2xkVmFsdWUgIT09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlQ2hhbmdlZCh0aGlzLCBvbGRWYWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmlld1tzZXROYXRpdmVdKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWV3Ll9zdXNwZW5kTmF0aXZlVXBkYXRlc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5fc3VzcGVuZGVkVXBkYXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZXcuX3N1c3BlbmRlZFVwZGF0ZXNbcHJvcGVydHlOYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVuc2V0TmF0aXZlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmYXVsdFZhbHVlS2V5IGluIHRoaXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHRoaXNbZGVmYXVsdFZhbHVlS2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2RlZmF1bHRWYWx1ZUtleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWV3W3NldE5hdGl2ZV0oZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShkZWZhdWx0VmFsdWVLZXkgaW4gdGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1tkZWZhdWx0VmFsdWVLZXldID0gdmlld1tnZXREZWZhdWx0XSA/IHZpZXdbZ2V0RGVmYXVsdF0oKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tzZXROYXRpdmVdKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vdGlmeSh7IG9iamVjdDogdGhpcywgZXZlbnROYW1lOiBldmVudE5hbWUsIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLCB2YWx1ZTogdmFsdWUsIG9sZFZhbHVlOiBvbGRWYWx1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGFmZmVjdHNMYXlvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5yZXF1ZXN0TGF5b3V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZpZXcuZWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRTdHlsZSA9IGNoaWxkLnN0eWxlO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRWYWx1ZVNvdXJjZSA9IGNoaWxkU3R5bGVbc291cmNlS2V5XSB8fCAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZFZhbHVlU291cmNlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0RGVmYXVsdEZ1bmMuY2FsbChjaGlsZFN0eWxlLCBleHBvcnRzLnVuc2V0VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkVmFsdWVTb3VyY2UgPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEluaGVyaXRlZEZ1bmMuY2FsbChjaGlsZFN0eWxlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07IH07XG4gICAgICAgIHZhciBzZXREZWZhdWx0RnVuYyA9IHNldEZ1bmMoMCk7XG4gICAgICAgIHZhciBzZXRJbmhlcml0ZWRGdW5jID0gc2V0RnVuYygxKTtcbiAgICAgICAgX3RoaXMuc2V0SW5oZXJpdGVkVmFsdWUgPSBzZXRJbmhlcml0ZWRGdW5jO1xuICAgICAgICBfdGhpcy5jc3NWYWx1ZURlc2NyaXB0b3Iuc2V0ID0gc2V0RnVuYygyKTtcbiAgICAgICAgX3RoaXMubG9jYWxWYWx1ZURlc2NyaXB0b3Iuc2V0ID0gc2V0RnVuYygzKTtcbiAgICAgICAgaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzLnB1c2goX3RoaXMpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBJbmhlcml0ZWRDc3NQcm9wZXJ0eTtcbn0oQ3NzUHJvcGVydHkpKTtcbmV4cG9ydHMuSW5oZXJpdGVkQ3NzUHJvcGVydHkgPSBJbmhlcml0ZWRDc3NQcm9wZXJ0eTtcbnZhciBTaG9ydGhhbmRQcm9wZXJ0eSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hvcnRoYW5kUHJvcGVydHkob3B0aW9ucykge1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICAgIHZhciBrZXkgPSBTeW1ib2wodGhpcy5uYW1lICsgXCI6cHJvcGVydHlLZXlcIik7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLmNzc05hbWUgPSBcImNzczpcIiArIG9wdGlvbnMuY3NzTmFtZTtcbiAgICAgICAgdGhpcy5jc3NMb2NhbE5hbWUgPSBcIlwiICsgb3B0aW9ucy5jc3NOYW1lO1xuICAgICAgICB2YXIgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7XG4gICAgICAgIGZ1bmN0aW9uIHNldExvY2FsVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRoaXMudmlld1JlZi5nZXQoKTtcbiAgICAgICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgICAgIHRyYWNlXzEud3JpdGUoXCJzZXRMb2NhbFZhbHVlIG5vdCBleGVjdXRlZCB0byB2aWV3IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5BbmltYXRpb24sIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy5fYmF0Y2hVcGRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb252ZXJ0ZXIodmFsdWUpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIHAgPSBfYlswXSwgdiA9IF9iWzFdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpc1twLm5hbWVdID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBzZXRDc3NWYWx1ZSh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3UmVmLmdldCgpO1xuICAgICAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICAgICAgdHJhY2VfMS53cml0ZShcInNldENzc1ZhbHVlIG5vdCBleGVjdXRlZCB0byB2aWV3IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5BbmltYXRpb24sIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmlldy5fYmF0Y2hVcGRhdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBjb252ZXJ0ZXIodmFsdWUpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBfYVtfaV0sIHAgPSBfYlswXSwgdiA9IF9iWzFdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpc1twLmNzc05hbWVdID0gdjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNzc1ZhbHVlRGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBnZXQ6IG9wdGlvbnMuZ2V0dGVyLFxuICAgICAgICAgICAgc2V0OiBzZXRDc3NWYWx1ZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGdldDogb3B0aW9ucy5nZXR0ZXIsXG4gICAgICAgICAgICBzZXQ6IHNldExvY2FsVmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUJhZ0Rlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZXIodmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eSA9IF9hWzBdLCB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICAgICAgICAgICAgICBfdGhpc1twcm9wZXJ0eS5jc3NMb2NhbE5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNzc1N5bWJvbFByb3BlcnR5TWFwW2tleV0gPSB0aGlzO1xuICAgIH1cbiAgICBTaG9ydGhhbmRQcm9wZXJ0eS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoY2xzKSB7XG4gICAgICAgIGlmICh0aGlzLnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3BlcnR5IFwiICsgdGhpcy5uYW1lICsgXCIgYWxyZWFkeSByZWdpc3RlcmVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgdGhpcy5uYW1lLCB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscy5wcm90b3R5cGUsIHRoaXMuY3NzTmFtZSwgdGhpcy5jc3NWYWx1ZURlc2NyaXB0b3IpO1xuICAgICAgICBpZiAodGhpcy5jc3NMb2NhbE5hbWUgIT09IHRoaXMuY3NzTmFtZSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscy5wcm90b3R5cGUsIHRoaXMuY3NzTG9jYWxOYW1lLCB0aGlzLmxvY2FsVmFsdWVEZXNjcmlwdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZS5Qcm9wZXJ0eUJhZywgdGhpcy5jc3NMb2NhbE5hbWUsIHRoaXMucHJvcGVydHlCYWdEZXNjcmlwdG9yKTtcbiAgICB9O1xuICAgIHJldHVybiBTaG9ydGhhbmRQcm9wZXJ0eTtcbn0oKSk7XG5leHBvcnRzLlNob3J0aGFuZFByb3BlcnR5ID0gU2hvcnRoYW5kUHJvcGVydHk7XG5mdW5jdGlvbiBpbmhlcml0YWJsZVByb3BlcnR5VmFsdWVzT24odmlldykge1xuICAgIHZhciBhcnJheSA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAodmFyIF9pID0gMCwgaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzEgPSBpbmhlcml0YWJsZVByb3BlcnRpZXM7IF9pIDwgaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBwcm9wID0gaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzFbX2ldO1xuICAgICAgICB2YXIgc291cmNlS2V5ID0gcHJvcC5zb3VyY2VLZXk7XG4gICAgICAgIHZhciB2YWx1ZVNvdXJjZSA9IHZpZXdbc291cmNlS2V5XSB8fCAwO1xuICAgICAgICBpZiAodmFsdWVTb3VyY2UgIT09IDApIHtcbiAgICAgICAgICAgIGFycmF5LnB1c2goeyBwcm9wZXJ0eTogcHJvcCwgdmFsdWU6IHZpZXdbcHJvcC5uYW1lXSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBpbmhlcml0YWJsZUNzc1Byb3BlcnR5VmFsdWVzT24oc3R5bGUpIHtcbiAgICB2YXIgYXJyYXkgPSBuZXcgQXJyYXkoKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGluaGVyaXRhYmxlQ3NzUHJvcGVydGllc18xID0gaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzOyBfaSA8IGluaGVyaXRhYmxlQ3NzUHJvcGVydGllc18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgcHJvcCA9IGluaGVyaXRhYmxlQ3NzUHJvcGVydGllc18xW19pXTtcbiAgICAgICAgdmFyIHNvdXJjZUtleSA9IHByb3Auc291cmNlS2V5O1xuICAgICAgICB2YXIgdmFsdWVTb3VyY2UgPSBzdHlsZVtzb3VyY2VLZXldIHx8IDA7XG4gICAgICAgIGlmICh2YWx1ZVNvdXJjZSAhPT0gMCkge1xuICAgICAgICAgICAgYXJyYXkucHVzaCh7IHByb3BlcnR5OiBwcm9wLCB2YWx1ZTogc3R5bGVbcHJvcC5uYW1lXSB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5leHBvcnRzLmluaXROYXRpdmVWaWV3ID0gcHJvZmlsaW5nXzEucHJvZmlsZShcIlxcXCJwcm9wZXJ0aWVzXFxcIi5pbml0TmF0aXZlVmlld1wiLCBmdW5jdGlvbiBpbml0TmF0aXZlVmlldyh2aWV3KSB7XG4gICAgaWYgKHZpZXcuX3N1c3BlbmRlZFVwZGF0ZXMpIHtcbiAgICAgICAgYXBwbHlQZW5kaW5nTmF0aXZlU2V0dGVycyh2aWV3KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFwcGx5QWxsTmF0aXZlU2V0dGVycyh2aWV3KTtcbiAgICB9XG4gICAgdmlldy5fc3VzcGVuZGVkVXBkYXRlcyA9IHt9O1xufSk7XG5mdW5jdGlvbiBhcHBseVBlbmRpbmdOYXRpdmVTZXR0ZXJzKHZpZXcpIHtcbiAgICB2YXIgc3VzcGVuZGVkVXBkYXRlcyA9IHZpZXcuX3N1c3BlbmRlZFVwZGF0ZXM7XG4gICAgZm9yICh2YXIgcHJvcGVydHlOYW1lIGluIHN1c3BlbmRlZFVwZGF0ZXMpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3VzcGVuZGVkVXBkYXRlc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgICB2YXIgc2V0TmF0aXZlID0gcHJvcGVydHkuc2V0TmF0aXZlO1xuICAgICAgICBpZiAodmlld1tzZXROYXRpdmVdKSB7XG4gICAgICAgICAgICB2YXIgZ2V0RGVmYXVsdCA9IHByb3BlcnR5LmdldERlZmF1bHQsIGlzU3R5bGVQcm9wZXJ0eSA9IHByb3BlcnR5LmlzU3R5bGVQcm9wZXJ0eSwgZGVmYXVsdFZhbHVlS2V5ID0gcHJvcGVydHkuZGVmYXVsdFZhbHVlS2V5LCBkZWZhdWx0VmFsdWUgPSBwcm9wZXJ0eS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoaXNTdHlsZVByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlID0gdmlldy5zdHlsZTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkuaXNTZXQodmlldy5zdHlsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZGVmYXVsdFZhbHVlS2V5IGluIHN0eWxlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbZGVmYXVsdFZhbHVlS2V5XSA9IHZpZXdbZ2V0RGVmYXVsdF0gPyB2aWV3W2dldERlZmF1bHRdKCkgOiBkZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2aWV3LnN0eWxlW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHN0eWxlW2RlZmF1bHRWYWx1ZUtleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5LmlzU2V0KHZpZXcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGRlZmF1bHRWYWx1ZUtleSBpbiB2aWV3KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmlld1tkZWZhdWx0VmFsdWVLZXldID0gdmlld1tnZXREZWZhdWx0XSA/IHZpZXdbZ2V0RGVmYXVsdF0oKSA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZpZXdbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmlld1tkZWZhdWx0VmFsdWVLZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZpZXdbc2V0TmF0aXZlXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFwcGx5UGVuZGluZ05hdGl2ZVNldHRlcnMgPSBhcHBseVBlbmRpbmdOYXRpdmVTZXR0ZXJzO1xuZnVuY3Rpb24gYXBwbHlBbGxOYXRpdmVTZXR0ZXJzKHZpZXcpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModmlldyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzeW1ib2xzXzIgPSBzeW1ib2xzOyBfaSA8IHN5bWJvbHNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNfMltfaV07XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IHN5bWJvbFByb3BlcnR5TWFwW3N5bWJvbF07XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZXROYXRpdmUgPSBwcm9wZXJ0eS5zZXROYXRpdmU7XG4gICAgICAgIHZhciBnZXREZWZhdWx0ID0gcHJvcGVydHkuZ2V0RGVmYXVsdDtcbiAgICAgICAgaWYgKHNldE5hdGl2ZSBpbiB2aWV3KSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlS2V5ID0gcHJvcGVydHkuZGVmYXVsdFZhbHVlS2V5O1xuICAgICAgICAgICAgaWYgKCEoZGVmYXVsdFZhbHVlS2V5IGluIHZpZXcpKSB7XG4gICAgICAgICAgICAgICAgdmlld1tkZWZhdWx0VmFsdWVLZXldID0gdmlld1tnZXREZWZhdWx0XSA/IHZpZXdbZ2V0RGVmYXVsdF0oKSA6IHByb3BlcnR5LmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZpZXdbc3ltYm9sXTtcbiAgICAgICAgICAgIHZpZXdbc2V0TmF0aXZlXSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN0eWxlID0gdmlldy5zdHlsZTtcbiAgICBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzdHlsZSk7XG4gICAgZm9yICh2YXIgX2EgPSAwLCBzeW1ib2xzXzMgPSBzeW1ib2xzOyBfYSA8IHN5bWJvbHNfMy5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNfM1tfYV07XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IGNzc1N5bWJvbFByb3BlcnR5TWFwW3N5bWJvbF07XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aWV3W3Byb3BlcnR5LnNldE5hdGl2ZV0pIHtcbiAgICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWVLZXkgPSBwcm9wZXJ0eS5kZWZhdWx0VmFsdWVLZXk7XG4gICAgICAgICAgICBpZiAoIShkZWZhdWx0VmFsdWVLZXkgaW4gc3R5bGUpKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVbZGVmYXVsdFZhbHVlS2V5XSA9IHZpZXdbcHJvcGVydHkuZ2V0RGVmYXVsdF0gPyB2aWV3W3Byb3BlcnR5LmdldERlZmF1bHRdKCkgOiBwcm9wZXJ0eS5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZVtzeW1ib2xdO1xuICAgICAgICAgICAgdmlld1twcm9wZXJ0eS5zZXROYXRpdmVdKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuYXBwbHlBbGxOYXRpdmVTZXR0ZXJzID0gYXBwbHlBbGxOYXRpdmVTZXR0ZXJzO1xuZnVuY3Rpb24gcmVzZXROYXRpdmVWaWV3KHZpZXcpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModmlldyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzeW1ib2xzXzQgPSBzeW1ib2xzOyBfaSA8IHN5bWJvbHNfNC5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNfNFtfaV07XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IHN5bWJvbFByb3BlcnR5TWFwW3N5bWJvbF07XG4gICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aWV3W3Byb3BlcnR5LnNldE5hdGl2ZV0pIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eS5kZWZhdWx0VmFsdWVLZXkgaW4gdmlldykge1xuICAgICAgICAgICAgICAgIHZpZXdbcHJvcGVydHkuc2V0TmF0aXZlXSh2aWV3W3Byb3BlcnR5LmRlZmF1bHRWYWx1ZUtleV0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB2aWV3W3Byb3BlcnR5LmRlZmF1bHRWYWx1ZUtleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2aWV3W3Byb3BlcnR5LnNldE5hdGl2ZV0ocHJvcGVydHkuZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3R5bGUgPSB2aWV3LnN0eWxlO1xuICAgIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHN0eWxlKTtcbiAgICBmb3IgKHZhciBfYSA9IDAsIHN5bWJvbHNfNSA9IHN5bWJvbHM7IF9hIDwgc3ltYm9sc181Lmxlbmd0aDsgX2ErKykge1xuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sc181W19hXTtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gY3NzU3ltYm9sUHJvcGVydHlNYXBbc3ltYm9sXTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpZXdbcHJvcGVydHkuc2V0TmF0aXZlXSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5LmRlZmF1bHRWYWx1ZUtleSBpbiBzdHlsZSkge1xuICAgICAgICAgICAgICAgIHZpZXdbcHJvcGVydHkuc2V0TmF0aXZlXShzdHlsZVtwcm9wZXJ0eS5kZWZhdWx0VmFsdWVLZXldKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgc3R5bGVbcHJvcGVydHkuZGVmYXVsdFZhbHVlS2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZpZXdbcHJvcGVydHkuc2V0TmF0aXZlXShwcm9wZXJ0eS5kZWZhdWx0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5yZXNldE5hdGl2ZVZpZXcgPSByZXNldE5hdGl2ZVZpZXc7XG5mdW5jdGlvbiBjbGVhckluaGVyaXRlZFByb3BlcnRpZXModmlldykge1xuICAgIGZvciAodmFyIF9pID0gMCwgaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzIgPSBpbmhlcml0YWJsZVByb3BlcnRpZXM7IF9pIDwgaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzIubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBwcm9wID0gaW5oZXJpdGFibGVQcm9wZXJ0aWVzXzJbX2ldO1xuICAgICAgICB2YXIgc291cmNlS2V5ID0gcHJvcC5zb3VyY2VLZXk7XG4gICAgICAgIGlmICh2aWV3W3NvdXJjZUtleV0gPT09IDEpIHtcbiAgICAgICAgICAgIHByb3Auc2V0LmNhbGwodmlldywgZXhwb3J0cy51bnNldFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgc3R5bGUgPSB2aWV3LnN0eWxlO1xuICAgIGZvciAodmFyIF9hID0gMCwgaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzXzIgPSBpbmhlcml0YWJsZUNzc1Byb3BlcnRpZXM7IF9hIDwgaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgIHZhciBwcm9wID0gaW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzXzJbX2FdO1xuICAgICAgICB2YXIgc291cmNlS2V5ID0gcHJvcC5zb3VyY2VLZXk7XG4gICAgICAgIGlmIChzdHlsZVtzb3VyY2VLZXldID09PSAxKSB7XG4gICAgICAgICAgICBwcm9wLnNldEluaGVyaXRlZFZhbHVlLmNhbGwoc3R5bGUsIGV4cG9ydHMudW5zZXRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmNsZWFySW5oZXJpdGVkUHJvcGVydGllcyA9IGNsZWFySW5oZXJpdGVkUHJvcGVydGllcztcbmZ1bmN0aW9uIHJlc2V0Q1NTUHJvcGVydGllcyhzdHlsZSkge1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzdHlsZSk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBzeW1ib2xzXzYgPSBzeW1ib2xzOyBfaSA8IHN5bWJvbHNfNi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IHN5bWJvbHNfNltfaV07XG4gICAgICAgIHZhciBjc3NQcm9wZXJ0eSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGNzc1Byb3BlcnR5ID0gY3NzU3ltYm9sUHJvcGVydHlNYXBbc3ltYm9sXSkge1xuICAgICAgICAgICAgc3R5bGVbY3NzUHJvcGVydHkuY3NzTmFtZV0gPSBleHBvcnRzLnVuc2V0VmFsdWU7XG4gICAgICAgICAgICBpZiAoY3NzUHJvcGVydHkgaW5zdGFuY2VvZiBDc3NBbmltYXRpb25Qcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHN0eWxlW2Nzc1Byb3BlcnR5LmtleWZyYW1lXSA9IGV4cG9ydHMudW5zZXRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucmVzZXRDU1NQcm9wZXJ0aWVzID0gcmVzZXRDU1NQcm9wZXJ0aWVzO1xuZnVuY3Rpb24gcHJvcGFnYXRlSW5oZXJpdGFibGVQcm9wZXJ0aWVzKHZpZXcsIGNoaWxkKSB7XG4gICAgdmFyIGluaGVyaXRhYmxlUHJvcGVydHlWYWx1ZXMgPSBpbmhlcml0YWJsZVByb3BlcnR5VmFsdWVzT24odmlldyk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBpbmhlcml0YWJsZVByb3BlcnR5VmFsdWVzXzEgPSBpbmhlcml0YWJsZVByb3BlcnR5VmFsdWVzOyBfaSA8IGluaGVyaXRhYmxlUHJvcGVydHlWYWx1ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHBhaXIgPSBpbmhlcml0YWJsZVByb3BlcnR5VmFsdWVzXzFbX2ldO1xuICAgICAgICB2YXIgcHJvcCA9IHBhaXIucHJvcGVydHk7XG4gICAgICAgIHZhciBzb3VyY2VLZXkgPSBwcm9wLnNvdXJjZUtleTtcbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZVNvdXJjZSA9IGNoaWxkW3NvdXJjZUtleV0gfHwgMDtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZVNvdXJjZSA8PSAxKSB7XG4gICAgICAgICAgICBwcm9wLnNldEluaGVyaXRlZFZhbHVlLmNhbGwoY2hpbGQsIHBhaXIudmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5wcm9wYWdhdGVJbmhlcml0YWJsZVByb3BlcnRpZXMgPSBwcm9wYWdhdGVJbmhlcml0YWJsZVByb3BlcnRpZXM7XG5mdW5jdGlvbiBwcm9wYWdhdGVJbmhlcml0YWJsZUNzc1Byb3BlcnRpZXMocGFyZW50U3R5bGUsIGNoaWxkU3R5bGUpIHtcbiAgICB2YXIgaW5oZXJpdGFibGVDc3NQcm9wZXJ0eVZhbHVlcyA9IGluaGVyaXRhYmxlQ3NzUHJvcGVydHlWYWx1ZXNPbihwYXJlbnRTdHlsZSk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBpbmhlcml0YWJsZUNzc1Byb3BlcnR5VmFsdWVzXzEgPSBpbmhlcml0YWJsZUNzc1Byb3BlcnR5VmFsdWVzOyBfaSA8IGluaGVyaXRhYmxlQ3NzUHJvcGVydHlWYWx1ZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHBhaXIgPSBpbmhlcml0YWJsZUNzc1Byb3BlcnR5VmFsdWVzXzFbX2ldO1xuICAgICAgICB2YXIgcHJvcCA9IHBhaXIucHJvcGVydHk7XG4gICAgICAgIHZhciBzb3VyY2VLZXkgPSBwcm9wLnNvdXJjZUtleTtcbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZVNvdXJjZSA9IGNoaWxkU3R5bGVbc291cmNlS2V5XSB8fCAwO1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlU291cmNlIDw9IDEpIHtcbiAgICAgICAgICAgIHByb3Auc2V0SW5oZXJpdGVkVmFsdWUuY2FsbChjaGlsZFN0eWxlLCBwYWlyLnZhbHVlLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMucHJvcGFnYXRlSW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzID0gcHJvcGFnYXRlSW5oZXJpdGFibGVDc3NQcm9wZXJ0aWVzO1xuZnVuY3Rpb24gbWFrZVZhbGlkYXRvcigpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzZXQgPSBuZXcgU2V0KHZhbHVlcyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gc2V0Lmhhcyh2YWx1ZSk7IH07XG59XG5leHBvcnRzLm1ha2VWYWxpZGF0b3IgPSBtYWtlVmFsaWRhdG9yO1xuZnVuY3Rpb24gbWFrZVBhcnNlcihpc1ZhbGlkKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgbG93ZXIgPSB2YWx1ZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoaXNWYWxpZChsb3dlcikpIHtcbiAgICAgICAgICAgIHJldHVybiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWU6IFwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZVBhcnNlciA9IG1ha2VQYXJzZXI7XG5mdW5jdGlvbiBnZXRTZXRQcm9wZXJ0aWVzKHZpZXcpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmlldykuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXN1bHQucHVzaChbcHJvcCwgdmlld1twcm9wXV0pO1xuICAgIH0pO1xuICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh2aWV3KTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIHN5bWJvbHNfNyA9IHN5bWJvbHM7IF9pIDwgc3ltYm9sc183Lmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sc183W19pXTtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3ltYm9sUHJvcGVydHlNYXBbc3ltYm9sXTtcbiAgICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gdmlld1twcm9wZXJ0eS5rZXldO1xuICAgICAgICByZXN1bHQucHVzaChbcHJvcGVydHkubmFtZSwgdmFsdWVdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0U2V0UHJvcGVydGllcyA9IGdldFNldFByb3BlcnRpZXM7XG5mdW5jdGlvbiBnZXRDb21wdXRlZENzc1ZhbHVlcyh2aWV3KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzdHlsZSA9IHZpZXcuc3R5bGU7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBjc3NQcm9wZXJ0eU5hbWVzXzEgPSBjc3NQcm9wZXJ0eU5hbWVzOyBfaSA8IGNzc1Byb3BlcnR5TmFtZXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIHByb3AgPSBjc3NQcm9wZXJ0eU5hbWVzXzFbX2ldO1xuICAgICAgICByZXN1bHQucHVzaChbcHJvcCwgc3R5bGVbcHJvcF1dKTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2goW1widG9wXCIsIFwiYXV0b1wiXSk7XG4gICAgcmVzdWx0LnB1c2goW1wibGVmdFwiLCBcImF1dG9cIl0pO1xuICAgIHJlc3VsdC5wdXNoKFtcImJvdHRvbVwiLCBcImF1dG9cIl0pO1xuICAgIHJlc3VsdC5wdXNoKFtcInJpZ2h0XCIsIFwiYXV0b1wiXSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMuZ2V0Q29tcHV0ZWRDc3NWYWx1ZXMgPSBnZXRDb21wdXRlZENzc1ZhbHVlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnRpZXMuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEtleWJvYXJkVHlwZTtcbihmdW5jdGlvbiAoS2V5Ym9hcmRUeXBlKSB7XG4gICAgS2V5Ym9hcmRUeXBlLmRhdGV0aW1lID0gXCJkYXRldGltZVwiO1xuICAgIEtleWJvYXJkVHlwZS5waG9uZSA9IFwicGhvbmVcIjtcbiAgICBLZXlib2FyZFR5cGUubnVtYmVyID0gXCJudW1iZXJcIjtcbiAgICBLZXlib2FyZFR5cGUudXJsID0gXCJ1cmxcIjtcbiAgICBLZXlib2FyZFR5cGUuZW1haWwgPSBcImVtYWlsXCI7XG59KShLZXlib2FyZFR5cGUgPSBleHBvcnRzLktleWJvYXJkVHlwZSB8fCAoZXhwb3J0cy5LZXlib2FyZFR5cGUgPSB7fSkpO1xudmFyIFJldHVybktleVR5cGU7XG4oZnVuY3Rpb24gKFJldHVybktleVR5cGUpIHtcbiAgICBSZXR1cm5LZXlUeXBlLmRvbmUgPSBcImRvbmVcIjtcbiAgICBSZXR1cm5LZXlUeXBlLm5leHQgPSBcIm5leHRcIjtcbiAgICBSZXR1cm5LZXlUeXBlLmdvID0gXCJnb1wiO1xuICAgIFJldHVybktleVR5cGUuc2VhcmNoID0gXCJzZWFyY2hcIjtcbiAgICBSZXR1cm5LZXlUeXBlLnNlbmQgPSBcInNlbmRcIjtcbn0pKFJldHVybktleVR5cGUgPSBleHBvcnRzLlJldHVybktleVR5cGUgfHwgKGV4cG9ydHMuUmV0dXJuS2V5VHlwZSA9IHt9KSk7XG52YXIgVGV4dEFsaWdubWVudDtcbihmdW5jdGlvbiAoVGV4dEFsaWdubWVudCkge1xuICAgIFRleHRBbGlnbm1lbnQubGVmdCA9IFwibGVmdFwiO1xuICAgIFRleHRBbGlnbm1lbnQuY2VudGVyID0gXCJjZW50ZXJcIjtcbiAgICBUZXh0QWxpZ25tZW50LnJpZ2h0ID0gXCJyaWdodFwiO1xufSkoVGV4dEFsaWdubWVudCA9IGV4cG9ydHMuVGV4dEFsaWdubWVudCB8fCAoZXhwb3J0cy5UZXh0QWxpZ25tZW50ID0ge30pKTtcbnZhciBUZXh0RGVjb3JhdGlvbjtcbihmdW5jdGlvbiAoVGV4dERlY29yYXRpb24pIHtcbiAgICBUZXh0RGVjb3JhdGlvbi5ub25lID0gXCJub25lXCI7XG4gICAgVGV4dERlY29yYXRpb24udW5kZXJsaW5lID0gXCJ1bmRlcmxpbmVcIjtcbiAgICBUZXh0RGVjb3JhdGlvbi5saW5lVGhyb3VnaCA9IFwibGluZS10aHJvdWdoXCI7XG59KShUZXh0RGVjb3JhdGlvbiA9IGV4cG9ydHMuVGV4dERlY29yYXRpb24gfHwgKGV4cG9ydHMuVGV4dERlY29yYXRpb24gPSB7fSkpO1xudmFyIFRleHRUcmFuc2Zvcm07XG4oZnVuY3Rpb24gKFRleHRUcmFuc2Zvcm0pIHtcbiAgICBUZXh0VHJhbnNmb3JtLm5vbmUgPSBcIm5vbmVcIjtcbiAgICBUZXh0VHJhbnNmb3JtLmNhcGl0YWxpemUgPSBcImNhcGl0YWxpemVcIjtcbiAgICBUZXh0VHJhbnNmb3JtLnVwcGVyY2FzZSA9IFwidXBwZXJjYXNlXCI7XG4gICAgVGV4dFRyYW5zZm9ybS5sb3dlcmNhc2UgPSBcImxvd2VyY2FzZVwiO1xufSkoVGV4dFRyYW5zZm9ybSA9IGV4cG9ydHMuVGV4dFRyYW5zZm9ybSB8fCAoZXhwb3J0cy5UZXh0VHJhbnNmb3JtID0ge30pKTtcbnZhciBXaGl0ZVNwYWNlO1xuKGZ1bmN0aW9uIChXaGl0ZVNwYWNlKSB7XG4gICAgV2hpdGVTcGFjZS5ub3JtYWwgPSBcIm5vcm1hbFwiO1xuICAgIFdoaXRlU3BhY2Uubm93cmFwID0gXCJub3dyYXBcIjtcbn0pKFdoaXRlU3BhY2UgPSBleHBvcnRzLldoaXRlU3BhY2UgfHwgKGV4cG9ydHMuV2hpdGVTcGFjZSA9IHt9KSk7XG52YXIgT3JpZW50YXRpb247XG4oZnVuY3Rpb24gKE9yaWVudGF0aW9uKSB7XG4gICAgT3JpZW50YXRpb24uaG9yaXpvbnRhbCA9IFwiaG9yaXpvbnRhbFwiO1xuICAgIE9yaWVudGF0aW9uLnZlcnRpY2FsID0gXCJ2ZXJ0aWNhbFwiO1xufSkoT3JpZW50YXRpb24gPSBleHBvcnRzLk9yaWVudGF0aW9uIHx8IChleHBvcnRzLk9yaWVudGF0aW9uID0ge30pKTtcbnZhciBEZXZpY2VPcmllbnRhdGlvbjtcbihmdW5jdGlvbiAoRGV2aWNlT3JpZW50YXRpb24pIHtcbiAgICBEZXZpY2VPcmllbnRhdGlvbi5wb3J0cmFpdCA9IFwicG9ydHJhaXRcIjtcbiAgICBEZXZpY2VPcmllbnRhdGlvbi5sYW5kc2NhcGUgPSBcImxhbmRzY2FwZVwiO1xuICAgIERldmljZU9yaWVudGF0aW9uLnVua25vd24gPSBcInVua25vd25cIjtcbn0pKERldmljZU9yaWVudGF0aW9uID0gZXhwb3J0cy5EZXZpY2VPcmllbnRhdGlvbiB8fCAoZXhwb3J0cy5EZXZpY2VPcmllbnRhdGlvbiA9IHt9KSk7XG52YXIgSG9yaXpvbnRhbEFsaWdubWVudDtcbihmdW5jdGlvbiAoSG9yaXpvbnRhbEFsaWdubWVudCkge1xuICAgIEhvcml6b250YWxBbGlnbm1lbnQubGVmdCA9IFwibGVmdFwiO1xuICAgIEhvcml6b250YWxBbGlnbm1lbnQuY2VudGVyID0gXCJjZW50ZXJcIjtcbiAgICBIb3Jpem9udGFsQWxpZ25tZW50LnJpZ2h0ID0gXCJyaWdodFwiO1xuICAgIEhvcml6b250YWxBbGlnbm1lbnQuc3RyZXRjaCA9IFwic3RyZXRjaFwiO1xufSkoSG9yaXpvbnRhbEFsaWdubWVudCA9IGV4cG9ydHMuSG9yaXpvbnRhbEFsaWdubWVudCB8fCAoZXhwb3J0cy5Ib3Jpem9udGFsQWxpZ25tZW50ID0ge30pKTtcbnZhciBWZXJ0aWNhbEFsaWdubWVudDtcbihmdW5jdGlvbiAoVmVydGljYWxBbGlnbm1lbnQpIHtcbiAgICBWZXJ0aWNhbEFsaWdubWVudC50b3AgPSBcInRvcFwiO1xuICAgIFZlcnRpY2FsQWxpZ25tZW50Lm1pZGRsZSA9IFwibWlkZGxlXCI7XG4gICAgVmVydGljYWxBbGlnbm1lbnQuYm90dG9tID0gXCJib3R0b21cIjtcbiAgICBWZXJ0aWNhbEFsaWdubWVudC5zdHJldGNoID0gXCJzdHJldGNoXCI7XG59KShWZXJ0aWNhbEFsaWdubWVudCA9IGV4cG9ydHMuVmVydGljYWxBbGlnbm1lbnQgfHwgKGV4cG9ydHMuVmVydGljYWxBbGlnbm1lbnQgPSB7fSkpO1xudmFyIFN0cmV0Y2g7XG4oZnVuY3Rpb24gKFN0cmV0Y2gpIHtcbiAgICBTdHJldGNoLm5vbmUgPSBcIm5vbmVcIjtcbiAgICBTdHJldGNoLmFzcGVjdEZpbGwgPSBcImFzcGVjdEZpbGxcIjtcbiAgICBTdHJldGNoLmFzcGVjdEZpdCA9IFwiYXNwZWN0Rml0XCI7XG4gICAgU3RyZXRjaC5maWxsID0gXCJmaWxsXCI7XG59KShTdHJldGNoID0gZXhwb3J0cy5TdHJldGNoIHx8IChleHBvcnRzLlN0cmV0Y2ggPSB7fSkpO1xudmFyIFZpc2liaWxpdHk7XG4oZnVuY3Rpb24gKFZpc2liaWxpdHkpIHtcbiAgICBWaXNpYmlsaXR5LnZpc2libGUgPSBcInZpc2libGVcIjtcbiAgICBWaXNpYmlsaXR5LmNvbGxhcHNlID0gXCJjb2xsYXBzZVwiO1xuICAgIFZpc2liaWxpdHkuY29sbGFwc2VkID0gXCJjb2xsYXBzZWRcIjtcbn0pKFZpc2liaWxpdHkgPSBleHBvcnRzLlZpc2liaWxpdHkgfHwgKGV4cG9ydHMuVmlzaWJpbGl0eSA9IHt9KSk7XG52YXIgRm9udEF0dHJpYnV0ZXM7XG4oZnVuY3Rpb24gKEZvbnRBdHRyaWJ1dGVzKSB7XG4gICAgRm9udEF0dHJpYnV0ZXMuTm9ybWFsID0gMDtcbiAgICBGb250QXR0cmlidXRlcy5Cb2xkID0gMTtcbiAgICBGb250QXR0cmlidXRlcy5JdGFsaWMgPSAxIDw8IDE7XG59KShGb250QXR0cmlidXRlcyA9IGV4cG9ydHMuRm9udEF0dHJpYnV0ZXMgfHwgKGV4cG9ydHMuRm9udEF0dHJpYnV0ZXMgPSB7fSkpO1xudmFyIERldmljZVR5cGU7XG4oZnVuY3Rpb24gKERldmljZVR5cGUpIHtcbiAgICBEZXZpY2VUeXBlLlBob25lID0gXCJQaG9uZVwiO1xuICAgIERldmljZVR5cGUuVGFibGV0ID0gXCJUYWJsZXRcIjtcbn0pKERldmljZVR5cGUgPSBleHBvcnRzLkRldmljZVR5cGUgfHwgKGV4cG9ydHMuRGV2aWNlVHlwZSA9IHt9KSk7XG52YXIgVXBkYXRlVGV4dFRyaWdnZXI7XG4oZnVuY3Rpb24gKFVwZGF0ZVRleHRUcmlnZ2VyKSB7XG4gICAgVXBkYXRlVGV4dFRyaWdnZXIuZm9jdXNMb3N0ID0gXCJmb2N1c0xvc3RcIjtcbiAgICBVcGRhdGVUZXh0VHJpZ2dlci50ZXh0Q2hhbmdlZCA9IFwidGV4dENoYW5nZWRcIjtcbn0pKFVwZGF0ZVRleHRUcmlnZ2VyID0gZXhwb3J0cy5VcGRhdGVUZXh0VHJpZ2dlciB8fCAoZXhwb3J0cy5VcGRhdGVUZXh0VHJpZ2dlciA9IHt9KSk7XG52YXIgQWNjdXJhY3k7XG4oZnVuY3Rpb24gKEFjY3VyYWN5KSB7XG4gICAgQWNjdXJhY3kuYW55ID0gMzAwO1xuICAgIEFjY3VyYWN5LmhpZ2ggPSAzO1xufSkoQWNjdXJhY3kgPSBleHBvcnRzLkFjY3VyYWN5IHx8IChleHBvcnRzLkFjY3VyYWN5ID0ge30pKTtcbnZhciBEb2NrO1xuKGZ1bmN0aW9uIChEb2NrKSB7XG4gICAgRG9jay5sZWZ0ID0gXCJsZWZ0XCI7XG4gICAgRG9jay50b3AgPSBcInRvcFwiO1xuICAgIERvY2sucmlnaHQgPSBcInJpZ2h0XCI7XG4gICAgRG9jay5ib3R0b20gPSBcImJvdHRvbVwiO1xufSkoRG9jayA9IGV4cG9ydHMuRG9jayB8fCAoZXhwb3J0cy5Eb2NrID0ge30pKTtcbnZhciBBdXRvY2FwaXRhbGl6YXRpb25UeXBlO1xuKGZ1bmN0aW9uIChBdXRvY2FwaXRhbGl6YXRpb25UeXBlKSB7XG4gICAgQXV0b2NhcGl0YWxpemF0aW9uVHlwZS5ub25lID0gXCJub25lXCI7XG4gICAgQXV0b2NhcGl0YWxpemF0aW9uVHlwZS53b3JkcyA9IFwid29yZHNcIjtcbiAgICBBdXRvY2FwaXRhbGl6YXRpb25UeXBlLnNlbnRlbmNlcyA9IFwic2VudGVuY2VzXCI7XG4gICAgQXV0b2NhcGl0YWxpemF0aW9uVHlwZS5hbGxDaGFyYWN0ZXJzID0gXCJhbGxjaGFyYWN0ZXJzXCI7XG59KShBdXRvY2FwaXRhbGl6YXRpb25UeXBlID0gZXhwb3J0cy5BdXRvY2FwaXRhbGl6YXRpb25UeXBlIHx8IChleHBvcnRzLkF1dG9jYXBpdGFsaXphdGlvblR5cGUgPSB7fSkpO1xudmFyIE5hdmlnYXRpb25CYXJWaXNpYmlsaXR5O1xuKGZ1bmN0aW9uIChOYXZpZ2F0aW9uQmFyVmlzaWJpbGl0eSkge1xuICAgIE5hdmlnYXRpb25CYXJWaXNpYmlsaXR5LmF1dG8gPSBcImF1dG9cIjtcbiAgICBOYXZpZ2F0aW9uQmFyVmlzaWJpbGl0eS5uZXZlciA9IFwibmV2ZXJcIjtcbiAgICBOYXZpZ2F0aW9uQmFyVmlzaWJpbGl0eS5hbHdheXMgPSBcImFsd2F5c1wiO1xufSkoTmF2aWdhdGlvbkJhclZpc2liaWxpdHkgPSBleHBvcnRzLk5hdmlnYXRpb25CYXJWaXNpYmlsaXR5IHx8IChleHBvcnRzLk5hdmlnYXRpb25CYXJWaXNpYmlsaXR5ID0ge30pKTtcbnZhciBBbmRyb2lkQWN0aW9uQmFySWNvblZpc2liaWxpdHk7XG4oZnVuY3Rpb24gKEFuZHJvaWRBY3Rpb25CYXJJY29uVmlzaWJpbGl0eSkge1xuICAgIEFuZHJvaWRBY3Rpb25CYXJJY29uVmlzaWJpbGl0eS5hdXRvID0gXCJhdXRvXCI7XG4gICAgQW5kcm9pZEFjdGlvbkJhckljb25WaXNpYmlsaXR5Lm5ldmVyID0gXCJuZXZlclwiO1xuICAgIEFuZHJvaWRBY3Rpb25CYXJJY29uVmlzaWJpbGl0eS5hbHdheXMgPSBcImFsd2F5c1wiO1xufSkoQW5kcm9pZEFjdGlvbkJhckljb25WaXNpYmlsaXR5ID0gZXhwb3J0cy5BbmRyb2lkQWN0aW9uQmFySWNvblZpc2liaWxpdHkgfHwgKGV4cG9ydHMuQW5kcm9pZEFjdGlvbkJhckljb25WaXNpYmlsaXR5ID0ge30pKTtcbnZhciBBbmRyb2lkQWN0aW9uSXRlbVBvc2l0aW9uO1xuKGZ1bmN0aW9uIChBbmRyb2lkQWN0aW9uSXRlbVBvc2l0aW9uKSB7XG4gICAgQW5kcm9pZEFjdGlvbkl0ZW1Qb3NpdGlvbi5hY3Rpb25CYXIgPSBcImFjdGlvbkJhclwiO1xuICAgIEFuZHJvaWRBY3Rpb25JdGVtUG9zaXRpb24uYWN0aW9uQmFySWZSb29tID0gXCJhY3Rpb25CYXJJZlJvb21cIjtcbiAgICBBbmRyb2lkQWN0aW9uSXRlbVBvc2l0aW9uLnBvcHVwID0gXCJwb3B1cFwiO1xufSkoQW5kcm9pZEFjdGlvbkl0ZW1Qb3NpdGlvbiA9IGV4cG9ydHMuQW5kcm9pZEFjdGlvbkl0ZW1Qb3NpdGlvbiB8fCAoZXhwb3J0cy5BbmRyb2lkQWN0aW9uSXRlbVBvc2l0aW9uID0ge30pKTtcbnZhciBJT1NBY3Rpb25JdGVtUG9zaXRpb247XG4oZnVuY3Rpb24gKElPU0FjdGlvbkl0ZW1Qb3NpdGlvbikge1xuICAgIElPU0FjdGlvbkl0ZW1Qb3NpdGlvbi5sZWZ0ID0gXCJsZWZ0XCI7XG4gICAgSU9TQWN0aW9uSXRlbVBvc2l0aW9uLnJpZ2h0ID0gXCJyaWdodFwiO1xufSkoSU9TQWN0aW9uSXRlbVBvc2l0aW9uID0gZXhwb3J0cy5JT1NBY3Rpb25JdGVtUG9zaXRpb24gfHwgKGV4cG9ydHMuSU9TQWN0aW9uSXRlbVBvc2l0aW9uID0ge30pKTtcbnZhciBJbWFnZUZvcm1hdDtcbihmdW5jdGlvbiAoSW1hZ2VGb3JtYXQpIHtcbiAgICBJbWFnZUZvcm1hdC5wbmcgPSBcInBuZ1wiO1xuICAgIEltYWdlRm9ybWF0LmpwZWcgPSBcImpwZWdcIjtcbiAgICBJbWFnZUZvcm1hdC5qcGcgPSBcImpwZ1wiO1xufSkoSW1hZ2VGb3JtYXQgPSBleHBvcnRzLkltYWdlRm9ybWF0IHx8IChleHBvcnRzLkltYWdlRm9ybWF0ID0ge30pKTtcbnZhciBGb250U3R5bGU7XG4oZnVuY3Rpb24gKEZvbnRTdHlsZSkge1xuICAgIEZvbnRTdHlsZS5ub3JtYWwgPSBcIm5vcm1hbFwiO1xuICAgIEZvbnRTdHlsZS5pdGFsaWMgPSBcIml0YWxpY1wiO1xufSkoRm9udFN0eWxlID0gZXhwb3J0cy5Gb250U3R5bGUgfHwgKGV4cG9ydHMuRm9udFN0eWxlID0ge30pKTtcbnZhciBGb250V2VpZ2h0O1xuKGZ1bmN0aW9uIChGb250V2VpZ2h0KSB7XG4gICAgRm9udFdlaWdodC50aGluID0gXCIxMDBcIjtcbiAgICBGb250V2VpZ2h0LmV4dHJhTGlnaHQgPSBcIjIwMFwiO1xuICAgIEZvbnRXZWlnaHQubGlnaHQgPSBcIjMwMFwiO1xuICAgIEZvbnRXZWlnaHQubm9ybWFsID0gXCJub3JtYWxcIjtcbiAgICBGb250V2VpZ2h0Lm1lZGl1bSA9IFwiNTAwXCI7XG4gICAgRm9udFdlaWdodC5zZW1pQm9sZCA9IFwiNjAwXCI7XG4gICAgRm9udFdlaWdodC5ib2xkID0gXCJib2xkXCI7XG4gICAgRm9udFdlaWdodC5leHRyYUJvbGQgPSBcIjgwMFwiO1xuICAgIEZvbnRXZWlnaHQuYmxhY2sgPSBcIjkwMFwiO1xufSkoRm9udFdlaWdodCA9IGV4cG9ydHMuRm9udFdlaWdodCB8fCAoZXhwb3J0cy5Gb250V2VpZ2h0ID0ge30pKTtcbnZhciBCYWNrZ3JvdW5kUmVwZWF0O1xuKGZ1bmN0aW9uIChCYWNrZ3JvdW5kUmVwZWF0KSB7XG4gICAgQmFja2dyb3VuZFJlcGVhdC5yZXBlYXQgPSBcInJlcGVhdFwiO1xuICAgIEJhY2tncm91bmRSZXBlYXQucmVwZWF0WCA9IFwicmVwZWF0LXhcIjtcbiAgICBCYWNrZ3JvdW5kUmVwZWF0LnJlcGVhdFkgPSBcInJlcGVhdC15XCI7XG4gICAgQmFja2dyb3VuZFJlcGVhdC5ub1JlcGVhdCA9IFwibm8tcmVwZWF0XCI7XG59KShCYWNrZ3JvdW5kUmVwZWF0ID0gZXhwb3J0cy5CYWNrZ3JvdW5kUmVwZWF0IHx8IChleHBvcnRzLkJhY2tncm91bmRSZXBlYXQgPSB7fSkpO1xudmFyIGFuaW1hdGlvbjtcbnZhciBBbmltYXRpb25DdXJ2ZTtcbihmdW5jdGlvbiAoQW5pbWF0aW9uQ3VydmUpIHtcbiAgICBBbmltYXRpb25DdXJ2ZS5lYXNlID0gXCJlYXNlXCI7XG4gICAgQW5pbWF0aW9uQ3VydmUuZWFzZUluID0gXCJlYXNlSW5cIjtcbiAgICBBbmltYXRpb25DdXJ2ZS5lYXNlT3V0ID0gXCJlYXNlT3V0XCI7XG4gICAgQW5pbWF0aW9uQ3VydmUuZWFzZUluT3V0ID0gXCJlYXNlSW5PdXRcIjtcbiAgICBBbmltYXRpb25DdXJ2ZS5saW5lYXIgPSBcImxpbmVhclwiO1xuICAgIEFuaW1hdGlvbkN1cnZlLnNwcmluZyA9IFwic3ByaW5nXCI7XG4gICAgZnVuY3Rpb24gY3ViaWNCZXppZXIoeDEsIHkxLCB4MiwgeTIpIHtcbiAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uIHx8IHJlcXVpcmUoXCIuLi9hbmltYXRpb25cIik7XG4gICAgICAgIHJldHVybiBuZXcgYW5pbWF0aW9uLkN1YmljQmV6aWVyQW5pbWF0aW9uQ3VydmUoeDEsIHkxLCB4MiwgeTIpO1xuICAgIH1cbiAgICBBbmltYXRpb25DdXJ2ZS5jdWJpY0JlemllciA9IGN1YmljQmV6aWVyO1xufSkoQW5pbWF0aW9uQ3VydmUgPSBleHBvcnRzLkFuaW1hdGlvbkN1cnZlIHx8IChleHBvcnRzLkFuaW1hdGlvbkN1cnZlID0ge30pKTtcbnZhciBTdGF0dXNCYXJTdHlsZTtcbihmdW5jdGlvbiAoU3RhdHVzQmFyU3R5bGUpIHtcbiAgICBTdGF0dXNCYXJTdHlsZS5saWdodCA9IFwibGlnaHRcIjtcbiAgICBTdGF0dXNCYXJTdHlsZS5kYXJrID0gXCJkYXJrXCI7XG59KShTdGF0dXNCYXJTdHlsZSA9IGV4cG9ydHMuU3RhdHVzQmFyU3R5bGUgfHwgKGV4cG9ydHMuU3RhdHVzQmFyU3R5bGUgPSB7fSkpO1xudmFyIFN5c3RlbUFwcGVhcmFuY2U7XG4oZnVuY3Rpb24gKFN5c3RlbUFwcGVhcmFuY2UpIHtcbiAgICBTeXN0ZW1BcHBlYXJhbmNlLmxpZ2h0ID0gXCJsaWdodFwiO1xuICAgIFN5c3RlbUFwcGVhcmFuY2UuZGFyayA9IFwiZGFya1wiO1xufSkoU3lzdGVtQXBwZWFyYW5jZSA9IGV4cG9ydHMuU3lzdGVtQXBwZWFyYW5jZSB8fCAoZXhwb3J0cy5TeXN0ZW1BcHBlYXJhbmNlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudW1zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsaW5lYXJfZ3JhZGllbnRfMSA9IHJlcXVpcmUoXCIuL2xpbmVhci1ncmFkaWVudFwiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbG9yXCIpO1xudmFyIEJhY2tncm91bmQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhY2tncm91bmQoKSB7XG4gICAgICAgIHRoaXMuYm9yZGVyVG9wV2lkdGggPSAwO1xuICAgICAgICB0aGlzLmJvcmRlclJpZ2h0V2lkdGggPSAwO1xuICAgICAgICB0aGlzLmJvcmRlckJvdHRvbVdpZHRoID0gMDtcbiAgICAgICAgdGhpcy5ib3JkZXJMZWZ0V2lkdGggPSAwO1xuICAgICAgICB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMgPSAwO1xuICAgICAgICB0aGlzLmJvcmRlclRvcFJpZ2h0UmFkaXVzID0gMDtcbiAgICAgICAgdGhpcy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzID0gMDtcbiAgICAgICAgdGhpcy5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9IDA7XG4gICAgfVxuICAgIEJhY2tncm91bmQucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgQmFja2dyb3VuZCgpO1xuICAgICAgICBjbG9uZS5jb2xvciA9IHRoaXMuY29sb3I7XG4gICAgICAgIGNsb25lLmltYWdlID0gdGhpcy5pbWFnZTtcbiAgICAgICAgY2xvbmUucmVwZWF0ID0gdGhpcy5yZXBlYXQ7XG4gICAgICAgIGNsb25lLnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbjtcbiAgICAgICAgY2xvbmUuc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICAgICAgY2xvbmUuYm9yZGVyVG9wQ29sb3IgPSB0aGlzLmJvcmRlclRvcENvbG9yO1xuICAgICAgICBjbG9uZS5ib3JkZXJSaWdodENvbG9yID0gdGhpcy5ib3JkZXJSaWdodENvbG9yO1xuICAgICAgICBjbG9uZS5ib3JkZXJCb3R0b21Db2xvciA9IHRoaXMuYm9yZGVyQm90dG9tQ29sb3I7XG4gICAgICAgIGNsb25lLmJvcmRlckxlZnRDb2xvciA9IHRoaXMuYm9yZGVyTGVmdENvbG9yO1xuICAgICAgICBjbG9uZS5ib3JkZXJUb3BXaWR0aCA9IHRoaXMuYm9yZGVyVG9wV2lkdGg7XG4gICAgICAgIGNsb25lLmJvcmRlclJpZ2h0V2lkdGggPSB0aGlzLmJvcmRlclJpZ2h0V2lkdGg7XG4gICAgICAgIGNsb25lLmJvcmRlckJvdHRvbVdpZHRoID0gdGhpcy5ib3JkZXJCb3R0b21XaWR0aDtcbiAgICAgICAgY2xvbmUuYm9yZGVyTGVmdFdpZHRoID0gdGhpcy5ib3JkZXJMZWZ0V2lkdGg7XG4gICAgICAgIGNsb25lLmJvcmRlclRvcExlZnRSYWRpdXMgPSB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXM7XG4gICAgICAgIGNsb25lLmJvcmRlclRvcFJpZ2h0UmFkaXVzID0gdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cztcbiAgICAgICAgY2xvbmUuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSB0aGlzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzO1xuICAgICAgICBjbG9uZS5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzID0gdGhpcy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzO1xuICAgICAgICBjbG9uZS5jbGlwUGF0aCA9IHRoaXMuY2xpcFBhdGg7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhDb2xvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLmNvbG9yID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhJbWFnZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLmltYWdlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhSZXBlYXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5yZXBlYXQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUud2l0aFBvc2l0aW9uID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUucG9zaXRpb24gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUud2l0aFNpemUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5zaXplID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhCb3JkZXJUb3BDb2xvciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLmJvcmRlclRvcENvbG9yID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhCb3JkZXJSaWdodENvbG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuYm9yZGVyUmlnaHRDb2xvciA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyQm90dG9tQ29sb3IgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5ib3JkZXJCb3R0b21Db2xvciA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyTGVmdENvbG9yID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuYm9yZGVyTGVmdENvbG9yID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhCb3JkZXJUb3BXaWR0aCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLmJvcmRlclRvcFdpZHRoID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhCb3JkZXJSaWdodFdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuYm9yZGVyUmlnaHRXaWR0aCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyQm90dG9tV2lkdGggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5ib3JkZXJCb3R0b21XaWR0aCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyTGVmdFdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuYm9yZGVyTGVmdFdpZHRoID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLndpdGhCb3JkZXJUb3BMZWZ0UmFkaXVzID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuYm9yZGVyVG9wTGVmdFJhZGl1cyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyVG9wUmlnaHRSYWRpdXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5ib3JkZXJUb3BSaWdodFJhZGl1cyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIGNsb25lID0gdGhpcy5jbG9uZSgpO1xuICAgICAgICBjbG9uZS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS53aXRoQm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgY2xvbmUgPSB0aGlzLmNsb25lKCk7XG4gICAgICAgIGNsb25lLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUud2l0aENsaXBQYXRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgY2xvbmUuY2xpcFBhdGggPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmNvbG9yXG4gICAgICAgICAgICAmJiAhdGhpcy5pbWFnZVxuICAgICAgICAgICAgJiYgIXRoaXMuaGFzQm9yZGVyV2lkdGgoKVxuICAgICAgICAgICAgJiYgIXRoaXMuaGFzQm9yZGVyUmFkaXVzKClcbiAgICAgICAgICAgICYmICF0aGlzLmNsaXBQYXRoO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5lcXVhbHMgPSBmdW5jdGlvbiAodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZTEgJiYgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWx1ZTEgfHwgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbWFnZXNFcXVhbCA9IGZhbHNlO1xuICAgICAgICBpZiAodmFsdWUxIGluc3RhbmNlb2YgbGluZWFyX2dyYWRpZW50XzEuTGluZWFyR3JhZGllbnQgJiYgdmFsdWUyIGluc3RhbmNlb2YgbGluZWFyX2dyYWRpZW50XzEuTGluZWFyR3JhZGllbnQpIHtcbiAgICAgICAgICAgIGltYWdlc0VxdWFsID0gbGluZWFyX2dyYWRpZW50XzEuTGluZWFyR3JhZGllbnQuZXF1YWxzKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltYWdlc0VxdWFsID0gdmFsdWUxLmltYWdlID09PSB2YWx1ZTIuaW1hZ2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yXzEuQ29sb3IuZXF1YWxzKHZhbHVlMS5jb2xvciwgdmFsdWUyLmNvbG9yKVxuICAgICAgICAgICAgJiYgaW1hZ2VzRXF1YWxcbiAgICAgICAgICAgICYmIHZhbHVlMS5wb3NpdGlvbiA9PT0gdmFsdWUyLnBvc2l0aW9uXG4gICAgICAgICAgICAmJiB2YWx1ZTEucmVwZWF0ID09PSB2YWx1ZTIucmVwZWF0XG4gICAgICAgICAgICAmJiB2YWx1ZTEuc2l6ZSA9PT0gdmFsdWUyLnNpemVcbiAgICAgICAgICAgICYmIGNvbG9yXzEuQ29sb3IuZXF1YWxzKHZhbHVlMS5ib3JkZXJUb3BDb2xvciwgdmFsdWUyLmJvcmRlclRvcENvbG9yKVxuICAgICAgICAgICAgJiYgY29sb3JfMS5Db2xvci5lcXVhbHModmFsdWUxLmJvcmRlclJpZ2h0Q29sb3IsIHZhbHVlMi5ib3JkZXJSaWdodENvbG9yKVxuICAgICAgICAgICAgJiYgY29sb3JfMS5Db2xvci5lcXVhbHModmFsdWUxLmJvcmRlckJvdHRvbUNvbG9yLCB2YWx1ZTIuYm9yZGVyQm90dG9tQ29sb3IpXG4gICAgICAgICAgICAmJiBjb2xvcl8xLkNvbG9yLmVxdWFscyh2YWx1ZTEuYm9yZGVyTGVmdENvbG9yLCB2YWx1ZTIuYm9yZGVyTGVmdENvbG9yKVxuICAgICAgICAgICAgJiYgdmFsdWUxLmJvcmRlclRvcFdpZHRoID09PSB2YWx1ZTIuYm9yZGVyVG9wV2lkdGhcbiAgICAgICAgICAgICYmIHZhbHVlMS5ib3JkZXJSaWdodFdpZHRoID09PSB2YWx1ZTIuYm9yZGVyUmlnaHRXaWR0aFxuICAgICAgICAgICAgJiYgdmFsdWUxLmJvcmRlckJvdHRvbVdpZHRoID09PSB2YWx1ZTIuYm9yZGVyQm90dG9tV2lkdGhcbiAgICAgICAgICAgICYmIHZhbHVlMS5ib3JkZXJMZWZ0V2lkdGggPT09IHZhbHVlMi5ib3JkZXJMZWZ0V2lkdGhcbiAgICAgICAgICAgICYmIHZhbHVlMS5ib3JkZXJUb3BMZWZ0UmFkaXVzID09PSB2YWx1ZTIuYm9yZGVyVG9wTGVmdFJhZGl1c1xuICAgICAgICAgICAgJiYgdmFsdWUxLmJvcmRlclRvcFJpZ2h0UmFkaXVzID09PSB2YWx1ZTIuYm9yZGVyVG9wUmlnaHRSYWRpdXNcbiAgICAgICAgICAgICYmIHZhbHVlMS5ib3JkZXJCb3R0b21SaWdodFJhZGl1cyA9PT0gdmFsdWUyLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXG4gICAgICAgICAgICAmJiB2YWx1ZTEuYm9yZGVyQm90dG9tTGVmdFJhZGl1cyA9PT0gdmFsdWUyLmJvcmRlckJvdHRvbUxlZnRSYWRpdXNcbiAgICAgICAgICAgICYmIHZhbHVlMS5jbGlwUGF0aCA9PT0gdmFsdWUyLmNsaXBQYXRoO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuaGFzQm9yZGVyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuYm9yZGVyVG9wQ29sb3IgfHwgISF0aGlzLmJvcmRlclJpZ2h0Q29sb3IgfHwgISF0aGlzLmJvcmRlckJvdHRvbUNvbG9yIHx8ICEhdGhpcy5ib3JkZXJMZWZ0Q29sb3I7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS5oYXNCb3JkZXJXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9yZGVyVG9wV2lkdGggPiAwXG4gICAgICAgICAgICB8fCB0aGlzLmJvcmRlclJpZ2h0V2lkdGggPiAwXG4gICAgICAgICAgICB8fCB0aGlzLmJvcmRlckJvdHRvbVdpZHRoID4gMFxuICAgICAgICAgICAgfHwgdGhpcy5ib3JkZXJMZWZ0V2lkdGggPiAwO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuaGFzQm9yZGVyUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzID4gMFxuICAgICAgICAgICAgfHwgdGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cyA+IDBcbiAgICAgICAgICAgIHx8IHRoaXMuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgPiAwXG4gICAgICAgICAgICB8fCB0aGlzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgPiAwO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuaGFzVW5pZm9ybUJvcmRlckNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29sb3JfMS5Db2xvci5lcXVhbHModGhpcy5ib3JkZXJUb3BDb2xvciwgdGhpcy5ib3JkZXJSaWdodENvbG9yKVxuICAgICAgICAgICAgJiYgY29sb3JfMS5Db2xvci5lcXVhbHModGhpcy5ib3JkZXJUb3BDb2xvciwgdGhpcy5ib3JkZXJCb3R0b21Db2xvcilcbiAgICAgICAgICAgICYmIGNvbG9yXzEuQ29sb3IuZXF1YWxzKHRoaXMuYm9yZGVyVG9wQ29sb3IsIHRoaXMuYm9yZGVyTGVmdENvbG9yKTtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLmhhc1VuaWZvcm1Cb3JkZXJXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9yZGVyVG9wV2lkdGggPT09IHRoaXMuYm9yZGVyUmlnaHRXaWR0aFxuICAgICAgICAgICAgJiYgdGhpcy5ib3JkZXJUb3BXaWR0aCA9PT0gdGhpcy5ib3JkZXJCb3R0b21XaWR0aFxuICAgICAgICAgICAgJiYgdGhpcy5ib3JkZXJUb3BXaWR0aCA9PT0gdGhpcy5ib3JkZXJMZWZ0V2lkdGg7XG4gICAgfTtcbiAgICBCYWNrZ3JvdW5kLnByb3RvdHlwZS5oYXNVbmlmb3JtQm9yZGVyUmFkaXVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzID09PSB0aGlzLmJvcmRlclRvcFJpZ2h0UmFkaXVzXG4gICAgICAgICAgICAmJiB0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMgPT09IHRoaXMuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXNcbiAgICAgICAgICAgICYmIHRoaXMuYm9yZGVyVG9wTGVmdFJhZGl1cyA9PT0gdGhpcy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuaGFzVW5pZm9ybUJvcmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzVW5pZm9ybUJvcmRlckNvbG9yKClcbiAgICAgICAgICAgICYmIHRoaXMuaGFzVW5pZm9ybUJvcmRlcldpZHRoKClcbiAgICAgICAgICAgICYmIHRoaXMuaGFzVW5pZm9ybUJvcmRlclJhZGl1cygpO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuZ2V0VW5pZm9ybUJvcmRlckNvbG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5oYXNVbmlmb3JtQm9yZGVyQ29sb3IoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9yZGVyVG9wQ29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEJhY2tncm91bmQucHJvdG90eXBlLmdldFVuaWZvcm1Cb3JkZXJXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVW5pZm9ybUJvcmRlcldpZHRoKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJvcmRlclRvcFdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUuZ2V0VW5pZm9ybUJvcmRlclJhZGl1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzVW5pZm9ybUJvcmRlclJhZGl1cygpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImlzRW1wdHk6IFwiICsgdGhpcy5pc0VtcHR5KCkgKyBcIjsgY29sb3I6IFwiICsgdGhpcy5jb2xvciArIFwiOyBpbWFnZTogXCIgKyB0aGlzLmltYWdlICsgXCI7IHJlcGVhdDogXCIgKyB0aGlzLnJlcGVhdCArIFwiOyBwb3NpdGlvbjogXCIgKyB0aGlzLnBvc2l0aW9uICsgXCI7IHNpemU6IFwiICsgdGhpcy5zaXplICsgXCI7IGJvcmRlclRvcENvbG9yOiBcIiArIHRoaXMuYm9yZGVyVG9wQ29sb3IgKyBcIjsgYm9yZGVyUmlnaHRDb2xvcjogXCIgKyB0aGlzLmJvcmRlclJpZ2h0Q29sb3IgKyBcIjsgYm9yZGVyQm90dG9tQ29sb3I6IFwiICsgdGhpcy5ib3JkZXJCb3R0b21Db2xvciArIFwiOyBib3JkZXJMZWZ0Q29sb3I6IFwiICsgdGhpcy5ib3JkZXJMZWZ0Q29sb3IgKyBcIjsgYm9yZGVyVG9wV2lkdGg6IFwiICsgdGhpcy5ib3JkZXJUb3BXaWR0aCArIFwiOyBib3JkZXJSaWdodFdpZHRoOiBcIiArIHRoaXMuYm9yZGVyUmlnaHRXaWR0aCArIFwiOyBib3JkZXJCb3R0b21XaWR0aDogXCIgKyB0aGlzLmJvcmRlckJvdHRvbVdpZHRoICsgXCI7IGJvcmRlckxlZnRXaWR0aDogXCIgKyB0aGlzLmJvcmRlckxlZnRXaWR0aCArIFwiOyBib3JkZXJUb3BMZWZ0UmFkaXVzOiBcIiArIHRoaXMuYm9yZGVyVG9wTGVmdFJhZGl1cyArIFwiOyBib3JkZXJUb3BSaWdodFJhZGl1czogXCIgKyB0aGlzLmJvcmRlclRvcFJpZ2h0UmFkaXVzICsgXCI7IGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBcIiArIHRoaXMuYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMgKyBcIjsgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogXCIgKyB0aGlzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMgKyBcIjsgY2xpcFBhdGg6IFwiICsgdGhpcy5jbGlwUGF0aCArIFwiO1wiO1xuICAgIH07XG4gICAgQmFja2dyb3VuZC5kZWZhdWx0ID0gbmV3IEJhY2tncm91bmQoKTtcbiAgICByZXR1cm4gQmFja2dyb3VuZDtcbn0oKSk7XG5leHBvcnRzLkJhY2tncm91bmQgPSBCYWNrZ3JvdW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFja2dyb3VuZC1jb21tb24uanMubWFwIiwiZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBsaW5lYXJfZ3JhZGllbnRfMSA9IHJlcXVpcmUoXCIuL2xpbmVhci1ncmFkaWVudFwiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbG9yXCIpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvdXRpbHNcIik7XG52YXIgaW1hZ2Vfc291cmNlXzEgPSByZXF1aXJlKFwiLi4vLi4vaW1hZ2Utc291cmNlXCIpO1xudmFyIGNzc192YWx1ZV8xID0gcmVxdWlyZShcIi4uLy4uL2Nzcy12YWx1ZVwiKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2JhY2tncm91bmQtY29tbW9uXCIpKTtcbnZhciBjbGVhckNHQ29sb3IgPSBVSUNvbG9yLmNsZWFyQ29sb3IuQ0dDb2xvcjtcbnZhciBzeW1ib2xVcmwgPSBTeW1ib2woXCJiYWNrZ3JvdW5kSW1hZ2VVcmxcIik7XG52YXIgaW9zO1xuKGZ1bmN0aW9uIChpb3MpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGVCYWNrZ3JvdW5kVUlDb2xvcih2aWV3LCBjYWxsYmFjaywgZmxpcCkge1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHZpZXcuc3R5bGUuYmFja2dyb3VuZEludGVybmFsO1xuICAgICAgICB2YXIgbmF0aXZlVmlldyA9IHZpZXcubmF0aXZlVmlld1Byb3RlY3RlZDtcbiAgICAgICAgaWYgKG5hdGl2ZVZpZXcuaGFzTm9uVW5pZm9ybUJvcmRlcikge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmVGcm9tU2Nyb2xsTm90aWZpY2F0aW9ucyh2aWV3KTtcbiAgICAgICAgICAgIGNsZWFyTm9uVW5pZm9ybUJvcmRlcnMobmF0aXZlVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJHcmFkaWVudChuYXRpdmVWaWV3KTtcbiAgICAgICAgaWYgKGJhY2tncm91bmQuaW1hZ2UgaW5zdGFuY2VvZiBsaW5lYXJfZ3JhZGllbnRfMS5MaW5lYXJHcmFkaWVudCkge1xuICAgICAgICAgICAgZHJhd0dyYWRpZW50KG5hdGl2ZVZpZXcsIGJhY2tncm91bmQuaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBoYXNOb25Vbmlmb3JtQm9yZGVyV2lkdGhzID0gYmFja2dyb3VuZC5oYXNCb3JkZXJXaWR0aCgpICYmICFiYWNrZ3JvdW5kLmhhc1VuaWZvcm1Cb3JkZXIoKTtcbiAgICAgICAgdmFyIGhhc05vblVuaWZvcm1Cb3JkZXJSYWRpdXNlcyA9IGJhY2tncm91bmQuaGFzQm9yZGVyUmFkaXVzKCkgJiYgIWJhY2tncm91bmQuaGFzVW5pZm9ybUJvcmRlclJhZGl1cygpO1xuICAgICAgICBpZiAoYmFja2dyb3VuZC5oYXNVbmlmb3JtQm9yZGVyQ29sb3IoKSAmJiAoaGFzTm9uVW5pZm9ybUJvcmRlcldpZHRocyB8fCBoYXNOb25Vbmlmb3JtQm9yZGVyUmFkaXVzZXMpKSB7XG4gICAgICAgICAgICBkcmF3VW5pZm9ybUNvbG9yTm9uVW5pZm9ybUJvcmRlcnMobmF0aXZlVmlldywgYmFja2dyb3VuZCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVGb3JTY3JvbGxOb3RpZmljYXRpb25zKHZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGJhY2tncm91bmQuaGFzVW5pZm9ybUJvcmRlcigpKSB7XG4gICAgICAgICAgICB2YXIgbGF5ZXIgPSBuYXRpdmVWaWV3LmxheWVyO1xuICAgICAgICAgICAgdmFyIGJvcmRlckNvbG9yID0gYmFja2dyb3VuZC5nZXRVbmlmb3JtQm9yZGVyQ29sb3IoKTtcbiAgICAgICAgICAgIGxheWVyLmJvcmRlckNvbG9yID0gIWJvcmRlckNvbG9yID8gdW5kZWZpbmVkIDogYm9yZGVyQ29sb3IuaW9zLkNHQ29sb3I7XG4gICAgICAgICAgICBsYXllci5ib3JkZXJXaWR0aCA9IHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5nZXRVbmlmb3JtQm9yZGVyV2lkdGgoKSk7XG4gICAgICAgICAgICB2YXIgcmVuZGVyU2l6ZSA9IHZpZXcuZ2V0QWN0dWFsU2l6ZSgpIHx8IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICAgICAgICAgICAgdmFyIGNvcm5lclJhZGl1cyA9IHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5nZXRVbmlmb3JtQm9yZGVyUmFkaXVzKCkpO1xuICAgICAgICAgICAgbGF5ZXIuY29ybmVyUmFkaXVzID0gTWF0aC5taW4oTWF0aC5taW4ocmVuZGVyU2l6ZS53aWR0aCAvIDIsIHJlbmRlclNpemUuaGVpZ2h0IC8gMiksIGNvcm5lclJhZGl1cyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkcmF3Tm9SYWRpdXNOb25Vbmlmb3JtQm9yZGVycyhuYXRpdmVWaWV3LCBiYWNrZ3JvdW5kKTtcbiAgICAgICAgICAgIHN1YnNjcmliZUZvclNjcm9sbE5vdGlmaWNhdGlvbnModmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJhY2tncm91bmQuY2xpcFBhdGgpIHtcbiAgICAgICAgICAgIGRyYXdDbGlwUGF0aChuYXRpdmVWaWV3LCBiYWNrZ3JvdW5kKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWJhY2tncm91bmQuaW1hZ2UgfHwgYmFja2dyb3VuZC5pbWFnZSBpbnN0YW5jZW9mIGxpbmVhcl9ncmFkaWVudF8xLkxpbmVhckdyYWRpZW50KSB7XG4gICAgICAgICAgICB2YXIgdWlDb2xvciA9IGJhY2tncm91bmQuY29sb3IgPyBiYWNrZ3JvdW5kLmNvbG9yLmlvcyA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbGxiYWNrKHVpQ29sb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2V0VUlDb2xvckZyb21JbWFnZSh2aWV3LCBuYXRpdmVWaWV3LCBjYWxsYmFjaywgZmxpcCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW9zLmNyZWF0ZUJhY2tncm91bmRVSUNvbG9yID0gY3JlYXRlQmFja2dyb3VuZFVJQ29sb3I7XG59KShpb3MgPSBleHBvcnRzLmlvcyB8fCAoZXhwb3J0cy5pb3MgPSB7fSkpO1xuZnVuY3Rpb24gb25TY3JvbGwoYXJncykge1xuICAgIHZhciB2aWV3ID0gYXJncy5vYmplY3Q7XG4gICAgdmFyIG5hdGl2ZVZpZXcgPSB2aWV3Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQ7XG4gICAgaWYgKG5hdGl2ZVZpZXcgaW5zdGFuY2VvZiBVSVNjcm9sbFZpZXcpIHtcbiAgICAgICAgYWRqdXN0TGF5ZXJzRm9yU2Nyb2xsVmlldyhuYXRpdmVWaWV3KTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGp1c3RMYXllcnNGb3JTY3JvbGxWaWV3KG5hdGl2ZVZpZXcpIHtcbiAgICB2YXIgbGF5ZXIgPSBuYXRpdmVWaWV3LmJvcmRlckxheWVyO1xuICAgIGlmIChsYXllciBpbnN0YW5jZW9mIENBTGF5ZXIpIHtcbiAgICAgICAgQ0FUcmFuc2FjdGlvbi5iZWdpbigpO1xuICAgICAgICBDQVRyYW5zYWN0aW9uLnNldFZhbHVlRm9yS2V5KGtDRkJvb2xlYW5UcnVlLCBrQ0FUcmFuc2FjdGlvbkRpc2FibGVBY3Rpb25zKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IG5hdGl2ZVZpZXcuY29udGVudE9mZnNldDtcbiAgICAgICAgdmFyIHRyYW5zZm9ybSA9IHsgYTogMSwgYjogMCwgYzogMCwgZDogMSwgdHg6IG9mZnNldC54LCB0eTogb2Zmc2V0LnkgfTtcbiAgICAgICAgbGF5ZXIuc2V0QWZmaW5lVHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICAgIGlmIChuYXRpdmVWaWV3LmxheWVyLm1hc2spIHtcbiAgICAgICAgICAgIG5hdGl2ZVZpZXcubGF5ZXIubWFzay5zZXRBZmZpbmVUcmFuc2Zvcm0odHJhbnNmb3JtKTtcbiAgICAgICAgfVxuICAgICAgICBDQVRyYW5zYWN0aW9uLmNvbW1pdCgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVuc3Vic2NyaWJlRnJvbVNjcm9sbE5vdGlmaWNhdGlvbnModmlldykge1xuICAgIGlmICh2aWV3Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQgaW5zdGFuY2VvZiBVSVNjcm9sbFZpZXcpIHtcbiAgICAgICAgdmlldy5vZmYoXCJzY3JvbGxcIiwgb25TY3JvbGwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZUZvclNjcm9sbE5vdGlmaWNhdGlvbnModmlldykge1xuICAgIGlmICh2aWV3Lm5hdGl2ZVZpZXdQcm90ZWN0ZWQgaW5zdGFuY2VvZiBVSVNjcm9sbFZpZXcpIHtcbiAgICAgICAgdmlldy5vbihcInNjcm9sbFwiLCBvblNjcm9sbCk7XG4gICAgICAgIGFkanVzdExheWVyc0ZvclNjcm9sbFZpZXcodmlldy5uYXRpdmVWaWV3UHJvdGVjdGVkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhck5vblVuaWZvcm1Cb3JkZXJzKG5hdGl2ZVZpZXcpIHtcbiAgICBpZiAobmF0aXZlVmlldy5ib3JkZXJMYXllcikge1xuICAgICAgICBuYXRpdmVWaWV3LmJvcmRlckxheWVyLnJlbW92ZUZyb21TdXBlcmxheWVyKCk7XG4gICAgfVxuICAgIGlmIChuYXRpdmVWaWV3Lmhhc0JvcmRlck1hc2spIHtcbiAgICAgICAgbmF0aXZlVmlldy5sYXllci5tYXNrID0gbmF0aXZlVmlldy5ib3JkZXJPcmlnaW5hbE1hc2s7XG4gICAgICAgIG5hdGl2ZVZpZXcuaGFzQm9yZGVyTWFzayA9IGZhbHNlO1xuICAgICAgICBuYXRpdmVWaWV3LmJvcmRlck9yaWdpbmFsTWFzayA9IG51bGw7XG4gICAgfVxuICAgIGlmIChuYXRpdmVWaWV3LnRvcEJvcmRlckxheWVyKSB7XG4gICAgICAgIG5hdGl2ZVZpZXcudG9wQm9yZGVyTGF5ZXIucmVtb3ZlRnJvbVN1cGVybGF5ZXIoKTtcbiAgICB9XG4gICAgaWYgKG5hdGl2ZVZpZXcucmlnaHRCb3JkZXJMYXllcikge1xuICAgICAgICBuYXRpdmVWaWV3LnJpZ2h0Qm9yZGVyTGF5ZXIucmVtb3ZlRnJvbVN1cGVybGF5ZXIoKTtcbiAgICB9XG4gICAgaWYgKG5hdGl2ZVZpZXcuYm90dG9tQm9yZGVyTGF5ZXIpIHtcbiAgICAgICAgbmF0aXZlVmlldy5ib3R0b21Cb3JkZXJMYXllci5yZW1vdmVGcm9tU3VwZXJsYXllcigpO1xuICAgIH1cbiAgICBpZiAobmF0aXZlVmlldy5sZWZ0Qm9yZGVyTGF5ZXIpIHtcbiAgICAgICAgbmF0aXZlVmlldy5sZWZ0Qm9yZGVyTGF5ZXIucmVtb3ZlRnJvbVN1cGVybGF5ZXIoKTtcbiAgICB9XG59XG52YXIgcGF0dGVybiA9IC91cmxcXCgoJ3xcIikoLio/KVxcMVxcKS87XG5mdW5jdGlvbiBzZXRVSUNvbG9yRnJvbUltYWdlKHZpZXcsIG5hdGl2ZVZpZXcsIGNhbGxiYWNrLCBmbGlwKSB7XG4gICAgdmFyIGZyYW1lID0gbmF0aXZlVmlldy5mcmFtZTtcbiAgICB2YXIgYm91bmRzV2lkdGggPSB2aWV3LnNjYWxlWCA/IGZyYW1lLnNpemUud2lkdGggLyB2aWV3LnNjYWxlWCA6IGZyYW1lLnNpemUud2lkdGg7XG4gICAgdmFyIGJvdW5kc0hlaWdodCA9IHZpZXcuc2NhbGVZID8gZnJhbWUuc2l6ZS5oZWlnaHQgLyB2aWV3LnNjYWxlWSA6IGZyYW1lLnNpemUuaGVpZ2h0O1xuICAgIGlmICghYm91bmRzV2lkdGggfHwgIWJvdW5kc0hlaWdodCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB2YXIgc3R5bGUgPSB2aWV3LnN0eWxlO1xuICAgIHZhciBiYWNrZ3JvdW5kID0gc3R5bGUuYmFja2dyb3VuZEludGVybmFsO1xuICAgIHZhciBpbWFnZVVyaSA9IGJhY2tncm91bmQuaW1hZ2U7XG4gICAgaWYgKGltYWdlVXJpKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGltYWdlVXJpLm1hdGNoKHBhdHRlcm4pO1xuICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMl0pIHtcbiAgICAgICAgICAgIGltYWdlVXJpID0gbWF0Y2hbMl07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGJpdG1hcDtcbiAgICBpZiAodXRpbHNfMS5pc0RhdGFVUkkoaW1hZ2VVcmkpKSB7XG4gICAgICAgIHZhciBiYXNlNjREYXRhID0gaW1hZ2VVcmkuc3BsaXQoXCIsXCIpWzFdO1xuICAgICAgICBpZiAoYmFzZTY0RGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgaW1hZ2VTb3VyY2UgPSBpbWFnZV9zb3VyY2VfMS5JbWFnZVNvdXJjZS5mcm9tQmFzZTY0U3luYyhiYXNlNjREYXRhKTtcbiAgICAgICAgICAgIGJpdG1hcCA9IGltYWdlU291cmNlICYmIGltYWdlU291cmNlLmlvcztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh1dGlsc18xLmlzRmlsZU9yUmVzb3VyY2VQYXRoKGltYWdlVXJpKSkge1xuICAgICAgICB2YXIgaW1hZ2VTb3VyY2UgPSBpbWFnZV9zb3VyY2VfMS5JbWFnZVNvdXJjZS5mcm9tRmlsZU9yUmVzb3VyY2VTeW5jKGltYWdlVXJpKTtcbiAgICAgICAgYml0bWFwID0gaW1hZ2VTb3VyY2UgJiYgaW1hZ2VTb3VyY2UuaW9zO1xuICAgIH1cbiAgICBlbHNlIGlmIChpbWFnZVVyaS5pbmRleE9mKFwiaHR0cFwiKSAhPT0gLTEpIHtcbiAgICAgICAgc3R5bGVbc3ltYm9sVXJsXSA9IGltYWdlVXJpO1xuICAgICAgICBpbWFnZV9zb3VyY2VfMS5JbWFnZVNvdXJjZS5mcm9tVXJsKGltYWdlVXJpKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICBpZiAoc3R5bGUgJiYgc3R5bGVbc3ltYm9sVXJsXSA9PT0gaW1hZ2VVcmkpIHtcbiAgICAgICAgICAgICAgICB1aUNvbG9yRnJvbUltYWdlKHIuaW9zLCB2aWV3LCBjYWxsYmFjaywgZmxpcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1aUNvbG9yRnJvbUltYWdlKGJpdG1hcCwgdmlldywgY2FsbGJhY2ssIGZsaXApO1xufVxuZnVuY3Rpb24gcGFyc2VQb3NpdGlvbihwb3MpIHtcbiAgICB2YXIgdmFsdWVzID0gY3NzX3ZhbHVlXzEucGFyc2UocG9zKTtcbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4geyB4OiB2YWx1ZXNbMF0sIHk6IHZhbHVlc1sxXSB9O1xuICAgIH1cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZXNbMF0udHlwZSA9PT0gXCJpZGVudFwiKSB7XG4gICAgICAgIHZhciB2YWwgPSB2YWx1ZXNbMF0uc3RyaW5nLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgIHZhciBjZW50ZXIgPSB7IHR5cGU6IFwiaWRlbnRcIiwgc3RyaW5nOiBcImNlbnRlclwiIH07XG4gICAgICAgIGlmICh2YWwgPT09IFwibGVmdFwiIHx8IHZhbCA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyB4OiB2YWx1ZXNbMF0sIHk6IGNlbnRlciB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCA9PT0gXCJ0b3BcIiB8fCB2YWwgPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB7IHg6IGNlbnRlciwgeTogdmFsdWVzWzBdIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgICAgICByZXR1cm4geyB4OiBjZW50ZXIsIHk6IGNlbnRlciB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gZ2V0RHJhd1BhcmFtcyhpbWFnZSwgYmFja2dyb3VuZCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICghaW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciByZXMgPSB7XG4gICAgICAgIHJlcGVhdFg6IHRydWUsXG4gICAgICAgIHJlcGVhdFk6IHRydWUsXG4gICAgICAgIHBvc1g6IDAsXG4gICAgICAgIHBvc1k6IDAsXG4gICAgfTtcbiAgICBpZiAoYmFja2dyb3VuZC5yZXBlYXQpIHtcbiAgICAgICAgc3dpdGNoIChiYWNrZ3JvdW5kLnJlcGVhdC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwibm8tcmVwZWF0XCI6XG4gICAgICAgICAgICAgICAgcmVzLnJlcGVhdFggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXMucmVwZWF0WSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJlcGVhdC14XCI6XG4gICAgICAgICAgICAgICAgcmVzLnJlcGVhdFkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXBlYXQteVwiOlxuICAgICAgICAgICAgICAgIHJlcy5yZXBlYXRYID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGltYWdlU2l6ZSA9IGltYWdlLnNpemU7XG4gICAgdmFyIGltYWdlV2lkdGggPSBpbWFnZVNpemUud2lkdGg7XG4gICAgdmFyIGltYWdlSGVpZ2h0ID0gaW1hZ2VTaXplLmhlaWdodDtcbiAgICB2YXIgc2l6ZSA9IGJhY2tncm91bmQuc2l6ZTtcbiAgICBpZiAoc2l6ZSkge1xuICAgICAgICB2YXIgdmFsdWVzID0gY3NzX3ZhbHVlXzEucGFyc2Uoc2l6ZSk7XG4gICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB2YXIgdnggPSB2YWx1ZXNbMF07XG4gICAgICAgICAgICB2YXIgdnkgPSB2YWx1ZXNbMV07XG4gICAgICAgICAgICBpZiAodngudW5pdCA9PT0gXCIlXCIgJiYgdnkudW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgICAgICBpbWFnZVdpZHRoID0gd2lkdGggKiB2eC52YWx1ZSAvIDEwMDtcbiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodCA9IGhlaWdodCAqIHZ5LnZhbHVlIC8gMTAwO1xuICAgICAgICAgICAgICAgIHJlcy5zaXplWCA9IGltYWdlV2lkdGg7XG4gICAgICAgICAgICAgICAgcmVzLnNpemVZID0gaW1hZ2VIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2eC50eXBlID09PSBcIm51bWJlclwiICYmIHZ5LnR5cGUgPT09IFwibnVtYmVyXCIgJiZcbiAgICAgICAgICAgICAgICAoKHZ4LnVuaXQgPT09IFwicHhcIiAmJiB2eS51bml0ID09PSBcInB4XCIpIHx8ICh2eC51bml0ID09PSBcIlwiICYmIHZ5LnVuaXQgPT09IFwiXCIpKSkge1xuICAgICAgICAgICAgICAgIGltYWdlV2lkdGggPSB2eC52YWx1ZTtcbiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodCA9IHZ5LnZhbHVlO1xuICAgICAgICAgICAgICAgIHJlcy5zaXplWCA9IGltYWdlV2lkdGg7XG4gICAgICAgICAgICAgICAgcmVzLnNpemVZID0gaW1hZ2VIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMSAmJiB2YWx1ZXNbMF0udHlwZSA9PT0gXCJpZGVudFwiKSB7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSAwO1xuICAgICAgICAgICAgaWYgKHZhbHVlc1swXS5zdHJpbmcgPT09IFwiY292ZXJcIikge1xuICAgICAgICAgICAgICAgIHNjYWxlID0gTWF0aC5tYXgod2lkdGggLyBpbWFnZVdpZHRoLCBoZWlnaHQgLyBpbWFnZUhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZXNbMF0uc3RyaW5nID09PSBcImNvbnRhaW5cIikge1xuICAgICAgICAgICAgICAgIHNjYWxlID0gTWF0aC5taW4od2lkdGggLyBpbWFnZVdpZHRoLCBoZWlnaHQgLyBpbWFnZUhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NhbGUgPiAwKSB7XG4gICAgICAgICAgICAgICAgaW1hZ2VXaWR0aCAqPSBzY2FsZTtcbiAgICAgICAgICAgICAgICBpbWFnZUhlaWdodCAqPSBzY2FsZTtcbiAgICAgICAgICAgICAgICByZXMuc2l6ZVggPSBpbWFnZVdpZHRoO1xuICAgICAgICAgICAgICAgIHJlcy5zaXplWSA9IGltYWdlSGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBwb3NpdGlvbiA9IGJhY2tncm91bmQucG9zaXRpb247XG4gICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciB2ID0gcGFyc2VQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICB2YXIgc3BhY2VYID0gd2lkdGggLSBpbWFnZVdpZHRoO1xuICAgICAgICAgICAgdmFyIHNwYWNlWSA9IGhlaWdodCAtIGltYWdlSGVpZ2h0O1xuICAgICAgICAgICAgaWYgKHYueC51bml0ID09PSBcIiVcIiAmJiB2LnkudW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgICAgICAgICAgICByZXMucG9zWCA9IHNwYWNlWCAqIHYueC52YWx1ZSAvIDEwMDtcbiAgICAgICAgICAgICAgICByZXMucG9zWSA9IHNwYWNlWSAqIHYueS52YWx1ZSAvIDEwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHYueC50eXBlID09PSBcIm51bWJlclwiICYmIHYueS50eXBlID09PSBcIm51bWJlclwiICYmXG4gICAgICAgICAgICAgICAgKCh2LngudW5pdCA9PT0gXCJweFwiICYmIHYueS51bml0ID09PSBcInB4XCIpIHx8ICh2LngudW5pdCA9PT0gXCJcIiAmJiB2LnkudW5pdCA9PT0gXCJcIikpKSB7XG4gICAgICAgICAgICAgICAgcmVzLnBvc1ggPSB2LngudmFsdWU7XG4gICAgICAgICAgICAgICAgcmVzLnBvc1kgPSB2LnkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2LngudHlwZSA9PT0gXCJpZGVudFwiICYmIHYueS50eXBlID09PSBcImlkZW50XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodi54LnN0cmluZy50b0xvd2VyQ2FzZSgpID09PSBcImNlbnRlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy5wb3NYID0gc3BhY2VYIC8gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodi54LnN0cmluZy50b0xvd2VyQ2FzZSgpID09PSBcInJpZ2h0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBvc1ggPSBzcGFjZVg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh2Lnkuc3RyaW5nLnRvTG93ZXJDYXNlKCkgPT09IFwiY2VudGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBvc1kgPSBzcGFjZVkgLyAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2Lnkuc3RyaW5nLnRvTG93ZXJDYXNlKCkgPT09IFwiYm90dG9tXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBvc1kgPSBzcGFjZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiB1aUNvbG9yRnJvbUltYWdlKGltZywgdmlldywgY2FsbGJhY2ssIGZsaXApIHtcbiAgICB2YXIgYmFja2dyb3VuZCA9IHZpZXcuc3R5bGUuYmFja2dyb3VuZEludGVybmFsO1xuICAgIGlmICghaW1nKSB7XG4gICAgICAgIGNhbGxiYWNrKGJhY2tncm91bmQuY29sb3IgJiYgYmFja2dyb3VuZC5jb2xvci5pb3MpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuYXRpdmVWaWV3ID0gdmlldy5uYXRpdmVWaWV3UHJvdGVjdGVkO1xuICAgIHZhciBmcmFtZSA9IG5hdGl2ZVZpZXcuZnJhbWU7XG4gICAgdmFyIGJvdW5kc1dpZHRoID0gdmlldy5zY2FsZVggPyBmcmFtZS5zaXplLndpZHRoIC8gdmlldy5zY2FsZVggOiBmcmFtZS5zaXplLndpZHRoO1xuICAgIHZhciBib3VuZHNIZWlnaHQgPSB2aWV3LnNjYWxlWSA/IGZyYW1lLnNpemUuaGVpZ2h0IC8gdmlldy5zY2FsZVkgOiBmcmFtZS5zaXplLmhlaWdodDtcbiAgICB2YXIgcGFyYW1zID0gZ2V0RHJhd1BhcmFtcyhpbWcsIGJhY2tncm91bmQsIGJvdW5kc1dpZHRoLCBib3VuZHNIZWlnaHQpO1xuICAgIGlmIChwYXJhbXMuc2l6ZVggPiAwICYmIHBhcmFtcy5zaXplWSA+IDApIHtcbiAgICAgICAgdmFyIHJlc2l6ZVJlY3QgPSBDR1JlY3RNYWtlKDAsIDAsIHBhcmFtcy5zaXplWCwgcGFyYW1zLnNpemVZKTtcbiAgICAgICAgVUlHcmFwaGljc0JlZ2luSW1hZ2VDb250ZXh0V2l0aE9wdGlvbnMocmVzaXplUmVjdC5zaXplLCBmYWxzZSwgMC4wKTtcbiAgICAgICAgaW1nLmRyYXdJblJlY3QocmVzaXplUmVjdCk7XG4gICAgICAgIGltZyA9IFVJR3JhcGhpY3NHZXRJbWFnZUZyb21DdXJyZW50SW1hZ2VDb250ZXh0KCk7XG4gICAgICAgIFVJR3JhcGhpY3NFbmRJbWFnZUNvbnRleHQoKTtcbiAgICB9XG4gICAgVUlHcmFwaGljc0JlZ2luSW1hZ2VDb250ZXh0V2l0aE9wdGlvbnMoQ0dTaXplRnJvbVN0cmluZyhcIntcIiArIGJvdW5kc1dpZHRoICsgXCIsXCIgKyBib3VuZHNIZWlnaHQgKyBcIn1cIiksIGZhbHNlLCAwLjApO1xuICAgIHZhciBjb250ZXh0ID0gVUlHcmFwaGljc0dldEN1cnJlbnRDb250ZXh0KCk7XG4gICAgaWYgKGJhY2tncm91bmQuY29sb3IgJiYgYmFja2dyb3VuZC5jb2xvci5pb3MpIHtcbiAgICAgICAgQ0dDb250ZXh0U2V0RmlsbENvbG9yV2l0aENvbG9yKGNvbnRleHQsIGJhY2tncm91bmQuY29sb3IuaW9zLkNHQ29sb3IpO1xuICAgICAgICBDR0NvbnRleHRGaWxsUmVjdChjb250ZXh0LCBDR1JlY3RNYWtlKDAsIDAsIGJvdW5kc1dpZHRoLCBib3VuZHNIZWlnaHQpKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMucmVwZWF0WCAmJiAhcGFyYW1zLnJlcGVhdFkpIHtcbiAgICAgICAgaW1nLmRyYXdBdFBvaW50KENHUG9pbnRNYWtlKHBhcmFtcy5wb3NYLCBwYXJhbXMucG9zWSkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHcgPSBwYXJhbXMucmVwZWF0WCA/IGJvdW5kc1dpZHRoIDogaW1nLnNpemUud2lkdGg7XG4gICAgICAgIHZhciBoID0gcGFyYW1zLnJlcGVhdFkgPyBib3VuZHNIZWlnaHQgOiBpbWcuc2l6ZS5oZWlnaHQ7XG4gICAgICAgIENHQ29udGV4dFNldFBhdHRlcm5QaGFzZShjb250ZXh0LCBDR1NpemVNYWtlKHBhcmFtcy5wb3NYLCBwYXJhbXMucG9zWSkpO1xuICAgICAgICBwYXJhbXMucG9zWCA9IHBhcmFtcy5yZXBlYXRYID8gMCA6IHBhcmFtcy5wb3NYO1xuICAgICAgICBwYXJhbXMucG9zWSA9IHBhcmFtcy5yZXBlYXRZID8gMCA6IHBhcmFtcy5wb3NZO1xuICAgICAgICB2YXIgcGF0dGVyblJlY3QgPSBDR1JlY3RNYWtlKHBhcmFtcy5wb3NYLCBwYXJhbXMucG9zWSwgdywgaCk7XG4gICAgICAgIGltZy5kcmF3QXNQYXR0ZXJuSW5SZWN0KHBhdHRlcm5SZWN0KTtcbiAgICB9XG4gICAgdmFyIGJrZ0ltYWdlID0gVUlHcmFwaGljc0dldEltYWdlRnJvbUN1cnJlbnRJbWFnZUNvbnRleHQoKTtcbiAgICBVSUdyYXBoaWNzRW5kSW1hZ2VDb250ZXh0KCk7XG4gICAgaWYgKGZsaXApIHtcbiAgICAgICAgdmFyIGZsaXBwZWRJbWFnZSA9IF9mbGlwSW1hZ2UoYmtnSW1hZ2UpO1xuICAgICAgICBjYWxsYmFjayhVSUNvbG9yLmFsbG9jKCkuaW5pdFdpdGhQYXR0ZXJuSW1hZ2UoZmxpcHBlZEltYWdlKSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhVSUNvbG9yLmFsbG9jKCkuaW5pdFdpdGhQYXR0ZXJuSW1hZ2UoYmtnSW1hZ2UpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBfZmxpcEltYWdlKG9yaWdpbmFsSW1hZ2UpIHtcbiAgICBVSUdyYXBoaWNzQmVnaW5JbWFnZUNvbnRleHRXaXRoT3B0aW9ucyhvcmlnaW5hbEltYWdlLnNpemUsIGZhbHNlLCAwLjApO1xuICAgIHZhciBjb250ZXh0ID0gVUlHcmFwaGljc0dldEN1cnJlbnRDb250ZXh0KCk7XG4gICAgQ0dDb250ZXh0U2F2ZUdTdGF0ZShjb250ZXh0KTtcbiAgICBDR0NvbnRleHRUcmFuc2xhdGVDVE0oY29udGV4dCwgMC4wLCBvcmlnaW5hbEltYWdlLnNpemUuaGVpZ2h0KTtcbiAgICBDR0NvbnRleHRTY2FsZUNUTShjb250ZXh0LCAxLjAsIC0xLjApO1xuICAgIG9yaWdpbmFsSW1hZ2UuZHJhd0luUmVjdChDR1JlY3RNYWtlKDAsIDAsIG9yaWdpbmFsSW1hZ2Uuc2l6ZS53aWR0aCwgb3JpZ2luYWxJbWFnZS5zaXplLmhlaWdodCkpO1xuICAgIENHQ29udGV4dFJlc3RvcmVHU3RhdGUoY29udGV4dCk7XG4gICAgdmFyIGZsaXBwZWRJbWFnZSA9IFVJR3JhcGhpY3NHZXRJbWFnZUZyb21DdXJyZW50SW1hZ2VDb250ZXh0KCk7XG4gICAgVUlHcmFwaGljc0VuZEltYWdlQ29udGV4dCgpO1xuICAgIHJldHVybiBmbGlwcGVkSW1hZ2U7XG59XG5mdW5jdGlvbiBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoc291cmNlLCB0b3RhbCkge1xuICAgIHNvdXJjZSA9IHNvdXJjZS50cmltKCk7XG4gICAgaWYgKHNvdXJjZS5pbmRleE9mKFwicHhcIikgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB1dGlsc18xLmxheW91dC50b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKHBhcnNlRmxvYXQoc291cmNlLnJlcGxhY2UoXCJweFwiLCBcIlwiKSkpO1xuICAgIH1cbiAgICBlbHNlIGlmIChzb3VyY2UuaW5kZXhPZihcIiVcIikgIT09IC0xICYmIHRvdGFsID4gMCkge1xuICAgICAgICByZXR1cm4gKHBhcnNlRmxvYXQoc291cmNlLnJlcGxhY2UoXCIlXCIsIFwiXCIpKSAvIDEwMCkgKiB0b3RhbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHNvdXJjZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZHJhd1VuaWZvcm1Db2xvck5vblVuaWZvcm1Cb3JkZXJzKG5hdGl2ZVZpZXcsIGJhY2tncm91bmQpIHtcbiAgICB2YXIgbGF5ZXIgPSBuYXRpdmVWaWV3LmxheWVyO1xuICAgIGxheWVyLmJhY2tncm91bmRDb2xvciA9IHVuZGVmaW5lZDtcbiAgICBsYXllci5ib3JkZXJDb2xvciA9IHVuZGVmaW5lZDtcbiAgICBsYXllci5ib3JkZXJXaWR0aCA9IDA7XG4gICAgbGF5ZXIuY29ybmVyUmFkaXVzID0gMDtcbiAgICB2YXIgX2EgPSBsYXllci5ib3VuZHMuc2l6ZSwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0O1xuICAgIHZhciBfYiA9IGxheWVyLmJvdW5kcy5vcmlnaW4sIHggPSBfYi54LCB5ID0gX2IueTtcbiAgICB2YXIgbGVmdCA9IHg7XG4gICAgdmFyIHRvcCA9IHk7XG4gICAgdmFyIHJpZ2h0ID0geCArIHdpZHRoO1xuICAgIHZhciBib3R0b20gPSB5ICsgaGVpZ2h0O1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbiwgbWF4ID0gTWF0aC5tYXg7XG4gICAgdmFyIGJvcmRlclRvcFdpZHRoID0gbWF4KDAsIHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5ib3JkZXJUb3BXaWR0aCkpO1xuICAgIHZhciBib3JkZXJSaWdodFdpZHRoID0gbWF4KDAsIHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5ib3JkZXJSaWdodFdpZHRoKSk7XG4gICAgdmFyIGJvcmRlckJvdHRvbVdpZHRoID0gbWF4KDAsIHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5ib3JkZXJCb3R0b21XaWR0aCkpO1xuICAgIHZhciBib3JkZXJMZWZ0V2lkdGggPSBtYXgoMCwgdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhiYWNrZ3JvdW5kLmJvcmRlckxlZnRXaWR0aCkpO1xuICAgIHZhciBib3JkZXJWV2lkdGggPSBib3JkZXJUb3BXaWR0aCArIGJvcmRlckJvdHRvbVdpZHRoO1xuICAgIHZhciBib3JkZXJIV2lkdGggPSBib3JkZXJMZWZ0V2lkdGggKyBib3JkZXJSaWdodFdpZHRoO1xuICAgIHZhciBjYXBwZWRCb3JkZXJUb3BXaWR0aCA9IGJvcmRlclRvcFdpZHRoICYmIGJvcmRlclRvcFdpZHRoICogbWluKDEsIGhlaWdodCAvIGJvcmRlclZXaWR0aCk7XG4gICAgdmFyIGNhcHBlZEJvcmRlclJpZ2h0V2lkdGggPSBib3JkZXJSaWdodFdpZHRoICYmIGJvcmRlclJpZ2h0V2lkdGggKiBtaW4oMSwgd2lkdGggLyBib3JkZXJIV2lkdGgpO1xuICAgIHZhciBjYXBwZWRCb3JkZXJCb3R0b21XaWR0aCA9IGJvcmRlckJvdHRvbVdpZHRoICYmIGJvcmRlckJvdHRvbVdpZHRoICogbWluKDEsIGhlaWdodCAvIGJvcmRlclZXaWR0aCk7XG4gICAgdmFyIGNhcHBlZEJvcmRlckxlZnRXaWR0aCA9IGJvcmRlckxlZnRXaWR0aCAmJiBib3JkZXJMZWZ0V2lkdGggKiBtaW4oMSwgd2lkdGggLyBib3JkZXJIV2lkdGgpO1xuICAgIHZhciBvdXRlclRvcExlZnRSYWRpdXMgPSB1dGlsc18xLmxheW91dC50b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKGJhY2tncm91bmQuYm9yZGVyVG9wTGVmdFJhZGl1cyk7XG4gICAgdmFyIG91dGVyVG9wUmlnaHRSYWRpdXMgPSB1dGlsc18xLmxheW91dC50b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKGJhY2tncm91bmQuYm9yZGVyVG9wUmlnaHRSYWRpdXMpO1xuICAgIHZhciBvdXRlckJvdHRvbVJpZ2h0UmFkaXVzID0gdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhiYWNrZ3JvdW5kLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzKTtcbiAgICB2YXIgb3V0ZXJCb3R0b21MZWZ0UmFkaXVzID0gdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhiYWNrZ3JvdW5kLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMpO1xuICAgIHZhciB0b3BSYWRpaSA9IG91dGVyVG9wTGVmdFJhZGl1cyArIG91dGVyVG9wUmlnaHRSYWRpdXM7XG4gICAgdmFyIHJpZ2h0UmFkaWkgPSBvdXRlclRvcFJpZ2h0UmFkaXVzICsgb3V0ZXJCb3R0b21SaWdodFJhZGl1cztcbiAgICB2YXIgYm90dG9tUmFkaWkgPSBvdXRlckJvdHRvbVJpZ2h0UmFkaXVzICsgb3V0ZXJCb3R0b21MZWZ0UmFkaXVzO1xuICAgIHZhciBsZWZ0UmFkaWkgPSBvdXRlckJvdHRvbUxlZnRSYWRpdXMgKyBvdXRlclRvcExlZnRSYWRpdXM7XG4gICAgZnVuY3Rpb24gY2FwUmFkaXVzKGEsIGIsIGMpIHtcbiAgICAgICAgcmV0dXJuIGEgJiYgTWF0aC5taW4oYSwgTWF0aC5taW4oYiwgYykpO1xuICAgIH1cbiAgICB2YXIgY2FwcGVkT3V0ZXJUb3BMZWZ0UmFkaXVzID0gY2FwUmFkaXVzKG91dGVyVG9wTGVmdFJhZGl1cywgb3V0ZXJUb3BMZWZ0UmFkaXVzIC8gdG9wUmFkaWkgKiB3aWR0aCwgb3V0ZXJUb3BMZWZ0UmFkaXVzIC8gbGVmdFJhZGlpICogaGVpZ2h0KTtcbiAgICB2YXIgY2FwcGVkT3V0ZXJUb3BSaWdodFJhZGl1cyA9IGNhcFJhZGl1cyhvdXRlclRvcFJpZ2h0UmFkaXVzLCBvdXRlclRvcFJpZ2h0UmFkaXVzIC8gdG9wUmFkaWkgKiB3aWR0aCwgb3V0ZXJUb3BSaWdodFJhZGl1cyAvIHJpZ2h0UmFkaWkgKiBoZWlnaHQpO1xuICAgIHZhciBjYXBwZWRPdXRlckJvdHRvbVJpZ2h0UmFkaXVzID0gY2FwUmFkaXVzKG91dGVyQm90dG9tUmlnaHRSYWRpdXMsIG91dGVyQm90dG9tUmlnaHRSYWRpdXMgLyBib3R0b21SYWRpaSAqIHdpZHRoLCBvdXRlckJvdHRvbVJpZ2h0UmFkaXVzIC8gcmlnaHRSYWRpaSAqIGhlaWdodCk7XG4gICAgdmFyIGNhcHBlZE91dGVyQm90dG9tTGVmdFJhZGl1cyA9IGNhcFJhZGl1cyhvdXRlckJvdHRvbUxlZnRSYWRpdXMsIG91dGVyQm90dG9tTGVmdFJhZGl1cyAvIGJvdHRvbVJhZGlpICogd2lkdGgsIG91dGVyQm90dG9tTGVmdFJhZGl1cyAvIGxlZnRSYWRpaSAqIGhlaWdodCk7XG4gICAgdmFyIGNsaXBQYXRoID0gQ0dQYXRoQ3JlYXRlTXV0YWJsZSgpO1xuICAgIENHUGF0aE1vdmVUb1BvaW50KGNsaXBQYXRoLCBudWxsLCBsZWZ0ICsgY2FwcGVkT3V0ZXJUb3BMZWZ0UmFkaXVzLCB0b3ApO1xuICAgIENHUGF0aEFkZEFyY1RvUG9pbnQoY2xpcFBhdGgsIG51bGwsIHJpZ2h0LCB0b3AsIHJpZ2h0LCB0b3AgKyBjYXBwZWRPdXRlclRvcFJpZ2h0UmFkaXVzLCBjYXBwZWRPdXRlclRvcFJpZ2h0UmFkaXVzKTtcbiAgICBDR1BhdGhBZGRBcmNUb1BvaW50KGNsaXBQYXRoLCBudWxsLCByaWdodCwgYm90dG9tLCByaWdodCAtIGNhcHBlZE91dGVyQm90dG9tUmlnaHRSYWRpdXMsIGJvdHRvbSwgY2FwcGVkT3V0ZXJCb3R0b21SaWdodFJhZGl1cyk7XG4gICAgQ0dQYXRoQWRkQXJjVG9Qb2ludChjbGlwUGF0aCwgbnVsbCwgbGVmdCwgYm90dG9tLCBsZWZ0LCBib3R0b20gLSBjYXBwZWRPdXRlckJvdHRvbUxlZnRSYWRpdXMsIGNhcHBlZE91dGVyQm90dG9tTGVmdFJhZGl1cyk7XG4gICAgQ0dQYXRoQWRkQXJjVG9Qb2ludChjbGlwUGF0aCwgbnVsbCwgbGVmdCwgdG9wLCBsZWZ0ICsgY2FwcGVkT3V0ZXJUb3BMZWZ0UmFkaXVzLCB0b3AsIGNhcHBlZE91dGVyVG9wTGVmdFJhZGl1cyk7XG4gICAgQ0dQYXRoQ2xvc2VTdWJwYXRoKGNsaXBQYXRoKTtcbiAgICBuYXRpdmVWaWV3LmJvcmRlck9yaWdpbmFsTWFzayA9IGxheWVyLm1hc2s7XG4gICAgdmFyIGNsaXBTaGFwZUxheWVyID0gQ0FTaGFwZUxheWVyLmxheWVyKCk7XG4gICAgY2xpcFNoYXBlTGF5ZXIucGF0aCA9IGNsaXBQYXRoO1xuICAgIGxheWVyLm1hc2sgPSBjbGlwU2hhcGVMYXllcjtcbiAgICBuYXRpdmVWaWV3Lmhhc0JvcmRlck1hc2sgPSB0cnVlO1xuICAgIGlmIChjYXBwZWRCb3JkZXJMZWZ0V2lkdGggPiAwIHx8IGNhcHBlZEJvcmRlclRvcFdpZHRoID4gMCB8fCBjYXBwZWRCb3JkZXJSaWdodFdpZHRoID4gMCB8fCBjYXBwZWRCb3JkZXJCb3R0b21XaWR0aCA+IDApIHtcbiAgICAgICAgdmFyIGJvcmRlclBhdGggPSBDR1BhdGhDcmVhdGVNdXRhYmxlKCk7XG4gICAgICAgIENHUGF0aEFkZFJlY3QoYm9yZGVyUGF0aCwgbnVsbCwgQ0dSZWN0TWFrZShsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQpKTtcbiAgICAgICAgaWYgKGNhcHBlZEJvcmRlclRvcFdpZHRoID4gMCB8fCBjYXBwZWRCb3JkZXJMZWZ0V2lkdGggPiAwKSB7XG4gICAgICAgICAgICBDR1BhdGhNb3ZlVG9Qb2ludChib3JkZXJQYXRoLCBudWxsLCBsZWZ0ICsgY2FwcGVkT3V0ZXJUb3BMZWZ0UmFkaXVzLCB0b3AgKyBjYXBwZWRCb3JkZXJUb3BXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBDR1BhdGhNb3ZlVG9Qb2ludChib3JkZXJQYXRoLCBudWxsLCBsZWZ0LCB0b3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXBwZWRCb3JkZXJUb3BXaWR0aCA+IDAgfHwgY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBpbm5lclRvcFJpZ2h0V1JhZGl1cyA9IG1heCgwLCBjYXBwZWRPdXRlclRvcFJpZ2h0UmFkaXVzIC0gY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJUb3BSaWdodEhSYWRpdXMgPSBtYXgoMCwgY2FwcGVkT3V0ZXJUb3BSaWdodFJhZGl1cyAtIGNhcHBlZEJvcmRlclRvcFdpZHRoKTtcbiAgICAgICAgICAgIHZhciBpbm5lclRvcFJpZ2h0TWF4UmFkaXVzID0gbWF4KGlubmVyVG9wUmlnaHRXUmFkaXVzLCBpbm5lclRvcFJpZ2h0SFJhZGl1cyk7XG4gICAgICAgICAgICB2YXIgaW5uZXJUb3BSaWdodFRyYW5zZm9ybSA9IENHQWZmaW5lVHJhbnNmb3JtTWFrZShpbm5lclRvcFJpZ2h0TWF4UmFkaXVzICYmIGlubmVyVG9wUmlnaHRXUmFkaXVzIC8gaW5uZXJUb3BSaWdodE1heFJhZGl1cywgMCwgMCwgaW5uZXJUb3BSaWdodE1heFJhZGl1cyAmJiBpbm5lclRvcFJpZ2h0SFJhZGl1cyAvIGlubmVyVG9wUmlnaHRNYXhSYWRpdXMsIHJpZ2h0IC0gY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCAtIGlubmVyVG9wUmlnaHRXUmFkaXVzLCB0b3AgKyBjYXBwZWRCb3JkZXJUb3BXaWR0aCArIGlubmVyVG9wUmlnaHRIUmFkaXVzKTtcbiAgICAgICAgICAgIENHUGF0aEFkZEFyYyhib3JkZXJQYXRoLCBpbm5lclRvcFJpZ2h0VHJhbnNmb3JtLCAwLCAwLCBpbm5lclRvcFJpZ2h0TWF4UmFkaXVzLCBNYXRoLlBJICogMyAvIDIsIDAsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIENHUGF0aE1vdmVUb1BvaW50KGJvcmRlclBhdGgsIG51bGwsIHJpZ2h0LCB0b3ApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYXBwZWRCb3JkZXJCb3R0b21XaWR0aCA+IDAgfHwgY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBpbm5lckJvdHRvbVJpZ2h0V1JhZGl1cyA9IG1heCgwLCBjYXBwZWRPdXRlckJvdHRvbVJpZ2h0UmFkaXVzIC0gY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJCb3R0b21SaWdodEhSYWRpdXMgPSBtYXgoMCwgY2FwcGVkT3V0ZXJCb3R0b21SaWdodFJhZGl1cyAtIGNhcHBlZEJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICAgICAgICAgIHZhciBpbm5lckJvdHRvbVJpZ2h0TWF4UmFkaXVzID0gbWF4KGlubmVyQm90dG9tUmlnaHRXUmFkaXVzLCBpbm5lckJvdHRvbVJpZ2h0SFJhZGl1cyk7XG4gICAgICAgICAgICB2YXIgaW5uZXJCb3R0b21SaWdodFRyYW5zZm9ybSA9IENHQWZmaW5lVHJhbnNmb3JtTWFrZShpbm5lckJvdHRvbVJpZ2h0TWF4UmFkaXVzICYmIGlubmVyQm90dG9tUmlnaHRXUmFkaXVzIC8gaW5uZXJCb3R0b21SaWdodE1heFJhZGl1cywgMCwgMCwgaW5uZXJCb3R0b21SaWdodE1heFJhZGl1cyAmJiBpbm5lckJvdHRvbVJpZ2h0SFJhZGl1cyAvIGlubmVyQm90dG9tUmlnaHRNYXhSYWRpdXMsIHJpZ2h0IC0gY2FwcGVkQm9yZGVyUmlnaHRXaWR0aCAtIGlubmVyQm90dG9tUmlnaHRXUmFkaXVzLCBib3R0b20gLSBjYXBwZWRCb3JkZXJCb3R0b21XaWR0aCAtIGlubmVyQm90dG9tUmlnaHRIUmFkaXVzKTtcbiAgICAgICAgICAgIENHUGF0aEFkZEFyYyhib3JkZXJQYXRoLCBpbm5lckJvdHRvbVJpZ2h0VHJhbnNmb3JtLCAwLCAwLCBpbm5lckJvdHRvbVJpZ2h0TWF4UmFkaXVzLCAwLCBNYXRoLlBJIC8gMiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQoYm9yZGVyUGF0aCwgbnVsbCwgcmlnaHQsIGJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcHBlZEJvcmRlckJvdHRvbVdpZHRoID4gMCB8fCBjYXBwZWRCb3JkZXJMZWZ0V2lkdGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJCb3R0b21MZWZ0V1JhZGl1cyA9IG1heCgwLCBjYXBwZWRPdXRlckJvdHRvbUxlZnRSYWRpdXMgLSBjYXBwZWRCb3JkZXJMZWZ0V2lkdGgpO1xuICAgICAgICAgICAgdmFyIGlubmVyQm90dG9tTGVmdEhSYWRpdXMgPSBtYXgoMCwgY2FwcGVkT3V0ZXJCb3R0b21MZWZ0UmFkaXVzIC0gY2FwcGVkQm9yZGVyQm90dG9tV2lkdGgpO1xuICAgICAgICAgICAgdmFyIGlubmVyQm90dG9tTGVmdE1heFJhZGl1cyA9IG1heChpbm5lckJvdHRvbUxlZnRXUmFkaXVzLCBpbm5lckJvdHRvbUxlZnRIUmFkaXVzKTtcbiAgICAgICAgICAgIHZhciBpbm5lckJvdHRvbUxlZnRUcmFuc2Zvcm0gPSBDR0FmZmluZVRyYW5zZm9ybU1ha2UoaW5uZXJCb3R0b21MZWZ0TWF4UmFkaXVzICYmIGlubmVyQm90dG9tTGVmdFdSYWRpdXMgLyBpbm5lckJvdHRvbUxlZnRNYXhSYWRpdXMsIDAsIDAsIGlubmVyQm90dG9tTGVmdE1heFJhZGl1cyAmJiBpbm5lckJvdHRvbUxlZnRIUmFkaXVzIC8gaW5uZXJCb3R0b21MZWZ0TWF4UmFkaXVzLCBsZWZ0ICsgY2FwcGVkQm9yZGVyTGVmdFdpZHRoICsgaW5uZXJCb3R0b21MZWZ0V1JhZGl1cywgYm90dG9tIC0gY2FwcGVkQm9yZGVyQm90dG9tV2lkdGggLSBpbm5lckJvdHRvbUxlZnRIUmFkaXVzKTtcbiAgICAgICAgICAgIENHUGF0aEFkZEFyYyhib3JkZXJQYXRoLCBpbm5lckJvdHRvbUxlZnRUcmFuc2Zvcm0sIDAsIDAsIGlubmVyQm90dG9tTGVmdE1heFJhZGl1cywgTWF0aC5QSSAvIDIsIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIENHUGF0aEFkZExpbmVUb1BvaW50KGJvcmRlclBhdGgsIG51bGwsIGxlZnQsIGJvdHRvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhcHBlZEJvcmRlclRvcFdpZHRoID4gMCB8fCBjYXBwZWRCb3JkZXJMZWZ0V2lkdGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJUb3BMZWZ0V1JhZGl1cyA9IG1heCgwLCBjYXBwZWRPdXRlclRvcExlZnRSYWRpdXMgLSBjYXBwZWRCb3JkZXJMZWZ0V2lkdGgpO1xuICAgICAgICAgICAgdmFyIGlubmVyVG9wTGVmdEhSYWRpdXMgPSBtYXgoMCwgY2FwcGVkT3V0ZXJUb3BMZWZ0UmFkaXVzIC0gY2FwcGVkQm9yZGVyVG9wV2lkdGgpO1xuICAgICAgICAgICAgdmFyIGlubmVyVG9wTGVmdE1heFJhZGl1cyA9IG1heChpbm5lclRvcExlZnRXUmFkaXVzLCBpbm5lclRvcExlZnRIUmFkaXVzKTtcbiAgICAgICAgICAgIHZhciBpbm5lclRvcExlZnRUcmFuc2Zvcm0gPSBDR0FmZmluZVRyYW5zZm9ybU1ha2UoaW5uZXJUb3BMZWZ0TWF4UmFkaXVzICYmIGlubmVyVG9wTGVmdFdSYWRpdXMgLyBpbm5lclRvcExlZnRNYXhSYWRpdXMsIDAsIDAsIGlubmVyVG9wTGVmdE1heFJhZGl1cyAmJiBpbm5lclRvcExlZnRIUmFkaXVzIC8gaW5uZXJUb3BMZWZ0TWF4UmFkaXVzLCBsZWZ0ICsgY2FwcGVkQm9yZGVyTGVmdFdpZHRoICsgaW5uZXJUb3BMZWZ0V1JhZGl1cywgdG9wICsgY2FwcGVkQm9yZGVyVG9wV2lkdGggKyBpbm5lclRvcExlZnRIUmFkaXVzKTtcbiAgICAgICAgICAgIENHUGF0aEFkZEFyYyhib3JkZXJQYXRoLCBpbm5lclRvcExlZnRUcmFuc2Zvcm0sIDAsIDAsIGlubmVyVG9wTGVmdE1heFJhZGl1cywgTWF0aC5QSSwgTWF0aC5QSSAqIDMgLyAyLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBDR1BhdGhBZGRMaW5lVG9Qb2ludChib3JkZXJQYXRoLCBudWxsLCBsZWZ0LCB0b3ApO1xuICAgICAgICB9XG4gICAgICAgIENHUGF0aENsb3NlU3VicGF0aChib3JkZXJQYXRoKTtcbiAgICAgICAgdmFyIGJvcmRlckxheWVyID0gQ0FTaGFwZUxheWVyLmxheWVyKCk7XG4gICAgICAgIGJvcmRlckxheWVyLmZpbGxDb2xvciA9IGJhY2tncm91bmQuYm9yZGVyVG9wQ29sb3IgJiYgYmFja2dyb3VuZC5ib3JkZXJUb3BDb2xvci5pb3MuQ0dDb2xvciB8fCBVSUNvbG9yLmJsYWNrQ29sb3IuQ0dDb2xvcjtcbiAgICAgICAgYm9yZGVyTGF5ZXIuZmlsbFJ1bGUgPSBrQ0FGaWxsUnVsZUV2ZW5PZGQ7XG4gICAgICAgIGJvcmRlckxheWVyLnBhdGggPSBib3JkZXJQYXRoO1xuICAgICAgICBsYXllci5hZGRTdWJsYXllcihib3JkZXJMYXllcik7XG4gICAgICAgIG5hdGl2ZVZpZXcuYm9yZGVyTGF5ZXIgPSBib3JkZXJMYXllcjtcbiAgICB9XG4gICAgbmF0aXZlVmlldy5oYXNOb25Vbmlmb3JtQm9yZGVyID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGRyYXdOb1JhZGl1c05vblVuaWZvcm1Cb3JkZXJzKG5hdGl2ZVZpZXcsIGJhY2tncm91bmQpIHtcbiAgICB2YXIgYm9yZGVyTGF5ZXIgPSBDQUxheWVyLmxheWVyKCk7XG4gICAgbmF0aXZlVmlldy5sYXllci5hZGRTdWJsYXllcihib3JkZXJMYXllcik7XG4gICAgbmF0aXZlVmlldy5ib3JkZXJMYXllciA9IGJvcmRlckxheWVyO1xuICAgIGJvcmRlckxheWVyLmJvcmRlckNvbG9yID0gdW5kZWZpbmVkO1xuICAgIGJvcmRlckxheWVyLmJvcmRlcldpZHRoID0gMDtcbiAgICBib3JkZXJMYXllci5jb3JuZXJSYWRpdXMgPSAwO1xuICAgIHZhciBsYXllckJvdW5kcyA9IG5hdGl2ZVZpZXcubGF5ZXIuYm91bmRzO1xuICAgIHZhciBsYXllck9yaWdpbiA9IGxheWVyQm91bmRzLm9yaWdpbjtcbiAgICB2YXIgbGF5ZXJTaXplID0gbGF5ZXJCb3VuZHMuc2l6ZTtcbiAgICB2YXIgbmF0aXZlVmlld0xheWVyQm91bmRzID0ge1xuICAgICAgICBsZWZ0OiBsYXllck9yaWdpbi54LFxuICAgICAgICB0b3A6IGxheWVyT3JpZ2luLnksXG4gICAgICAgIGJvdHRvbTogbGF5ZXJTaXplLmhlaWdodCxcbiAgICAgICAgcmlnaHQ6IGxheWVyU2l6ZS53aWR0aFxuICAgIH07XG4gICAgdmFyIHRvcCA9IHV0aWxzXzEubGF5b3V0LnRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYmFja2dyb3VuZC5ib3JkZXJUb3BXaWR0aCk7XG4gICAgdmFyIHJpZ2h0ID0gdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhiYWNrZ3JvdW5kLmJvcmRlclJpZ2h0V2lkdGgpO1xuICAgIHZhciBib3R0b20gPSB1dGlsc18xLmxheW91dC50b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKGJhY2tncm91bmQuYm9yZGVyQm90dG9tV2lkdGgpO1xuICAgIHZhciBsZWZ0ID0gdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhiYWNrZ3JvdW5kLmJvcmRlckxlZnRXaWR0aCk7XG4gICAgdmFyIGx0byA9IHsgeDogbmF0aXZlVmlld0xheWVyQm91bmRzLmxlZnQsIHk6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy50b3AgfTtcbiAgICB2YXIgbHRpID0geyB4OiBuYXRpdmVWaWV3TGF5ZXJCb3VuZHMubGVmdCArIGxlZnQsIHk6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy50b3AgKyB0b3AgfTtcbiAgICB2YXIgcnRvID0geyB4OiBuYXRpdmVWaWV3TGF5ZXJCb3VuZHMucmlnaHQsIHk6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy50b3AgfTtcbiAgICB2YXIgcnRpID0geyB4OiBuYXRpdmVWaWV3TGF5ZXJCb3VuZHMucmlnaHQgLSByaWdodCwgeTogbmF0aXZlVmlld0xheWVyQm91bmRzLnRvcCArIHRvcCB9O1xuICAgIHZhciByYm8gPSB7IHg6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy5yaWdodCwgeTogbmF0aXZlVmlld0xheWVyQm91bmRzLmJvdHRvbSB9O1xuICAgIHZhciByYmkgPSB7IHg6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy5yaWdodCAtIHJpZ2h0LCB5OiBuYXRpdmVWaWV3TGF5ZXJCb3VuZHMuYm90dG9tIC0gYm90dG9tIH07XG4gICAgdmFyIGxibyA9IHsgeDogbmF0aXZlVmlld0xheWVyQm91bmRzLmxlZnQsIHk6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy5ib3R0b20gfTtcbiAgICB2YXIgbGJpID0geyB4OiBuYXRpdmVWaWV3TGF5ZXJCb3VuZHMubGVmdCArIGxlZnQsIHk6IG5hdGl2ZVZpZXdMYXllckJvdW5kcy5ib3R0b20gLSBib3R0b20gfTtcbiAgICB2YXIgaGFzTm9uVW5pZm9ybUJvcmRlcjtcbiAgICB2YXIgYm9yZGVyVG9wQ29sb3IgPSBiYWNrZ3JvdW5kLmJvcmRlclRvcENvbG9yO1xuICAgIGlmICh0b3AgPiAwICYmIGJvcmRlclRvcENvbG9yICYmIGJvcmRlclRvcENvbG9yLmlvcykge1xuICAgICAgICB2YXIgdG9wQm9yZGVyUGF0aCA9IENHUGF0aENyZWF0ZU11dGFibGUoKTtcbiAgICAgICAgQ0dQYXRoTW92ZVRvUG9pbnQodG9wQm9yZGVyUGF0aCwgbnVsbCwgbHRvLngsIGx0by55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQodG9wQm9yZGVyUGF0aCwgbnVsbCwgcnRvLngsIHJ0by55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQodG9wQm9yZGVyUGF0aCwgbnVsbCwgcnRpLngsIHJ0aS55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQodG9wQm9yZGVyUGF0aCwgbnVsbCwgbHRpLngsIGx0aS55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQodG9wQm9yZGVyUGF0aCwgbnVsbCwgbHRvLngsIGx0by55KTtcbiAgICAgICAgdmFyIHRvcEJvcmRlckxheWVyID0gQ0FTaGFwZUxheWVyLmxheWVyKCk7XG4gICAgICAgIHRvcEJvcmRlckxheWVyLmZpbGxDb2xvciA9IGJhY2tncm91bmQuYm9yZGVyVG9wQ29sb3IuaW9zLkNHQ29sb3I7XG4gICAgICAgIHRvcEJvcmRlckxheWVyLnBhdGggPSB0b3BCb3JkZXJQYXRoO1xuICAgICAgICBib3JkZXJMYXllci5hZGRTdWJsYXllcih0b3BCb3JkZXJMYXllcik7XG4gICAgICAgIG5hdGl2ZVZpZXcudG9wQm9yZGVyTGF5ZXIgPSB0b3BCb3JkZXJMYXllcjtcbiAgICAgICAgaGFzTm9uVW5pZm9ybUJvcmRlciA9IHRydWU7XG4gICAgfVxuICAgIHZhciBib3JkZXJSaWdodENvbG9yID0gYmFja2dyb3VuZC5ib3JkZXJSaWdodENvbG9yO1xuICAgIGlmIChyaWdodCA+IDAgJiYgYm9yZGVyUmlnaHRDb2xvciAmJiBib3JkZXJSaWdodENvbG9yLmlvcykge1xuICAgICAgICB2YXIgcmlnaHRCb3JkZXJQYXRoID0gQ0dQYXRoQ3JlYXRlTXV0YWJsZSgpO1xuICAgICAgICBDR1BhdGhNb3ZlVG9Qb2ludChyaWdodEJvcmRlclBhdGgsIG51bGwsIHJ0by54LCBydG8ueSk7XG4gICAgICAgIENHUGF0aEFkZExpbmVUb1BvaW50KHJpZ2h0Qm9yZGVyUGF0aCwgbnVsbCwgcmJvLngsIHJiby55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQocmlnaHRCb3JkZXJQYXRoLCBudWxsLCByYmkueCwgcmJpLnkpO1xuICAgICAgICBDR1BhdGhBZGRMaW5lVG9Qb2ludChyaWdodEJvcmRlclBhdGgsIG51bGwsIHJ0aS54LCBydGkueSk7XG4gICAgICAgIENHUGF0aEFkZExpbmVUb1BvaW50KHJpZ2h0Qm9yZGVyUGF0aCwgbnVsbCwgcnRvLngsIHJ0by55KTtcbiAgICAgICAgdmFyIHJpZ2h0Qm9yZGVyTGF5ZXIgPSBDQVNoYXBlTGF5ZXIubGF5ZXIoKTtcbiAgICAgICAgcmlnaHRCb3JkZXJMYXllci5maWxsQ29sb3IgPSBiYWNrZ3JvdW5kLmJvcmRlclJpZ2h0Q29sb3IuaW9zLkNHQ29sb3I7XG4gICAgICAgIHJpZ2h0Qm9yZGVyTGF5ZXIucGF0aCA9IHJpZ2h0Qm9yZGVyUGF0aDtcbiAgICAgICAgYm9yZGVyTGF5ZXIuYWRkU3VibGF5ZXIocmlnaHRCb3JkZXJMYXllcik7XG4gICAgICAgIG5hdGl2ZVZpZXcucmlnaHRCb3JkZXJMYXllciA9IHJpZ2h0Qm9yZGVyTGF5ZXI7XG4gICAgICAgIGhhc05vblVuaWZvcm1Cb3JkZXIgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgYm9yZGVyQm90dG9tQ29sb3IgPSBiYWNrZ3JvdW5kLmJvcmRlckJvdHRvbUNvbG9yO1xuICAgIGlmIChib3R0b20gPiAwICYmIGJvcmRlckJvdHRvbUNvbG9yICYmIGJvcmRlckJvdHRvbUNvbG9yLmlvcykge1xuICAgICAgICB2YXIgYm90dG9tQm9yZGVyUGF0aCA9IENHUGF0aENyZWF0ZU11dGFibGUoKTtcbiAgICAgICAgQ0dQYXRoTW92ZVRvUG9pbnQoYm90dG9tQm9yZGVyUGF0aCwgbnVsbCwgcmJvLngsIHJiby55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQoYm90dG9tQm9yZGVyUGF0aCwgbnVsbCwgbGJvLngsIGxiby55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQoYm90dG9tQm9yZGVyUGF0aCwgbnVsbCwgbGJpLngsIGxiaS55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQoYm90dG9tQm9yZGVyUGF0aCwgbnVsbCwgcmJpLngsIHJiaS55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQoYm90dG9tQm9yZGVyUGF0aCwgbnVsbCwgcmJvLngsIHJiby55KTtcbiAgICAgICAgdmFyIGJvdHRvbUJvcmRlckxheWVyID0gQ0FTaGFwZUxheWVyLmxheWVyKCk7XG4gICAgICAgIGJvdHRvbUJvcmRlckxheWVyLmZpbGxDb2xvciA9IGJhY2tncm91bmQuYm9yZGVyQm90dG9tQ29sb3IuaW9zLkNHQ29sb3I7XG4gICAgICAgIGJvdHRvbUJvcmRlckxheWVyLnBhdGggPSBib3R0b21Cb3JkZXJQYXRoO1xuICAgICAgICBib3JkZXJMYXllci5hZGRTdWJsYXllcihib3R0b21Cb3JkZXJMYXllcik7XG4gICAgICAgIG5hdGl2ZVZpZXcuYm90dG9tQm9yZGVyTGF5ZXIgPSBib3R0b21Cb3JkZXJMYXllcjtcbiAgICAgICAgaGFzTm9uVW5pZm9ybUJvcmRlciA9IHRydWU7XG4gICAgfVxuICAgIHZhciBib3JkZXJMZWZ0Q29sb3IgPSBiYWNrZ3JvdW5kLmJvcmRlckxlZnRDb2xvcjtcbiAgICBpZiAobGVmdCA+IDAgJiYgYm9yZGVyTGVmdENvbG9yICYmIGJvcmRlckxlZnRDb2xvci5pb3MpIHtcbiAgICAgICAgdmFyIGxlZnRCb3JkZXJQYXRoID0gQ0dQYXRoQ3JlYXRlTXV0YWJsZSgpO1xuICAgICAgICBDR1BhdGhNb3ZlVG9Qb2ludChsZWZ0Qm9yZGVyUGF0aCwgbnVsbCwgbGJvLngsIGxiby55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQobGVmdEJvcmRlclBhdGgsIG51bGwsIGx0by54LCBsdG8ueSk7XG4gICAgICAgIENHUGF0aEFkZExpbmVUb1BvaW50KGxlZnRCb3JkZXJQYXRoLCBudWxsLCBsdGkueCwgbHRpLnkpO1xuICAgICAgICBDR1BhdGhBZGRMaW5lVG9Qb2ludChsZWZ0Qm9yZGVyUGF0aCwgbnVsbCwgbGJpLngsIGxiaS55KTtcbiAgICAgICAgQ0dQYXRoQWRkTGluZVRvUG9pbnQobGVmdEJvcmRlclBhdGgsIG51bGwsIGxiby54LCBsYm8ueSk7XG4gICAgICAgIHZhciBsZWZ0Qm9yZGVyTGF5ZXIgPSBDQVNoYXBlTGF5ZXIubGF5ZXIoKTtcbiAgICAgICAgbGVmdEJvcmRlckxheWVyLmZpbGxDb2xvciA9IGJhY2tncm91bmQuYm9yZGVyTGVmdENvbG9yLmlvcy5DR0NvbG9yO1xuICAgICAgICBsZWZ0Qm9yZGVyTGF5ZXIucGF0aCA9IGxlZnRCb3JkZXJQYXRoO1xuICAgICAgICBib3JkZXJMYXllci5hZGRTdWJsYXllcihsZWZ0Qm9yZGVyTGF5ZXIpO1xuICAgICAgICBuYXRpdmVWaWV3LmxlZnRCb3JkZXJMYXllciA9IGxlZnRCb3JkZXJMYXllcjtcbiAgICAgICAgaGFzTm9uVW5pZm9ybUJvcmRlciA9IHRydWU7XG4gICAgfVxuICAgIG5hdGl2ZVZpZXcuaGFzTm9uVW5pZm9ybUJvcmRlciA9IGhhc05vblVuaWZvcm1Cb3JkZXI7XG59XG5mdW5jdGlvbiBkcmF3R3JhZGllbnQobmF0aXZlVmlldywgZ3JhZGllbnQpIHtcbiAgICB2YXIgZ3JhZGllbnRMYXllciA9IENBR3JhZGllbnRMYXllci5sYXllcigpO1xuICAgIGdyYWRpZW50TGF5ZXIuZnJhbWUgPSBuYXRpdmVWaWV3LmJvdW5kcztcbiAgICBuYXRpdmVWaWV3LmdyYWRpZW50TGF5ZXIgPSBncmFkaWVudExheWVyO1xuICAgIHZhciBpb3NDb2xvcnMgPSBOU011dGFibGVBcnJheS5hbGxvYygpLmluaXRXaXRoQ2FwYWNpdHkoZ3JhZGllbnQuY29sb3JTdG9wcy5sZW5ndGgpO1xuICAgIHZhciBpb3NTdG9wcyA9IE5TTXV0YWJsZUFycmF5LmFsbG9jKCkuaW5pdFdpdGhDYXBhY2l0eShncmFkaWVudC5jb2xvclN0b3BzLmxlbmd0aCk7XG4gICAgdmFyIGhhc1N0b3BzID0gZmFsc2U7XG4gICAgZ3JhZGllbnQuY29sb3JTdG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChzdG9wKSB7XG4gICAgICAgIGlvc0NvbG9ycy5hZGRPYmplY3Qoc3RvcC5jb2xvci5pb3MuQ0dDb2xvcik7XG4gICAgICAgIGlmIChzdG9wLm9mZnNldCkge1xuICAgICAgICAgICAgaW9zU3RvcHMuYWRkT2JqZWN0KHN0b3Aub2Zmc2V0LnZhbHVlKTtcbiAgICAgICAgICAgIGhhc1N0b3BzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGdyYWRpZW50TGF5ZXIuY29sb3JzID0gaW9zQ29sb3JzO1xuICAgIGlmIChoYXNTdG9wcykge1xuICAgICAgICBncmFkaWVudExheWVyLmxvY2F0aW9ucyA9IGlvc1N0b3BzO1xuICAgIH1cbiAgICB2YXIgYWxwaGEgPSBncmFkaWVudC5hbmdsZSAvIChNYXRoLlBJICogMik7XG4gICAgdmFyIHN0YXJ0WCA9IE1hdGgucG93KE1hdGguc2luKE1hdGguUEkgKiAoYWxwaGEgKyAwLjc1KSksIDIpO1xuICAgIHZhciBzdGFydFkgPSBNYXRoLnBvdyhNYXRoLnNpbihNYXRoLlBJICogKGFscGhhICsgMC41KSksIDIpO1xuICAgIHZhciBlbmRYID0gTWF0aC5wb3coTWF0aC5zaW4oTWF0aC5QSSAqIChhbHBoYSArIDAuMjUpKSwgMik7XG4gICAgdmFyIGVuZFkgPSBNYXRoLnBvdyhNYXRoLnNpbihNYXRoLlBJICogYWxwaGEpLCAyKTtcbiAgICBncmFkaWVudExheWVyLnN0YXJ0UG9pbnQgPSB7IHg6IHN0YXJ0WCwgeTogc3RhcnRZIH07XG4gICAgZ3JhZGllbnRMYXllci5lbmRQb2ludCA9IHsgeDogZW5kWCwgeTogZW5kWSB9O1xuICAgIG5hdGl2ZVZpZXcubGF5ZXIuaW5zZXJ0U3VibGF5ZXJBdEluZGV4KGdyYWRpZW50TGF5ZXIsIDApO1xufVxuZnVuY3Rpb24gY2xlYXJHcmFkaWVudChuYXRpdmVWaWV3KSB7XG4gICAgaWYgKG5hdGl2ZVZpZXcuZ3JhZGllbnRMYXllcikge1xuICAgICAgICBuYXRpdmVWaWV3LmdyYWRpZW50TGF5ZXIucmVtb3ZlRnJvbVN1cGVybGF5ZXIoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkcmF3Q2xpcFBhdGgobmF0aXZlVmlldywgYmFja2dyb3VuZCkge1xuICAgIHZhciBsYXllciA9IG5hdGl2ZVZpZXcubGF5ZXI7XG4gICAgdmFyIGxheWVyQm91bmRzID0gbGF5ZXIuYm91bmRzO1xuICAgIHZhciBsYXllck9yaWdpbiA9IGxheWVyQm91bmRzLm9yaWdpbjtcbiAgICB2YXIgbGF5ZXJTaXplID0gbGF5ZXJCb3VuZHMuc2l6ZTtcbiAgICB2YXIgYm91bmRzID0ge1xuICAgICAgICBsZWZ0OiBsYXllck9yaWdpbi54LFxuICAgICAgICB0b3A6IGxheWVyT3JpZ2luLnksXG4gICAgICAgIGJvdHRvbTogbGF5ZXJTaXplLmhlaWdodCxcbiAgICAgICAgcmlnaHQ6IGxheWVyU2l6ZS53aWR0aFxuICAgIH07XG4gICAgaWYgKGJvdW5kcy5yaWdodCA9PT0gMCB8fCBib3VuZHMuYm90dG9tID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHBhdGg7XG4gICAgdmFyIGNsaXBQYXRoID0gYmFja2dyb3VuZC5jbGlwUGF0aDtcbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gY2xpcFBhdGguc3Vic3RyaW5nKDAsIGNsaXBQYXRoLmluZGV4T2YoXCIoXCIpKTtcbiAgICB2YXIgdmFsdWUgPSBjbGlwUGF0aC5yZXBsYWNlKGZ1bmN0aW9uTmFtZSArIFwiKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKTtcbiAgICBzd2l0Y2ggKGZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBjYXNlIFwicmVjdFwiOlxuICAgICAgICAgICAgcGF0aCA9IHJlY3RQYXRoKHZhbHVlLCBib3VuZHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJpbnNldFwiOlxuICAgICAgICAgICAgcGF0aCA9IGluc2V0UGF0aCh2YWx1ZSwgYm91bmRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiY2lyY2xlXCI6XG4gICAgICAgICAgICBwYXRoID0gY2lyY2xlUGF0aCh2YWx1ZSwgYm91bmRzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZWxsaXBzZVwiOlxuICAgICAgICAgICAgcGF0aCA9IGVsbGlwc2VQYXRoKHZhbHVlLCBib3VuZHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJwb2x5Z29uXCI6XG4gICAgICAgICAgICBwYXRoID0gcG9seWdvblBhdGgodmFsdWUsIGJvdW5kcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHBhdGgpIHtcbiAgICAgICAgdmFyIHNoYXBlID0gQ0FTaGFwZUxheWVyLmxheWVyKCk7XG4gICAgICAgIHNoYXBlLnBhdGggPSBwYXRoO1xuICAgICAgICBsYXllci5tYXNrID0gc2hhcGU7XG4gICAgICAgIG5hdGl2ZVZpZXcuY2xpcHNUb0JvdW5kcyA9IHRydWU7XG4gICAgICAgIHZhciBib3JkZXJXaWR0aCA9IGJhY2tncm91bmQuZ2V0VW5pZm9ybUJvcmRlcldpZHRoKCk7XG4gICAgICAgIHZhciBib3JkZXJDb2xvciA9IGJhY2tncm91bmQuZ2V0VW5pZm9ybUJvcmRlckNvbG9yKCk7XG4gICAgICAgIGlmIChib3JkZXJXaWR0aCA+IDAgJiYgYm9yZGVyQ29sb3IgaW5zdGFuY2VvZiBjb2xvcl8xLkNvbG9yKSB7XG4gICAgICAgICAgICB2YXIgYm9yZGVyTGF5ZXIgPSBDQVNoYXBlTGF5ZXIubGF5ZXIoKTtcbiAgICAgICAgICAgIGJvcmRlckxheWVyLnBhdGggPSBwYXRoO1xuICAgICAgICAgICAgYm9yZGVyTGF5ZXIubGluZVdpZHRoID0gYm9yZGVyV2lkdGggKiAyO1xuICAgICAgICAgICAgYm9yZGVyTGF5ZXIuc3Ryb2tlQ29sb3IgPSBib3JkZXJDb2xvci5pb3MuQ0dDb2xvcjtcbiAgICAgICAgICAgIGJvcmRlckxheWVyLmZpbGxDb2xvciA9IGNsZWFyQ0dDb2xvcjtcbiAgICAgICAgICAgIGJvcmRlckxheWVyLmZyYW1lID0gbmF0aXZlVmlldy5ib3VuZHM7XG4gICAgICAgICAgICBsYXllci5ib3JkZXJDb2xvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGxheWVyLmJvcmRlcldpZHRoID0gMDtcbiAgICAgICAgICAgIGxheWVyLmFkZFN1YmxheWVyKGJvcmRlckxheWVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlY3RQYXRoKHZhbHVlLCBib3VuZHMpIHtcbiAgICB2YXIgYXJyID0gdmFsdWUuc3BsaXQoL1tcXHNdKy8pO1xuICAgIHZhciB0b3AgPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYXJyWzBdLCBib3VuZHMudG9wKTtcbiAgICB2YXIgcmlnaHQgPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYXJyWzFdLCBib3VuZHMucmlnaHQpO1xuICAgIHZhciBib3R0b20gPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYXJyWzJdLCBib3VuZHMuYm90dG9tKTtcbiAgICB2YXIgbGVmdCA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhhcnJbM10sIGJvdW5kcy5sZWZ0KTtcbiAgICByZXR1cm4gVUlCZXppZXJQYXRoLmJlemllclBhdGhXaXRoUmVjdChDR1JlY3RNYWtlKGxlZnQsIHRvcCwgcmlnaHQgLSBsZWZ0LCBib3R0b20gLSB0b3ApKS5DR1BhdGg7XG59XG5mdW5jdGlvbiBpbnNldFBhdGgodmFsdWUsIGJvdW5kcykge1xuICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgvW1xcc10rLyk7XG4gICAgdmFyIHRvcFN0cmluZztcbiAgICB2YXIgcmlnaHRTdHJpbmc7XG4gICAgdmFyIGJvdHRvbVN0cmluZztcbiAgICB2YXIgbGVmdFN0cmluZztcbiAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0b3BTdHJpbmcgPSByaWdodFN0cmluZyA9IGJvdHRvbVN0cmluZyA9IGxlZnRTdHJpbmcgPSBhcnJbMF07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdG9wU3RyaW5nID0gYm90dG9tU3RyaW5nID0gYXJyWzBdO1xuICAgICAgICByaWdodFN0cmluZyA9IGxlZnRTdHJpbmcgPSBhcnJbMV07XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyci5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgdG9wU3RyaW5nID0gYXJyWzBdO1xuICAgICAgICByaWdodFN0cmluZyA9IGxlZnRTdHJpbmcgPSBhcnJbMV07XG4gICAgICAgIGJvdHRvbVN0cmluZyA9IGFyclsyXTtcbiAgICB9XG4gICAgZWxzZSBpZiAoYXJyLmxlbmd0aCA9PT0gNCkge1xuICAgICAgICB0b3BTdHJpbmcgPSBhcnJbMF07XG4gICAgICAgIHJpZ2h0U3RyaW5nID0gYXJyWzFdO1xuICAgICAgICBib3R0b21TdHJpbmcgPSBhcnJbMl07XG4gICAgICAgIGxlZnRTdHJpbmcgPSBhcnJbM107XG4gICAgfVxuICAgIHZhciB0b3AgPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHModG9wU3RyaW5nLCBib3VuZHMuYm90dG9tKTtcbiAgICB2YXIgcmlnaHQgPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoXCIxMDAlXCIsIGJvdW5kcy5yaWdodCkgLSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMocmlnaHRTdHJpbmcsIGJvdW5kcy5yaWdodCk7XG4gICAgdmFyIGJvdHRvbSA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhcIjEwMCVcIiwgYm91bmRzLmJvdHRvbSkgLSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYm90dG9tU3RyaW5nLCBib3VuZHMuYm90dG9tKTtcbiAgICB2YXIgbGVmdCA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhsZWZ0U3RyaW5nLCBib3VuZHMucmlnaHQpO1xuICAgIHJldHVybiBVSUJlemllclBhdGguYmV6aWVyUGF0aFdpdGhSZWN0KENHUmVjdE1ha2UobGVmdCwgdG9wLCByaWdodCAtIGxlZnQsIGJvdHRvbSAtIHRvcCkpLkNHUGF0aDtcbn1cbmZ1bmN0aW9uIGNpcmNsZVBhdGgodmFsdWUsIGJvdW5kcykge1xuICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgvW1xcc10rLyk7XG4gICAgdmFyIHJhZGl1cyA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhhcnJbMF0sIChib3VuZHMucmlnaHQgPiBib3VuZHMuYm90dG9tID8gYm91bmRzLmJvdHRvbSA6IGJvdW5kcy5yaWdodCkgLyAyKTtcbiAgICB2YXIgeSA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhhcnJbMl0sIGJvdW5kcy5ib3R0b20pO1xuICAgIHZhciB4ID0gY3NzVmFsdWVUb0RldmljZUluZGVwZW5kZW50UGl4ZWxzKGFyclszXSwgYm91bmRzLnJpZ2h0KTtcbiAgICByZXR1cm4gVUlCZXppZXJQYXRoLmJlemllclBhdGhXaXRoQXJjQ2VudGVyUmFkaXVzU3RhcnRBbmdsZUVuZEFuZ2xlQ2xvY2t3aXNlKENHUG9pbnRNYWtlKHgsIHkpLCByYWRpdXMsIDAsIDM2MCwgdHJ1ZSkuQ0dQYXRoO1xufVxuZnVuY3Rpb24gZWxsaXBzZVBhdGgodmFsdWUsIGJvdW5kcykge1xuICAgIHZhciBhcnIgPSB2YWx1ZS5zcGxpdCgvW1xcc10rLyk7XG4gICAgdmFyIHJYID0gY3NzVmFsdWVUb0RldmljZUluZGVwZW5kZW50UGl4ZWxzKGFyclswXSwgYm91bmRzLnJpZ2h0KTtcbiAgICB2YXIgclkgPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYXJyWzFdLCBib3VuZHMuYm90dG9tKTtcbiAgICB2YXIgY1ggPSBjc3NWYWx1ZVRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHMoYXJyWzNdLCBib3VuZHMucmlnaHQpO1xuICAgIHZhciBjWSA9IGNzc1ZhbHVlVG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhhcnJbNF0sIGJvdW5kcy5ib3R0b20pO1xuICAgIHZhciBsZWZ0ID0gY1ggLSByWDtcbiAgICB2YXIgdG9wID0gY1kgLSByWTtcbiAgICB2YXIgd2lkdGggPSByWCAqIDI7XG4gICAgdmFyIGhlaWdodCA9IHJZICogMjtcbiAgICByZXR1cm4gVUlCZXppZXJQYXRoLmJlemllclBhdGhXaXRoT3ZhbEluUmVjdChDR1JlY3RNYWtlKGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkpLkNHUGF0aDtcbn1cbmZ1bmN0aW9uIHBvbHlnb25QYXRoKHZhbHVlLCBib3VuZHMpIHtcbiAgICB2YXIgcGF0aCA9IENHUGF0aENyZWF0ZU11dGFibGUoKTtcbiAgICB2YXIgZmlyc3RQb2ludDtcbiAgICB2YXIgYXJyID0gdmFsdWUuc3BsaXQoL1ssXSsvKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgeHkgPSBhcnJbaV0udHJpbSgpLnNwbGl0KC9bXFxzXSsvKTtcbiAgICAgICAgdmFyIHBvaW50ID0ge1xuICAgICAgICAgICAgeDogY3NzVmFsdWVUb0RldmljZUluZGVwZW5kZW50UGl4ZWxzKHh5WzBdLCBib3VuZHMucmlnaHQpLFxuICAgICAgICAgICAgeTogY3NzVmFsdWVUb0RldmljZUluZGVwZW5kZW50UGl4ZWxzKHh5WzFdLCBib3VuZHMuYm90dG9tKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWZpcnN0UG9pbnQpIHtcbiAgICAgICAgICAgIGZpcnN0UG9pbnQgPSBwb2ludDtcbiAgICAgICAgICAgIENHUGF0aE1vdmVUb1BvaW50KHBhdGgsIG51bGwsIHBvaW50LngsIHBvaW50LnkpO1xuICAgICAgICB9XG4gICAgICAgIENHUGF0aEFkZExpbmVUb1BvaW50KHBhdGgsIG51bGwsIHBvaW50LngsIHBvaW50LnkpO1xuICAgIH1cbiAgICBDR1BhdGhBZGRMaW5lVG9Qb2ludChwYXRoLCBudWxsLCBmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgcmV0dXJuIHBhdGg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWNrZ3JvdW5kLmlvcy5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJvcGVydGllc18xID0gcmVxdWlyZShcIi4uL2NvcmUvcHJvcGVydGllc1wiKTtcbnZhciBGb250ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGb250KGZvbnRGYW1pbHksIGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRXZWlnaHQpIHtcbiAgICAgICAgdGhpcy5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICB0aGlzLmZvbnRTdHlsZSA9IGZvbnRTdHlsZTtcbiAgICAgICAgdGhpcy5mb250V2VpZ2h0ID0gZm9udFdlaWdodDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvbnQucHJvdG90eXBlLCBcImlzSXRhbGljXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb250U3R5bGUgPT09IEZvbnRTdHlsZS5JVEFMSUM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb250LnByb3RvdHlwZSwgXCJpc0JvbGRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvbnRXZWlnaHQgPT09IEZvbnRXZWlnaHQuU0VNSV9CT0xEIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5mb250V2VpZ2h0ID09PSBGb250V2VpZ2h0LkJPTEQgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmZvbnRXZWlnaHQgPT09IFwiNzAwXCIgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmZvbnRXZWlnaHQgPT09IEZvbnRXZWlnaHQuRVhUUkFfQk9MRCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuZm9udFdlaWdodCA9PT0gRm9udFdlaWdodC5CTEFDSztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgRm9udC5lcXVhbHMgPSBmdW5jdGlvbiAodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgaWYgKCF2YWx1ZTEgJiYgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2YWx1ZTEgfHwgIXZhbHVlMikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTEuZm9udEZhbWlseSA9PT0gdmFsdWUyLmZvbnRGYW1pbHkgJiZcbiAgICAgICAgICAgIHZhbHVlMS5mb250U2l6ZSA9PT0gdmFsdWUyLmZvbnRTaXplICYmXG4gICAgICAgICAgICB2YWx1ZTEuZm9udFN0eWxlID09PSB2YWx1ZTIuZm9udFN0eWxlICYmXG4gICAgICAgICAgICB2YWx1ZTEuZm9udFdlaWdodCA9PT0gdmFsdWUyLmZvbnRXZWlnaHQ7XG4gICAgfTtcbiAgICBGb250LmRlZmF1bHQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIEZvbnQ7XG59KCkpO1xuZXhwb3J0cy5Gb250ID0gRm9udDtcbnZhciBGb250U3R5bGU7XG4oZnVuY3Rpb24gKEZvbnRTdHlsZSkge1xuICAgIEZvbnRTdHlsZS5OT1JNQUwgPSBcIm5vcm1hbFwiO1xuICAgIEZvbnRTdHlsZS5JVEFMSUMgPSBcIml0YWxpY1wiO1xuICAgIEZvbnRTdHlsZS5pc1ZhbGlkID0gcHJvcGVydGllc18xLm1ha2VWYWxpZGF0b3IoRm9udFN0eWxlLk5PUk1BTCwgRm9udFN0eWxlLklUQUxJQyk7XG4gICAgRm9udFN0eWxlLnBhcnNlID0gcHJvcGVydGllc18xLm1ha2VQYXJzZXIoRm9udFN0eWxlLmlzVmFsaWQpO1xufSkoRm9udFN0eWxlID0gZXhwb3J0cy5Gb250U3R5bGUgfHwgKGV4cG9ydHMuRm9udFN0eWxlID0ge30pKTtcbnZhciBGb250V2VpZ2h0O1xuKGZ1bmN0aW9uIChGb250V2VpZ2h0KSB7XG4gICAgRm9udFdlaWdodC5USElOID0gXCIxMDBcIjtcbiAgICBGb250V2VpZ2h0LkVYVFJBX0xJR0hUID0gXCIyMDBcIjtcbiAgICBGb250V2VpZ2h0LkxJR0hUID0gXCIzMDBcIjtcbiAgICBGb250V2VpZ2h0Lk5PUk1BTCA9IFwibm9ybWFsXCI7XG4gICAgRm9udFdlaWdodC5NRURJVU0gPSBcIjUwMFwiO1xuICAgIEZvbnRXZWlnaHQuU0VNSV9CT0xEID0gXCI2MDBcIjtcbiAgICBGb250V2VpZ2h0LkJPTEQgPSBcImJvbGRcIjtcbiAgICBGb250V2VpZ2h0LkVYVFJBX0JPTEQgPSBcIjgwMFwiO1xuICAgIEZvbnRXZWlnaHQuQkxBQ0sgPSBcIjkwMFwiO1xuICAgIEZvbnRXZWlnaHQuaXNWYWxpZCA9IHByb3BlcnRpZXNfMS5tYWtlVmFsaWRhdG9yKEZvbnRXZWlnaHQuVEhJTiwgRm9udFdlaWdodC5FWFRSQV9MSUdIVCwgRm9udFdlaWdodC5MSUdIVCwgRm9udFdlaWdodC5OT1JNQUwsIFwiNDAwXCIsIEZvbnRXZWlnaHQuTUVESVVNLCBGb250V2VpZ2h0LlNFTUlfQk9MRCwgRm9udFdlaWdodC5CT0xELCBcIjcwMFwiLCBGb250V2VpZ2h0LkVYVFJBX0JPTEQsIEZvbnRXZWlnaHQuQkxBQ0spO1xuICAgIEZvbnRXZWlnaHQucGFyc2UgPSBwcm9wZXJ0aWVzXzEubWFrZVBhcnNlcihGb250V2VpZ2h0LmlzVmFsaWQpO1xufSkoRm9udFdlaWdodCA9IGV4cG9ydHMuRm9udFdlaWdodCB8fCAoZXhwb3J0cy5Gb250V2VpZ2h0ID0ge30pKTtcbmZ1bmN0aW9uIHBhcnNlRm9udEZhbWlseSh2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBuZXcgQXJyYXkoKTtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHZhciBzcGxpdCA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNwbGl0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBzdHIgPSBzcGxpdFtpXS50cmltKCkucmVwbGFjZSgvWydcIl0rL2csIFwiXCIpO1xuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChzdHIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnBhcnNlRm9udEZhbWlseSA9IHBhcnNlRm9udEZhbWlseTtcbnZhciBnZW5lcmljRm9udEZhbWlsaWVzO1xuKGZ1bmN0aW9uIChnZW5lcmljRm9udEZhbWlsaWVzKSB7XG4gICAgZ2VuZXJpY0ZvbnRGYW1pbGllcy5zZXJpZiA9IFwic2VyaWZcIjtcbiAgICBnZW5lcmljRm9udEZhbWlsaWVzLnNhbnNTZXJpZiA9IFwic2Fucy1zZXJpZlwiO1xuICAgIGdlbmVyaWNGb250RmFtaWxpZXMubW9ub3NwYWNlID0gXCJtb25vc3BhY2VcIjtcbiAgICBnZW5lcmljRm9udEZhbWlsaWVzLnN5c3RlbSA9IFwic3lzdGVtXCI7XG59KShnZW5lcmljRm9udEZhbWlsaWVzID0gZXhwb3J0cy5nZW5lcmljRm9udEZhbWlsaWVzIHx8IChleHBvcnRzLmdlbmVyaWNGb250RmFtaWxpZXMgPSB7fSkpO1xudmFyIHN0eWxlcyA9IG5ldyBTZXQoKTtcbltcbiAgICBGb250U3R5bGUuTk9STUFMLFxuICAgIEZvbnRTdHlsZS5JVEFMSUNcbl0uZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpLCBhKSB7IHJldHVybiBzdHlsZXMuYWRkKHZhbCk7IH0pO1xudmFyIHdlaWdodHMgPSBuZXcgU2V0KCk7XG5bXG4gICAgRm9udFdlaWdodC5USElOLFxuICAgIEZvbnRXZWlnaHQuRVhUUkFfTElHSFQsXG4gICAgRm9udFdlaWdodC5MSUdIVCxcbiAgICBGb250V2VpZ2h0Lk5PUk1BTCxcbiAgICBcIjQwMFwiLFxuICAgIEZvbnRXZWlnaHQuTUVESVVNLFxuICAgIEZvbnRXZWlnaHQuU0VNSV9CT0xELFxuICAgIEZvbnRXZWlnaHQuQk9MRCxcbiAgICBcIjcwMFwiLFxuICAgIEZvbnRXZWlnaHQuRVhUUkFfQk9MRCxcbiAgICBGb250V2VpZ2h0LkJMQUNLXG5dLmZvckVhY2goZnVuY3Rpb24gKHZhbCwgaSwgYSkgeyByZXR1cm4gd2VpZ2h0cy5hZGQodmFsKTsgfSk7XG5mdW5jdGlvbiBwYXJzZUZvbnQoZm9udFZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgZm9udFN0eWxlOiBcIm5vcm1hbFwiLFxuICAgICAgICBmb250VmFyaWFudDogXCJub3JtYWxcIixcbiAgICAgICAgZm9udFdlaWdodDogXCJub3JtYWxcIlxuICAgIH07XG4gICAgdmFyIHBhcnRzID0gZm9udFZhbHVlLnNwbGl0KC9cXHMrLyk7XG4gICAgdmFyIHBhcnQ7XG4gICAgd2hpbGUgKHBhcnQgPSBwYXJ0cy5zaGlmdCgpKSB7XG4gICAgICAgIGlmIChwYXJ0ID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFydCA9PT0gXCJzbWFsbC1jYXBzXCIpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mb250VmFyaWFudCA9IHBhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3R5bGVzLmhhcyhwYXJ0KSkge1xuICAgICAgICAgICAgcmVzdWx0LmZvbnRTdHlsZSA9IHBhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2VpZ2h0cy5oYXMocGFydCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mb250V2VpZ2h0ID0gcGFydDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcmVzdWx0LmZvbnRTaXplKSB7XG4gICAgICAgICAgICB2YXIgc2l6ZXMgPSBwYXJ0LnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgIHJlc3VsdC5mb250U2l6ZSA9IHNpemVzWzBdO1xuICAgICAgICAgICAgcmVzdWx0LmxpbmVIZWlnaHQgPSBzaXplcy5sZW5ndGggPiAxID8gc2l6ZXNbMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQuZm9udEZhbWlseSA9IHBhcnQ7XG4gICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LmZvbnRGYW1pbHkgKz0gXCIgXCIgKyBwYXJ0cy5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLnBhcnNlRm9udCA9IHBhcnNlRm9udDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvbnQtY29tbW9uLmpzLm1hcCIsImZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZm9udF9jb21tb25fMSA9IHJlcXVpcmUoXCIuL2ZvbnQtY29tbW9uXCIpO1xudmFyIHRyYWNlXzEgPSByZXF1aXJlKFwiLi4vLi4vdHJhY2VcIik7XG52YXIgcGxhdGZvcm1fMSA9IHJlcXVpcmUoXCIuLi8uLi9wbGF0Zm9ybVwiKTtcbnZhciBmcyA9IHJlcXVpcmUoXCIuLi8uLi9maWxlLXN5c3RlbVwiKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL2ZvbnQtY29tbW9uXCIpKTtcbnZhciBFTVVMQVRFX09CTElRVUUgPSB0cnVlO1xudmFyIE9CTElRVUVfVFJBTlNGT1JNID0gQ0dBZmZpbmVUcmFuc2Zvcm1NYWtlKDEsIDAsIDAuMiwgMSwgMCwgMCk7XG52YXIgREVGQVVMVF9TRVJJRiA9IFwiVGltZXMgTmV3IFJvbWFuXCI7XG52YXIgREVGQVVMVF9NT05PU1BBQ0UgPSBcIkNvdXJpZXIgTmV3XCI7XG52YXIgU1VQUE9SVF9GT05UX1dFSUdIVFMgPSBwYXJzZUZsb2F0KHBsYXRmb3JtXzEuZGV2aWNlLm9zVmVyc2lvbikgPj0gMTAuMDtcbnZhciBGb250ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoRm9udCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBGb250KGZhbWlseSwgc2l6ZSwgc3R5bGUsIHdlaWdodCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZmFtaWx5LCBzaXplLCBzdHlsZSwgd2VpZ2h0KSB8fCB0aGlzO1xuICAgIH1cbiAgICBGb250LnByb3RvdHlwZS53aXRoRm9udEZhbWlseSA9IGZ1bmN0aW9uIChmYW1pbHkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb250KGZhbWlseSwgdGhpcy5mb250U2l6ZSwgdGhpcy5mb250U3R5bGUsIHRoaXMuZm9udFdlaWdodCk7XG4gICAgfTtcbiAgICBGb250LnByb3RvdHlwZS53aXRoRm9udFN0eWxlID0gZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9udCh0aGlzLmZvbnRGYW1pbHksIHRoaXMuZm9udFNpemUsIHN0eWxlLCB0aGlzLmZvbnRXZWlnaHQpO1xuICAgIH07XG4gICAgRm9udC5wcm90b3R5cGUud2l0aEZvbnRXZWlnaHQgPSBmdW5jdGlvbiAod2VpZ2h0KSB7XG4gICAgICAgIHJldHVybiBuZXcgRm9udCh0aGlzLmZvbnRGYW1pbHksIHRoaXMuZm9udFNpemUsIHRoaXMuZm9udFN0eWxlLCB3ZWlnaHQpO1xuICAgIH07XG4gICAgRm9udC5wcm90b3R5cGUud2l0aEZvbnRTaXplID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb250KHRoaXMuZm9udEZhbWlseSwgc2l6ZSwgdGhpcy5mb250U3R5bGUsIHRoaXMuZm9udFdlaWdodCk7XG4gICAgfTtcbiAgICBGb250LnByb3RvdHlwZS5nZXRVSUZvbnQgPSBmdW5jdGlvbiAoZGVmYXVsdEZvbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl91aUZvbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3VpRm9udCA9IGNyZWF0ZVVJRm9udCh0aGlzLCBkZWZhdWx0Rm9udCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3VpRm9udDtcbiAgICB9O1xuICAgIEZvbnQucHJvdG90eXBlLmdldEFuZHJvaWRUeXBlZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEZvbnQuZGVmYXVsdCA9IG5ldyBGb250KHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmb250X2NvbW1vbl8xLkZvbnRTdHlsZS5OT1JNQUwsIGZvbnRfY29tbW9uXzEuRm9udFdlaWdodC5OT1JNQUwpO1xuICAgIHJldHVybiBGb250O1xufShmb250X2NvbW1vbl8xLkZvbnQpKTtcbmV4cG9ydHMuRm9udCA9IEZvbnQ7XG5mdW5jdGlvbiBnZXRGb250RmFtaWx5UmVzcGVjdGluZ0dlbmVyaWNGb250cyhmb250RmFtaWx5KSB7XG4gICAgaWYgKCFmb250RmFtaWx5KSB7XG4gICAgICAgIHJldHVybiBmb250RmFtaWx5O1xuICAgIH1cbiAgICBzd2l0Y2ggKGZvbnRGYW1pbHkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlIGZvbnRfY29tbW9uXzEuZ2VuZXJpY0ZvbnRGYW1pbGllcy5zZXJpZjpcbiAgICAgICAgICAgIHJldHVybiBERUZBVUxUX1NFUklGO1xuICAgICAgICBjYXNlIGZvbnRfY29tbW9uXzEuZ2VuZXJpY0ZvbnRGYW1pbGllcy5tb25vc3BhY2U6XG4gICAgICAgICAgICByZXR1cm4gREVGQVVMVF9NT05PU1BBQ0U7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZm9udEZhbWlseTtcbiAgICB9XG59XG5mdW5jdGlvbiBzaG91bGRVc2VTeXN0ZW1Gb250KGZvbnRGYW1pbHkpIHtcbiAgICByZXR1cm4gIWZvbnRGYW1pbHkgfHxcbiAgICAgICAgZm9udEZhbWlseSA9PT0gZm9udF9jb21tb25fMS5nZW5lcmljRm9udEZhbWlsaWVzLnNhbnNTZXJpZiB8fFxuICAgICAgICBmb250RmFtaWx5ID09PSBmb250X2NvbW1vbl8xLmdlbmVyaWNGb250RmFtaWxpZXMuc3lzdGVtO1xufVxuZnVuY3Rpb24gZ2V0TmF0aXZlRm9udFdlaWdodChmb250V2VpZ2h0KSB7XG4gICAgc3dpdGNoIChmb250V2VpZ2h0KSB7XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0LlRISU46XG4gICAgICAgICAgICByZXR1cm4gVUlGb250V2VpZ2h0VWx0cmFMaWdodDtcbiAgICAgICAgY2FzZSBmb250X2NvbW1vbl8xLkZvbnRXZWlnaHQuRVhUUkFfTElHSFQ6XG4gICAgICAgICAgICByZXR1cm4gVUlGb250V2VpZ2h0VGhpbjtcbiAgICAgICAgY2FzZSBmb250X2NvbW1vbl8xLkZvbnRXZWlnaHQuTElHSFQ6XG4gICAgICAgICAgICByZXR1cm4gVUlGb250V2VpZ2h0TGlnaHQ7XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0Lk5PUk1BTDpcbiAgICAgICAgY2FzZSBcIjQwMFwiOlxuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgY2FzZSBudWxsOlxuICAgICAgICAgICAgcmV0dXJuIFVJRm9udFdlaWdodFJlZ3VsYXI7XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0Lk1FRElVTTpcbiAgICAgICAgICAgIHJldHVybiBVSUZvbnRXZWlnaHRNZWRpdW07XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0LlNFTUlfQk9MRDpcbiAgICAgICAgICAgIHJldHVybiBVSUZvbnRXZWlnaHRTZW1pYm9sZDtcbiAgICAgICAgY2FzZSBmb250X2NvbW1vbl8xLkZvbnRXZWlnaHQuQk9MRDpcbiAgICAgICAgY2FzZSBcIjcwMFwiOlxuICAgICAgICAgICAgcmV0dXJuIFVJRm9udFdlaWdodEJvbGQ7XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0LkVYVFJBX0JPTEQ6XG4gICAgICAgICAgICByZXR1cm4gVUlGb250V2VpZ2h0SGVhdnk7XG4gICAgICAgIGNhc2UgZm9udF9jb21tb25fMS5Gb250V2VpZ2h0LkJMQUNLOlxuICAgICAgICAgICAgcmV0dXJuIFVJRm9udFdlaWdodEJsYWNrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBmb250IHdlaWdodDogXFxcIlwiICsgZm9udFdlaWdodCArIFwiXFxcIlwiKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTeXN0ZW1Gb250KHNpemUsIG5hdGl2ZVdlaWdodCwgaXRhbGljLCBzeW1ib2xpY1RyYWl0cykge1xuICAgIHZhciByZXN1bHQgPSBVSUZvbnQuc3lzdGVtRm9udE9mU2l6ZVdlaWdodChzaXplLCBuYXRpdmVXZWlnaHQpO1xuICAgIGlmIChpdGFsaWMpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSByZXN1bHQuZm9udERlc2NyaXB0b3IuZm9udERlc2NyaXB0b3JXaXRoU3ltYm9saWNUcmFpdHMoc3ltYm9saWNUcmFpdHMpO1xuICAgICAgICByZXN1bHQgPSBVSUZvbnQuZm9udFdpdGhEZXNjcmlwdG9yU2l6ZShkZXNjcmlwdG9yLCBzaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVVJRm9udChmb250LCBkZWZhdWx0Rm9udCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgc2l6ZSA9IGZvbnQuZm9udFNpemUgfHwgZGVmYXVsdEZvbnQucG9pbnRTaXplO1xuICAgIHZhciBuYXRpdmVXZWlnaHQgPSBnZXROYXRpdmVGb250V2VpZ2h0KGZvbnQuZm9udFdlaWdodCk7XG4gICAgdmFyIGZvbnRGYW1pbGllcyA9IGZvbnRfY29tbW9uXzEucGFyc2VGb250RmFtaWx5KGZvbnQuZm9udEZhbWlseSk7XG4gICAgdmFyIHN5bWJvbGljVHJhaXRzID0gMDtcbiAgICBpZiAoZm9udC5pc0JvbGQpIHtcbiAgICAgICAgc3ltYm9saWNUcmFpdHMgfD0gMjtcbiAgICB9XG4gICAgaWYgKGZvbnQuaXNJdGFsaWMpIHtcbiAgICAgICAgc3ltYm9saWNUcmFpdHMgfD0gMTtcbiAgICB9XG4gICAgdmFyIGZvbnREZXNjcmlwdG9yVHJhaXRzID0gKF9hID0ge30sXG4gICAgICAgIF9hW1VJRm9udFN5bWJvbGljVHJhaXRdID0gc3ltYm9saWNUcmFpdHMsXG4gICAgICAgIF9hKTtcbiAgICBpZiAoU1VQUE9SVF9GT05UX1dFSUdIVFMpIHtcbiAgICAgICAgZm9udERlc2NyaXB0b3JUcmFpdHNbVUlGb250V2VpZ2h0VHJhaXRdID0gbmF0aXZlV2VpZ2h0O1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZvbnRGYW1pbGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZm9udEZhbWlseSA9IGdldEZvbnRGYW1pbHlSZXNwZWN0aW5nR2VuZXJpY0ZvbnRzKGZvbnRGYW1pbGllc1tpXSk7XG4gICAgICAgIGlmIChzaG91bGRVc2VTeXN0ZW1Gb250KGZvbnRGYW1pbHkpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBnZXRTeXN0ZW1Gb250KHNpemUsIG5hdGl2ZVdlaWdodCwgZm9udC5pc0l0YWxpYywgc3ltYm9saWNUcmFpdHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm9udEF0dHJpYnV0ZXMgPSAoX2IgPSB7fSxcbiAgICAgICAgICAgICAgICBfYltVSUZvbnREZXNjcmlwdG9yRmFtaWx5QXR0cmlidXRlXSA9IGZvbnRGYW1pbHksXG4gICAgICAgICAgICAgICAgX2JbVUlGb250RGVzY3JpcHRvclRyYWl0c0F0dHJpYnV0ZV0gPSBmb250RGVzY3JpcHRvclRyYWl0cyxcbiAgICAgICAgICAgICAgICBfYik7XG4gICAgICAgICAgICB2YXIgZGVzY3JpcHRvciA9IFVJRm9udERlc2NyaXB0b3IuZm9udERlc2NyaXB0b3JXaXRoRm9udEF0dHJpYnV0ZXMoZm9udEF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgcmVzdWx0ID0gVUlGb250LmZvbnRXaXRoRGVzY3JpcHRvclNpemUoZGVzY3JpcHRvciwgc2l6ZSk7XG4gICAgICAgICAgICB2YXIgYWN0dWFsSXRhbGljID0gcmVzdWx0LmZvbnREZXNjcmlwdG9yLnN5bWJvbGljVHJhaXRzICYgMTtcbiAgICAgICAgICAgIGlmIChmb250LmlzSXRhbGljICYmICFhY3R1YWxJdGFsaWMgJiYgRU1VTEFURV9PQkxJUVVFKSB7XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3IuZm9udERlc2NyaXB0b3JXaXRoTWF0cml4KE9CTElRVUVfVFJBTlNGT1JNKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBVSUZvbnQuZm9udFdpdGhEZXNjcmlwdG9yU2l6ZShkZXNjcmlwdG9yLCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZmFtaWx5TmFtZSA9PT0gZm9udEZhbWlseSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSBnZXRTeXN0ZW1Gb250KHNpemUsIG5hdGl2ZVdlaWdodCwgZm9udC5pc0l0YWxpYywgc3ltYm9saWNUcmFpdHMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxudmFyIGlvcztcbihmdW5jdGlvbiAoaW9zKSB7XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJGb250KGZvbnRGaWxlKSB7XG4gICAgICAgIHZhciBmaWxlUGF0aCA9IGZzLnBhdGguam9pbihmcy5rbm93bkZvbGRlcnMuY3VycmVudEFwcCgpLnBhdGgsIFwiZm9udHNcIiwgZm9udEZpbGUpO1xuICAgICAgICBpZiAoIWZzLkZpbGUuZXhpc3RzKGZpbGVQYXRoKSkge1xuICAgICAgICAgICAgZmlsZVBhdGggPSBmcy5wYXRoLmpvaW4oZnMua25vd25Gb2xkZXJzLmN1cnJlbnRBcHAoKS5wYXRoLCBmb250RmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZvbnREYXRhID0gTlNGaWxlTWFuYWdlci5kZWZhdWx0TWFuYWdlci5jb250ZW50c0F0UGF0aChmaWxlUGF0aCk7XG4gICAgICAgIGlmICghZm9udERhdGEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBsb2FkIGZvbnQgZnJvbTogXCIgKyBmb250RmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3ZpZGVyID0gQ0dEYXRhUHJvdmlkZXJDcmVhdGVXaXRoQ0ZEYXRhKGZvbnREYXRhKTtcbiAgICAgICAgdmFyIGZvbnQgPSBDR0ZvbnRDcmVhdGVXaXRoRGF0YVByb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICAgICAgaWYgKCFmb250KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgbG9hZCBmb250IGZyb206IFwiICsgZm9udEZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvciA9IG5ldyBpbnRlcm9wLlJlZmVyZW5jZSgpO1xuICAgICAgICBpZiAoIUNURm9udE1hbmFnZXJSZWdpc3RlckdyYXBoaWNzRm9udChmb250LCBlcnJvcikpIHtcbiAgICAgICAgICAgIGlmICh0cmFjZV8xLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgdHJhY2VfMS53cml0ZShcIkVycm9yIG9jY3VyIHdoaWxlIHJlZ2lzdGVyaW5nIGZvbnQ6IFwiICsgQ0ZFcnJvckNvcHlEZXNjcmlwdGlvbihlcnJvci52YWx1ZSksIHRyYWNlXzEuY2F0ZWdvcmllcy5FcnJvciwgdHJhY2VfMS5tZXNzYWdlVHlwZS5lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW9zLnJlZ2lzdGVyRm9udCA9IHJlZ2lzdGVyRm9udDtcbn0pKGlvcyA9IGV4cG9ydHMuaW9zIHx8IChleHBvcnRzLmlvcyA9IHt9KSk7XG5mdW5jdGlvbiByZWdpc3RlckZvbnRzSW5Gb2xkZXIoZm9udHNGb2xkZXJQYXRoKSB7XG4gICAgdmFyIGZvbnRzRm9sZGVyID0gZnMuRm9sZGVyLmZyb21QYXRoKGZvbnRzRm9sZGVyUGF0aCk7XG4gICAgZm9udHNGb2xkZXIuZWFjaEVudGl0eShmdW5jdGlvbiAoZmlsZUVudGl0eSkge1xuICAgICAgICBpZiAoZnMuRm9sZGVyLmV4aXN0cyhmcy5wYXRoLmpvaW4oZm9udHNGb2xkZXJQYXRoLCBmaWxlRW50aXR5Lm5hbWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpbGVFbnRpdHkgaW5zdGFuY2VvZiBmcy5GaWxlICYmXG4gICAgICAgICAgICAoZmlsZUVudGl0eS5leHRlbnNpb24gPT09IFwiLnR0ZlwiIHx8IGZpbGVFbnRpdHkuZXh0ZW5zaW9uID09PSBcIi5vdGZcIikpIHtcbiAgICAgICAgICAgIGlvcy5yZWdpc3RlckZvbnQoZmlsZUVudGl0eS5uYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyQ3VzdG9tRm9udHMoKSB7XG4gICAgdmFyIGFwcERpciA9IGZzLmtub3duRm9sZGVycy5jdXJyZW50QXBwKCkucGF0aDtcbiAgICB2YXIgZm9udHNEaXIgPSBmcy5wYXRoLmpvaW4oYXBwRGlyLCBcImZvbnRzXCIpO1xuICAgIGlmIChmcy5Gb2xkZXIuZXhpc3RzKGZvbnRzRGlyKSkge1xuICAgICAgICByZWdpc3RlckZvbnRzSW5Gb2xkZXIoZm9udHNEaXIpO1xuICAgIH1cbn1cbnJlZ2lzdGVyQ3VzdG9tRm9udHMoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvbnQuaW9zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbG9yXCIpO1xudmFyIExpbmVhckdyYWRpZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaW5lYXJHcmFkaWVudCgpIHtcbiAgICB9XG4gICAgTGluZWFyR3JhZGllbnQucGFyc2UgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBMaW5lYXJHcmFkaWVudCgpO1xuICAgICAgICByZXN1bHQuYW5nbGUgPSB2YWx1ZS5hbmdsZTtcbiAgICAgICAgcmVzdWx0LmNvbG9yU3RvcHMgPSB2YWx1ZS5jb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IGNvbG9yLm9mZnNldCB8fCBudWxsO1xuICAgICAgICAgICAgdmFyIG9mZnNldFVuaXQ7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ICYmIG9mZnNldC51bml0ID09PSBcIiVcIikge1xuICAgICAgICAgICAgICAgIG9mZnNldFVuaXQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQ6IFwiJVwiLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogb2Zmc2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG5ldyBjb2xvcl8xLkNvbG9yKGNvbG9yLmFyZ2IpLFxuICAgICAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0VW5pdFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBMaW5lYXJHcmFkaWVudC5lcXVhbHMgPSBmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICBpZiAoIWZpcnN0ICYmICFzZWNvbmQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFmaXJzdCB8fCAhc2Vjb25kKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0LmFuZ2xlICE9PSBzZWNvbmQuYW5nbGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmlyc3QuY29sb3JTdG9wcy5sZW5ndGggIT09IHNlY29uZC5jb2xvclN0b3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlyc3QuY29sb3JTdG9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGZpcnN0U3RvcCA9IGZpcnN0LmNvbG9yU3RvcHNbaV07XG4gICAgICAgICAgICB2YXIgc2Vjb25kU3RvcCA9IHNlY29uZC5jb2xvclN0b3BzW2ldO1xuICAgICAgICAgICAgaWYgKGZpcnN0U3RvcC5vZmZzZXQgIT09IHNlY29uZFN0b3Aub2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjb2xvcl8xLkNvbG9yLmVxdWFscyhmaXJzdFN0b3AuY29sb3IsIHNlY29uZFN0b3AuY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIExpbmVhckdyYWRpZW50O1xufSgpKTtcbmV4cG9ydHMuTGluZWFyR3JhZGllbnQgPSBMaW5lYXJHcmFkaWVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbmVhci1ncmFkaWVudC5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgcHJvcGVydGllc18xID0gcmVxdWlyZShcIi4uL2NvcmUvcHJvcGVydGllc1wiKTtcbnZhciBjb2xvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbG9yXCIpO1xudmFyIGZvbnRfMSA9IHJlcXVpcmUoXCIuLi8uLi91aS9zdHlsaW5nL2ZvbnRcIik7XG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuLi8uLi91dGlscy91dGlsc1wiKTtcbnZhciBiYWNrZ3JvdW5kXzEgPSByZXF1aXJlKFwiLi4vLi4vdWkvc3R5bGluZy9iYWNrZ3JvdW5kXCIpO1xudmFyIHBsYXRmb3JtXzEgPSByZXF1aXJlKFwiLi4vLi4vcGxhdGZvcm1cIik7XG52YXIgbnVtYmVyX3V0aWxzXzEgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHMvbnVtYmVyLXV0aWxzXCIpO1xudmFyIG1hdHJpeF8xID0gcmVxdWlyZShcIi4uLy4uL21hdHJpeFwiKTtcbnZhciB0cmFjZV8xID0gcmVxdWlyZShcIi4uLy4uL3RyYWNlXCIpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoXCIuLi8uLi9jc3MvcGFyc2VyXCIpO1xudmFyIGxpbmVhcl9ncmFkaWVudF8xID0gcmVxdWlyZShcIi4vbGluZWFyLWdyYWRpZW50XCIpO1xuZnVuY3Rpb24gZXF1YWxzQ29tbW9uKGEsIGIpIHtcbiAgICBpZiAoYSA9PSBcImF1dG9cIikge1xuICAgICAgICByZXR1cm4gYiA9PSBcImF1dG9cIjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGlmIChiID09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYSA9PSBiO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiLnVuaXQgPT0gXCJkaXBcIiAmJiBhID09IGIudmFsdWU7XG4gICAgfVxuICAgIGlmIChiID09IFwiYXV0b1wiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBhID8gKGEudW5pdCA9PSBcImRpcFwiICYmIGEudmFsdWUgPT0gYikgOiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFhIHx8ICFiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGEudmFsdWUgPT0gYi52YWx1ZSAmJiBhLnVuaXQgPT0gYi51bml0O1xufVxuZnVuY3Rpb24gY29udmVydFRvU3RyaW5nQ29tbW9uKGxlbmd0aCkge1xuICAgIGlmIChsZW5ndGggPT0gXCJhdXRvXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiYXV0b1wiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHZhciB2YWwgPSBsZW5ndGgudmFsdWU7XG4gICAgaWYgKGxlbmd0aC51bml0ID09PSBcIiVcIikge1xuICAgICAgICB2YWwgKj0gMTAwO1xuICAgIH1cbiAgICByZXR1cm4gdmFsICsgbGVuZ3RoLnVuaXQ7XG59XG5mdW5jdGlvbiB0b0RldmljZVBpeGVsc0NvbW1vbihsZW5ndGgsIGF1dG8sIHBhcmVudEF2YWlsYWJsZVdpZHRoKSB7XG4gICAgaWYgKGF1dG8gPT09IHZvaWQgMCkgeyBhdXRvID0gTnVtYmVyLk5hTjsgfVxuICAgIGlmIChwYXJlbnRBdmFpbGFibGVXaWR0aCA9PT0gdm9pZCAwKSB7IHBhcmVudEF2YWlsYWJsZVdpZHRoID0gTnVtYmVyLk5hTjsgfVxuICAgIGlmIChsZW5ndGggPT0gXCJhdXRvXCIpIHtcbiAgICAgICAgcmV0dXJuIGF1dG87XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB1dGlsc18xLmxheW91dC5yb3VuZCh1dGlsc18xLmxheW91dC50b0RldmljZVBpeGVscyhsZW5ndGgpKTtcbiAgICB9XG4gICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGF1dG87XG4gICAgfVxuICAgIHN3aXRjaCAobGVuZ3RoLnVuaXQpIHtcbiAgICAgICAgY2FzZSBcInB4XCI6XG4gICAgICAgICAgICByZXR1cm4gdXRpbHNfMS5sYXlvdXQucm91bmQobGVuZ3RoLnZhbHVlKTtcbiAgICAgICAgY2FzZSBcIiVcIjpcbiAgICAgICAgICAgIHJldHVybiB1dGlsc18xLmxheW91dC5yb3VuZChwYXJlbnRBdmFpbGFibGVXaWR0aCAqIGxlbmd0aC52YWx1ZSk7XG4gICAgICAgIGNhc2UgXCJkaXBcIjpcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB1dGlsc18xLmxheW91dC5yb3VuZCh1dGlsc18xLmxheW91dC50b0RldmljZVBpeGVscyhsZW5ndGgudmFsdWUpKTtcbiAgICB9XG59XG52YXIgUGVyY2VudExlbmd0aDtcbihmdW5jdGlvbiAoUGVyY2VudExlbmd0aCkge1xuICAgIGZ1bmN0aW9uIHBhcnNlKGZyb21WYWx1ZSkge1xuICAgICAgICBpZiAoZnJvbVZhbHVlID09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IGZyb21WYWx1ZS50cmltKCk7XG4gICAgICAgICAgICB2YXIgcGVyY2VudEluZGV4ID0gc3RyaW5nVmFsdWUuaW5kZXhPZihcIiVcIik7XG4gICAgICAgICAgICBpZiAocGVyY2VudEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBpZiAocGVyY2VudEluZGV4ICE9PSAoc3RyaW5nVmFsdWUubGVuZ3RoIC0gMSkgfHwgcGVyY2VudEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gTnVtYmVyLk5hTjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdChzdHJpbmdWYWx1ZS5zdWJzdHJpbmcoMCwgc3RyaW5nVmFsdWUubGVuZ3RoIC0gMSkudHJpbSgpKSAvIDEwMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWU6IFwiICsgZnJvbVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdW5pdDogXCIlXCIsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc3RyaW5nVmFsdWUuaW5kZXhPZihcInB4XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlID0gc3RyaW5nVmFsdWUucmVwbGFjZShcInB4XCIsIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHN0cmluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZTogXCIgKyBmcm9tVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4geyB1bml0OiBcInB4XCIsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VGbG9hdChzdHJpbmdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWU6IFwiICsgZnJvbVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21WYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBQZXJjZW50TGVuZ3RoLnBhcnNlID0gcGFyc2U7XG4gICAgUGVyY2VudExlbmd0aC5lcXVhbHMgPSBlcXVhbHNDb21tb247XG4gICAgUGVyY2VudExlbmd0aC50b0RldmljZVBpeGVscyA9IHRvRGV2aWNlUGl4ZWxzQ29tbW9uO1xuICAgIFBlcmNlbnRMZW5ndGguY29udmVydFRvU3RyaW5nID0gY29udmVydFRvU3RyaW5nQ29tbW9uO1xufSkoUGVyY2VudExlbmd0aCA9IGV4cG9ydHMuUGVyY2VudExlbmd0aCB8fCAoZXhwb3J0cy5QZXJjZW50TGVuZ3RoID0ge30pKTtcbnZhciBMZW5ndGg7XG4oZnVuY3Rpb24gKExlbmd0aCkge1xuICAgIGZ1bmN0aW9uIHBhcnNlKGZyb21WYWx1ZSkge1xuICAgICAgICBpZiAoZnJvbVZhbHVlID09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJhdXRvXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBmcm9tVmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IGZyb21WYWx1ZS50cmltKCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nVmFsdWUuaW5kZXhPZihcInB4XCIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHN0cmluZ1ZhbHVlID0gc3RyaW5nVmFsdWUucmVwbGFjZShcInB4XCIsIFwiXCIpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHN0cmluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZTogXCIgKyBzdHJpbmdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IHVuaXQ6IFwicHhcIiwgdmFsdWU6IHZhbHVlIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUZsb2F0KHN0cmluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4odmFsdWUpIHx8ICFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCB2YWx1ZTogXCIgKyBzdHJpbmdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgTGVuZ3RoLnBhcnNlID0gcGFyc2U7XG4gICAgTGVuZ3RoLmVxdWFscyA9IGVxdWFsc0NvbW1vbjtcbiAgICBMZW5ndGgudG9EZXZpY2VQaXhlbHMgPSB0b0RldmljZVBpeGVsc0NvbW1vbjtcbiAgICBMZW5ndGguY29udmVydFRvU3RyaW5nID0gY29udmVydFRvU3RyaW5nQ29tbW9uO1xufSkoTGVuZ3RoID0gZXhwb3J0cy5MZW5ndGggfHwgKGV4cG9ydHMuTGVuZ3RoID0ge30pKTtcbmV4cG9ydHMuemVyb0xlbmd0aCA9IHsgdmFsdWU6IDAsIHVuaXQ6IFwicHhcIiB9O1xuZXhwb3J0cy5taW5XaWR0aFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJtaW5XaWR0aFwiLCBjc3NOYW1lOiBcIm1pbi13aWR0aFwiLCBkZWZhdWx0VmFsdWU6IGV4cG9ydHMuemVyb0xlbmd0aCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgZXF1YWxpdHlDb21wYXJlcjogTGVuZ3RoLmVxdWFscyxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVNaW5XaWR0aCA9IExlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFjZV8xLndyaXRlKG5ld1ZhbHVlICsgXCIgbm90IHNldCB0byB2aWV3J3MgcHJvcGVydHkgYmVjYXVzZSBcXFwiLnZpZXdSZWZcXFwiIGlzIGNsZWFyZWRcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLlN0eWxlLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLndhcm4pO1xuICAgICAgICB9XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IExlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLm1pbldpZHRoUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMubWluSGVpZ2h0UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcIm1pbkhlaWdodFwiLCBjc3NOYW1lOiBcIm1pbi1oZWlnaHRcIiwgZGVmYXVsdFZhbHVlOiBleHBvcnRzLnplcm9MZW5ndGgsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0YXJnZXQudmlld1JlZi5nZXQoKTtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuZWZmZWN0aXZlTWluSGVpZ2h0ID0gTGVuZ3RoLnRvRGV2aWNlUGl4ZWxzKG5ld1ZhbHVlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUobmV3VmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcncyBwcm9wZXJ0eSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgIH1cbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogTGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMubWluSGVpZ2h0UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMud2lkdGhQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzQW5pbWF0aW9uUHJvcGVydHkoe1xuICAgIG5hbWU6IFwid2lkdGhcIiwgY3NzTmFtZTogXCJ3aWR0aFwiLCBkZWZhdWx0VmFsdWU6IFwiYXV0b1wiLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChwbGF0Zm9ybV8xLmlzSU9TKSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICB2aWV3LnJlcXVlc3RMYXlvdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHZhbHVlQ29udmVydGVyOiBQZXJjZW50TGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMud2lkdGhQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5oZWlnaHRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzQW5pbWF0aW9uUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiaGVpZ2h0XCIsIGNzc05hbWU6IFwiaGVpZ2h0XCIsIGRlZmF1bHRWYWx1ZTogXCJhdXRvXCIsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKHBsYXRmb3JtXzEuaXNJT1MpIHtcbiAgICAgICAgICAgIHZhciB2aWV3ID0gdGFyZ2V0LnZpZXdSZWYuZ2V0KCk7XG4gICAgICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgICAgIHZpZXcucmVxdWVzdExheW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IFBlcmNlbnRMZW5ndGgucGFyc2UsXG59KTtcbmV4cG9ydHMuaGVpZ2h0UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbnZhciBtYXJnaW5Qcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuU2hvcnRoYW5kUHJvcGVydHkoe1xuICAgIG5hbWU6IFwibWFyZ2luXCIsIGNzc05hbWU6IFwibWFyZ2luXCIsXG4gICAgZ2V0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChQZXJjZW50TGVuZ3RoLmVxdWFscyh0aGlzLm1hcmdpblRvcCwgdGhpcy5tYXJnaW5SaWdodCkgJiZcbiAgICAgICAgICAgIFBlcmNlbnRMZW5ndGguZXF1YWxzKHRoaXMubWFyZ2luVG9wLCB0aGlzLm1hcmdpbkJvdHRvbSkgJiZcbiAgICAgICAgICAgIFBlcmNlbnRMZW5ndGguZXF1YWxzKHRoaXMubWFyZ2luVG9wLCB0aGlzLm1hcmdpbkxlZnQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXJnaW5Ub3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFBlcmNlbnRMZW5ndGguY29udmVydFRvU3RyaW5nKHRoaXMubWFyZ2luVG9wKSArIFwiIFwiICsgUGVyY2VudExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5tYXJnaW5SaWdodCkgKyBcIiBcIiArIFBlcmNlbnRMZW5ndGguY29udmVydFRvU3RyaW5nKHRoaXMubWFyZ2luQm90dG9tKSArIFwiIFwiICsgUGVyY2VudExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5tYXJnaW5MZWZ0KTtcbiAgICB9LFxuICAgIGNvbnZlcnRlcjogY29udmVydFRvTWFyZ2luc1xufSk7XG5tYXJnaW5Qcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5tYXJnaW5MZWZ0UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHsgbmFtZTogXCJtYXJnaW5MZWZ0XCIsIGNzc05hbWU6IFwibWFyZ2luLWxlZnRcIiwgZGVmYXVsdFZhbHVlOiBleHBvcnRzLnplcm9MZW5ndGgsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsIHZhbHVlQ29udmVydGVyOiBQZXJjZW50TGVuZ3RoLnBhcnNlIH0pO1xuZXhwb3J0cy5tYXJnaW5MZWZ0UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMubWFyZ2luUmlnaHRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcIm1hcmdpblJpZ2h0XCIsIGNzc05hbWU6IFwibWFyZ2luLXJpZ2h0XCIsIGRlZmF1bHRWYWx1ZTogZXhwb3J0cy56ZXJvTGVuZ3RoLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLCB2YWx1ZUNvbnZlcnRlcjogUGVyY2VudExlbmd0aC5wYXJzZSB9KTtcbmV4cG9ydHMubWFyZ2luUmlnaHRQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5tYXJnaW5Ub3BQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcIm1hcmdpblRvcFwiLCBjc3NOYW1lOiBcIm1hcmdpbi10b3BcIiwgZGVmYXVsdFZhbHVlOiBleHBvcnRzLnplcm9MZW5ndGgsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsIHZhbHVlQ29udmVydGVyOiBQZXJjZW50TGVuZ3RoLnBhcnNlIH0pO1xuZXhwb3J0cy5tYXJnaW5Ub3BQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5tYXJnaW5Cb3R0b21Qcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcIm1hcmdpbkJvdHRvbVwiLCBjc3NOYW1lOiBcIm1hcmdpbi1ib3R0b21cIiwgZGVmYXVsdFZhbHVlOiBleHBvcnRzLnplcm9MZW5ndGgsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsIHZhbHVlQ29udmVydGVyOiBQZXJjZW50TGVuZ3RoLnBhcnNlIH0pO1xuZXhwb3J0cy5tYXJnaW5Cb3R0b21Qcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xudmFyIHBhZGRpbmdQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuU2hvcnRoYW5kUHJvcGVydHkoe1xuICAgIG5hbWU6IFwicGFkZGluZ1wiLCBjc3NOYW1lOiBcInBhZGRpbmdcIixcbiAgICBnZXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKExlbmd0aC5lcXVhbHModGhpcy5wYWRkaW5nVG9wLCB0aGlzLnBhZGRpbmdSaWdodCkgJiZcbiAgICAgICAgICAgIExlbmd0aC5lcXVhbHModGhpcy5wYWRkaW5nVG9wLCB0aGlzLnBhZGRpbmdCb3R0b20pICYmXG4gICAgICAgICAgICBMZW5ndGguZXF1YWxzKHRoaXMucGFkZGluZ1RvcCwgdGhpcy5wYWRkaW5nTGVmdCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhZGRpbmdUb3A7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5wYWRkaW5nVG9wKSArIFwiIFwiICsgTGVuZ3RoLmNvbnZlcnRUb1N0cmluZyh0aGlzLnBhZGRpbmdSaWdodCkgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5wYWRkaW5nQm90dG9tKSArIFwiIFwiICsgTGVuZ3RoLmNvbnZlcnRUb1N0cmluZyh0aGlzLnBhZGRpbmdMZWZ0KTtcbiAgICB9LFxuICAgIGNvbnZlcnRlcjogY29udmVydFRvUGFkZGluZ3Ncbn0pO1xucGFkZGluZ1Byb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLnBhZGRpbmdMZWZ0UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcInBhZGRpbmdMZWZ0XCIsIGNzc05hbWU6IFwicGFkZGluZy1sZWZ0XCIsIGRlZmF1bHRWYWx1ZTogZXhwb3J0cy56ZXJvTGVuZ3RoLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGFyZ2V0LnZpZXdSZWYuZ2V0KCk7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LmVmZmVjdGl2ZVBhZGRpbmdMZWZ0ID0gTGVuZ3RoLnRvRGV2aWNlUGl4ZWxzKG5ld1ZhbHVlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUobmV3VmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcncyBwcm9wZXJ0eSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgIH1cbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogTGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMucGFkZGluZ0xlZnRQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5wYWRkaW5nUmlnaHRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwicGFkZGluZ1JpZ2h0XCIsIGNzc05hbWU6IFwicGFkZGluZy1yaWdodFwiLCBkZWZhdWx0VmFsdWU6IGV4cG9ydHMuemVyb0xlbmd0aCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgZXF1YWxpdHlDb21wYXJlcjogTGVuZ3RoLmVxdWFscyxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVQYWRkaW5nUmlnaHQgPSBMZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2VfMS53cml0ZShuZXdWYWx1ZSArIFwiIG5vdCBzZXQgdG8gdmlldydzIHByb3BlcnR5IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5TdHlsZSwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgfVxuICAgIH0sIHZhbHVlQ29udmVydGVyOiBMZW5ndGgucGFyc2Vcbn0pO1xuZXhwb3J0cy5wYWRkaW5nUmlnaHRQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5wYWRkaW5nVG9wUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcInBhZGRpbmdUb3BcIiwgY3NzTmFtZTogXCJwYWRkaW5nLXRvcFwiLCBkZWZhdWx0VmFsdWU6IGV4cG9ydHMuemVyb0xlbmd0aCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgZXF1YWxpdHlDb21wYXJlcjogTGVuZ3RoLmVxdWFscyxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVQYWRkaW5nVG9wID0gTGVuZ3RoLnRvRGV2aWNlUGl4ZWxzKG5ld1ZhbHVlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUobmV3VmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcncyBwcm9wZXJ0eSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgIH1cbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogTGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMucGFkZGluZ1RvcFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLnBhZGRpbmdCb3R0b21Qcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwicGFkZGluZ0JvdHRvbVwiLCBjc3NOYW1lOiBcInBhZGRpbmctYm90dG9tXCIsIGRlZmF1bHRWYWx1ZTogZXhwb3J0cy56ZXJvTGVuZ3RoLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGFyZ2V0LnZpZXdSZWYuZ2V0KCk7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB2aWV3LmVmZmVjdGl2ZVBhZGRpbmdCb3R0b20gPSBMZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2VfMS53cml0ZShuZXdWYWx1ZSArIFwiIG5vdCBzZXQgdG8gdmlldydzIHByb3BlcnR5IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5TdHlsZSwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgfVxuICAgIH0sIHZhbHVlQ29udmVydGVyOiBMZW5ndGgucGFyc2Vcbn0pO1xuZXhwb3J0cy5wYWRkaW5nQm90dG9tUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbnZhciBIb3Jpem9udGFsQWxpZ25tZW50O1xuKGZ1bmN0aW9uIChIb3Jpem9udGFsQWxpZ25tZW50KSB7XG4gICAgSG9yaXpvbnRhbEFsaWdubWVudC5MRUZUID0gXCJsZWZ0XCI7XG4gICAgSG9yaXpvbnRhbEFsaWdubWVudC5DRU5URVIgPSBcImNlbnRlclwiO1xuICAgIEhvcml6b250YWxBbGlnbm1lbnQuUklHSFQgPSBcInJpZ2h0XCI7XG4gICAgSG9yaXpvbnRhbEFsaWdubWVudC5TVFJFVENIID0gXCJzdHJldGNoXCI7XG4gICAgSG9yaXpvbnRhbEFsaWdubWVudC5pc1ZhbGlkID0gcHJvcGVydGllc18xLm1ha2VWYWxpZGF0b3IoSG9yaXpvbnRhbEFsaWdubWVudC5MRUZULCBIb3Jpem9udGFsQWxpZ25tZW50LkNFTlRFUiwgSG9yaXpvbnRhbEFsaWdubWVudC5SSUdIVCwgSG9yaXpvbnRhbEFsaWdubWVudC5TVFJFVENIKTtcbiAgICBIb3Jpem9udGFsQWxpZ25tZW50LnBhcnNlID0gcHJvcGVydGllc18xLm1ha2VQYXJzZXIoSG9yaXpvbnRhbEFsaWdubWVudC5pc1ZhbGlkKTtcbn0pKEhvcml6b250YWxBbGlnbm1lbnQgPSBleHBvcnRzLkhvcml6b250YWxBbGlnbm1lbnQgfHwgKGV4cG9ydHMuSG9yaXpvbnRhbEFsaWdubWVudCA9IHt9KSk7XG5leHBvcnRzLmhvcml6b250YWxBbGlnbm1lbnRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcImhvcml6b250YWxBbGlnbm1lbnRcIiwgY3NzTmFtZTogXCJob3Jpem9udGFsLWFsaWduXCIsIGRlZmF1bHRWYWx1ZTogSG9yaXpvbnRhbEFsaWdubWVudC5TVFJFVENILCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCB2YWx1ZUNvbnZlcnRlcjogSG9yaXpvbnRhbEFsaWdubWVudC5wYXJzZSB9KTtcbmV4cG9ydHMuaG9yaXpvbnRhbEFsaWdubWVudFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG52YXIgVmVydGljYWxBbGlnbm1lbnQ7XG4oZnVuY3Rpb24gKFZlcnRpY2FsQWxpZ25tZW50KSB7XG4gICAgVmVydGljYWxBbGlnbm1lbnQuVE9QID0gXCJ0b3BcIjtcbiAgICBWZXJ0aWNhbEFsaWdubWVudC5NSURETEUgPSBcIm1pZGRsZVwiO1xuICAgIFZlcnRpY2FsQWxpZ25tZW50LkJPVFRPTSA9IFwiYm90dG9tXCI7XG4gICAgVmVydGljYWxBbGlnbm1lbnQuU1RSRVRDSCA9IFwic3RyZXRjaFwiO1xuICAgIFZlcnRpY2FsQWxpZ25tZW50LmlzVmFsaWQgPSBwcm9wZXJ0aWVzXzEubWFrZVZhbGlkYXRvcihWZXJ0aWNhbEFsaWdubWVudC5UT1AsIFZlcnRpY2FsQWxpZ25tZW50Lk1JRERMRSwgVmVydGljYWxBbGlnbm1lbnQuQk9UVE9NLCBWZXJ0aWNhbEFsaWdubWVudC5TVFJFVENIKTtcbiAgICBWZXJ0aWNhbEFsaWdubWVudC5wYXJzZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJjZW50ZXJcIiA/IFZlcnRpY2FsQWxpZ25tZW50Lk1JRERMRSA6IHBhcnNlU3RyaWN0KHZhbHVlKTsgfTtcbiAgICB2YXIgcGFyc2VTdHJpY3QgPSBwcm9wZXJ0aWVzXzEubWFrZVBhcnNlcihWZXJ0aWNhbEFsaWdubWVudC5pc1ZhbGlkKTtcbn0pKFZlcnRpY2FsQWxpZ25tZW50ID0gZXhwb3J0cy5WZXJ0aWNhbEFsaWdubWVudCB8fCAoZXhwb3J0cy5WZXJ0aWNhbEFsaWdubWVudCA9IHt9KSk7XG5leHBvcnRzLnZlcnRpY2FsQWxpZ25tZW50UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHsgbmFtZTogXCJ2ZXJ0aWNhbEFsaWdubWVudFwiLCBjc3NOYW1lOiBcInZlcnRpY2FsLWFsaWduXCIsIGRlZmF1bHRWYWx1ZTogVmVydGljYWxBbGlnbm1lbnQuU1RSRVRDSCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgdmFsdWVDb252ZXJ0ZXI6IFZlcnRpY2FsQWxpZ25tZW50LnBhcnNlIH0pO1xuZXhwb3J0cy52ZXJ0aWNhbEFsaWdubWVudFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5mdW5jdGlvbiBwYXJzZVRoaWNrbmVzcyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIGFyciA9IHZhbHVlLnNwbGl0KC9bICxdKy8pO1xuICAgICAgICB2YXIgdG9wXzE7XG4gICAgICAgIHZhciByaWdodCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGJvdHRvbSA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGxlZnQgPSB2b2lkIDA7XG4gICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0b3BfMSA9IGFyclswXTtcbiAgICAgICAgICAgIHJpZ2h0ID0gYXJyWzBdO1xuICAgICAgICAgICAgYm90dG9tID0gYXJyWzBdO1xuICAgICAgICAgICAgbGVmdCA9IGFyclswXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcnIubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICB0b3BfMSA9IGFyclswXTtcbiAgICAgICAgICAgIGJvdHRvbSA9IGFyclswXTtcbiAgICAgICAgICAgIHJpZ2h0ID0gYXJyWzFdO1xuICAgICAgICAgICAgbGVmdCA9IGFyclsxXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcnIubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICB0b3BfMSA9IGFyclswXTtcbiAgICAgICAgICAgIHJpZ2h0ID0gYXJyWzFdO1xuICAgICAgICAgICAgbGVmdCA9IGFyclsxXTtcbiAgICAgICAgICAgIGJvdHRvbSA9IGFyclsyXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhcnIubGVuZ3RoID09PSA0KSB7XG4gICAgICAgICAgICB0b3BfMSA9IGFyclswXTtcbiAgICAgICAgICAgIHJpZ2h0ID0gYXJyWzFdO1xuICAgICAgICAgICAgYm90dG9tID0gYXJyWzJdO1xuICAgICAgICAgICAgbGVmdCA9IGFyclszXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIDEsIDIsIDMgb3IgNCBwYXJhbWV0ZXJzLiBBY3R1YWw6IFwiICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b3A6IHRvcF8xLFxuICAgICAgICAgICAgcmlnaHQ6IHJpZ2h0LFxuICAgICAgICAgICAgYm90dG9tOiBib3R0b20sXG4gICAgICAgICAgICBsZWZ0OiBsZWZ0XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydFRvTWFyZ2lucyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUgIT09IFwiYXV0b1wiKSB7XG4gICAgICAgIHZhciB0aGlja25lc3MgPSBwYXJzZVRoaWNrbmVzcyh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBbZXhwb3J0cy5tYXJnaW5Ub3BQcm9wZXJ0eSwgUGVyY2VudExlbmd0aC5wYXJzZSh0aGlja25lc3MudG9wKV0sXG4gICAgICAgICAgICBbZXhwb3J0cy5tYXJnaW5SaWdodFByb3BlcnR5LCBQZXJjZW50TGVuZ3RoLnBhcnNlKHRoaWNrbmVzcy5yaWdodCldLFxuICAgICAgICAgICAgW2V4cG9ydHMubWFyZ2luQm90dG9tUHJvcGVydHksIFBlcmNlbnRMZW5ndGgucGFyc2UodGhpY2tuZXNzLmJvdHRvbSldLFxuICAgICAgICAgICAgW2V4cG9ydHMubWFyZ2luTGVmdFByb3BlcnR5LCBQZXJjZW50TGVuZ3RoLnBhcnNlKHRoaWNrbmVzcy5sZWZ0KV1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBbZXhwb3J0cy5tYXJnaW5Ub3BQcm9wZXJ0eSwgdmFsdWVdLFxuICAgICAgICAgICAgW2V4cG9ydHMubWFyZ2luUmlnaHRQcm9wZXJ0eSwgdmFsdWVdLFxuICAgICAgICAgICAgW2V4cG9ydHMubWFyZ2luQm90dG9tUHJvcGVydHksIHZhbHVlXSxcbiAgICAgICAgICAgIFtleHBvcnRzLm1hcmdpbkxlZnRQcm9wZXJ0eSwgdmFsdWVdXG4gICAgICAgIF07XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydFRvUGFkZGluZ3ModmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICE9PSBcImF1dG9cIikge1xuICAgICAgICB2YXIgdGhpY2tuZXNzID0gcGFyc2VUaGlja25lc3ModmFsdWUpO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgW2V4cG9ydHMucGFkZGluZ1RvcFByb3BlcnR5LCBMZW5ndGgucGFyc2UodGhpY2tuZXNzLnRvcCldLFxuICAgICAgICAgICAgW2V4cG9ydHMucGFkZGluZ1JpZ2h0UHJvcGVydHksIExlbmd0aC5wYXJzZSh0aGlja25lc3MucmlnaHQpXSxcbiAgICAgICAgICAgIFtleHBvcnRzLnBhZGRpbmdCb3R0b21Qcm9wZXJ0eSwgTGVuZ3RoLnBhcnNlKHRoaWNrbmVzcy5ib3R0b20pXSxcbiAgICAgICAgICAgIFtleHBvcnRzLnBhZGRpbmdMZWZ0UHJvcGVydHksIExlbmd0aC5wYXJzZSh0aGlja25lc3MubGVmdCldXG4gICAgICAgIF07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgW2V4cG9ydHMucGFkZGluZ1RvcFByb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICBbZXhwb3J0cy5wYWRkaW5nUmlnaHRQcm9wZXJ0eSwgdmFsdWVdLFxuICAgICAgICAgICAgW2V4cG9ydHMucGFkZGluZ0JvdHRvbVByb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICBbZXhwb3J0cy5wYWRkaW5nTGVmdFByb3BlcnR5LCB2YWx1ZV1cbiAgICAgICAgXTtcbiAgICB9XG59XG5leHBvcnRzLnJvdGF0ZVByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NBbmltYXRpb25Qcm9wZXJ0eSh7IG5hbWU6IFwicm90YXRlXCIsIGNzc05hbWU6IFwicm90YXRlXCIsIGRlZmF1bHRWYWx1ZTogMCwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRmxvYXQgfSk7XG5leHBvcnRzLnJvdGF0ZVByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLnNjYWxlWFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NBbmltYXRpb25Qcm9wZXJ0eSh7IG5hbWU6IFwic2NhbGVYXCIsIGNzc05hbWU6IFwic2NhbGVYXCIsIGRlZmF1bHRWYWx1ZTogMSwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRmxvYXQgfSk7XG5leHBvcnRzLnNjYWxlWFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLnNjYWxlWVByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NBbmltYXRpb25Qcm9wZXJ0eSh7IG5hbWU6IFwic2NhbGVZXCIsIGNzc05hbWU6IFwic2NhbGVZXCIsIGRlZmF1bHRWYWx1ZTogMSwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRmxvYXQgfSk7XG5leHBvcnRzLnNjYWxlWVByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5mdW5jdGlvbiBwYXJzZURJUHModmFsdWUpIHtcbiAgICBpZiAodmFsdWUuaW5kZXhPZihcInB4XCIpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gdXRpbHNfMS5sYXlvdXQudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoXCJweFwiLCBcIlwiKS50cmltKCkpKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlLnJlcGxhY2UoXCJkaXBcIiwgXCJcIikudHJpbSgpKTtcbiAgICB9XG59XG5leHBvcnRzLnRyYW5zbGF0ZVhQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzQW5pbWF0aW9uUHJvcGVydHkoeyBuYW1lOiBcInRyYW5zbGF0ZVhcIiwgY3NzTmFtZTogXCJ0cmFuc2xhdGVYXCIsIGRlZmF1bHRWYWx1ZTogMCwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRElQcyB9KTtcbmV4cG9ydHMudHJhbnNsYXRlWFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLnRyYW5zbGF0ZVlQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzQW5pbWF0aW9uUHJvcGVydHkoeyBuYW1lOiBcInRyYW5zbGF0ZVlcIiwgY3NzTmFtZTogXCJ0cmFuc2xhdGVZXCIsIGRlZmF1bHRWYWx1ZTogMCwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRElQcyB9KTtcbmV4cG9ydHMudHJhbnNsYXRlWVByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG52YXIgdHJhbnNmb3JtUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLlNob3J0aGFuZFByb3BlcnR5KHtcbiAgICBuYW1lOiBcInRyYW5zZm9ybVwiLCBjc3NOYW1lOiBcInRyYW5zZm9ybVwiLFxuICAgIGdldHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2NhbGVYID0gdGhpcy5zY2FsZVg7XG4gICAgICAgIHZhciBzY2FsZVkgPSB0aGlzLnNjYWxlWTtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSB0aGlzLnRyYW5zbGF0ZVg7XG4gICAgICAgIHZhciB0cmFuc2xhdGVZID0gdGhpcy50cmFuc2xhdGVZO1xuICAgICAgICB2YXIgcm90YXRlID0gdGhpcy5yb3RhdGU7XG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xuICAgICAgICBpZiAodHJhbnNsYXRlWCAhPT0gMCB8fCB0cmFuc2xhdGVZICE9PSAwKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gXCJ0cmFuc2xhdGUoXCIgKyB0cmFuc2xhdGVYICsgXCIsIFwiICsgdHJhbnNsYXRlWSArIFwiKSBcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwic2NhbGUoXCIgKyBzY2FsZVggKyBcIiwgXCIgKyBzY2FsZVkgKyBcIikgXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdGF0ZSAhPT0gMCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwicm90YXRlIChcIiArIHJvdGF0ZSArIFwiKVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQudHJpbSgpO1xuICAgIH0sXG4gICAgY29udmVydGVyOiBjb252ZXJ0VG9UcmFuc2Zvcm1cbn0pO1xudHJhbnNmb3JtUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbnZhciBJREVOVElUWV9UUkFOU0ZPUk1BVElPTiA9IHtcbiAgICB0cmFuc2xhdGU6IHsgeDogMCwgeTogMCB9LFxuICAgIHJvdGF0ZTogMCxcbiAgICBzY2FsZTogeyB4OiAxLCB5OiAxIH0sXG59O1xudmFyIFRSQU5TRk9STV9TUExJVFRFUiA9IG5ldyBSZWdFeHAoL1xccyooLis/KVxcKCguKj8pXFwpL2cpO1xudmFyIFRSQU5TRk9STUFUSU9OUyA9IE9iamVjdC5mcmVlemUoW1xuICAgIFwicm90YXRlXCIsXG4gICAgXCJ0cmFuc2xhdGVcIixcbiAgICBcInRyYW5zbGF0ZTNkXCIsXG4gICAgXCJ0cmFuc2xhdGVYXCIsXG4gICAgXCJ0cmFuc2xhdGVZXCIsXG4gICAgXCJzY2FsZVwiLFxuICAgIFwic2NhbGUzZFwiLFxuICAgIFwic2NhbGVYXCIsXG4gICAgXCJzY2FsZVlcIixcbl0pO1xudmFyIFNUWUxFX1RSQU5TRk9STUFUSU9OX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAgIFwic2NhbGVcIjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoeyBwcm9wZXJ0eTogXCJzY2FsZVwiLCB2YWx1ZTogdmFsdWUgfSk7IH0sXG4gICAgXCJzY2FsZTNkXCI6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHsgcHJvcGVydHk6IFwic2NhbGVcIiwgdmFsdWU6IHZhbHVlIH0pOyB9LFxuICAgIFwic2NhbGVYXCI6IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgeCA9IF9hLng7XG4gICAgICAgIHJldHVybiAoeyBwcm9wZXJ0eTogXCJzY2FsZVwiLCB2YWx1ZTogeyB4OiB4LCB5OiBJREVOVElUWV9UUkFOU0ZPUk1BVElPTi5zY2FsZS55IH0gfSk7XG4gICAgfSxcbiAgICBcInNjYWxlWVwiOiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHkgPSBfYS55O1xuICAgICAgICByZXR1cm4gKHsgcHJvcGVydHk6IFwic2NhbGVcIiwgdmFsdWU6IHsgeTogeSwgeDogSURFTlRJVFlfVFJBTlNGT1JNQVRJT04uc2NhbGUueCB9IH0pO1xuICAgIH0sXG4gICAgXCJ0cmFuc2xhdGVcIjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoeyBwcm9wZXJ0eTogXCJ0cmFuc2xhdGVcIiwgdmFsdWU6IHZhbHVlIH0pOyB9LFxuICAgIFwidHJhbnNsYXRlM2RcIjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoeyBwcm9wZXJ0eTogXCJ0cmFuc2xhdGVcIiwgdmFsdWU6IHZhbHVlIH0pOyB9LFxuICAgIFwidHJhbnNsYXRlWFwiOiBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIHggPSBfYS54O1xuICAgICAgICByZXR1cm4gKHsgcHJvcGVydHk6IFwidHJhbnNsYXRlXCIsIHZhbHVlOiB7IHg6IHgsIHk6IElERU5USVRZX1RSQU5TRk9STUFUSU9OLnRyYW5zbGF0ZS55IH0gfSk7XG4gICAgfSxcbiAgICBcInRyYW5zbGF0ZVlcIjogZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB5ID0gX2EueTtcbiAgICAgICAgcmV0dXJuICh7IHByb3BlcnR5OiBcInRyYW5zbGF0ZVwiLCB2YWx1ZTogeyB5OiB5LCB4OiBJREVOVElUWV9UUkFOU0ZPUk1BVElPTi50cmFuc2xhdGUueCB9IH0pO1xuICAgIH0sXG4gICAgXCJyb3RhdGVcIjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoeyBwcm9wZXJ0eTogXCJyb3RhdGVcIiwgdmFsdWU6IHZhbHVlIH0pOyB9LFxufSk7XG5mdW5jdGlvbiBjb252ZXJ0VG9UcmFuc2Zvcm0odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHByb3BlcnRpZXNfMS51bnNldFZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gXCJub25lXCI7XG4gICAgfVxuICAgIHZhciBfYSA9IHRyYW5zZm9ybUNvbnZlcnRlcih2YWx1ZSksIHRyYW5zbGF0ZSA9IF9hLnRyYW5zbGF0ZSwgcm90YXRlID0gX2Eucm90YXRlLCBzY2FsZSA9IF9hLnNjYWxlO1xuICAgIHJldHVybiBbXG4gICAgICAgIFtleHBvcnRzLnRyYW5zbGF0ZVhQcm9wZXJ0eSwgdHJhbnNsYXRlLnhdLFxuICAgICAgICBbZXhwb3J0cy50cmFuc2xhdGVZUHJvcGVydHksIHRyYW5zbGF0ZS55XSxcbiAgICAgICAgW2V4cG9ydHMuc2NhbGVYUHJvcGVydHksIHNjYWxlLnhdLFxuICAgICAgICBbZXhwb3J0cy5zY2FsZVlQcm9wZXJ0eSwgc2NhbGUueV0sXG4gICAgICAgIFtleHBvcnRzLnJvdGF0ZVByb3BlcnR5LCByb3RhdGVdLFxuICAgIF07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1Db252ZXJ0ZXIodGV4dCkge1xuICAgIHZhciB0cmFuc2Zvcm1hdGlvbnMgPSBwYXJzZVRyYW5zZm9ybVN0cmluZyh0ZXh0KTtcbiAgICBpZiAodGV4dCA9PT0gXCJub25lXCIgfHwgdGV4dCA9PT0gXCJcIiB8fCAhdHJhbnNmb3JtYXRpb25zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gSURFTlRJVFlfVFJBTlNGT1JNQVRJT047XG4gICAgfVxuICAgIHZhciB1c2VkVHJhbnNmb3JtcyA9IHRyYW5zZm9ybWF0aW9ucy5tYXAoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQucHJvcGVydHk7IH0pO1xuICAgIGlmICghdXRpbHNfMS5oYXNEdXBsaWNhdGVzKHVzZWRUcmFuc2Zvcm1zKSkge1xuICAgICAgICB2YXIgZnVsbFRyYW5zZm9ybWF0aW9uc18xID0gX19hc3NpZ24oe30sIElERU5USVRZX1RSQU5TRk9STUFUSU9OKTtcbiAgICAgICAgdHJhbnNmb3JtYXRpb25zLmZvckVhY2goZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgZnVsbFRyYW5zZm9ybWF0aW9uc18xW3RyYW5zZm9ybS5wcm9wZXJ0eV0gPSB0cmFuc2Zvcm0udmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnVsbFRyYW5zZm9ybWF0aW9uc18xO1xuICAgIH1cbiAgICB2YXIgYWZmaW5lTWF0cml4ID0gdHJhbnNmb3JtYXRpb25zXG4gICAgICAgIC5tYXAobWF0cml4XzEuZ2V0VHJhbnNmb3JtTWF0cml4KVxuICAgICAgICAucmVkdWNlKG1hdHJpeF8xLm11bHRpcGx5QWZmaW5lMmQpO1xuICAgIHZhciBjc3NNYXRyaXggPSBtYXRyaXhfMS5tYXRyaXhBcnJheVRvQ3NzTWF0cml4KGFmZmluZU1hdHJpeCk7XG4gICAgcmV0dXJuIG1hdHJpeF8xLmRlY29tcG9zZTJEVHJhbnNmb3JtTWF0cml4KGNzc01hdHJpeCk7XG59XG5leHBvcnRzLnRyYW5zZm9ybUNvbnZlcnRlciA9IHRyYW5zZm9ybUNvbnZlcnRlcjtcbmZ1bmN0aW9uIHBhcnNlVHJhbnNmb3JtU3RyaW5nKHRleHQpIHtcbiAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgIHZhciBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gVFJBTlNGT1JNX1NQTElUVEVSLmV4ZWModGV4dCkpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eSA9IG1hdGNoWzFdO1xuICAgICAgICB2YXIgdmFsdWUgPSBjb252ZXJ0VHJhbnNmb3JtVmFsdWUocHJvcGVydHksIG1hdGNoWzJdKTtcbiAgICAgICAgaWYgKFRSQU5TRk9STUFUSU9OUy5pbmRleE9mKHByb3BlcnR5KSAhPT0gLTEpIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChub3JtYWxpemVUcmFuc2Zvcm1hdGlvbih7IHByb3BlcnR5OiBwcm9wZXJ0eSwgdmFsdWU6IHZhbHVlIH0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlcztcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRyYW5zZm9ybWF0aW9uKF9hKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gX2EucHJvcGVydHksIHZhbHVlID0gX2EudmFsdWU7XG4gICAgcmV0dXJuIFNUWUxFX1RSQU5TRk9STUFUSU9OX01BUFtwcm9wZXJ0eV0odmFsdWUpO1xufVxuZnVuY3Rpb24gY29udmVydFRyYW5zZm9ybVZhbHVlKHByb3BlcnR5LCBzdHJpbmdWYWx1ZSkge1xuICAgIHZhciBfYSA9IHN0cmluZ1ZhbHVlLnNwbGl0KFwiLFwiKS5tYXAocGFyc2VGbG9hdCksIHggPSBfYVswXSwgX2IgPSBfYVsxXSwgeSA9IF9iID09PSB2b2lkIDAgPyB4IDogX2I7XG4gICAgaWYgKHByb3BlcnR5ID09PSBcInJvdGF0ZVwiKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZS5zbGljZSgtMykgPT09IFwicmFkXCIgPyBudW1iZXJfdXRpbHNfMS5yYWRpYW5zVG9EZWdyZWVzKHgpIDogeDtcbiAgICB9XG4gICAgcmV0dXJuIHsgeDogeCwgeTogeSB9O1xufVxudmFyIGJhY2tncm91bmRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuU2hvcnRoYW5kUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYmFja2dyb3VuZFwiLCBjc3NOYW1lOiBcImJhY2tncm91bmRcIixcbiAgICBnZXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYmFja2dyb3VuZENvbG9yICsgXCIgXCIgKyB0aGlzLmJhY2tncm91bmRJbWFnZSArIFwiIFwiICsgdGhpcy5iYWNrZ3JvdW5kUmVwZWF0ICsgXCIgXCIgKyB0aGlzLmJhY2tncm91bmRQb3NpdGlvbjtcbiAgICB9LFxuICAgIGNvbnZlcnRlcjogY29udmVydFRvQmFja2dyb3VuZHNcbn0pO1xuYmFja2dyb3VuZFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmJhY2tncm91bmRJbnRlcm5hbFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJiYWNrZ3JvdW5kSW50ZXJuYWxcIixcbiAgICBjc3NOYW1lOiBcIl9iYWNrZ3JvdW5kSW50ZXJuYWxcIixcbiAgICBkZWZhdWx0VmFsdWU6IGJhY2tncm91bmRfMS5CYWNrZ3JvdW5kLmRlZmF1bHRcbn0pO1xuZXhwb3J0cy5iYWNrZ3JvdW5kSW50ZXJuYWxQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5iYWNrZ3JvdW5kSW1hZ2VQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYmFja2dyb3VuZEltYWdlXCIsIGNzc05hbWU6IFwiYmFja2dyb3VuZC1pbWFnZVwiLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aEltYWdlKG5ld1ZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSxcbiAgICBlcXVhbGl0eUNvbXBhcmVyOiBmdW5jdGlvbiAodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgICAgaWYgKHZhbHVlMSBpbnN0YW5jZW9mIGxpbmVhcl9ncmFkaWVudF8xLkxpbmVhckdyYWRpZW50ICYmIHZhbHVlMiBpbnN0YW5jZW9mIGxpbmVhcl9ncmFkaWVudF8xLkxpbmVhckdyYWRpZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZWFyX2dyYWRpZW50XzEuTGluZWFyR3JhZGllbnQuZXF1YWxzKHZhbHVlMSwgdmFsdWUyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTEgPT09IHZhbHVlMjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2VyLnBhcnNlQmFja2dyb3VuZCh2YWx1ZSk7XG4gICAgICAgICAgICBpZiAocGFyc2VkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSBwYXJzZWQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAodHlwZW9mIGJhY2tncm91bmQuaW1hZ2UgPT09IFwib2JqZWN0XCIpID8gbGluZWFyX2dyYWRpZW50XzEuTGluZWFyR3JhZGllbnQucGFyc2UoYmFja2dyb3VuZC5pbWFnZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufSk7XG5leHBvcnRzLmJhY2tncm91bmRJbWFnZVByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmJhY2tncm91bmRDb2xvclByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NBbmltYXRpb25Qcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJiYWNrZ3JvdW5kQ29sb3JcIiwgY3NzTmFtZTogXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbC53aXRoQ29sb3IobmV3VmFsdWUpO1xuICAgICAgICB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsID0gYmFja2dyb3VuZDtcbiAgICB9LCBlcXVhbGl0eUNvbXBhcmVyOiBjb2xvcl8xLkNvbG9yLmVxdWFscywgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IGNvbG9yXzEuQ29sb3IodmFsdWUpOyB9XG59KTtcbmV4cG9ydHMuYmFja2dyb3VuZENvbG9yUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbnZhciBCYWNrZ3JvdW5kUmVwZWF0O1xuKGZ1bmN0aW9uIChCYWNrZ3JvdW5kUmVwZWF0KSB7XG4gICAgQmFja2dyb3VuZFJlcGVhdC5SRVBFQVQgPSBcInJlcGVhdFwiO1xuICAgIEJhY2tncm91bmRSZXBlYXQuUkVQRUFUX1ggPSBcInJlcGVhdC14XCI7XG4gICAgQmFja2dyb3VuZFJlcGVhdC5SRVBFQVRfWSA9IFwicmVwZWF0LXlcIjtcbiAgICBCYWNrZ3JvdW5kUmVwZWF0Lk5PX1JFUEVBVCA9IFwibm8tcmVwZWF0XCI7XG4gICAgQmFja2dyb3VuZFJlcGVhdC5pc1ZhbGlkID0gcHJvcGVydGllc18xLm1ha2VWYWxpZGF0b3IoQmFja2dyb3VuZFJlcGVhdC5SRVBFQVQsIEJhY2tncm91bmRSZXBlYXQuUkVQRUFUX1gsIEJhY2tncm91bmRSZXBlYXQuUkVQRUFUX1ksIEJhY2tncm91bmRSZXBlYXQuTk9fUkVQRUFUKTtcbiAgICBCYWNrZ3JvdW5kUmVwZWF0LnBhcnNlID0gcHJvcGVydGllc18xLm1ha2VQYXJzZXIoQmFja2dyb3VuZFJlcGVhdC5pc1ZhbGlkKTtcbn0pKEJhY2tncm91bmRSZXBlYXQgPSBleHBvcnRzLkJhY2tncm91bmRSZXBlYXQgfHwgKGV4cG9ydHMuQmFja2dyb3VuZFJlcGVhdCA9IHt9KSk7XG5leHBvcnRzLmJhY2tncm91bmRSZXBlYXRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYmFja2dyb3VuZFJlcGVhdFwiLCBjc3NOYW1lOiBcImJhY2tncm91bmQtcmVwZWF0XCIsIHZhbHVlQ29udmVydGVyOiBCYWNrZ3JvdW5kUmVwZWF0LnBhcnNlLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbC53aXRoUmVwZWF0KG5ld1ZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfVxufSk7XG5leHBvcnRzLmJhY2tncm91bmRSZXBlYXRQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5iYWNrZ3JvdW5kU2l6ZVByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJiYWNrZ3JvdW5kU2l6ZVwiLCBjc3NOYW1lOiBcImJhY2tncm91bmQtc2l6ZVwiLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aFNpemUobmV3VmFsdWUpO1xuICAgICAgICB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsID0gYmFja2dyb3VuZDtcbiAgICB9XG59KTtcbmV4cG9ydHMuYmFja2dyb3VuZFNpemVQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5iYWNrZ3JvdW5kUG9zaXRpb25Qcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYmFja2dyb3VuZFBvc2l0aW9uXCIsIGNzc05hbWU6IFwiYmFja2dyb3VuZC1wb3NpdGlvblwiLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aFBvc2l0aW9uKG5ld1ZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfVxufSk7XG5leHBvcnRzLmJhY2tncm91bmRQb3NpdGlvblByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5mdW5jdGlvbiBjb252ZXJ0VG9CYWNrZ3JvdW5kcyh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdmFyIGJhY2tncm91bmRzID0gcGFyc2VyLnBhcnNlQmFja2dyb3VuZCh2YWx1ZSkudmFsdWU7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBiYWNrZ3JvdW5kcy5jb2xvciA/IG5ldyBjb2xvcl8xLkNvbG9yKGJhY2tncm91bmRzLmNvbG9yKSA6IHByb3BlcnRpZXNfMS51bnNldFZhbHVlO1xuICAgICAgICB2YXIgYmFja2dyb3VuZEltYWdlID0gdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIGJhY2tncm91bmRzLmltYWdlID09PSBcIm9iamVjdFwiICYmIGJhY2tncm91bmRzLmltYWdlKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBsaW5lYXJfZ3JhZGllbnRfMS5MaW5lYXJHcmFkaWVudC5wYXJzZShiYWNrZ3JvdW5kcy5pbWFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2UgPSBiYWNrZ3JvdW5kcy5pbWFnZSB8fCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFja2dyb3VuZFJlcGVhdCA9IGJhY2tncm91bmRzLnJlcGVhdCB8fCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZTtcbiAgICAgICAgdmFyIGJhY2tncm91bmRQb3NpdGlvbiA9IGJhY2tncm91bmRzLnBvc2l0aW9uID8gYmFja2dyb3VuZHMucG9zaXRpb24udGV4dCA6IHByb3BlcnRpZXNfMS51bnNldFZhbHVlO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgW2V4cG9ydHMuYmFja2dyb3VuZENvbG9yUHJvcGVydHksIGJhY2tncm91bmRDb2xvcl0sXG4gICAgICAgICAgICBbZXhwb3J0cy5iYWNrZ3JvdW5kSW1hZ2VQcm9wZXJ0eSwgYmFja2dyb3VuZEltYWdlXSxcbiAgICAgICAgICAgIFtleHBvcnRzLmJhY2tncm91bmRSZXBlYXRQcm9wZXJ0eSwgYmFja2dyb3VuZFJlcGVhdF0sXG4gICAgICAgICAgICBbZXhwb3J0cy5iYWNrZ3JvdW5kUG9zaXRpb25Qcm9wZXJ0eSwgYmFja2dyb3VuZFBvc2l0aW9uXVxuICAgICAgICBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFtleHBvcnRzLmJhY2tncm91bmRDb2xvclByb3BlcnR5LCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZV0sXG4gICAgICAgICAgICBbZXhwb3J0cy5iYWNrZ3JvdW5kSW1hZ2VQcm9wZXJ0eSwgcHJvcGVydGllc18xLnVuc2V0VmFsdWVdLFxuICAgICAgICAgICAgW2V4cG9ydHMuYmFja2dyb3VuZFJlcGVhdFByb3BlcnR5LCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZV0sXG4gICAgICAgICAgICBbZXhwb3J0cy5iYWNrZ3JvdW5kUG9zaXRpb25Qcm9wZXJ0eSwgcHJvcGVydGllc18xLnVuc2V0VmFsdWVdXG4gICAgICAgIF07XG4gICAgfVxufVxuZnVuY3Rpb24gcGFyc2VCb3JkZXJDb2xvcih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSB7IHRvcDogdW5kZWZpbmVkLCByaWdodDogdW5kZWZpbmVkLCBib3R0b206IHVuZGVmaW5lZCwgbGVmdDogdW5kZWZpbmVkIH07XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoXCJyZ2JcIikgPT09IDApIHtcbiAgICAgICAgcmVzdWx0LnRvcCA9IHJlc3VsdC5yaWdodCA9IHJlc3VsdC5ib3R0b20gPSByZXN1bHQubGVmdCA9IG5ldyBjb2xvcl8xLkNvbG9yKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgdmFyIGFyciA9IHZhbHVlLnNwbGl0KC9bICxdKy8pO1xuICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBhcnIwID0gbmV3IGNvbG9yXzEuQ29sb3IoYXJyWzBdKTtcbiAgICAgICAgcmVzdWx0LnRvcCA9IGFycjA7XG4gICAgICAgIHJlc3VsdC5yaWdodCA9IGFycjA7XG4gICAgICAgIHJlc3VsdC5ib3R0b20gPSBhcnIwO1xuICAgICAgICByZXN1bHQubGVmdCA9IGFycjA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGFyci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgdmFyIGFycjAgPSBuZXcgY29sb3JfMS5Db2xvcihhcnJbMF0pO1xuICAgICAgICB2YXIgYXJyMSA9IG5ldyBjb2xvcl8xLkNvbG9yKGFyclsxXSk7XG4gICAgICAgIHJlc3VsdC50b3AgPSBhcnIwO1xuICAgICAgICByZXN1bHQucmlnaHQgPSBhcnIxO1xuICAgICAgICByZXN1bHQuYm90dG9tID0gYXJyMDtcbiAgICAgICAgcmVzdWx0LmxlZnQgPSBhcnIxO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcnIubGVuZ3RoID09PSAzKSB7XG4gICAgICAgIHZhciBhcnIwID0gbmV3IGNvbG9yXzEuQ29sb3IoYXJyWzBdKTtcbiAgICAgICAgdmFyIGFycjEgPSBuZXcgY29sb3JfMS5Db2xvcihhcnJbMV0pO1xuICAgICAgICB2YXIgYXJyMiA9IG5ldyBjb2xvcl8xLkNvbG9yKGFyclsyXSk7XG4gICAgICAgIHJlc3VsdC50b3AgPSBhcnIwO1xuICAgICAgICByZXN1bHQucmlnaHQgPSBhcnIxO1xuICAgICAgICByZXN1bHQuYm90dG9tID0gYXJyMjtcbiAgICAgICAgcmVzdWx0LmxlZnQgPSBhcnIxO1xuICAgIH1cbiAgICBlbHNlIGlmIChhcnIubGVuZ3RoID09PSA0KSB7XG4gICAgICAgIHZhciBhcnIwID0gbmV3IGNvbG9yXzEuQ29sb3IoYXJyWzBdKTtcbiAgICAgICAgdmFyIGFycjEgPSBuZXcgY29sb3JfMS5Db2xvcihhcnJbMV0pO1xuICAgICAgICB2YXIgYXJyMiA9IG5ldyBjb2xvcl8xLkNvbG9yKGFyclsyXSk7XG4gICAgICAgIHZhciBhcnIzID0gbmV3IGNvbG9yXzEuQ29sb3IoYXJyWzNdKTtcbiAgICAgICAgcmVzdWx0LnRvcCA9IGFycjA7XG4gICAgICAgIHJlc3VsdC5yaWdodCA9IGFycjE7XG4gICAgICAgIHJlc3VsdC5ib3R0b20gPSBhcnIyO1xuICAgICAgICByZXN1bHQubGVmdCA9IGFycjM7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCAxLCAyLCAzIG9yIDQgcGFyYW1ldGVycy4gQWN0dWFsOiBcIiArIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBib3JkZXJDb2xvclByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5TaG9ydGhhbmRQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJDb2xvclwiLCBjc3NOYW1lOiBcImJvcmRlci1jb2xvclwiLFxuICAgIGdldHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoY29sb3JfMS5Db2xvci5lcXVhbHModGhpcy5ib3JkZXJUb3BDb2xvciwgdGhpcy5ib3JkZXJSaWdodENvbG9yKSAmJlxuICAgICAgICAgICAgY29sb3JfMS5Db2xvci5lcXVhbHModGhpcy5ib3JkZXJUb3BDb2xvciwgdGhpcy5ib3JkZXJCb3R0b21Db2xvcikgJiZcbiAgICAgICAgICAgIGNvbG9yXzEuQ29sb3IuZXF1YWxzKHRoaXMuYm9yZGVyVG9wQ29sb3IsIHRoaXMuYm9yZGVyTGVmdENvbG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYm9yZGVyVG9wQ29sb3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BDb2xvciArIFwiIFwiICsgdGhpcy5ib3JkZXJSaWdodENvbG9yICsgXCIgXCIgKyB0aGlzLmJvcmRlckJvdHRvbUNvbG9yICsgXCIgXCIgKyB0aGlzLmJvcmRlckxlZnRDb2xvcjtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29udmVydGVyOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdmFyIGZvdXJDb2xvcnMgPSBwYXJzZUJvcmRlckNvbG9yKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyVG9wQ29sb3JQcm9wZXJ0eSwgZm91ckNvbG9ycy50b3BdLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlclJpZ2h0Q29sb3JQcm9wZXJ0eSwgZm91ckNvbG9ycy5yaWdodF0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyQm90dG9tQ29sb3JQcm9wZXJ0eSwgZm91ckNvbG9ycy5ib3R0b21dLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlckxlZnRDb2xvclByb3BlcnR5LCBmb3VyQ29sb3JzLmxlZnRdXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJUb3BDb2xvclByb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyUmlnaHRDb2xvclByb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyQm90dG9tQ29sb3JQcm9wZXJ0eSwgdmFsdWVdLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlckxlZnRDb2xvclByb3BlcnR5LCB2YWx1ZV1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICB9XG59KTtcbmJvcmRlckNvbG9yUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYm9yZGVyVG9wQ29sb3JQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYm9yZGVyVG9wQ29sb3JcIiwgY3NzTmFtZTogXCJib3JkZXItdG9wLWNvbG9yXCIsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbC53aXRoQm9yZGVyVG9wQ29sb3IobmV3VmFsdWUpO1xuICAgICAgICB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsID0gYmFja2dyb3VuZDtcbiAgICB9LCBlcXVhbGl0eUNvbXBhcmVyOiBjb2xvcl8xLkNvbG9yLmVxdWFscywgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gbmV3IGNvbG9yXzEuQ29sb3IodmFsdWUpOyB9XG59KTtcbmV4cG9ydHMuYm9yZGVyVG9wQ29sb3JQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5ib3JkZXJSaWdodENvbG9yUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcImJvcmRlclJpZ2h0Q29sb3JcIiwgY3NzTmFtZTogXCJib3JkZXItcmlnaHQtY29sb3JcIiwgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJSaWdodENvbG9yKG5ld1ZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSwgZXF1YWxpdHlDb21wYXJlcjogY29sb3JfMS5Db2xvci5lcXVhbHMsIHZhbHVlQ29udmVydGVyOiBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIG5ldyBjb2xvcl8xLkNvbG9yKHZhbHVlKTsgfVxufSk7XG5leHBvcnRzLmJvcmRlclJpZ2h0Q29sb3JQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5ib3JkZXJCb3R0b21Db2xvclByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJCb3R0b21Db2xvclwiLCBjc3NOYW1lOiBcImJvcmRlci1ib3R0b20tY29sb3JcIiwgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJCb3R0b21Db2xvcihuZXdWYWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH0sIGVxdWFsaXR5Q29tcGFyZXI6IGNvbG9yXzEuQ29sb3IuZXF1YWxzLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBuZXcgY29sb3JfMS5Db2xvcih2YWx1ZSk7IH1cbn0pO1xuZXhwb3J0cy5ib3JkZXJCb3R0b21Db2xvclByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmJvcmRlckxlZnRDb2xvclByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJMZWZ0Q29sb3JcIiwgY3NzTmFtZTogXCJib3JkZXItbGVmdC1jb2xvclwiLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aEJvcmRlckxlZnRDb2xvcihuZXdWYWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH0sIGVxdWFsaXR5Q29tcGFyZXI6IGNvbG9yXzEuQ29sb3IuZXF1YWxzLCB2YWx1ZUNvbnZlcnRlcjogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBuZXcgY29sb3JfMS5Db2xvcih2YWx1ZSk7IH1cbn0pO1xuZXhwb3J0cy5ib3JkZXJMZWZ0Q29sb3JQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xudmFyIGJvcmRlcldpZHRoUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLlNob3J0aGFuZFByb3BlcnR5KHtcbiAgICBuYW1lOiBcImJvcmRlcldpZHRoXCIsIGNzc05hbWU6IFwiYm9yZGVyLXdpZHRoXCIsXG4gICAgZ2V0dGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChMZW5ndGguZXF1YWxzKHRoaXMuYm9yZGVyVG9wV2lkdGgsIHRoaXMuYm9yZGVyUmlnaHRXaWR0aCkgJiZcbiAgICAgICAgICAgIExlbmd0aC5lcXVhbHModGhpcy5ib3JkZXJUb3BXaWR0aCwgdGhpcy5ib3JkZXJCb3R0b21XaWR0aCkgJiZcbiAgICAgICAgICAgIExlbmd0aC5lcXVhbHModGhpcy5ib3JkZXJUb3BXaWR0aCwgdGhpcy5ib3JkZXJMZWZ0V2lkdGgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBMZW5ndGguY29udmVydFRvU3RyaW5nKHRoaXMuYm9yZGVyVG9wV2lkdGgpICsgXCIgXCIgKyBMZW5ndGguY29udmVydFRvU3RyaW5nKHRoaXMuYm9yZGVyUmlnaHRXaWR0aCkgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5ib3JkZXJCb3R0b21XaWR0aCkgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5ib3JkZXJMZWZ0V2lkdGgpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBjb252ZXJ0ZXI6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICE9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgdmFyIGJvcmRlcldpZHRocyA9IHBhcnNlVGhpY2tuZXNzKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyVG9wV2lkdGhQcm9wZXJ0eSwgYm9yZGVyV2lkdGhzLnRvcF0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyUmlnaHRXaWR0aFByb3BlcnR5LCBib3JkZXJXaWR0aHMucmlnaHRdLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlckJvdHRvbVdpZHRoUHJvcGVydHksIGJvcmRlcldpZHRocy5ib3R0b21dLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlckxlZnRXaWR0aFByb3BlcnR5LCBib3JkZXJXaWR0aHMubGVmdF1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlclRvcFdpZHRoUHJvcGVydHksIHZhbHVlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJSaWdodFdpZHRoUHJvcGVydHksIHZhbHVlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJCb3R0b21XaWR0aFByb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyTGVmdFdpZHRoUHJvcGVydHksIHZhbHVlXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuYm9yZGVyV2lkdGhQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5ib3JkZXJUb3BXaWR0aFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJUb3BXaWR0aFwiLCBjc3NOYW1lOiBcImJvcmRlci10b3Atd2lkdGhcIiwgZGVmYXVsdFZhbHVlOiBleHBvcnRzLnplcm9MZW5ndGgsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGVxdWFsaXR5Q29tcGFyZXI6IExlbmd0aC5lcXVhbHMsXG4gICAgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gTGVuZ3RoLnRvRGV2aWNlUGl4ZWxzKG5ld1ZhbHVlLCAwKTtcbiAgICAgICAgaWYgKCFpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYm9yZGVyLXRvcC13aWR0aCBzaG91bGQgYmUgTm9uLU5lZ2F0aXZlIEZpbml0ZSBudW1iZXIuIFZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVCb3JkZXJUb3BXaWR0aCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2VfMS53cml0ZShuZXdWYWx1ZSArIFwiIG5vdCBzZXQgdG8gdmlldydzIHByb3BlcnR5IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5TdHlsZSwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aEJvcmRlclRvcFdpZHRoKHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IExlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmJvcmRlclRvcFdpZHRoUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYm9yZGVyUmlnaHRXaWR0aFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJSaWdodFdpZHRoXCIsIGNzc05hbWU6IFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIsIGRlZmF1bHRWYWx1ZTogZXhwb3J0cy56ZXJvTGVuZ3RoLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IExlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgMCk7XG4gICAgICAgIGlmICghaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJvcmRlci1yaWdodC13aWR0aCBzaG91bGQgYmUgTm9uLU5lZ2F0aXZlIEZpbml0ZSBudW1iZXIuIFZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVCb3JkZXJSaWdodFdpZHRoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cmFjZV8xLndyaXRlKG5ld1ZhbHVlICsgXCIgbm90IHNldCB0byB2aWV3J3MgcHJvcGVydHkgYmVjYXVzZSBcXFwiLnZpZXdSZWZcXFwiIGlzIGNsZWFyZWRcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLlN0eWxlLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLndhcm4pO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbC53aXRoQm9yZGVyUmlnaHRXaWR0aCh2YWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH0sIHZhbHVlQ29udmVydGVyOiBMZW5ndGgucGFyc2Vcbn0pO1xuZXhwb3J0cy5ib3JkZXJSaWdodFdpZHRoUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYm9yZGVyQm90dG9tV2lkdGhQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYm9yZGVyQm90dG9tV2lkdGhcIiwgY3NzTmFtZTogXCJib3JkZXItYm90dG9tLXdpZHRoXCIsIGRlZmF1bHRWYWx1ZTogZXhwb3J0cy56ZXJvTGVuZ3RoLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBlcXVhbGl0eUNvbXBhcmVyOiBMZW5ndGguZXF1YWxzLFxuICAgIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IExlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgMCk7XG4gICAgICAgIGlmICghaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJvcmRlci1ib3R0b20td2lkdGggc2hvdWxkIGJlIE5vbi1OZWdhdGl2ZSBGaW5pdGUgbnVtYmVyLiBWYWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZpZXcgPSB0YXJnZXQudmlld1JlZi5nZXQoKTtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuZWZmZWN0aXZlQm9yZGVyQm90dG9tV2lkdGggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUobmV3VmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcncyBwcm9wZXJ0eSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJCb3R0b21XaWR0aCh2YWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH0sIHZhbHVlQ29udmVydGVyOiBMZW5ndGgucGFyc2Vcbn0pO1xuZXhwb3J0cy5ib3JkZXJCb3R0b21XaWR0aFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmJvcmRlckxlZnRXaWR0aFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJMZWZ0V2lkdGhcIiwgY3NzTmFtZTogXCJib3JkZXItbGVmdC13aWR0aFwiLCBkZWZhdWx0VmFsdWU6IGV4cG9ydHMuemVyb0xlbmd0aCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgZXF1YWxpdHlDb21wYXJlcjogTGVuZ3RoLmVxdWFscyxcbiAgICB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBMZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIDApO1xuICAgICAgICBpZiAoIWlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJib3JkZXItbGVmdC13aWR0aCBzaG91bGQgYmUgTm9uLU5lZ2F0aXZlIEZpbml0ZSBudW1iZXIuIFZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlldyA9IHRhcmdldC52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAodmlldykge1xuICAgICAgICAgICAgdmlldy5lZmZlY3RpdmVCb3JkZXJMZWZ0V2lkdGggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUobmV3VmFsdWUgKyBcIiBub3Qgc2V0IHRvIHZpZXcncyBwcm9wZXJ0eSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuU3R5bGUsIHRyYWNlXzEubWVzc2FnZVR5cGUud2Fybik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJMZWZ0V2lkdGgodmFsdWUpO1xuICAgICAgICB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsID0gYmFja2dyb3VuZDtcbiAgICB9LCB2YWx1ZUNvbnZlcnRlcjogTGVuZ3RoLnBhcnNlXG59KTtcbmV4cG9ydHMuYm9yZGVyTGVmdFdpZHRoUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbnZhciBib3JkZXJSYWRpdXNQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuU2hvcnRoYW5kUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiYm9yZGVyUmFkaXVzXCIsIGNzc05hbWU6IFwiYm9yZGVyLXJhZGl1c1wiLFxuICAgIGdldHRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoTGVuZ3RoLmVxdWFscyh0aGlzLmJvcmRlclRvcExlZnRSYWRpdXMsIHRoaXMuYm9yZGVyVG9wUmlnaHRSYWRpdXMpICYmXG4gICAgICAgICAgICBMZW5ndGguZXF1YWxzKHRoaXMuYm9yZGVyVG9wTGVmdFJhZGl1cywgdGhpcy5ib3JkZXJCb3R0b21SaWdodFJhZGl1cykgJiZcbiAgICAgICAgICAgIExlbmd0aC5lcXVhbHModGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzLCB0aGlzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ib3JkZXJUb3BMZWZ0UmFkaXVzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBMZW5ndGguY29udmVydFRvU3RyaW5nKHRoaXMuYm9yZGVyVG9wTGVmdFJhZGl1cykgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5ib3JkZXJUb3BSaWdodFJhZGl1cykgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5ib3JkZXJCb3R0b21SaWdodFJhZGl1cykgKyBcIiBcIiArIExlbmd0aC5jb252ZXJ0VG9TdHJpbmcodGhpcy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzKTtcbiAgICB9LFxuICAgIGNvbnZlcnRlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHZhciBib3JkZXJSYWRpdXMgPSBwYXJzZVRoaWNrbmVzcyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlclRvcExlZnRSYWRpdXNQcm9wZXJ0eSwgYm9yZGVyUmFkaXVzLnRvcF0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyVG9wUmlnaHRSYWRpdXNQcm9wZXJ0eSwgYm9yZGVyUmFkaXVzLnJpZ2h0XSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJCb3R0b21SaWdodFJhZGl1c1Byb3BlcnR5LCBib3JkZXJSYWRpdXMuYm90dG9tXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzUHJvcGVydHksIGJvcmRlclJhZGl1cy5sZWZ0XVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyVG9wTGVmdFJhZGl1c1Byb3BlcnR5LCB2YWx1ZV0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuYm9yZGVyVG9wUmlnaHRSYWRpdXNQcm9wZXJ0eSwgdmFsdWVdLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzUHJvcGVydHksIHZhbHVlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5ib3JkZXJCb3R0b21MZWZ0UmFkaXVzUHJvcGVydHksIHZhbHVlXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuYm9yZGVyUmFkaXVzUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYm9yZGVyVG9wTGVmdFJhZGl1c1Byb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJUb3BMZWZ0UmFkaXVzXCIsIGNzc05hbWU6IFwiYm9yZGVyLXRvcC1sZWZ0LXJhZGl1c1wiLCBkZWZhdWx0VmFsdWU6IDAsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IExlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgMCk7XG4gICAgICAgIGlmICghaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJvcmRlci10b3AtbGVmdC1yYWRpdXMgc2hvdWxkIGJlIE5vbi1OZWdhdGl2ZSBGaW5pdGUgbnVtYmVyLiBWYWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJUb3BMZWZ0UmFkaXVzKHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IExlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmJvcmRlclRvcExlZnRSYWRpdXNQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5ib3JkZXJUb3BSaWdodFJhZGl1c1Byb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLCBjc3NOYW1lOiBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCIsIGRlZmF1bHRWYWx1ZTogMCwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gTGVuZ3RoLnRvRGV2aWNlUGl4ZWxzKG5ld1ZhbHVlLCAwKTtcbiAgICAgICAgaWYgKCFpc05vbk5lZ2F0aXZlRmluaXRlTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXMgc2hvdWxkIGJlIE5vbi1OZWdhdGl2ZSBGaW5pdGUgbnVtYmVyLiBWYWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJUb3BSaWdodFJhZGl1cyh2YWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH0sIHZhbHVlQ29udmVydGVyOiBMZW5ndGgucGFyc2Vcbn0pO1xuZXhwb3J0cy5ib3JkZXJUb3BSaWdodFJhZGl1c1Byb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsIGNzc05hbWU6IFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIiwgZGVmYXVsdFZhbHVlOiAwLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBMZW5ndGgudG9EZXZpY2VQaXhlbHMobmV3VmFsdWUsIDApO1xuICAgICAgICBpZiAoIWlzTm9uTmVnYXRpdmVGaW5pdGVOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1cyBzaG91bGQgYmUgTm9uLU5lZ2F0aXZlIEZpbml0ZSBudW1iZXIuIFZhbHVlOiBcIiArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYmFja2dyb3VuZCA9IHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwud2l0aEJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzKHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IExlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYm9yZGVyQm90dG9tTGVmdFJhZGl1c1Byb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7XG4gICAgbmFtZTogXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCIsIGNzc05hbWU6IFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiLCBkZWZhdWx0VmFsdWU6IDAsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IExlbmd0aC50b0RldmljZVBpeGVscyhuZXdWYWx1ZSwgMCk7XG4gICAgICAgIGlmICghaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMgc2hvdWxkIGJlIE5vbi1OZWdhdGl2ZSBGaW5pdGUgbnVtYmVyLiBWYWx1ZTogXCIgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhCb3JkZXJCb3R0b21MZWZ0UmFkaXVzKHZhbHVlKTtcbiAgICAgICAgdGFyZ2V0LmJhY2tncm91bmRJbnRlcm5hbCA9IGJhY2tncm91bmQ7XG4gICAgfSwgdmFsdWVDb252ZXJ0ZXI6IExlbmd0aC5wYXJzZVxufSk7XG5leHBvcnRzLmJvcmRlckJvdHRvbUxlZnRSYWRpdXNQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZnVuY3Rpb24gaXNOb25OZWdhdGl2ZUZpbml0ZU51bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgJiYgIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSA+PSAwO1xufVxudmFyIHN1cHBvcnRlZFBhdGhzID0gW1wicmVjdFwiLCBcImNpcmNsZVwiLCBcImVsbGlwc2VcIiwgXCJwb2x5Z29uXCIsIFwiaW5zZXRcIl07XG5mdW5jdGlvbiBpc0NsaXBQYXRoVmFsaWQodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgZnVuY3Rpb25OYW1lID0gdmFsdWUuc3Vic3RyaW5nKDAsIHZhbHVlLmluZGV4T2YoXCIoXCIpKS50cmltKCk7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFBhdGhzLmluZGV4T2YoZnVuY3Rpb25OYW1lKSAhPT0gLTE7XG59XG5leHBvcnRzLmNsaXBQYXRoUHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcImNsaXBQYXRoXCIsIGNzc05hbWU6IFwiY2xpcC1wYXRoXCIsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICghaXNDbGlwUGF0aFZhbGlkKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xpcC1wYXRoIGlzIG5vdCB2YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSB0YXJnZXQuYmFja2dyb3VuZEludGVybmFsLndpdGhDbGlwUGF0aChuZXdWYWx1ZSk7XG4gICAgICAgIHRhcmdldC5iYWNrZ3JvdW5kSW50ZXJuYWwgPSBiYWNrZ3JvdW5kO1xuICAgIH1cbn0pO1xuZXhwb3J0cy5jbGlwUGF0aFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5mdW5jdGlvbiBpc0Zsb2F0VmFsdWVDb252ZXJ0ZXIodmFsdWUpIHtcbiAgICB2YXIgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICBpZiAoaXNOYU4obmV3VmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWU6IFwiICsgbmV3VmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5leHBvcnRzLnpJbmRleFByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7IG5hbWU6IFwiekluZGV4XCIsIGNzc05hbWU6IFwiei1pbmRleFwiLCB2YWx1ZUNvbnZlcnRlcjogaXNGbG9hdFZhbHVlQ29udmVydGVyIH0pO1xuZXhwb3J0cy56SW5kZXhQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZnVuY3Rpb24gb3BhY2l0eUNvbnZlcnRlcih2YWx1ZSkge1xuICAgIHZhciBuZXdWYWx1ZSA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgIGlmICghaXNOYU4obmV3VmFsdWUpICYmIDAgPD0gbmV3VmFsdWUgJiYgbmV3VmFsdWUgPD0gMSkge1xuICAgICAgICByZXR1cm4gbmV3VmFsdWU7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcIk9wYWNpdHkgc2hvdWxkIGJlIGJldHdlZW4gWzAsIDFdLiBWYWx1ZTogXCIgKyBuZXdWYWx1ZSk7XG59XG5leHBvcnRzLm9wYWNpdHlQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzQW5pbWF0aW9uUHJvcGVydHkoeyBuYW1lOiBcIm9wYWNpdHlcIiwgY3NzTmFtZTogXCJvcGFjaXR5XCIsIGRlZmF1bHRWYWx1ZTogMSwgdmFsdWVDb252ZXJ0ZXI6IG9wYWNpdHlDb252ZXJ0ZXIgfSk7XG5leHBvcnRzLm9wYWNpdHlQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5jb2xvclByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Jbmhlcml0ZWRDc3NQcm9wZXJ0eSh7IG5hbWU6IFwiY29sb3JcIiwgY3NzTmFtZTogXCJjb2xvclwiLCBlcXVhbGl0eUNvbXBhcmVyOiBjb2xvcl8xLkNvbG9yLmVxdWFscywgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgY29sb3JfMS5Db2xvcih2KTsgfSB9KTtcbmV4cG9ydHMuY29sb3JQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5mb250SW50ZXJuYWxQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcImZvbnRJbnRlcm5hbFwiLCBjc3NOYW1lOiBcIl9mb250SW50ZXJuYWxcIiwgZGVmYXVsdFZhbHVlOiBmb250XzEuRm9udC5kZWZhdWx0IH0pO1xuZXhwb3J0cy5mb250SW50ZXJuYWxQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5mb250RmFtaWx5UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkluaGVyaXRlZENzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcImZvbnRGYW1pbHlcIiwgY3NzTmFtZTogXCJmb250LWZhbWlseVwiLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCB2YWx1ZUNoYW5nZWQ6IGZ1bmN0aW9uICh0YXJnZXQsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgY3VycmVudEZvbnQgPSB0YXJnZXQuZm9udEludGVybmFsO1xuICAgICAgICBpZiAoY3VycmVudEZvbnQuZm9udEZhbWlseSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBuZXdGb250ID0gY3VycmVudEZvbnQud2l0aEZvbnRGYW1pbHkobmV3VmFsdWUpO1xuICAgICAgICAgICAgdGFyZ2V0LmZvbnRJbnRlcm5hbCA9IGZvbnRfMS5Gb250LmVxdWFscyhmb250XzEuRm9udC5kZWZhdWx0LCBuZXdGb250KSA/IHByb3BlcnRpZXNfMS51bnNldFZhbHVlIDogbmV3Rm9udDtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuZXhwb3J0cy5mb250RmFtaWx5UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuZm9udFNpemVQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuSW5oZXJpdGVkQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiZm9udFNpemVcIiwgY3NzTmFtZTogXCJmb250LXNpemVcIiwgYWZmZWN0c0xheW91dDogcGxhdGZvcm1fMS5pc0lPUywgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRGb250ID0gdGFyZ2V0LmZvbnRJbnRlcm5hbDtcbiAgICAgICAgaWYgKGN1cnJlbnRGb250LmZvbnRTaXplICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIG5ld0ZvbnQgPSBjdXJyZW50Rm9udC53aXRoRm9udFNpemUobmV3VmFsdWUpO1xuICAgICAgICAgICAgdGFyZ2V0LmZvbnRJbnRlcm5hbCA9IGZvbnRfMS5Gb250LmVxdWFscyhmb250XzEuRm9udC5kZWZhdWx0LCBuZXdGb250KSA/IHByb3BlcnRpZXNfMS51bnNldFZhbHVlIDogbmV3Rm9udDtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdmFsdWVDb252ZXJ0ZXI6IGZ1bmN0aW9uICh2KSB7IHJldHVybiBwYXJzZUZsb2F0KHYpOyB9XG59KTtcbmV4cG9ydHMuZm9udFNpemVQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xuZXhwb3J0cy5mb250U3R5bGVQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuSW5oZXJpdGVkQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiZm9udFN0eWxlXCIsIGNzc05hbWU6IFwiZm9udC1zdHlsZVwiLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCBkZWZhdWx0VmFsdWU6IGZvbnRfMS5Gb250U3R5bGUuTk9STUFMLCB2YWx1ZUNvbnZlcnRlcjogZm9udF8xLkZvbnRTdHlsZS5wYXJzZSwgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRGb250ID0gdGFyZ2V0LmZvbnRJbnRlcm5hbDtcbiAgICAgICAgaWYgKGN1cnJlbnRGb250LmZvbnRTdHlsZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBuZXdGb250ID0gY3VycmVudEZvbnQud2l0aEZvbnRTdHlsZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQuZm9udEludGVybmFsID0gZm9udF8xLkZvbnQuZXF1YWxzKGZvbnRfMS5Gb250LmRlZmF1bHQsIG5ld0ZvbnQpID8gcHJvcGVydGllc18xLnVuc2V0VmFsdWUgOiBuZXdGb250O1xuICAgICAgICB9XG4gICAgfVxufSk7XG5leHBvcnRzLmZvbnRTdHlsZVByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG5leHBvcnRzLmZvbnRXZWlnaHRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuSW5oZXJpdGVkQ3NzUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiZm9udFdlaWdodFwiLCBjc3NOYW1lOiBcImZvbnQtd2VpZ2h0XCIsIGFmZmVjdHNMYXlvdXQ6IHBsYXRmb3JtXzEuaXNJT1MsIGRlZmF1bHRWYWx1ZTogZm9udF8xLkZvbnRXZWlnaHQuTk9STUFMLCB2YWx1ZUNvbnZlcnRlcjogZm9udF8xLkZvbnRXZWlnaHQucGFyc2UsIHZhbHVlQ2hhbmdlZDogZnVuY3Rpb24gKHRhcmdldCwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBjdXJyZW50Rm9udCA9IHRhcmdldC5mb250SW50ZXJuYWw7XG4gICAgICAgIGlmIChjdXJyZW50Rm9udC5mb250V2VpZ2h0ICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdmFyIG5ld0ZvbnQgPSBjdXJyZW50Rm9udC53aXRoRm9udFdlaWdodChuZXdWYWx1ZSk7XG4gICAgICAgICAgICB0YXJnZXQuZm9udEludGVybmFsID0gZm9udF8xLkZvbnQuZXF1YWxzKGZvbnRfMS5Gb250LmRlZmF1bHQsIG5ld0ZvbnQpID8gcHJvcGVydGllc18xLnVuc2V0VmFsdWUgOiBuZXdGb250O1xuICAgICAgICB9XG4gICAgfVxufSk7XG5leHBvcnRzLmZvbnRXZWlnaHRQcm9wZXJ0eS5yZWdpc3Rlcihwcm9wZXJ0aWVzXzEuU3R5bGUpO1xudmFyIGZvbnRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuU2hvcnRoYW5kUHJvcGVydHkoe1xuICAgIG5hbWU6IFwiZm9udFwiLCBjc3NOYW1lOiBcImZvbnRcIixcbiAgICBnZXR0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9udFN0eWxlICsgXCIgXCIgKyB0aGlzLmZvbnRXZWlnaHQgKyBcIiBcIiArIHRoaXMuZm9udFNpemUgKyBcIiBcIiArIHRoaXMuZm9udEZhbWlseTtcbiAgICB9LFxuICAgIGNvbnZlcnRlcjogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gcHJvcGVydGllc18xLnVuc2V0VmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuZm9udFN0eWxlUHJvcGVydHksIHByb3BlcnRpZXNfMS51bnNldFZhbHVlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5mb250V2VpZ2h0UHJvcGVydHksIHByb3BlcnRpZXNfMS51bnNldFZhbHVlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5mb250U2l6ZVByb3BlcnR5LCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZV0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuZm9udEZhbWlseVByb3BlcnR5LCBwcm9wZXJ0aWVzXzEudW5zZXRWYWx1ZV1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm9udCA9IGZvbnRfMS5wYXJzZUZvbnQodmFsdWUpO1xuICAgICAgICAgICAgdmFyIGZvbnRTaXplID0gcGFyc2VGbG9hdChmb250LmZvbnRTaXplKTtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuZm9udFN0eWxlUHJvcGVydHksIGZvbnQuZm9udFN0eWxlXSxcbiAgICAgICAgICAgICAgICBbZXhwb3J0cy5mb250V2VpZ2h0UHJvcGVydHksIGZvbnQuZm9udFdlaWdodF0sXG4gICAgICAgICAgICAgICAgW2V4cG9ydHMuZm9udFNpemVQcm9wZXJ0eSwgZm9udFNpemVdLFxuICAgICAgICAgICAgICAgIFtleHBvcnRzLmZvbnRGYW1pbHlQcm9wZXJ0eSwgZm9udC5mb250RmFtaWx5XVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuZm9udFByb3BlcnR5LnJlZ2lzdGVyKHByb3BlcnRpZXNfMS5TdHlsZSk7XG52YXIgVmlzaWJpbGl0eTtcbihmdW5jdGlvbiAoVmlzaWJpbGl0eSkge1xuICAgIFZpc2liaWxpdHkuVklTSUJMRSA9IFwidmlzaWJsZVwiO1xuICAgIFZpc2liaWxpdHkuSElEREVOID0gXCJoaWRkZW5cIjtcbiAgICBWaXNpYmlsaXR5LkNPTExBUFNFID0gXCJjb2xsYXBzZVwiO1xuICAgIFZpc2liaWxpdHkuaXNWYWxpZCA9IHByb3BlcnRpZXNfMS5tYWtlVmFsaWRhdG9yKFZpc2liaWxpdHkuVklTSUJMRSwgVmlzaWJpbGl0eS5ISURERU4sIFZpc2liaWxpdHkuQ09MTEFQU0UpO1xuICAgIFZpc2liaWxpdHkucGFyc2UgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IFwiY29sbGFwc2VkXCIgPyBWaXNpYmlsaXR5LkNPTExBUFNFIDogcGFyc2VTdHJpY3QodmFsdWUpOyB9O1xuICAgIHZhciBwYXJzZVN0cmljdCA9IHByb3BlcnRpZXNfMS5tYWtlUGFyc2VyKFZpc2liaWxpdHkuaXNWYWxpZCk7XG59KShWaXNpYmlsaXR5ID0gZXhwb3J0cy5WaXNpYmlsaXR5IHx8IChleHBvcnRzLlZpc2liaWxpdHkgPSB7fSkpO1xuZXhwb3J0cy52aXNpYmlsaXR5UHJvcGVydHkgPSBuZXcgcHJvcGVydGllc18xLkNzc1Byb3BlcnR5KHtcbiAgICBuYW1lOiBcInZpc2liaWxpdHlcIiwgY3NzTmFtZTogXCJ2aXNpYmlsaXR5XCIsIGRlZmF1bHRWYWx1ZTogVmlzaWJpbGl0eS5WSVNJQkxFLCBhZmZlY3RzTGF5b3V0OiBwbGF0Zm9ybV8xLmlzSU9TLCB2YWx1ZUNvbnZlcnRlcjogVmlzaWJpbGl0eS5wYXJzZSwgdmFsdWVDaGFuZ2VkOiBmdW5jdGlvbiAodGFyZ2V0LCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgdmFyIHZpZXcgPSB0YXJnZXQudmlld1JlZi5nZXQoKTtcbiAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgIHZpZXcuaXNDb2xsYXBzZWQgPSAobmV3VmFsdWUgPT09IFZpc2liaWxpdHkuQ09MTEFQU0UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJhY2VfMS53cml0ZShuZXdWYWx1ZSArIFwiIG5vdCBzZXQgdG8gdmlldydzIHByb3BlcnR5IGJlY2F1c2UgXFxcIi52aWV3UmVmXFxcIiBpcyBjbGVhcmVkXCIsIHRyYWNlXzEuY2F0ZWdvcmllcy5TdHlsZSwgdHJhY2VfMS5tZXNzYWdlVHlwZS53YXJuKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuZXhwb3J0cy52aXNpYmlsaXR5UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYW5kcm9pZEVsZXZhdGlvblByb3BlcnR5ID0gbmV3IHByb3BlcnRpZXNfMS5Dc3NQcm9wZXJ0eSh7IG5hbWU6IFwiYW5kcm9pZEVsZXZhdGlvblwiLCBjc3NOYW1lOiBcImFuZHJvaWQtZWxldmF0aW9uXCIsIHZhbHVlQ29udmVydGVyOiBwYXJzZUZsb2F0IH0pO1xuZXhwb3J0cy5hbmRyb2lkRWxldmF0aW9uUHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbmV4cG9ydHMuYW5kcm9pZER5bmFtaWNFbGV2YXRpb25PZmZzZXRQcm9wZXJ0eSA9IG5ldyBwcm9wZXJ0aWVzXzEuQ3NzUHJvcGVydHkoeyBuYW1lOiBcImFuZHJvaWREeW5hbWljRWxldmF0aW9uT2Zmc2V0XCIsIGNzc05hbWU6IFwiYW5kcm9pZC1keW5hbWljLWVsZXZhdGlvbi1vZmZzZXRcIiwgdmFsdWVDb252ZXJ0ZXI6IHBhcnNlRmxvYXQgfSk7XG5leHBvcnRzLmFuZHJvaWREeW5hbWljRWxldmF0aW9uT2Zmc2V0UHJvcGVydHkucmVnaXN0ZXIocHJvcGVydGllc18xLlN0eWxlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlLXByb3BlcnRpZXMuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi9kYXRhL29ic2VydmFibGVcIik7XG52YXIgdHJhY2VfMSA9IHJlcXVpcmUoXCIuLi8uLi8uLi90cmFjZVwiKTtcbnZhciBTdHlsZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN0eWxlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN0eWxlKG93bmVyVmlldykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy51bnNjb3BlZENzc1ZhcmlhYmxlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgX3RoaXMuc2NvcGVkQ3NzVmFyaWFibGVzID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAob3duZXJWaWV3LmNvbnN0cnVjdG9yLnRvU3RyaW5nKCkuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xKSB7XG4gICAgICAgICAgICBfdGhpcy52aWV3UmVmID0gb3duZXJWaWV3O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMudmlld1JlZiA9IG5ldyBXZWFrUmVmKG93bmVyVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdHlsZS5wcm90b3R5cGUuc2V0U2NvcGVkQ3NzVmFyaWFibGUgPSBmdW5jdGlvbiAodmFyTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5zY29wZWRDc3NWYXJpYWJsZXMuc2V0KHZhck5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFN0eWxlLnByb3RvdHlwZS5zZXRVbnNjb3BlZENzc1ZhcmlhYmxlID0gZnVuY3Rpb24gKHZhck5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5zY29wZWRDc3NWYXJpYWJsZXMuc2V0KHZhck5hbWUsIHZhbHVlKTtcbiAgICB9O1xuICAgIFN0eWxlLnByb3RvdHlwZS5nZXRDc3NWYXJpYWJsZSA9IGZ1bmN0aW9uICh2YXJOYW1lKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3O1xuICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnVuc2NvcGVkQ3NzVmFyaWFibGVzLmhhcyh2YXJOYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudW5zY29wZWRDc3NWYXJpYWJsZXMuZ2V0KHZhck5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNjb3BlZENzc1ZhcmlhYmxlcy5oYXModmFyTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjb3BlZENzc1ZhcmlhYmxlcy5nZXQodmFyTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF2aWV3LnBhcmVudCB8fCAhdmlldy5wYXJlbnQuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2aWV3LnBhcmVudC5zdHlsZS5nZXRDc3NWYXJpYWJsZSh2YXJOYW1lKTtcbiAgICB9O1xuICAgIFN0eWxlLnByb3RvdHlwZS5yZXNldFNjb3BlZENzc1ZhcmlhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY29wZWRDc3NWYXJpYWJsZXMuY2xlYXIoKTtcbiAgICB9O1xuICAgIFN0eWxlLnByb3RvdHlwZS5yZXNldFVuc2NvcGVkQ3NzVmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc2NvcGVkQ3NzVmFyaWFibGVzLmNsZWFyKCk7XG4gICAgfTtcbiAgICBTdHlsZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2aWV3ID0gdGhpcy52aWV3UmVmLmdldCgpO1xuICAgICAgICBpZiAoIXZpZXcpIHtcbiAgICAgICAgICAgIHRyYWNlXzEud3JpdGUoXCJ0b1N0cmluZygpIG9mIFN0eWxlIGNhbm5vdCBleGVjdXRlIGNvcnJlY3RseSBiZWNhdXNlIFxcXCIudmlld1JlZlxcXCIgaXMgY2xlYXJlZFwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuQW5pbWF0aW9uLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLndhcm4pO1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXcgKyBcIi5zdHlsZVwiO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0eWxlLnByb3RvdHlwZSwgXCJ2aWV3XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52aWV3UmVmKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld1JlZi5nZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBTdHlsZTtcbn0ob2JzZXJ2YWJsZV8xLk9ic2VydmFibGUpKTtcbmV4cG9ydHMuU3R5bGUgPSBTdHlsZTtcblN0eWxlLnByb3RvdHlwZS5Qcm9wZXJ0eUJhZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcbiAgICB9XG4gICAgcmV0dXJuIGNsYXNzXzE7XG59KCkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3R5bGUuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NT0RFX1NISUZUID0gMzA7XG5leHBvcnRzLk1PREVfTUFTSyA9IDB4MyA8PCBleHBvcnRzLk1PREVfU0hJRlQ7XG5leHBvcnRzLlVOU1BFQ0lGSUVEID0gMCA8PCBleHBvcnRzLk1PREVfU0hJRlQ7XG5leHBvcnRzLkVYQUNUTFkgPSAxIDw8IGV4cG9ydHMuTU9ERV9TSElGVDtcbmV4cG9ydHMuQVRfTU9TVCA9IDIgPDwgZXhwb3J0cy5NT0RFX1NISUZUO1xuZXhwb3J0cy5NRUFTVVJFRF9IRUlHSFRfU1RBVEVfU0hJRlQgPSAweDAwMDAwMDEwO1xuZXhwb3J0cy5NRUFTVVJFRF9TVEFURV9UT09fU01BTEwgPSAweDAxMDAwMDAwO1xuZXhwb3J0cy5NRUFTVVJFRF9TVEFURV9NQVNLID0gMHhmZjAwMDAwMDtcbmV4cG9ydHMuTUVBU1VSRURfU0laRV9NQVNLID0gMHgwMGZmZmZmZjtcbmZ1bmN0aW9uIGdldE1vZGUobW9kZSkge1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgICBjYXNlIGV4cG9ydHMuRVhBQ1RMWTpcbiAgICAgICAgICAgIHJldHVybiBcIkV4YWN0XCI7XG4gICAgICAgIGNhc2UgZXhwb3J0cy5BVF9NT1NUOlxuICAgICAgICAgICAgcmV0dXJuIFwiQXRNb3N0XCI7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gXCJVbnNwZWNpZmllZFwiO1xuICAgIH1cbn1cbmV4cG9ydHMuZ2V0TW9kZSA9IGdldE1vZGU7XG5mdW5jdGlvbiBnZXRNZWFzdXJlU3BlY01vZGUoc3BlYykge1xuICAgIHJldHVybiAoc3BlYyAmIGV4cG9ydHMuTU9ERV9NQVNLKTtcbn1cbmV4cG9ydHMuZ2V0TWVhc3VyZVNwZWNNb2RlID0gZ2V0TWVhc3VyZVNwZWNNb2RlO1xuZnVuY3Rpb24gZ2V0TWVhc3VyZVNwZWNTaXplKHNwZWMpIHtcbiAgICByZXR1cm4gKHNwZWMgJiB+ZXhwb3J0cy5NT0RFX01BU0spO1xufVxuZXhwb3J0cy5nZXRNZWFzdXJlU3BlY1NpemUgPSBnZXRNZWFzdXJlU3BlY1NpemU7XG5mdW5jdGlvbiBtZWFzdXJlU3BlY1RvU3RyaW5nKG1lYXN1cmVTcGVjKSB7XG4gICAgdmFyIG1vZGUgPSBnZXRNZWFzdXJlU3BlY01vZGUobWVhc3VyZVNwZWMpO1xuICAgIHZhciBzaXplID0gZ2V0TWVhc3VyZVNwZWNTaXplKG1lYXN1cmVTcGVjKTtcbiAgICB2YXIgdGV4dCA9IFwiTWVhc3VyZVNwZWM6IFwiO1xuICAgIGlmIChtb2RlID09PSBleHBvcnRzLlVOU1BFQ0lGSUVEKSB7XG4gICAgICAgIHRleHQgKz0gXCJVTlNQRUNJRklFRCBcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kZSA9PT0gZXhwb3J0cy5FWEFDVExZKSB7XG4gICAgICAgIHRleHQgKz0gXCJFWEFDVExZIFwiO1xuICAgIH1cbiAgICBlbHNlIGlmIChtb2RlID09PSBleHBvcnRzLkFUX01PU1QpIHtcbiAgICAgICAgdGV4dCArPSBcIkFUX01PU1QgXCI7XG4gICAgfVxuICAgIHRleHQgKz0gc2l6ZTtcbiAgICByZXR1cm4gdGV4dDtcbn1cbmV4cG9ydHMubWVhc3VyZVNwZWNUb1N0cmluZyA9IG1lYXN1cmVTcGVjVG9TdHJpbmc7XG5mdW5jdGlvbiByb3VuZCh2YWx1ZSkge1xuICAgIHZhciByZXMgPSBNYXRoLmZsb29yKHZhbHVlICsgMC41KTtcbiAgICBpZiAocmVzICE9PSAwKSB7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmV4cG9ydHMucm91bmQgPSByb3VuZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC1oZWxwZXItY29tbW9uLmpzLm1hcCIsImZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgbGF5b3V0X2hlbHBlcl9jb21tb25fMSA9IHJlcXVpcmUoXCIuL2xheW91dC1oZWxwZXItY29tbW9uXCIpO1xuX19leHBvcnQocmVxdWlyZShcIi4vbGF5b3V0LWhlbHBlci1jb21tb25cIikpO1xudmFyIG1haW5TY3JlZW5TY2FsZTtcbmZ1bmN0aW9uIG1ha2VNZWFzdXJlU3BlYyhzaXplLCBtb2RlKSB7XG4gICAgcmV0dXJuIChNYXRoLnJvdW5kKE1hdGgubWF4KDAsIHNpemUpKSAmIH5sYXlvdXRfaGVscGVyX2NvbW1vbl8xLk1PREVfTUFTSykgfCAobW9kZSAmIGxheW91dF9oZWxwZXJfY29tbW9uXzEuTU9ERV9NQVNLKTtcbn1cbmV4cG9ydHMubWFrZU1lYXN1cmVTcGVjID0gbWFrZU1lYXN1cmVTcGVjO1xuZnVuY3Rpb24gZ2V0RGlzcGxheURlbnNpdHkoKSB7XG4gICAgcmV0dXJuIG1haW5TY3JlZW5TY2FsZTtcbn1cbmV4cG9ydHMuZ2V0RGlzcGxheURlbnNpdHkgPSBnZXREaXNwbGF5RGVuc2l0eTtcbmZ1bmN0aW9uIHRvRGV2aWNlUGl4ZWxzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICogbWFpblNjcmVlblNjYWxlO1xufVxuZXhwb3J0cy50b0RldmljZVBpeGVscyA9IHRvRGV2aWNlUGl4ZWxzO1xuZnVuY3Rpb24gdG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAvIG1haW5TY3JlZW5TY2FsZTtcbn1cbmV4cG9ydHMudG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyA9IHRvRGV2aWNlSW5kZXBlbmRlbnRQaXhlbHM7XG5mdW5jdGlvbiBtZWFzdXJlTmF0aXZlVmlldyhuYXRpdmVWaWV3LCB3aWR0aCwgd2lkdGhNb2RlLCBoZWlnaHQsIGhlaWdodE1vZGUpIHtcbiAgICB2YXIgdmlldyA9IG5hdGl2ZVZpZXc7XG4gICAgdmFyIG5hdGl2ZVNpemUgPSB2aWV3LnNpemVUaGF0Rml0cyh7XG4gICAgICAgIHdpZHRoOiB3aWR0aE1vZGUgPT09IDAgPyBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgOiB0b0RldmljZUluZGVwZW5kZW50UGl4ZWxzKHdpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRNb2RlID09PSAwID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogdG9EZXZpY2VJbmRlcGVuZGVudFBpeGVscyhoZWlnaHQpXG4gICAgfSk7XG4gICAgbmF0aXZlU2l6ZS53aWR0aCA9IGxheW91dF9oZWxwZXJfY29tbW9uXzEucm91bmQodG9EZXZpY2VQaXhlbHMobmF0aXZlU2l6ZS53aWR0aCkpO1xuICAgIG5hdGl2ZVNpemUuaGVpZ2h0ID0gbGF5b3V0X2hlbHBlcl9jb21tb25fMS5yb3VuZCh0b0RldmljZVBpeGVscyhuYXRpdmVTaXplLmhlaWdodCkpO1xuICAgIHJldHVybiBuYXRpdmVTaXplO1xufVxuZXhwb3J0cy5tZWFzdXJlTmF0aXZlVmlldyA9IG1lYXN1cmVOYXRpdmVWaWV3O1xubWFpblNjcmVlblNjYWxlID0gVUlTY3JlZW4ubWFpblNjcmVlbi5zY2FsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxheW91dC1oZWxwZXIuaW9zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIGRpc3BhdGNoVG9NYWluVGhyZWFkKGZ1bmMpIHtcbiAgICBOU09wZXJhdGlvblF1ZXVlLm1haW5RdWV1ZS5hZGRPcGVyYXRpb25XaXRoQmxvY2soZnVuYyk7XG59XG5leHBvcnRzLmRpc3BhdGNoVG9NYWluVGhyZWFkID0gZGlzcGF0Y2hUb01haW5UaHJlYWQ7XG5mdW5jdGlvbiBpc01haW5UaHJlYWQoKSB7XG4gICAgcmV0dXJuIE5TVGhyZWFkLmlzTWFpblRocmVhZDtcbn1cbmV4cG9ydHMuaXNNYWluVGhyZWFkID0gaXNNYWluVGhyZWFkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFpbnRocmVhZC1oZWxwZXIuaW9zLmpzLm1hcCIsIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0cmFjZV8xID0gcmVxdWlyZShcIi4uL3RyYWNlXCIpO1xuZnVuY3Rpb24gaXNPcmllbnRhdGlvbkxhbmRzY2FwZShvcmllbnRhdGlvbikge1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gMyB8fFxuICAgICAgICBvcmllbnRhdGlvbiA9PT0gNDtcbn1cbmZ1bmN0aW9uIG9wZW5GaWxlQXRSb290TW9kdWxlKGZpbGVQYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGFwcFBhdGggPSBpb3MuZ2V0Q3VycmVudEFwcFBhdGgoKTtcbiAgICAgICAgdmFyIHBhdGggPSBmaWxlUGF0aC5yZXBsYWNlKFwiflwiLCBhcHBQYXRoKTtcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBVSURvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyLmludGVyYWN0aW9uQ29udHJvbGxlcldpdGhVUkwoTlNVUkwuZmlsZVVSTFdpdGhQYXRoKHBhdGgpKTtcbiAgICAgICAgY29udHJvbGxlci5kZWxlZ2F0ZSA9IG5ldyBpb3MuVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlSW1wbCgpO1xuICAgICAgICByZXR1cm4gY29udHJvbGxlci5wcmVzZW50UHJldmlld0FuaW1hdGVkKHRydWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0cmFjZV8xLndyaXRlKFwiRXJyb3IgaW4gb3BlbkZpbGVcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLkVycm9yLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLmVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxudmFyIGlvcztcbihmdW5jdGlvbiAoaW9zKSB7XG4gICAgZnVuY3Rpb24gZ2V0dGVyKF90aGlzLCBwcm9wZXJ0eSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInV0aWxzLmlvcy5nZXR0ZXIoKSBpcyBkZXByZWNhdGVkOyB1c2UgdGhlIHJlc3BlY3RpdmUgbmF0aXZlIHByb3BlcnR5IGluc3RlYWRcIik7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5LmNhbGwoX3RoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlvcy5nZXR0ZXIgPSBnZXR0ZXI7XG4gICAgdmFyIGNvbGxlY3Rpb25zO1xuICAgIChmdW5jdGlvbiAoY29sbGVjdGlvbnMpIHtcbiAgICAgICAgZnVuY3Rpb24ganNBcnJheVRvTlNBcnJheShzdHIpIHtcbiAgICAgICAgICAgIHJldHVybiBOU0FycmF5LmFycmF5V2l0aEFycmF5KHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgY29sbGVjdGlvbnMuanNBcnJheVRvTlNBcnJheSA9IGpzQXJyYXlUb05TQXJyYXk7XG4gICAgICAgIGZ1bmN0aW9uIG5zQXJyYXlUb0pTQXJyYXkoYSkge1xuICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgICAgICAgaWYgKGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IGEuY291bnQ7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKGEub2JqZWN0QXRJbmRleChpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuICAgICAgICBjb2xsZWN0aW9ucy5uc0FycmF5VG9KU0FycmF5ID0gbnNBcnJheVRvSlNBcnJheTtcbiAgICB9KShjb2xsZWN0aW9ucyA9IGlvcy5jb2xsZWN0aW9ucyB8fCAoaW9zLmNvbGxlY3Rpb25zID0ge30pKTtcbiAgICBmdW5jdGlvbiBpc0xhbmRzY2FwZSgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJ1dGlscy5pb3MuaXNMYW5kc2NhcGUoKSBpcyBkZXByZWNhdGVkOyB1c2UgYXBwbGljYXRpb24ub3JpZW50YXRpb24gaW5zdGVhZFwiKTtcbiAgICAgICAgdmFyIGRldmljZU9yaWVudGF0aW9uID0gVUlEZXZpY2UuY3VycmVudERldmljZS5vcmllbnRhdGlvbjtcbiAgICAgICAgdmFyIHN0YXR1c0Jhck9yaWVudGF0aW9uID0gVUlBcHBsaWNhdGlvbi5zaGFyZWRBcHBsaWNhdGlvbi5zdGF0dXNCYXJPcmllbnRhdGlvbjtcbiAgICAgICAgdmFyIGlzRGV2aWNlT3JpZW50YXRpb25MYW5kc2NhcGUgPSBpc09yaWVudGF0aW9uTGFuZHNjYXBlKGRldmljZU9yaWVudGF0aW9uKTtcbiAgICAgICAgdmFyIGlzU3RhdHVzQmFyT3JpZW50YXRpb25MYW5kc2NhcGUgPSBpc09yaWVudGF0aW9uTGFuZHNjYXBlKHN0YXR1c0Jhck9yaWVudGF0aW9uKTtcbiAgICAgICAgcmV0dXJuIGlzRGV2aWNlT3JpZW50YXRpb25MYW5kc2NhcGUgfHwgaXNTdGF0dXNCYXJPcmllbnRhdGlvbkxhbmRzY2FwZTtcbiAgICB9XG4gICAgaW9zLmlzTGFuZHNjYXBlID0gaXNMYW5kc2NhcGU7XG4gICAgaW9zLk1ham9yVmVyc2lvbiA9IE5TU3RyaW5nLnN0cmluZ1dpdGhTdHJpbmcoVUlEZXZpY2UuY3VycmVudERldmljZS5zeXN0ZW1WZXJzaW9uKS5pbnRWYWx1ZTtcbiAgICBmdW5jdGlvbiBvcGVuRmlsZShmaWxlUGF0aCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInV0aWxzLmlvcy5vcGVuRmlsZSgpIGlzIGRlcHJlY2F0ZWQ7IHVzZSB1dGlscy5vcGVuRmlsZSgpIGluc3RlYWRcIik7XG4gICAgICAgIHJldHVybiBvcGVuRmlsZUF0Um9vdE1vZHVsZShmaWxlUGF0aCk7XG4gICAgfVxuICAgIGlvcy5vcGVuRmlsZSA9IG9wZW5GaWxlO1xuICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRBcHBQYXRoKCkge1xuICAgICAgICB2YXIgY3VycmVudERpciA9IF9fZGlybmFtZTtcbiAgICAgICAgdmFyIHRuc01vZHVsZXNJbmRleCA9IGN1cnJlbnREaXIuaW5kZXhPZihcIi90bnNfbW9kdWxlc1wiKTtcbiAgICAgICAgdmFyIGFwcFBhdGggPSBjdXJyZW50RGlyO1xuICAgICAgICBpZiAodG5zTW9kdWxlc0luZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgYXBwUGF0aCA9IGN1cnJlbnREaXIuc3Vic3RyaW5nKDAsIHRuc01vZHVsZXNJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcFBhdGg7XG4gICAgfVxuICAgIGlvcy5nZXRDdXJyZW50QXBwUGF0aCA9IGdldEN1cnJlbnRBcHBQYXRoO1xuICAgIGZ1bmN0aW9uIGpvaW5QYXRocygpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBwYXRoc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcGF0aHMgfHwgcGF0aHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTlNTdHJpbmcuc3RyaW5nV2l0aFN0cmluZyhOU1N0cmluZy5wYXRoV2l0aENvbXBvbmVudHMocGF0aHMpKS5zdHJpbmdCeVN0YW5kYXJkaXppbmdQYXRoO1xuICAgIH1cbiAgICBpb3Muam9pblBhdGhzID0gam9pblBhdGhzO1xuICAgIGZ1bmN0aW9uIGdldFZpc2libGVWaWV3Q29udHJvbGxlcihyb290Vmlld0NvbnRyb2xsZXIpIHtcbiAgICAgICAgaWYgKHJvb3RWaWV3Q29udHJvbGxlci5wcmVzZW50ZWRWaWV3Q29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIGdldFZpc2libGVWaWV3Q29udHJvbGxlcihyb290Vmlld0NvbnRyb2xsZXIucHJlc2VudGVkVmlld0NvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290Vmlld0NvbnRyb2xsZXIuaXNLaW5kT2ZDbGFzcyhVSU5hdmlnYXRpb25Db250cm9sbGVyLmNsYXNzKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0VmlzaWJsZVZpZXdDb250cm9sbGVyKHJvb3RWaWV3Q29udHJvbGxlci52aXNpYmxlVmlld0NvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyb290Vmlld0NvbnRyb2xsZXIuaXNLaW5kT2ZDbGFzcyhVSVRhYkJhckNvbnRyb2xsZXIuY2xhc3MoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRWaXNpYmxlVmlld0NvbnRyb2xsZXIocm9vdFZpZXdDb250cm9sbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9vdFZpZXdDb250cm9sbGVyO1xuICAgIH1cbiAgICBpb3MuZ2V0VmlzaWJsZVZpZXdDb250cm9sbGVyID0gZ2V0VmlzaWJsZVZpZXdDb250cm9sbGVyO1xuICAgIHZhciBVSURvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyRGVsZWdhdGVJbXBsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKFVJRG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJEZWxlZ2F0ZUltcGwsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIFVJRG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJEZWxlZ2F0ZUltcGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlSW1wbC5wcm90b3R5cGUuZ2V0Vmlld0NvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYXBwID0gVUlBcHBsaWNhdGlvbi5zaGFyZWRBcHBsaWNhdGlvbjtcbiAgICAgICAgICAgIHJldHVybiBhcHAua2V5V2luZG93LnJvb3RWaWV3Q29udHJvbGxlcjtcbiAgICAgICAgfTtcbiAgICAgICAgVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlSW1wbC5wcm90b3R5cGUuZG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJWaWV3Q29udHJvbGxlckZvclByZXZpZXcgPSBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Vmlld0NvbnRyb2xsZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlSW1wbC5wcm90b3R5cGUuZG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJWaWV3Rm9yUHJldmlldyA9IGZ1bmN0aW9uIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWaWV3Q29udHJvbGxlcigpLnZpZXc7XG4gICAgICAgIH07XG4gICAgICAgIFVJRG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJEZWxlZ2F0ZUltcGwucHJvdG90eXBlLmRvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyUmVjdEZvclByZXZpZXcgPSBmdW5jdGlvbiAoY29udHJvbGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Vmlld0NvbnRyb2xsZXIoKS52aWV3LmZyYW1lO1xuICAgICAgICB9O1xuICAgICAgICBVSURvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyRGVsZWdhdGVJbXBsLk9iakNQcm90b2NvbHMgPSBbVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlXTtcbiAgICAgICAgcmV0dXJuIFVJRG9jdW1lbnRJbnRlcmFjdGlvbkNvbnRyb2xsZXJEZWxlZ2F0ZUltcGw7XG4gICAgfShOU09iamVjdCkpO1xuICAgIGlvcy5VSURvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyRGVsZWdhdGVJbXBsID0gVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlckRlbGVnYXRlSW1wbDtcbn0pKGlvcyA9IGV4cG9ydHMuaW9zIHx8IChleHBvcnRzLmlvcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXRpdmUtaGVscGVyLmlvcy5qcy5tYXAiLCJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXBzaWxvbiA9IDFFLTA1O1xuZnVuY3Rpb24gYXJlQ2xvc2UodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICByZXR1cm4gKE1hdGguYWJzKHZhbHVlMSAtIHZhbHVlMikgPCBlcHNpbG9uKTtcbn1cbmV4cG9ydHMuYXJlQ2xvc2UgPSBhcmVDbG9zZTtcbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuT3JDbG9zZSh2YWx1ZTEsIHZhbHVlMikge1xuICAgIHJldHVybiAodmFsdWUxID4gdmFsdWUyKSB8fCBhcmVDbG9zZSh2YWx1ZTEsIHZhbHVlMik7XG59XG5leHBvcnRzLmdyZWF0ZXJUaGFuT3JDbG9zZSA9IGdyZWF0ZXJUaGFuT3JDbG9zZTtcbmZ1bmN0aW9uIGdyZWF0ZXJUaGFuKHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgcmV0dXJuICh2YWx1ZTEgPiB2YWx1ZTIpICYmICFhcmVDbG9zZSh2YWx1ZTEsIHZhbHVlMik7XG59XG5leHBvcnRzLmdyZWF0ZXJUaGFuID0gZ3JlYXRlclRoYW47XG5mdW5jdGlvbiBsZXNzVGhhbih2YWx1ZTEsIHZhbHVlMikge1xuICAgIHJldHVybiAodmFsdWUxIDwgdmFsdWUyKSAmJiAhYXJlQ2xvc2UodmFsdWUxLCB2YWx1ZTIpO1xufVxuZXhwb3J0cy5sZXNzVGhhbiA9IGxlc3NUaGFuO1xuZnVuY3Rpb24gaXNaZXJvKHZhbHVlKSB7XG4gICAgcmV0dXJuIChNYXRoLmFicyh2YWx1ZSkgPCBlcHNpbG9uKTtcbn1cbmV4cG9ydHMuaXNaZXJvID0gaXNaZXJvO1xuZnVuY3Rpb24gZ3JlYXRlclRoYW5aZXJvKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID4gMDtcbn1cbmV4cG9ydHMuZ3JlYXRlclRoYW5aZXJvID0gZ3JlYXRlclRoYW5aZXJvO1xuZnVuY3Rpb24gbm90TmVnYXRpdmUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPj0gMDtcbn1cbmV4cG9ydHMubm90TmVnYXRpdmUgPSBub3ROZWdhdGl2ZTtcbmV4cG9ydHMucmFkaWFuc1RvRGVncmVlcyA9IGZ1bmN0aW9uIChhKSB7IHJldHVybiBhICogKDE4MCAvIE1hdGguUEkpOyB9O1xuZXhwb3J0cy5kZWdyZWVzVG9SYWRpYW5zID0gZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEgKiAoTWF0aC5QSSAvIDE4MCk7IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1udW1iZXItdXRpbHMuanMubWFwIiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiIHx8IHZhbHVlIGluc3RhbmNlb2YgU3RyaW5nO1xufVxuZXhwb3J0cy5pc1N0cmluZyA9IGlzU3RyaW5nO1xuZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyO1xufVxuZXhwb3J0cy5pc051bWJlciA9IGlzTnVtYmVyO1xuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuO1xufVxuZXhwb3J0cy5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiO1xufVxuZXhwb3J0cy5pc09iamVjdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMuaXNVbmRlZmluZWQgPSBpc1VuZGVmaW5lZDtcbmZ1bmN0aW9uIGlzRGVmaW5lZCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCI7XG59XG5leHBvcnRzLmlzRGVmaW5lZCA9IGlzRGVmaW5lZDtcbmZ1bmN0aW9uIGlzTnVsbE9yVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGw7XG59XG5leHBvcnRzLmlzTnVsbE9yVW5kZWZpbmVkID0gaXNOdWxsT3JVbmRlZmluZWQ7XG5mdW5jdGlvbiB2ZXJpZnlDYWxsYmFjayh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAmJiAhaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbGxiYWNrIG11c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi5cIik7XG4gICAgfVxufVxuZXhwb3J0cy52ZXJpZnlDYWxsYmFjayA9IHZlcmlmeUNhbGxiYWNrO1xudmFyIGNsYXNzSW5mb3NNYXAgPSBuZXcgTWFwKCk7XG52YXIgZnVuY05hbWVSZWdleCA9IC9mdW5jdGlvbiAoW19hLXpBLVowLTldezEsfSlcXCgvO1xuZnVuY3Rpb24gZ2V0Q2xhc3Mob2JqZWN0KSB7XG4gICAgcmV0dXJuIGdldENsYXNzSW5mbyhvYmplY3QpLm5hbWU7XG59XG5leHBvcnRzLmdldENsYXNzID0gZ2V0Q2xhc3M7XG5mdW5jdGlvbiBnZXRDbGFzc0luZm8ob2JqZWN0KSB7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgIHZhciByZXN1bHQgPSBjbGFzc0luZm9zTWFwLmdldChjb25zdHJ1Y3Rvcik7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IENsYXNzSW5mbyhjb25zdHJ1Y3Rvcik7XG4gICAgICAgIGNsYXNzSW5mb3NNYXAuc2V0KGNvbnN0cnVjdG9yLCByZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5nZXRDbGFzc0luZm8gPSBnZXRDbGFzc0luZm87XG5mdW5jdGlvbiBnZXRCYXNlQ2xhc3NlcyhvYmplY3QpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGluZm8gPSBnZXRDbGFzc0luZm8ob2JqZWN0KTtcbiAgICB3aGlsZSAoaW5mbykge1xuICAgICAgICByZXN1bHQucHVzaChpbmZvLm5hbWUpO1xuICAgICAgICBpbmZvID0gaW5mby5iYXNlQ2xhc3NJbmZvO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5nZXRCYXNlQ2xhc3NlcyA9IGdldEJhc2VDbGFzc2VzO1xudmFyIENsYXNzSW5mbyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2xhc3NJbmZvKHR5cGVDb3NudHJ1Y3Rvcikge1xuICAgICAgICB0aGlzLl90eXBlQ29zbnRydWN0b3IgPSB0eXBlQ29zbnRydWN0b3I7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDbGFzc0luZm8ucHJvdG90eXBlLCBcIm5hbWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fbmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRzID0gKGZ1bmNOYW1lUmVnZXgpLmV4ZWModGhpcy5fdHlwZUNvc250cnVjdG9yLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX25hbWUgPSAocmVzdWx0cyAmJiByZXN1bHRzLmxlbmd0aCA+IDEpID8gcmVzdWx0c1sxXSA6IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENsYXNzSW5mby5wcm90b3R5cGUsIFwiYmFzZUNsYXNzSW5mb1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHRoaXMuX2Jhc2VDbGFzc0luZm8pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYmFzZUNsYXNzSW5mbyA9IENsYXNzSW5mby5fZ2V0QmFzZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYmFzZUNsYXNzSW5mbyAmJiB0aGlzLl9iYXNlQ2xhc3NJbmZvLm5hbWUgPT09IHRoaXMubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYXNlQ2xhc3NJbmZvID0gQ2xhc3NJbmZvLl9nZXRCYXNlKHRoaXMuX2Jhc2VDbGFzc0luZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYXNlQ2xhc3NJbmZvO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBDbGFzc0luZm8uX2dldEJhc2UgPSBmdW5jdGlvbiAoaW5mbykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yUHJvdG8gPSBpbmZvLl90eXBlQ29zbnRydWN0b3IucHJvdG90eXBlO1xuICAgICAgICBpZiAoY29uc3RydWN0b3JQcm90by5fX3Byb3RvX18pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldENsYXNzSW5mbyhjb25zdHJ1Y3RvclByb3RvLl9fcHJvdG9fXyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIHJldHVybiBDbGFzc0luZm87XG59KCkpO1xuZXhwb3J0cy5DbGFzc0luZm8gPSBDbGFzc0luZm87XG5mdW5jdGlvbiB0b1VJU3RyaW5nKG9iaikge1xuICAgIHJldHVybiBpc051bGxPclVuZGVmaW5lZChvYmopID8gXCJcIiA6IG9iaiArIFwiXCI7XG59XG5leHBvcnRzLnRvVUlTdHJpbmcgPSB0b1VJU3RyaW5nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIiwiZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0eXBlcyA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xudmFyIG1haW50aHJlYWRfaGVscGVyXzEgPSByZXF1aXJlKFwiLi9tYWludGhyZWFkLWhlbHBlclwiKTtcbnZhciBtb2R1bGVfbmFtZV9zYW5pdGl6ZXJfMSA9IHJlcXVpcmUoXCIuLi91aS9idWlsZGVyL21vZHVsZS1uYW1lLXNhbml0aXplclwiKTtcbnZhciBsYXlvdXQgPSByZXF1aXJlKFwiLi9sYXlvdXQtaGVscGVyXCIpO1xuZXhwb3J0cy5sYXlvdXQgPSBsYXlvdXQ7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9tYWludGhyZWFkLWhlbHBlclwiKSk7XG5leHBvcnRzLlJFU09VUkNFX1BSRUZJWCA9IFwicmVzOi8vXCI7XG5leHBvcnRzLkZJTEVfUFJFRklYID0gXCJmaWxlOi8vL1wiO1xuZnVuY3Rpb24gZXNjYXBlUmVnZXhTeW1ib2xzKHNvdXJjZSkge1xuICAgIHZhciBlc2NhcGVSZWdleCA9IC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZztcbiAgICByZXR1cm4gc291cmNlLnJlcGxhY2UoZXNjYXBlUmVnZXgsIFwiXFxcXCQmXCIpO1xufVxuZXhwb3J0cy5lc2NhcGVSZWdleFN5bWJvbHMgPSBlc2NhcGVSZWdleFN5bWJvbHM7XG5mdW5jdGlvbiBjb252ZXJ0U3RyaW5nKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoIXR5cGVzLmlzU3RyaW5nKHZhbHVlKSB8fCB2YWx1ZS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgdmFsdWVBc051bWJlciA9ICt2YWx1ZTtcbiAgICAgICAgaWYgKCFpc05hTih2YWx1ZUFzTnVtYmVyKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWVBc051bWJlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAmJiAodmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIgfHwgdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmYWxzZVwiKSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jb252ZXJ0U3RyaW5nID0gY29udmVydFN0cmluZztcbmZ1bmN0aW9uIGdldE1vZHVsZU5hbWUocGF0aCkge1xuICAgIHZhciBtb2R1bGVOYW1lID0gcGF0aC5yZXBsYWNlKFwiLi9cIiwgXCJcIik7XG4gICAgcmV0dXJuIG1vZHVsZV9uYW1lX3Nhbml0aXplcl8xLnNhbml0aXplTW9kdWxlTmFtZShtb2R1bGVOYW1lKTtcbn1cbmV4cG9ydHMuZ2V0TW9kdWxlTmFtZSA9IGdldE1vZHVsZU5hbWU7XG5mdW5jdGlvbiBpc0ZpbGVPclJlc291cmNlUGF0aChwYXRoKSB7XG4gICAgaWYgKCF0eXBlcy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLmluZGV4T2YoXCJ+L1wiKSA9PT0gMCB8fFxuICAgICAgICBwYXRoLmluZGV4T2YoXCIvXCIpID09PSAwIHx8XG4gICAgICAgIHBhdGguaW5kZXhPZihleHBvcnRzLlJFU09VUkNFX1BSRUZJWCkgPT09IDA7XG59XG5leHBvcnRzLmlzRmlsZU9yUmVzb3VyY2VQYXRoID0gaXNGaWxlT3JSZXNvdXJjZVBhdGg7XG5mdW5jdGlvbiBpc0ZvbnRJY29uVVJJKHVyaSkge1xuICAgIGlmICghdHlwZXMuaXNTdHJpbmcodXJpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBmaXJzdFNlZ21lbnQgPSB1cmkudHJpbSgpLnNwbGl0KFwiLy9cIilbMF07XG4gICAgcmV0dXJuIGZpcnN0U2VnbWVudCAmJiBmaXJzdFNlZ21lbnQuaW5kZXhPZihcImZvbnQ6XCIpID09PSAwO1xufVxuZXhwb3J0cy5pc0ZvbnRJY29uVVJJID0gaXNGb250SWNvblVSSTtcbmZ1bmN0aW9uIGlzRGF0YVVSSSh1cmkpIHtcbiAgICBpZiAoIXR5cGVzLmlzU3RyaW5nKHVyaSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZmlyc3RTZWdtZW50ID0gdXJpLnRyaW0oKS5zcGxpdChcIixcIilbMF07XG4gICAgcmV0dXJuIGZpcnN0U2VnbWVudCAmJiBmaXJzdFNlZ21lbnQuaW5kZXhPZihcImRhdGE6XCIpID09PSAwICYmIGZpcnN0U2VnbWVudC5pbmRleE9mKFwiYmFzZTY0XCIpID49IDA7XG59XG5leHBvcnRzLmlzRGF0YVVSSSA9IGlzRGF0YVVSSTtcbmZ1bmN0aW9uIG1lcmdlU29ydChhcnIsIGNvbXBhcmVGdW5jKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuICAgIHZhciBtaWRkbGUgPSBhcnIubGVuZ3RoIC8gMjtcbiAgICB2YXIgbGVmdCA9IGFyci5zbGljZSgwLCBtaWRkbGUpO1xuICAgIHZhciByaWdodCA9IGFyci5zbGljZShtaWRkbGUsIGFyci5sZW5ndGgpO1xuICAgIHJldHVybiBtZXJnZShtZXJnZVNvcnQobGVmdCwgY29tcGFyZUZ1bmMpLCBtZXJnZVNvcnQocmlnaHQsIGNvbXBhcmVGdW5jKSwgY29tcGFyZUZ1bmMpO1xufVxuZXhwb3J0cy5tZXJnZVNvcnQgPSBtZXJnZVNvcnQ7XG5mdW5jdGlvbiBtZXJnZShsZWZ0LCByaWdodCwgY29tcGFyZUZ1bmMpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgd2hpbGUgKGxlZnQubGVuZ3RoICYmIHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICBpZiAoY29tcGFyZUZ1bmMobGVmdFswXSwgcmlnaHRbMF0pIDw9IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxlZnQuc2hpZnQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChyaWdodC5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAobGVmdC5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobGVmdC5zaGlmdCgpKTtcbiAgICB9XG4gICAgd2hpbGUgKHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICByZXN1bHQucHVzaChyaWdodC5zaGlmdCgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZTtcbmZ1bmN0aW9uIGhhc0R1cGxpY2F0ZXMoYXJyKSB7XG4gICAgcmV0dXJuIGFyci5sZW5ndGggIT09IGVsaW1pbmF0ZUR1cGxpY2F0ZXMoYXJyKS5sZW5ndGg7XG59XG5leHBvcnRzLmhhc0R1cGxpY2F0ZXMgPSBoYXNEdXBsaWNhdGVzO1xuZnVuY3Rpb24gZWxpbWluYXRlRHVwbGljYXRlcyhhcnIpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGFycikpO1xufVxuZXhwb3J0cy5lbGltaW5hdGVEdXBsaWNhdGVzID0gZWxpbWluYXRlRHVwbGljYXRlcztcbmZ1bmN0aW9uIGV4ZWN1dGVPbk1haW5UaHJlYWQoZnVuYykge1xuICAgIGlmIChtYWludGhyZWFkX2hlbHBlcl8xLmlzTWFpblRocmVhZCgpKSB7XG4gICAgICAgIHJldHVybiBmdW5jKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBtYWludGhyZWFkX2hlbHBlcl8xLmRpc3BhdGNoVG9NYWluVGhyZWFkKGZ1bmMpO1xuICAgIH1cbn1cbmV4cG9ydHMuZXhlY3V0ZU9uTWFpblRocmVhZCA9IGV4ZWN1dGVPbk1haW5UaHJlYWQ7XG5mdW5jdGlvbiBtYWluVGhyZWFkaWZ5KGZ1bmMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYXJnc1RvUGFzcyA9IGFyZ3VtZW50cztcbiAgICAgICAgZXhlY3V0ZU9uTWFpblRocmVhZChmdW5jdGlvbiAoKSB7IHJldHVybiBmdW5jLmFwcGx5KF90aGlzLCBhcmdzVG9QYXNzKTsgfSk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWFpblRocmVhZGlmeSA9IG1haW5UaHJlYWRpZnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy1jb21tb24uanMubWFwIiwiZnVuY3Rpb24gX19leHBvcnQobSkge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBuYXRpdmVfaGVscGVyXzEgPSByZXF1aXJlKFwiLi9uYXRpdmUtaGVscGVyXCIpO1xuZXhwb3J0cy5pb3MgPSBuYXRpdmVfaGVscGVyXzEuaW9zO1xudmFyIHRyYWNlXzEgPSByZXF1aXJlKFwiLi4vdHJhY2VcIik7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi91dGlscy1jb21tb25cIikpO1xudmFyIG1haW5TY3JlZW5TY2FsZTtcbmZ1bmN0aW9uIG9wZW5GaWxlKGZpbGVQYXRoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGFwcFBhdGggPSBuYXRpdmVfaGVscGVyXzEuaW9zLmdldEN1cnJlbnRBcHBQYXRoKCk7XG4gICAgICAgIHZhciBwYXRoID0gZmlsZVBhdGgucmVwbGFjZShcIn5cIiwgYXBwUGF0aCk7XG4gICAgICAgIHZhciBjb250cm9sbGVyID0gVUlEb2N1bWVudEludGVyYWN0aW9uQ29udHJvbGxlci5pbnRlcmFjdGlvbkNvbnRyb2xsZXJXaXRoVVJMKE5TVVJMLmZpbGVVUkxXaXRoUGF0aChwYXRoKSk7XG4gICAgICAgIGNvbnRyb2xsZXIuZGVsZWdhdGUgPSBuZXcgbmF0aXZlX2hlbHBlcl8xLmlvcy5VSURvY3VtZW50SW50ZXJhY3Rpb25Db250cm9sbGVyRGVsZWdhdGVJbXBsKCk7XG4gICAgICAgIHJldHVybiBjb250cm9sbGVyLnByZXNlbnRQcmV2aWV3QW5pbWF0ZWQodHJ1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRyYWNlXzEud3JpdGUoXCJFcnJvciBpbiBvcGVuRmlsZVwiLCB0cmFjZV8xLmNhdGVnb3JpZXMuRXJyb3IsIHRyYWNlXzEubWVzc2FnZVR5cGUuZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLm9wZW5GaWxlID0gb3BlbkZpbGU7XG5mdW5jdGlvbiBHQygpIHtcbiAgICBfX2NvbGxlY3QoKTtcbn1cbmV4cG9ydHMuR0MgPSBHQztcbmZ1bmN0aW9uIHJlbGVhc2VOYXRpdmVPYmplY3Qob2JqZWN0KSB7XG4gICAgX19yZWxlYXNlTmF0aXZlQ291bnRlcnBhcnQob2JqZWN0KTtcbn1cbmV4cG9ydHMucmVsZWFzZU5hdGl2ZU9iamVjdCA9IHJlbGVhc2VOYXRpdmVPYmplY3Q7XG5mdW5jdGlvbiBvcGVuVXJsKGxvY2F0aW9uKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHVybCA9IE5TVVJMLlVSTFdpdGhTdHJpbmcobG9jYXRpb24udHJpbSgpKTtcbiAgICAgICAgaWYgKFVJQXBwbGljYXRpb24uc2hhcmVkQXBwbGljYXRpb24uY2FuT3BlblVSTCh1cmwpKSB7XG4gICAgICAgICAgICByZXR1cm4gVUlBcHBsaWNhdGlvbi5zaGFyZWRBcHBsaWNhdGlvbi5vcGVuVVJMKHVybCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdHJhY2VfMS53cml0ZShcIkVycm9yIGluIE9wZW5VUkxcIiwgdHJhY2VfMS5jYXRlZ29yaWVzLkVycm9yLCB0cmFjZV8xLm1lc3NhZ2VUeXBlLmVycm9yKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5vcGVuVXJsID0gb3BlblVybDtcbm1haW5TY3JlZW5TY2FsZSA9IFVJU2NyZWVuLm1haW5TY3JlZW4uc2NhbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5pb3MuanMubWFwIiwidmFyIGNvbnZlcnNpb25zID0ge1xyXG4gICAgLy8gbGVuZ3RoXHJcbiAgICAncHgnOiB7XHJcbiAgICAgICAgJ3B4JzogMSxcclxuICAgICAgICAnY20nOiA5Ni4wLzIuNTQsXHJcbiAgICAgICAgJ21tJzogOTYuMC8yNS40LFxyXG4gICAgICAgICdpbic6IDk2LFxyXG4gICAgICAgICdwdCc6IDk2LjAvNzIuMCxcclxuICAgICAgICAncGMnOiAxNlxyXG4gICAgfSxcclxuICAgICdjbSc6IHtcclxuICAgICAgICAncHgnOiAyLjU0Lzk2LjAsXHJcbiAgICAgICAgJ2NtJzogMSxcclxuICAgICAgICAnbW0nOiAwLjEsXHJcbiAgICAgICAgJ2luJzogMi41NCxcclxuICAgICAgICAncHQnOiAyLjU0LzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMi41NC82LjBcclxuICAgIH0sXHJcbiAgICAnbW0nOiB7XHJcbiAgICAgICAgJ3B4JzogMjUuNC85Ni4wLFxyXG4gICAgICAgICdjbSc6IDEwLFxyXG4gICAgICAgICdtbSc6IDEsXHJcbiAgICAgICAgJ2luJzogMjUuNCxcclxuICAgICAgICAncHQnOiAyNS40LzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMjUuNC82LjBcclxuICAgIH0sXHJcbiAgICAnaW4nOiB7XHJcbiAgICAgICAgJ3B4JzogMS4wLzk2LjAsXHJcbiAgICAgICAgJ2NtJzogMS4wLzIuNTQsXHJcbiAgICAgICAgJ21tJzogMS4wLzI1LjQsXHJcbiAgICAgICAgJ2luJzogMSxcclxuICAgICAgICAncHQnOiAxLjAvNzIuMCxcclxuICAgICAgICAncGMnOiAxLjAvNi4wXHJcbiAgICB9LFxyXG4gICAgJ3B0Jzoge1xyXG4gICAgICAgICdweCc6IDAuNzUsXHJcbiAgICAgICAgJ2NtJzogNzIuMC8yLjU0LFxyXG4gICAgICAgICdtbSc6IDcyLjAvMjUuNCxcclxuICAgICAgICAnaW4nOiA3MixcclxuICAgICAgICAncHQnOiAxLFxyXG4gICAgICAgICdwYyc6IDEyXHJcbiAgICB9LFxyXG4gICAgJ3BjJzoge1xyXG4gICAgICAgICdweCc6IDYuMC85Ni4wLFxyXG4gICAgICAgICdjbSc6IDYuMC8yLjU0LFxyXG4gICAgICAgICdtbSc6IDYuMC8yNS40LFxyXG4gICAgICAgICdpbic6IDYsXHJcbiAgICAgICAgJ3B0JzogNi4wLzcyLjAsXHJcbiAgICAgICAgJ3BjJzogMVxyXG4gICAgfSxcclxuICAgIC8vIGFuZ2xlXHJcbiAgICAnZGVnJzoge1xyXG4gICAgICAgICdkZWcnOiAxLFxyXG4gICAgICAgICdncmFkJzogMC45LFxyXG4gICAgICAgICdyYWQnOiAxODAvTWF0aC5QSSxcclxuICAgICAgICAndHVybic6IDM2MFxyXG4gICAgfSxcclxuICAgICdncmFkJzoge1xyXG4gICAgICAgICdkZWcnOiA0MDAvMzYwLFxyXG4gICAgICAgICdncmFkJzogMSxcclxuICAgICAgICAncmFkJzogMjAwL01hdGguUEksXHJcbiAgICAgICAgJ3R1cm4nOiA0MDBcclxuICAgIH0sXHJcbiAgICAncmFkJzoge1xyXG4gICAgICAgICdkZWcnOiBNYXRoLlBJLzE4MCxcclxuICAgICAgICAnZ3JhZCc6IE1hdGguUEkvMjAwLFxyXG4gICAgICAgICdyYWQnOiAxLFxyXG4gICAgICAgICd0dXJuJzogTWF0aC5QSSoyXHJcbiAgICB9LFxyXG4gICAgJ3R1cm4nOiB7XHJcbiAgICAgICAgJ2RlZyc6IDEvMzYwLFxyXG4gICAgICAgICdncmFkJzogMS80MDAsXHJcbiAgICAgICAgJ3JhZCc6IDAuNS9NYXRoLlBJLFxyXG4gICAgICAgICd0dXJuJzogMVxyXG4gICAgfSxcclxuICAgIC8vIHRpbWVcclxuICAgICdzJzoge1xyXG4gICAgICAgICdzJzogMSxcclxuICAgICAgICAnbXMnOiAxLzEwMDBcclxuICAgIH0sXHJcbiAgICAnbXMnOiB7XHJcbiAgICAgICAgJ3MnOiAxMDAwLFxyXG4gICAgICAgICdtcyc6IDFcclxuICAgIH0sXHJcbiAgICAvLyBmcmVxdWVuY3lcclxuICAgICdIeic6IHtcclxuICAgICAgICAnSHonOiAxLFxyXG4gICAgICAgICdrSHonOiAxMDAwXHJcbiAgICB9LFxyXG4gICAgJ2tIeic6IHtcclxuICAgICAgICAnSHonOiAxLzEwMDAsXHJcbiAgICAgICAgJ2tIeic6IDFcclxuICAgIH0sXHJcbiAgICAvLyByZXNvbHV0aW9uXHJcbiAgICAnZHBpJzoge1xyXG4gICAgICAgICdkcGknOiAxLFxyXG4gICAgICAgICdkcGNtJzogMS4wLzIuNTQsXHJcbiAgICAgICAgJ2RwcHgnOiAxLzk2XHJcbiAgICB9LFxyXG4gICAgJ2RwY20nOiB7XHJcbiAgICAgICAgJ2RwaSc6IDIuNTQsXHJcbiAgICAgICAgJ2RwY20nOiAxLFxyXG4gICAgICAgICdkcHB4JzogMi41NC85Ni4wXHJcbiAgICB9LFxyXG4gICAgJ2RwcHgnOiB7XHJcbiAgICAgICAgJ2RwaSc6IDk2LFxyXG4gICAgICAgICdkcGNtJzogOTYuMC8yLjU0LFxyXG4gICAgICAgICdkcHB4JzogMVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIHNvdXJjZVVuaXQsIHRhcmdldFVuaXQsIHByZWNpc2lvbikge1xyXG4gICAgaWYgKCFjb252ZXJzaW9ucy5oYXNPd25Qcm9wZXJ0eSh0YXJnZXRVbml0KSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29udmVydCB0byBcIiArIHRhcmdldFVuaXQpO1xyXG5cclxuICAgIGlmICghY29udmVyc2lvbnNbdGFyZ2V0VW5pdF0uaGFzT3duUHJvcGVydHkoc291cmNlVW5pdCkpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnZlcnQgZnJvbSBcIiArIHNvdXJjZVVuaXQgKyBcIiB0byBcIiArIHRhcmdldFVuaXQpO1xyXG5cclxuICAgIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwYXJzZUludChwcmVjaXNpb24pIHx8IDUpO1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoKGNvbnZlcnNpb25zW3RhcmdldFVuaXRdW3NvdXJjZVVuaXRdICogdmFsdWUpICogcHJlY2lzaW9uKSAvIHByZWNpc2lvbjtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7XCJ0eXBlXCI6XCJzdHlsZXNoZWV0XCIsXCJzdHlsZXNoZWV0XCI6e1wicnVsZXNcIjpbe1widHlwZVwiOlwiY29tbWVudFwiLFwiY29tbWVudFwiOlwiIVxcclxcbiAqIE5hdGl2ZVNjcmlwdCBUaGVtZSB2MS4wLjYgKGh0dHBzOi8vbmF0aXZlc2NyaXB0Lm9yZylcXHJcXG4gKiBDb3B5cmlnaHQgMjAxNi0yMDE2IFRoZSBUaGVtZSBBdXRob3JzXFxyXFxuICogQ29weXJpZ2h0IDIwMTYtMjAxNiBUZWxlcmlrXFxyXFxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vTmF0aXZlU2NyaXB0L3RoZW1lL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXFxyXFxuIFwifSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy13aGl0ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXdoaXRlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1ibGFja1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWJsYWNrXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1hcXVhXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMDBjYWFiXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctYXF1YVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMDBjYWFiXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmx1ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWJsdWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWNoYXJjb2FsXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzAzMDMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctY2hhcmNvYWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwMzAzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJyb3duXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjNzk1NTQ4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtYmctYnJvd25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzc5NTU0OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWZvcmVzdFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwNjk2OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWZvcmVzdFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMDA2OTY4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtZ3JleVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWdyZXlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWdyZXktbGlnaHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNiYWJhYmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1ncmV5LWxpZ2h0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNiYWJhYmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1ncmV5LWRhcmtcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM1YzY4N2NcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1ncmV5LWRhcmtcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzVjNjg3Y1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLXB1cnBsZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzgxMzBmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXB1cnBsZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjODEzMGZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtbGVtb25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmVhMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYy1iZy1sZW1vblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZlYTAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtbGltZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2FlZTQwNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLWxpbWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2FlZTQwNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLW9yYW5nZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2Y1N2MwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLW9yYW5nZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZjU3YzAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmMtcnVieVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXJ1YnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLXNreVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5jLWJnLXNreVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnctZnVsbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi53LTEwMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmgtZnVsbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjEwMCVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaC0xMDBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCIxMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTEwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTEwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0xMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjEyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0xMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMTVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjE2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMjRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMjRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tdC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1sLTI1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LTI1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjI1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXQtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1yLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS1iLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tbC0yOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS14LTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjI4XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teS0yOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi10b3BcIixcInZhbHVlXCI6XCIyOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS10LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tci0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0tYi0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLWwtMzBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tbGVmdFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLm0teC0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWxlZnRcIixcInZhbHVlXCI6XCIzMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXktMzBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tdG9wXCIsXCJ2YWx1ZVwiOlwiMzBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0wXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC00XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC01XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC04XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtOFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0xMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMTJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjEyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0xNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTE1XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIxNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMTZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0xNlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMTZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTIwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMjBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjIwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0yNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjI0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTI0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMjRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXQtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtci0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWItMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtbC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteC0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctcmlnaHRcIixcInZhbHVlXCI6XCIyNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAteS0yNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMjVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWJvdHRvbVwiLFwidmFsdWVcIjpcIjI1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC10LTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXItMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1iLTI4XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLWwtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXgtMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMjhcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLWxlZnRcIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLXktMjhcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nLXRvcFwiLFwidmFsdWVcIjpcIjI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1ib3R0b21cIixcInZhbHVlXCI6XCIyOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtdC0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctdG9wXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1yLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnAtYi0zMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC1sLTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC14LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1yaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucC15LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy10b3BcIixcInZhbHVlXCI6XCIzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaHItbGlnaHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCIxXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNlMGUwZTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjEwMCVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaHItZGFya1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwMzAzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LWxlZnRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ0ZXh0LWFsaWduXCIsXCJ2YWx1ZVwiOlwibGVmdFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LXJpZ2h0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcInJpZ2h0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRleHQtY2VudGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LWxvd2VyY2FzZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtdHJhbnNmb3JtXCIsXCJ2YWx1ZVwiOlwibG93ZXJjYXNlXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRleHQtdXBwZXJjYXNlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC10cmFuc2Zvcm1cIixcInZhbHVlXCI6XCJ1cHBlcmNhc2VcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1jYXBpdGFsaXplXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC10cmFuc2Zvcm1cIixcInZhbHVlXCI6XCJjYXBpdGFsaXplXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvbnQtd2VpZ2h0LW5vcm1hbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtd2VpZ2h0XCIsXCJ2YWx1ZVwiOlwibm9ybWFsXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvbnQtd2VpZ2h0LWJvbGRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcImJvbGRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9udC1pdGFsaWNcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXN0eWxlXCIsXCJ2YWx1ZVwiOlwiaXRhbGljXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMTBcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTEyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0xNFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMTVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTE2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0xN1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE3XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMThcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTE5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTlcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudC0yMFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnQtMjVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIyNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50LTMwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMzBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaW1nLXJvdW5kZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5pbWctY2lyY2xlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjIwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmltZy10aHVtYm5haWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5pbnZpc2libGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ2aXNpYmlsaXR5XCIsXCJ2YWx1ZVwiOlwiY29sbGFwc2VcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHVsbC1sZWZ0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHVsbC1yaWdodFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJyaWdodFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5tLXgtYXV0b1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubS15LWF1dG9cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ2ZXJ0aWNhbC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50ZXh0LXByaW1hcnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1kYW5nZXJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNkNTAwMDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIudGV4dC1tdXRlZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzllOWU5ZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5iZy1wcmltYXJ5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYmctZGFuZ2VyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNkNTAwMDBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYWN0aW9uLWJhclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjRjhGOEY4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1iYXItdGl0bGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXdlaWdodFwiLFwidmFsdWVcIjpcImJvbGRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxN1wifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInZlcnRpY2FsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmFjdGlvbi1iYXIgLmFjdGlvbi1pdGVtXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJub3JtYWxcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYWN0aXZpdHktaW5kaWNhdG9yXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIzMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjMwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0blwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCJ0cmFuc3BhcmVudFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1pbi1oZWlnaHRcIixcInZhbHVlXCI6XCIzNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1pbi13aWR0aFwiLFwidmFsdWVcIjpcIjY0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjEwIDEwIDEwIDEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMThcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCI4IDE2IDggMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2MwZWJmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tYWN0aXZlOmhpZ2hsaWdodGVkXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMWEwZWNcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjMDFhMGVjXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1wcmltYXJ5LmJ0bi1hcXVhXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMGNhYWJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLWJsdWVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzNkNWFmZVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tYnJvd25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzc5NTU0OFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tZm9yZXN0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMwMDY5NjhcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLWdyZXlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzVjNjg3Y1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tbGVtb25cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZWEwMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzAwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tbGltZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjYWVlNDA2XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMDAwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1wcmltYXJ5LmJ0bi1vcmFuZ2VcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2Y1N2MwMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tcHVycGxlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiM4MTMwZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXByaW1hcnkuYnRuLXJ1YnlcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmMTc0NFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcHJpbWFyeS5idG4tc2t5XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLW91dGxpbmVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwidHJhbnNwYXJlbnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0bi1vdXRsaW5lLmJ0bi1hY3RpdmU6aGlnaGxpZ2h0ZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2MwZWJmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG5baXNFbmFibGVkPWZhbHNlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2E0YTRhNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mYVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtZmFtaWx5XCIsXCJ2YWx1ZVwiOlwiRm9udEF3ZXNvbWUsIGZvbnRhd2Vzb21lLXdlYmZvbnRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTYgOCAxNiA4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcInRyYW5zcGFyZW50XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LmlucHV0LWJvcmRlclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXQuaW5wdXQtcm91bmRlZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjI4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0W2lzRW5hYmxlZD0nZmFsc2UnXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmFmYWZhXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LWZpZWxkXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiOFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtIC5pbnB1dC1maWVsZCAubGFiZWxcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2JhYmFiYVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtIC5pbnB1dC1maWVsZCAuaW5wdXRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMCA4IDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9ybSAuaW5wdXQtZmllbGQgLmhyLWxpZ2h0LmFjdGl2ZVwiLFwiLmZvcm0gLmlucHV0LWZpZWxkIC5oci1kYXJrLmFjdGl2ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LWZpZWxkLmlucHV0LXNpZGVzIC5sYWJlbFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMCAwIDggMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oMVwiLFwiLmgyXCIsXCIuaDNcIixcIi5oNFwiLFwiLmg1XCIsXCIuaDZcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtd2VpZ2h0XCIsXCJ2YWx1ZVwiOlwibm9ybWFsXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJvZHlcIixcIi5ib2R5MlwiLFwiLmZvb3Rub3RlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJub3JtYWxcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM3NTc1NzVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDFcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIzMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oMlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjIyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmgzXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5oNVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjExXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmg2XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYm9keVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE0XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJvZHkyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTdcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuZm9vdG5vdGVcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxM1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMyMTIxMjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtIExhYmVsXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidmVydGljYWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtIC50aHVtYlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInN0cmV0Y2hcIixcInZhbHVlXCI6XCJmaWxsXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCI0MFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjQwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXJpZ2h0XCIsXCJ2YWx1ZVwiOlwiMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtLmFjdGl2ZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSAubGlzdC1ncm91cC1pdGVtLXRleHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM3NTc1NzVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5wYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIucHJvZ3Jlc3NcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2JhYmFiYVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zZWdtZW50ZWQtYmFyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTNcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzIxMjEyMVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInNlbGVjdGVkLWJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdFwiLFwiLnNpZGVkcmF3ZXItY2VudGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiNmYWZhZmFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1oZWFkZXJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZhZmFmYVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjE0OFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIndpZHRoXCIsXCJ2YWx1ZVwiOlwiMTAwJVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjE2IDE2IDAgMTZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1jZW50ZXIgLnNpZGVkcmF3ZXItaGVhZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjIwIDE1IDAgMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1oZWFkZXItaW1hZ2VcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyLWltYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaGVpZ2h0XCIsXCJ2YWx1ZVwiOlwiNjRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjY0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjMyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiMzZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1jZW50ZXIgLnNpZGVkcmF3ZXItaGVhZGVyLWltYWdlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaGVpZ2h0XCIsXCJ2YWx1ZVwiOlwiNzRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjc0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjM3XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1ib3R0b21cIixcInZhbHVlXCI6XCIyNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWhlYWRlci1icmFuZFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzczNzM3M1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxlZnQgLnNpZGVkcmF3ZXItaGVhZGVyLWJyYW5kXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiaG9yaXpvbnRhbC1hbGlnblwiLFwidmFsdWVcIjpcImxlZnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWNlbnRlciAuc2lkZWRyYXdlci1oZWFkZXItYnJhbmRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJob3Jpem9udGFsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJoZWlnaHRcIixcInZhbHVlXCI6XCI0OFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhvcml6b250YWwtYWxpZ25cIixcInZhbHVlXCI6XCJsZWZ0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIxMDAlXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwib3JpZW50YXRpb25cIixcInZhbHVlXCI6XCJob3Jpem9udGFsXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGlzdC1pdGVtIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwid2lkdGhcIixcInZhbHVlXCI6XCIyNFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImhlaWdodFwiLFwidmFsdWVcIjpcIjQ4XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidmVydGljYWwtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW0uYWN0aXZlXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2lkZWRyYXdlci1saXN0LWl0ZW0uYWN0aXZlIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMTYgMCAxNlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWNlbnRlciAuc2lkZWRyYXdlci1saXN0LWl0ZW0taWNvblwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpblwiLFwidmFsdWVcIjpcIjAgMCAwIDE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGlzdC1pdGVtLXRleHRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJob3Jpem9udGFsLWFsaWduXCIsXCJ2YWx1ZVwiOlwibGVmdFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJsZWZ0XCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTVcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwidHJhbnNwYXJlbnRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItd2lkdGhcIixcInZhbHVlXCI6XCIwLjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ3aWR0aFwiLFwidmFsdWVcIjpcIjgwJVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInZlcnRpY2FsLWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItbGVmdCAuc2lkZWRyYXdlci1saXN0LWl0ZW0tdGV4dFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmctbGVmdFwiLFwidmFsdWVcIjpcIjE2XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnNpZGVkcmF3ZXItY2VudGVyIC5zaWRlZHJhd2VyLWxpc3QtaXRlbS10ZXh0XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZy1sZWZ0XCIsXCJ2YWx1ZVwiOlwiMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2xpZGVyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1jb2xvclwiLFwidmFsdWVcIjpcIiMzMGJjZmZcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc2xpZGVyW2lzRW5hYmxlZD1mYWxzZV1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zd2l0Y2hbY2hlY2tlZD10cnVlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnN3aXRjaFtjaGVja2VkPXRydWVdW2lzRW5hYmxlZD1mYWxzZV1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJiYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2UwZTBlMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zd2l0Y2hbaXNFbmFibGVkPWZhbHNlXVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjZTBlMGUwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLnRhYi12aWV3XCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwic2VsZWN0ZWQtY29sb3JcIixcInZhbHVlXCI6XCIjMzBiY2ZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGFicy1iYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi50YWItdmlldyAudGFiLXZpZXctaXRlbVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGFicy1iYWNrZ3JvdW5kLWNvbG9yXCIsXCJ2YWx1ZVwiOlwiI2ZmZlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIiNsb2dpbi1iYWNrZ3JvdW5kXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIi0yMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtc2l6ZVwiLFwidmFsdWVcIjpcImNvdmVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFwidmFsdWVcIjpcImNlbnRlclwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5sb2dpbi13cmFwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjAgNDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiNjAgMCAxMCAwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwicGFkZGluZ1wiLFwidmFsdWVcIjpcIjIwIDBcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwIC5sb2dpbi1sb2dvXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwidGV4dC1hbGlnblwiLFwidmFsdWVcIjpcImNlbnRlclwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjMwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC13ZWlnaHRcIixcInZhbHVlXCI6XCJib2xkXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLWJvdHRvbVwiLFwidmFsdWVcIjpcIjEwXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwib3BhY2l0eVwiLFwidmFsdWVcIjpcIjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiMyMTIxMjFcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJvcGFjaXR5XCIsXCJ2YWx1ZVwiOlwiLjlcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9nby13cmFwIC5sb2dpbi1sb2dvLXN1YlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzIxMjEyMVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm9wYWNpdHlcIixcInZhbHVlXCI6XCIuOFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInRleHQtYWxpZ25cIixcInZhbHVlXCI6XCJjZW50ZXJcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9naW4td3JhcHBlclwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcInBhZGRpbmdcIixcInZhbHVlXCI6XCIyMFwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJhY2tncm91bmQtY29sb3JcIixcInZhbHVlXCI6XCIjZmZmXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiYm9yZGVyLXJhZGl1c1wiLFwidmFsdWVcIjpcIjNcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubG9naW4td3JhcHBlciBUZXh0RmllbGRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTAgMTBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIxMCAwIDAgMFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5nby1iYWNrXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1zaXplXCIsXCJ2YWx1ZVwiOlwiMTRcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJ0ZXh0LWFsaWduXCIsXCJ2YWx1ZVwiOlwiY2VudGVyXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiY29sb3JcIixcInZhbHVlXCI6XCIjMjEyMTIxXCJ9LHtcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luLXRvcFwiLFwidmFsdWVcIjpcIjEwXCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmJ0blwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjBcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LWZhbWlseVwiLFwidmFsdWVcIjpcIidTRiBVSSBUZXh0IE1lZGl1bSdcIn0se1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tb3V0bGluZVwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci13aWR0aFwiLFwidmFsdWVcIjpcIjFcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuYnRuLXJvdW5kZWQtc21cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiNFwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5idG4tcm91bmRlZC1sZ1wiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImJvcmRlci1yYWRpdXNcIixcInZhbHVlXCI6XCIxOVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwiZm9udC1mYW1pbHlcIixcInZhbHVlXCI6XCInU0YgVUkgVGV4dCBSZWd1bGFyJ1wifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5mb3JtIC5pbnB1dFwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImZvbnQtc2l6ZVwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmZvcm0gLmlucHV0LmlucHV0LXJvdW5kZWRcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJib3JkZXItcmFkaXVzXCIsXCJ2YWx1ZVwiOlwiMjdcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuaDFcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJmb250LXNpemVcIixcInZhbHVlXCI6XCIzMlwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zbGlkZXJcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW5cIixcInZhbHVlXCI6XCIxMCAxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zaWRlZHJhd2VyLWxpc3QtaXRlbS1pY29uXCIsXCIuc2lkZWRyYXdlci1saXN0LWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJjb2xvclwiLFwidmFsdWVcIjpcIiM5NDk0OTRcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIuc3dpdGNoXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiOCAxNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW1cIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJwYWRkaW5nXCIsXCJ2YWx1ZVwiOlwiMTYgMTUgMTYgMTVcIn1dfSx7XCJ0eXBlXCI6XCJydWxlXCIsXCJzZWxlY3RvcnNcIjpbXCIubGlzdC1ncm91cCAubGlzdC1ncm91cC1pdGVtIC50aHVtYlwiXSxcImRlY2xhcmF0aW9uc1wiOlt7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcIm1hcmdpbi1yaWdodFwiLFwidmFsdWVcIjpcIjE1XCJ9XX0se1widHlwZVwiOlwicnVsZVwiLFwic2VsZWN0b3JzXCI6W1wiLmxpc3QtZ3JvdXAgLmxpc3QtZ3JvdXAtaXRlbSAubGlzdC1ncm91cC1pdGVtLWhlYWRpbmdcIl0sXCJkZWNsYXJhdGlvbnNcIjpbe1widHlwZVwiOlwiZGVjbGFyYXRpb25cIixcInByb3BlcnR5XCI6XCJtYXJnaW4tYm90dG9tXCIsXCJ2YWx1ZVwiOlwiNVwifV19LHtcInR5cGVcIjpcInJ1bGVcIixcInNlbGVjdG9yc1wiOltcIi5zZWdtZW50ZWQtYmFyXCJdLFwiZGVjbGFyYXRpb25zXCI6W3tcInR5cGVcIjpcImRlY2xhcmF0aW9uXCIsXCJwcm9wZXJ0eVwiOlwibWFyZ2luXCIsXCJ2YWx1ZVwiOlwiMCAxNVwifSx7XCJ0eXBlXCI6XCJkZWNsYXJhdGlvblwiLFwicHJvcGVydHlcIjpcImNvbG9yXCIsXCJ2YWx1ZVwiOlwiIzMwYmNmZlwifV19XSxcInBhcnNpbmdFcnJvcnNcIjpbXX19OyIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaG90ID0gcmVxdWlyZShcIi4uL2hvdFwiKTtcbmNvbnN0IGZpbGVfc3lzdGVtXzEgPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9maWxlLXN5c3RlbVwiKTtcbmZ1bmN0aW9uIGhtclVwZGF0ZSgpIHtcbiAgICBjb25zdCBjdXJyZW50QXBwRm9sZGVyID0gZmlsZV9zeXN0ZW1fMS5rbm93bkZvbGRlcnMuY3VycmVudEFwcCgpO1xuICAgIGNvbnN0IGxhdGVzdEhhc2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fW1wiaFwiXSgpO1xuICAgIHJldHVybiBob3QobGF0ZXN0SGFzaCwgZmlsZW5hbWUgPT4ge1xuICAgICAgICBjb25zdCBmdWxsRmlsZVBhdGggPSBmaWxlX3N5c3RlbV8xLnBhdGguam9pbihjdXJyZW50QXBwRm9sZGVyLnBhdGgsIGZpbGVuYW1lKTtcbiAgICAgICAgcmV0dXJuIGZpbGVfc3lzdGVtXzEuRmlsZS5leGlzdHMoZnVsbEZpbGVQYXRoKSA/IGN1cnJlbnRBcHBGb2xkZXIuZ2V0RmlsZShmaWxlbmFtZSkgOiBudWxsO1xuICAgIH0pO1xufVxuZXhwb3J0cy5obXJVcGRhdGUgPSBobXJVcGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1obXItdXBkYXRlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhtcl91cGRhdGVfMSA9IHJlcXVpcmUoXCIuL2htci11cGRhdGVcIik7XG5leHBvcnRzLmhtclVwZGF0ZSA9IGhtcl91cGRhdGVfMS5obXJVcGRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJjb25zdCBobXJQcmVmaXggPSAnSE1SOic7XG5jb25zdCBsb2cgPSB7XG4gICAgaW5mbzogKG1lc3NhZ2UpID0+IGNvbnNvbGUuaW5mbyhgJHtobXJQcmVmaXh9ICR7bWVzc2FnZX1gKSxcbiAgICB3YXJuOiAobWVzc2FnZSkgPT4gY29uc29sZS53YXJuKGAke2htclByZWZpeH0gJHttZXNzYWdlfWApLFxuICAgIGVycm9yOiAobWVzc2FnZSkgPT4gY29uc29sZS5lcnJvcihgJHtobXJQcmVmaXh9ICR7bWVzc2FnZX1gKSxcbn07XG5jb25zdCByZWZyZXNoID0gJ0FwcGxpY2F0aW9uIG5lZWRzIHRvIGJlIHJlc3RhcnRlZCBpbiBvcmRlciB0byBhcHBseSB0aGUgY2hhbmdlcy4nO1xuY29uc3QgaG90T3B0aW9ucyA9IHtcbiAgICBpZ25vcmVVbmFjY2VwdGVkOiBmYWxzZSxcbiAgICBpZ25vcmVEZWNsaW5lZDogZmFsc2UsXG4gICAgaWdub3JlRXJyb3JlZDogZmFsc2UsXG4gICAgb25VbmFjY2VwdGVkKGRhdGEpIHtcbiAgICAgICAgY29uc3QgY2hhaW4gPSBbXS5jb25jYXQoZGF0YS5jaGFpbik7XG4gICAgICAgIGNvbnN0IGxhc3QgPSBjaGFpbltjaGFpbi5sZW5ndGggLSAxXTtcblxuICAgICAgICBpZiAobGFzdCA9PT0gMCkge1xuICAgICAgICAgICAgY2hhaW4ucG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBsb2cud2FybihgSWdub3JlZCBhbiB1cGRhdGUgdG8gdW5hY2NlcHRlZCBtb2R1bGU6IGApO1xuICAgICAgICBjaGFpbi5mb3JFYWNoKG1vZCA9PiBsb2cud2FybihgICAgICAgICAg4p6tICR7bW9kfWApKTtcbiAgICB9LFxuICAgIG9uRGVjbGluZWQoZGF0YSkge1xuICAgICAgICBsb2cud2FybihgSWdub3JlZCBhbiB1cGRhdGUgdG8gZGVjbGluZWQgbW9kdWxlOmApO1xuICAgICAgICBkYXRhLmNoYWluLmZvckVhY2gobW9kID0+IGxvZy53YXJuKGAgICAgICAgICDinq0gJHttb2R9YCkpO1xuICAgIH0sXG4gICAgb25FcnJvcmVkKGRhdGEpIHtcbiAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICBgSWdub3JlZCBhbiBlcnJvciB3aGlsZSB1cGRhdGluZyBtb2R1bGUgJHtkYXRhLm1vZHVsZUlkfSA8JHtkYXRhLnR5cGV9PmBcbiAgICAgICAgKTtcbiAgICAgICAgbG9nLndhcm4oZGF0YS5lcnJvcik7XG4gICAgfSxcbn07XG5cbmxldCBuZXh0SGFzaDtcbmxldCBjdXJyZW50SGFzaDtcblxuZnVuY3Rpb24gdXBUb0RhdGUoKSB7XG4gICAgcmV0dXJuIG5leHRIYXNoLmluZGV4T2YoX193ZWJwYWNrX2hhc2hfXykgPj0gMDtcbn1cblxuZnVuY3Rpb24gcmVzdWx0KG1vZHVsZXMsIGFwcGxpZWRNb2R1bGVzKSB7XG4gICAgY29uc3QgdW5hY2NlcHRlZCA9IG1vZHVsZXMuZmlsdGVyKFxuICAgICAgICAobW9kdWxlSWQpID0+IGFwcGxpZWRNb2R1bGVzICYmIGFwcGxpZWRNb2R1bGVzLmluZGV4T2YobW9kdWxlSWQpIDwgMFxuICAgICk7XG5cbiAgICBpZiAodW5hY2NlcHRlZC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxvZy53YXJuKCdUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGQgbm90IGJlIHVwZGF0ZWQ6Jyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBtb2R1bGVJZCBvZiB1bmFjY2VwdGVkKSB7XG4gICAgICAgICAgICBsb2cud2FybihgICAgICAgICAgIOKmuyAke21vZHVsZUlkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCEoYXBwbGllZE1vZHVsZXMgfHwgW10pLmxlbmd0aCkge1xuICAgICAgICBsb2cuaW5mbygnTm8gTW9kdWxlcyBVcGRhdGVkLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5pbmZvKCdUaGUgZm9sbG93aW5nIG1vZHVsZXMgd2VyZSB1cGRhdGVkOicpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbW9kdWxlSWQgb2YgYXBwbGllZE1vZHVsZXMpIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKGAgICAgICAgICDihrsgJHttb2R1bGVJZH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG51bWJlcklkcyA9IGFwcGxpZWRNb2R1bGVzLmV2ZXJ5KFxuICAgICAgICAgICAgKG1vZHVsZUlkKSA9PiB0eXBlb2YgbW9kdWxlSWQgPT09ICdudW1iZXInXG4gICAgICAgICk7XG4gICAgICAgIGlmIChudW1iZXJJZHMpIHtcbiAgICAgICAgICAgIGxvZy5pbmZvKFxuICAgICAgICAgICAgICAgICdQbGVhc2UgY29uc2lkZXIgdXNpbmcgdGhlIE5hbWVkTW9kdWxlc1BsdWdpbiBmb3IgbW9kdWxlIG5hbWVzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbW9kdWxlLmhvdFxuICAgICAgICAuY2hlY2soKVxuICAgICAgICAudGhlbigobW9kdWxlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb2R1bGVzKSB7XG4gICAgICAgICAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgICAgICAgICAgIGBDYW5ub3QgZmluZCB1cGRhdGUuICR7cmVmcmVzaH1gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5ob3RcbiAgICAgICAgICAgICAgICAuYXBwbHkoaG90T3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigoYXBwbGllZE1vZHVsZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRDaGVjaztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF1cFRvRGF0ZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q2hlY2sgPSBjaGVjayhvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdChtb2R1bGVzLCBhcHBsaWVkTW9kdWxlcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwVG9EYXRlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdCBtb2RpZnkgbWVzc2FnZSAtIENMSSBkZXBlbmRzIG9uIHRoaXMgZXhhY3QgY29udGVudCB0byBkZXRlcm1pbmUgaG1yIG9wZXJhdGlvbiBzdGF0dXMuXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuaW5mbyhgU3VjY2Vzc2Z1bGx5IGFwcGxpZWQgdXBkYXRlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uIEFwcCBpcyB1cCB0byBkYXRlLmApO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHRDaGVjayB8fCBudWxsO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnYWJvcnQnLCAnZmFpbCddLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3QgbW9kaWZ5IG1lc3NhZ2UgLSBDTEkgZGVwZW5kcyBvbiB0aGlzIGV4YWN0IGNvbnRlbnQgdG8gZGV0ZXJtaW5lIGhtciBvcGVyYXRpb24gc3RhdHVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nLmVycm9yKGBDYW5ub3QgYXBwbHkgdXBkYXRlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2cuZXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyLnN0YWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgVXBkYXRlIGZhaWxlZDogJHtlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2t9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG4gICAgICAgICAgICBpZiAoWydhYm9ydCcsICdmYWlsJ10uaW5kZXhPZihzdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgICAgICBsb2cuZXJyb3IoYENhbm5vdCBjaGVjayBmb3IgdXBkYXRlLiAke3JlZnJlc2h9YCk7XG4gICAgICAgICAgICAgICAgbG9nLmVycm9yKGVyci5tZXNzYWdlIHx8IGVyci5zdGFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvZy5lcnJvcihgVXBkYXRlIGNoZWNrIGZhaWxlZDogJHtlcnIubWVzc2FnZSB8fCBlcnIuc3RhY2t9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xufVxuXG5pZiAobW9kdWxlLmhvdCkge1xuICAgIGxvZy5pbmZvKCdIb3QgTW9kdWxlIFJlcGxhY2VtZW50IEVuYWJsZWQuIFdhaXRpbmcgZm9yIHNpZ25hbC4nKTtcbn0gZWxzZSB7XG4gICAgbG9nLmVycm9yKCdIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLicpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGUobGF0ZXN0SGFzaCwgb3B0aW9ucykge1xuICAgIG5leHRIYXNoID0gbGF0ZXN0SGFzaDtcbiAgICBpZiAoIXVwVG9EYXRlKCkpIHtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcblxuICAgICAgICBpZiAoc3RhdHVzID09PSAnaWRsZScpIHtcbiAgICAgICAgICAgIC8vRG8gbm90IG1vZGlmeSBtZXNzYWdlIC0gQ0xJIGRlcGVuZHMgb24gdGhpcyBleGFjdCBjb250ZW50IHRvIGRldGVybWluZSBobXIgb3BlcmF0aW9uIHN0YXR1cy5cbiAgICAgICAgICAgIGxvZy5pbmZvKGBDaGVja2luZyBmb3IgdXBkYXRlcyB0byB0aGUgYnVuZGxlIHdpdGggaG1yIGhhc2ggJHtjdXJyZW50SGFzaH0uYCk7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2sob3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSBpZiAoWydhYm9ydCcsICdmYWlsJ10uaW5kZXhPZihzdGF0dXMpID49IDApIHtcbiAgICAgICAgICAgIGxvZy53YXJuKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgdXBkYXRlLiBBIHByZXZpb3VzIHVwZGF0ZSAke3N0YXR1c31lZC4gJHtyZWZyZXNofWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5mdW5jdGlvbiBnZXROZXh0SGFzaChoYXNoLCBnZXRGaWxlQ29udGVudCkge1xuICAgIGNvbnN0IGZpbGUgPSBnZXRGaWxlQ29udGVudChgJHtoYXNofS5ob3QtdXBkYXRlLmpzb25gKTtcbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYXNoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZS5yZWFkVGV4dCgpLnRoZW4oaG90VXBkYXRlQ29udGVudCA9PiB7XG4gICAgICAgIGlmIChob3RVcGRhdGVDb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBtYW5pZmVzdCA9IEpTT04ucGFyc2UoaG90VXBkYXRlQ29udGVudCk7XG4gICAgICAgICAgICBjb25zdCBuZXdIYXNoID0gbWFuaWZlc3QuaDtcbiAgICAgICAgICAgIHJldHVybiBnZXROZXh0SGFzaChuZXdIYXNoLCBnZXRGaWxlQ29udGVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGhhc2gpO1xuICAgICAgICB9XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4gUHJvbWlzZS5yZWplY3QoZXJyb3IpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjaGVja1N0YXRlKGluaXRpYWxIYXNoLCBnZXRGaWxlQ29udGVudCkge1xuICAgIGN1cnJlbnRIYXNoID0gaW5pdGlhbEhhc2g7XG4gICAgcmV0dXJuIGdldE5leHRIYXNoKGluaXRpYWxIYXNoLCBnZXRGaWxlQ29udGVudCkudGhlbihuZXh0SGFzaCA9PiB7XG4gICAgICAgIGlmIChuZXh0SGFzaCAhPSBpbml0aWFsSGFzaCkge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShuZXh0SGFzaCwge30pO1xuICAgICAgICB9XG4gICAgfSlcbn1cbiIsImNvbnN0IGxvYWRDc3MgPSByZXF1aXJlKFwiLi9sb2FkLWFwcGxpY2F0aW9uLWNzc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICBsb2FkQ3NzKGZ1bmN0aW9uKCkge1xuICAgICAgICBnbG9iYWwucmVnaXN0ZXJNb2R1bGUoXCIuL2FwcC5jc3NcIiwgKCkgPT4gcmVxdWlyZShcIn4vYXBwXCIpKTtcbiAgICAgICAgZ2xvYmFsLnJlZ2lzdGVyTW9kdWxlKFwiYXBwLmNzc1wiLCAoKSA9PiByZXF1aXJlKFwifi9hcHBcIikpO1xuICAgIH0pO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobG9hZE1vZHVsZUZuKSB7XG4gICAgY29uc3QgYXBwbGljYXRpb24gPSByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy9hcHBsaWNhdGlvblwiKTtcbiAgICByZXF1aXJlKFwidG5zLWNvcmUtbW9kdWxlcy91aS9zdHlsaW5nL3N0eWxlLXNjb3BlXCIpO1xuXG4gICAgbG9hZE1vZHVsZUZuKCk7XG5cbiAgICBhcHBsaWNhdGlvbi5sb2FkQXBwQ3NzKCk7XG59XG4iLCJ2YXIgcGFyc2UgPSByZXF1aXJlKFwiLi9wYXJzZVwiKTtcbnZhciB3YWxrID0gcmVxdWlyZShcIi4vd2Fsa1wiKTtcbnZhciBzdHJpbmdpZnkgPSByZXF1aXJlKFwiLi9zdHJpbmdpZnlcIik7XG5cbmZ1bmN0aW9uIFZhbHVlUGFyc2VyKHZhbHVlKSB7XG4gIGlmICh0aGlzIGluc3RhbmNlb2YgVmFsdWVQYXJzZXIpIHtcbiAgICB0aGlzLm5vZGVzID0gcGFyc2UodmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldHVybiBuZXcgVmFsdWVQYXJzZXIodmFsdWUpO1xufVxuXG5WYWx1ZVBhcnNlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5ub2RlcykgPyBzdHJpbmdpZnkodGhpcy5ub2RlcykgOiBcIlwiO1xufTtcblxuVmFsdWVQYXJzZXIucHJvdG90eXBlLndhbGsgPSBmdW5jdGlvbihjYiwgYnViYmxlKSB7XG4gIHdhbGsodGhpcy5ub2RlcywgY2IsIGJ1YmJsZSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuVmFsdWVQYXJzZXIudW5pdCA9IHJlcXVpcmUoXCIuL3VuaXRcIik7XG5cblZhbHVlUGFyc2VyLndhbGsgPSB3YWxrO1xuXG5WYWx1ZVBhcnNlci5zdHJpbmdpZnkgPSBzdHJpbmdpZnk7XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsdWVQYXJzZXI7XG4iLCJ2YXIgb3BlblBhcmVudGhlc2VzID0gXCIoXCIuY2hhckNvZGVBdCgwKTtcbnZhciBjbG9zZVBhcmVudGhlc2VzID0gXCIpXCIuY2hhckNvZGVBdCgwKTtcbnZhciBzaW5nbGVRdW90ZSA9IFwiJ1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgZG91YmxlUXVvdGUgPSAnXCInLmNoYXJDb2RlQXQoMCk7XG52YXIgYmFja3NsYXNoID0gXCJcXFxcXCIuY2hhckNvZGVBdCgwKTtcbnZhciBzbGFzaCA9IFwiL1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgY29tbWEgPSBcIixcIi5jaGFyQ29kZUF0KDApO1xudmFyIGNvbG9uID0gXCI6XCIuY2hhckNvZGVBdCgwKTtcbnZhciBzdGFyID0gXCIqXCIuY2hhckNvZGVBdCgwKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpbnB1dCkge1xuICB2YXIgdG9rZW5zID0gW107XG4gIHZhciB2YWx1ZSA9IGlucHV0O1xuXG4gIHZhciBuZXh0LCBxdW90ZSwgcHJldiwgdG9rZW4sIGVzY2FwZSwgZXNjYXBlUG9zLCB3aGl0ZXNwYWNlUG9zO1xuICB2YXIgcG9zID0gMDtcbiAgdmFyIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG4gIHZhciBtYXggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBzdGFjayA9IFt7IG5vZGVzOiB0b2tlbnMgfV07XG4gIHZhciBiYWxhbmNlZCA9IDA7XG4gIHZhciBwYXJlbnQ7XG5cbiAgdmFyIG5hbWUgPSBcIlwiO1xuICB2YXIgYmVmb3JlID0gXCJcIjtcbiAgdmFyIGFmdGVyID0gXCJcIjtcblxuICB3aGlsZSAocG9zIDwgbWF4KSB7XG4gICAgLy8gV2hpdGVzcGFjZXNcbiAgICBpZiAoY29kZSA8PSAzMikge1xuICAgICAgbmV4dCA9IHBvcztcbiAgICAgIGRvIHtcbiAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgIH0gd2hpbGUgKGNvZGUgPD0gMzIpO1xuICAgICAgdG9rZW4gPSB2YWx1ZS5zbGljZShwb3MsIG5leHQpO1xuXG4gICAgICBwcmV2ID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChjb2RlID09PSBjbG9zZVBhcmVudGhlc2VzICYmIGJhbGFuY2VkKSB7XG4gICAgICAgIGFmdGVyID0gdG9rZW47XG4gICAgICB9IGVsc2UgaWYgKHByZXYgJiYgcHJldi50eXBlID09PSBcImRpdlwiKSB7XG4gICAgICAgIHByZXYuYWZ0ZXIgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGNvZGUgPT09IGNvbW1hIHx8XG4gICAgICAgIGNvZGUgPT09IGNvbG9uIHx8XG4gICAgICAgIChjb2RlID09PSBzbGFzaCAmJiB2YWx1ZS5jaGFyQ29kZUF0KG5leHQgKyAxKSAhPT0gc3RhcilcbiAgICAgICkge1xuICAgICAgICBiZWZvcmUgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcInNwYWNlXCIsXG4gICAgICAgICAgc291cmNlSW5kZXg6IHBvcyxcbiAgICAgICAgICB2YWx1ZTogdG9rZW5cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHBvcyA9IG5leHQ7XG5cbiAgICAgIC8vIFF1b3Rlc1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gc2luZ2xlUXVvdGUgfHwgY29kZSA9PT0gZG91YmxlUXVvdGUpIHtcbiAgICAgIG5leHQgPSBwb3M7XG4gICAgICBxdW90ZSA9IGNvZGUgPT09IHNpbmdsZVF1b3RlID8gXCInXCIgOiAnXCInO1xuICAgICAgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgIHNvdXJjZUluZGV4OiBwb3MsXG4gICAgICAgIHF1b3RlOiBxdW90ZVxuICAgICAgfTtcbiAgICAgIGRvIHtcbiAgICAgICAgZXNjYXBlID0gZmFsc2U7XG4gICAgICAgIG5leHQgPSB2YWx1ZS5pbmRleE9mKHF1b3RlLCBuZXh0ICsgMSk7XG4gICAgICAgIGlmICh+bmV4dCkge1xuICAgICAgICAgIGVzY2FwZVBvcyA9IG5leHQ7XG4gICAgICAgICAgd2hpbGUgKHZhbHVlLmNoYXJDb2RlQXQoZXNjYXBlUG9zIC0gMSkgPT09IGJhY2tzbGFzaCkge1xuICAgICAgICAgICAgZXNjYXBlUG9zIC09IDE7XG4gICAgICAgICAgICBlc2NhcGUgPSAhZXNjYXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSArPSBxdW90ZTtcbiAgICAgICAgICBuZXh0ID0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgICAgICAgICB0b2tlbi51bmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKGVzY2FwZSk7XG4gICAgICB0b2tlbi52YWx1ZSA9IHZhbHVlLnNsaWNlKHBvcyArIDEsIG5leHQpO1xuXG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICBwb3MgPSBuZXh0ICsgMTtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIC8vIENvbW1lbnRzXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBzbGFzaCAmJiB2YWx1ZS5jaGFyQ29kZUF0KHBvcyArIDEpID09PSBzdGFyKSB7XG4gICAgICB0b2tlbiA9IHtcbiAgICAgICAgdHlwZTogXCJjb21tZW50XCIsXG4gICAgICAgIHNvdXJjZUluZGV4OiBwb3NcbiAgICAgIH07XG5cbiAgICAgIG5leHQgPSB2YWx1ZS5pbmRleE9mKFwiKi9cIiwgcG9zKTtcbiAgICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgICB0b2tlbi51bmNsb3NlZCA9IHRydWU7XG4gICAgICAgIG5leHQgPSB2YWx1ZS5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnZhbHVlID0gdmFsdWUuc2xpY2UocG9zICsgMiwgbmV4dCk7XG4gICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG5cbiAgICAgIHBvcyA9IG5leHQgKyAyO1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgLy8gRGl2aWRlcnNcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IHNsYXNoIHx8IGNvZGUgPT09IGNvbW1hIHx8IGNvZGUgPT09IGNvbG9uKSB7XG4gICAgICB0b2tlbiA9IHZhbHVlW3Bvc107XG5cbiAgICAgIHRva2Vucy5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJkaXZcIixcbiAgICAgICAgc291cmNlSW5kZXg6IHBvcyAtIGJlZm9yZS5sZW5ndGgsXG4gICAgICAgIHZhbHVlOiB0b2tlbixcbiAgICAgICAgYmVmb3JlOiBiZWZvcmUsXG4gICAgICAgIGFmdGVyOiBcIlwiXG4gICAgICB9KTtcbiAgICAgIGJlZm9yZSA9IFwiXCI7XG5cbiAgICAgIHBvcyArPSAxO1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgLy8gT3BlbiBwYXJlbnRoZXNlc1xuICAgIH0gZWxzZSBpZiAob3BlblBhcmVudGhlc2VzID09PSBjb2RlKSB7XG4gICAgICAvLyBXaGl0ZXNwYWNlcyBhZnRlciBvcGVuIHBhcmVudGhlc2VzXG4gICAgICBuZXh0ID0gcG9zO1xuICAgICAgZG8ge1xuICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KG5leHQpO1xuICAgICAgfSB3aGlsZSAoY29kZSA8PSAzMik7XG4gICAgICB0b2tlbiA9IHtcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiLFxuICAgICAgICBzb3VyY2VJbmRleDogcG9zIC0gbmFtZS5sZW5ndGgsXG4gICAgICAgIHZhbHVlOiBuYW1lLFxuICAgICAgICBiZWZvcmU6IHZhbHVlLnNsaWNlKHBvcyArIDEsIG5leHQpXG4gICAgICB9O1xuICAgICAgcG9zID0gbmV4dDtcblxuICAgICAgaWYgKG5hbWUgPT09IFwidXJsXCIgJiYgY29kZSAhPT0gc2luZ2xlUXVvdGUgJiYgY29kZSAhPT0gZG91YmxlUXVvdGUpIHtcbiAgICAgICAgbmV4dCAtPSAxO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgZXNjYXBlID0gZmFsc2U7XG4gICAgICAgICAgbmV4dCA9IHZhbHVlLmluZGV4T2YoXCIpXCIsIG5leHQgKyAxKTtcbiAgICAgICAgICBpZiAofm5leHQpIHtcbiAgICAgICAgICAgIGVzY2FwZVBvcyA9IG5leHQ7XG4gICAgICAgICAgICB3aGlsZSAodmFsdWUuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gYmFja3NsYXNoKSB7XG4gICAgICAgICAgICAgIGVzY2FwZVBvcyAtPSAxO1xuICAgICAgICAgICAgICBlc2NhcGUgPSAhZXNjYXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSArPSBcIilcIjtcbiAgICAgICAgICAgIG5leHQgPSB2YWx1ZS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgdG9rZW4udW5jbG9zZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoZXNjYXBlKTtcbiAgICAgICAgLy8gV2hpdGVzcGFjZXMgYmVmb3JlIGNsb3NlZFxuICAgICAgICB3aGl0ZXNwYWNlUG9zID0gbmV4dDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgIHdoaXRlc3BhY2VQb3MgLT0gMTtcbiAgICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdCh3aGl0ZXNwYWNlUG9zKTtcbiAgICAgICAgfSB3aGlsZSAoY29kZSA8PSAzMik7XG4gICAgICAgIGlmIChwb3MgIT09IHdoaXRlc3BhY2VQb3MgKyAxKSB7XG4gICAgICAgICAgdG9rZW4ubm9kZXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6IFwid29yZFwiLFxuICAgICAgICAgICAgICBzb3VyY2VJbmRleDogcG9zLFxuICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUuc2xpY2UocG9zLCB3aGl0ZXNwYWNlUG9zICsgMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2VuLm5vZGVzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLnVuY2xvc2VkICYmIHdoaXRlc3BhY2VQb3MgKyAxICE9PSBuZXh0KSB7XG4gICAgICAgICAgdG9rZW4uYWZ0ZXIgPSBcIlwiO1xuICAgICAgICAgIHRva2VuLm5vZGVzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogXCJzcGFjZVwiLFxuICAgICAgICAgICAgc291cmNlSW5kZXg6IHdoaXRlc3BhY2VQb3MgKyAxLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLnNsaWNlKHdoaXRlc3BhY2VQb3MgKyAxLCBuZXh0KVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRva2VuLmFmdGVyID0gdmFsdWUuc2xpY2Uod2hpdGVzcGFjZVBvcyArIDEsIG5leHQpO1xuICAgICAgICB9XG4gICAgICAgIHBvcyA9IG5leHQgKyAxO1xuICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWxhbmNlZCArPSAxO1xuICAgICAgICB0b2tlbi5hZnRlciA9IFwiXCI7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgc3RhY2sucHVzaCh0b2tlbik7XG4gICAgICAgIHRva2VucyA9IHRva2VuLm5vZGVzID0gW107XG4gICAgICAgIHBhcmVudCA9IHRva2VuO1xuICAgICAgfVxuICAgICAgbmFtZSA9IFwiXCI7XG5cbiAgICAgIC8vIENsb3NlIHBhcmVudGhlc2VzXG4gICAgfSBlbHNlIGlmIChjbG9zZVBhcmVudGhlc2VzID09PSBjb2RlICYmIGJhbGFuY2VkKSB7XG4gICAgICBwb3MgKz0gMTtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICAgIHBhcmVudC5hZnRlciA9IGFmdGVyO1xuICAgICAgYWZ0ZXIgPSBcIlwiO1xuICAgICAgYmFsYW5jZWQgLT0gMTtcbiAgICAgIHN0YWNrLnBvcCgpO1xuICAgICAgcGFyZW50ID0gc3RhY2tbYmFsYW5jZWRdO1xuICAgICAgdG9rZW5zID0gcGFyZW50Lm5vZGVzO1xuXG4gICAgICAvLyBXb3Jkc1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0ID0gcG9zO1xuICAgICAgZG8ge1xuICAgICAgICBpZiAoY29kZSA9PT0gYmFja3NsYXNoKSB7XG4gICAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICB9XG4gICAgICAgIG5leHQgKz0gMTtcbiAgICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQobmV4dCk7XG4gICAgICB9IHdoaWxlIChcbiAgICAgICAgbmV4dCA8IG1heCAmJlxuICAgICAgICAhKFxuICAgICAgICAgIGNvZGUgPD0gMzIgfHxcbiAgICAgICAgICBjb2RlID09PSBzaW5nbGVRdW90ZSB8fFxuICAgICAgICAgIGNvZGUgPT09IGRvdWJsZVF1b3RlIHx8XG4gICAgICAgICAgY29kZSA9PT0gY29tbWEgfHxcbiAgICAgICAgICBjb2RlID09PSBjb2xvbiB8fFxuICAgICAgICAgIGNvZGUgPT09IHNsYXNoIHx8XG4gICAgICAgICAgY29kZSA9PT0gb3BlblBhcmVudGhlc2VzIHx8XG4gICAgICAgICAgKGNvZGUgPT09IGNsb3NlUGFyZW50aGVzZXMgJiYgYmFsYW5jZWQpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgICB0b2tlbiA9IHZhbHVlLnNsaWNlKHBvcywgbmV4dCk7XG5cbiAgICAgIGlmIChvcGVuUGFyZW50aGVzZXMgPT09IGNvZGUpIHtcbiAgICAgICAgbmFtZSA9IHRva2VuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwid29yZFwiLFxuICAgICAgICAgIHNvdXJjZUluZGV4OiBwb3MsXG4gICAgICAgICAgdmFsdWU6IHRva2VuXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBwb3MgPSBuZXh0O1xuICAgIH1cbiAgfVxuXG4gIGZvciAocG9zID0gc3RhY2subGVuZ3RoIC0gMTsgcG9zOyBwb3MgLT0gMSkge1xuICAgIHN0YWNrW3Bvc10udW5jbG9zZWQgPSB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHN0YWNrWzBdLm5vZGVzO1xufTtcbiIsImZ1bmN0aW9uIHN0cmluZ2lmeU5vZGUobm9kZSwgY3VzdG9tKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlO1xuICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICB2YXIgYnVmO1xuICB2YXIgY3VzdG9tUmVzdWx0O1xuXG4gIGlmIChjdXN0b20gJiYgKGN1c3RvbVJlc3VsdCA9IGN1c3RvbShub2RlKSkgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBjdXN0b21SZXN1bHQ7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ3b3JkXCIgfHwgdHlwZSA9PT0gXCJzcGFjZVwiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICBidWYgPSBub2RlLnF1b3RlIHx8IFwiXCI7XG4gICAgcmV0dXJuIGJ1ZiArIHZhbHVlICsgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogYnVmKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImNvbW1lbnRcIikge1xuICAgIHJldHVybiBcIi8qXCIgKyB2YWx1ZSArIChub2RlLnVuY2xvc2VkID8gXCJcIiA6IFwiKi9cIik7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkaXZcIikge1xuICAgIHJldHVybiAobm9kZS5iZWZvcmUgfHwgXCJcIikgKyB2YWx1ZSArIChub2RlLmFmdGVyIHx8IFwiXCIpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcykpIHtcbiAgICBidWYgPSBzdHJpbmdpZnkobm9kZS5ub2Rlcyk7XG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHZhbHVlICtcbiAgICAgIFwiKFwiICtcbiAgICAgIChub2RlLmJlZm9yZSB8fCBcIlwiKSArXG4gICAgICBidWYgK1xuICAgICAgKG5vZGUuYWZ0ZXIgfHwgXCJcIikgK1xuICAgICAgKG5vZGUudW5jbG9zZWQgPyBcIlwiIDogXCIpXCIpXG4gICAgKTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShub2RlcywgY3VzdG9tKSB7XG4gIHZhciByZXN1bHQsIGk7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7XG4gICAgcmVzdWx0ID0gXCJcIjtcbiAgICBmb3IgKGkgPSBub2Rlcy5sZW5ndGggLSAxOyB+aTsgaSAtPSAxKSB7XG4gICAgICByZXN1bHQgPSBzdHJpbmdpZnlOb2RlKG5vZGVzW2ldLCBjdXN0b20pICsgcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHJldHVybiBzdHJpbmdpZnlOb2RlKG5vZGVzLCBjdXN0b20pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ2lmeTtcbiIsInZhciBtaW51cyA9IFwiLVwiLmNoYXJDb2RlQXQoMCk7XG52YXIgcGx1cyA9IFwiK1wiLmNoYXJDb2RlQXQoMCk7XG52YXIgZG90ID0gXCIuXCIuY2hhckNvZGVBdCgwKTtcbnZhciBleHAgPSBcImVcIi5jaGFyQ29kZUF0KDApO1xudmFyIEVYUCA9IFwiRVwiLmNoYXJDb2RlQXQoMCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIHBvcyA9IDA7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7XG4gIHZhciBkb3R0ZWQgPSBmYWxzZTtcbiAgdmFyIHNjaVBvcyA9IC0xO1xuICB2YXIgY29udGFpbnNOdW1iZXIgPSBmYWxzZTtcbiAgdmFyIGNvZGU7XG5cbiAgd2hpbGUgKHBvcyA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7XG4gICAgICBjb250YWluc051bWJlciA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBleHAgfHwgY29kZSA9PT0gRVhQKSB7XG4gICAgICBpZiAoc2NpUG9zID4gLTEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBzY2lQb3MgPSBwb3M7XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBkb3QpIHtcbiAgICAgIGlmIChkb3R0ZWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkb3R0ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gcGx1cyB8fCBjb2RlID09PSBtaW51cykge1xuICAgICAgaWYgKHBvcyAhPT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcG9zICs9IDE7XG4gIH1cblxuICBpZiAoc2NpUG9zICsgMSA9PT0gcG9zKSBwb3MtLTtcblxuICByZXR1cm4gY29udGFpbnNOdW1iZXJcbiAgICA/IHtcbiAgICAgICAgbnVtYmVyOiB2YWx1ZS5zbGljZSgwLCBwb3MpLFxuICAgICAgICB1bml0OiB2YWx1ZS5zbGljZShwb3MpXG4gICAgICB9XG4gICAgOiBmYWxzZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdhbGsobm9kZXMsIGNiLCBidWJibGUpIHtcbiAgdmFyIGksIG1heCwgbm9kZSwgcmVzdWx0O1xuXG4gIGZvciAoaSA9IDAsIG1heCA9IG5vZGVzLmxlbmd0aDsgaSA8IG1heDsgaSArPSAxKSB7XG4gICAgbm9kZSA9IG5vZGVzW2ldO1xuICAgIGlmICghYnViYmxlKSB7XG4gICAgICByZXN1bHQgPSBjYihub2RlLCBpLCBub2Rlcyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgcmVzdWx0ICE9PSBmYWxzZSAmJlxuICAgICAgbm9kZS50eXBlID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgIEFycmF5LmlzQXJyYXkobm9kZS5ub2RlcylcbiAgICApIHtcbiAgICAgIHdhbGsobm9kZS5ub2RlcywgY2IsIGJ1YmJsZSk7XG4gICAgfVxuXG4gICAgaWYgKGJ1YmJsZSkge1xuICAgICAgY2Iobm9kZSwgaSwgbm9kZXMpO1xuICAgIH1cbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wb3N0Y3NzVmFsdWVQYXJzZXIgPSByZXF1aXJlKCdwb3N0Y3NzLXZhbHVlLXBhcnNlcicpO1xuXG52YXIgX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3N0Y3NzVmFsdWVQYXJzZXIpO1xuXG52YXIgX3BhcnNlciA9IHJlcXVpcmUoJy4vcGFyc2VyJyk7XG5cbnZhciBfcmVkdWNlciA9IHJlcXVpcmUoJy4vbGliL3JlZHVjZXInKTtcblxudmFyIF9yZWR1Y2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlZHVjZXIpO1xuXG52YXIgX3N0cmluZ2lmaWVyID0gcmVxdWlyZSgnLi9saWIvc3RyaW5naWZpZXInKTtcblxudmFyIF9zdHJpbmdpZmllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZmllcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGVzbGludC1kaXNhYmxlLWxpbmVcbnZhciBNQVRDSF9DQUxDID0gLygoPzpcXC1bYS16XStcXC0pP2NhbGMpLztcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmVjaXNpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDU7XG5cbiAgcmV0dXJuICgwLCBfcG9zdGNzc1ZhbHVlUGFyc2VyMi5kZWZhdWx0KSh2YWx1ZSkud2FsayhmdW5jdGlvbiAobm9kZSkge1xuICAgIC8vIHNraXAgYW55dGhpbmcgd2hpY2ggaXNuJ3QgYSBjYWxjKCkgZnVuY3Rpb25cbiAgICBpZiAobm9kZS50eXBlICE9PSAnZnVuY3Rpb24nIHx8ICFNQVRDSF9DQUxDLnRlc3Qobm9kZS52YWx1ZSkpIHJldHVybjtcblxuICAgIC8vIHN0cmluZ2lmeSBjYWxjIGV4cHJlc3Npb24gYW5kIHByb2R1Y2UgYW4gQVNUXG4gICAgdmFyIGNvbnRlbnRzID0gX3Bvc3Rjc3NWYWx1ZVBhcnNlcjIuZGVmYXVsdC5zdHJpbmdpZnkobm9kZS5ub2Rlcyk7XG5cbiAgICAvLyBza2lwIGNvbnN0YW50KCkgYW5kIGVudigpXG4gICAgaWYgKGNvbnRlbnRzLmluZGV4T2YoJ2NvbnN0YW50JykgPj0gMCB8fCBjb250ZW50cy5pbmRleE9mKCdlbnYnKSA+PSAwKSByZXR1cm47XG5cbiAgICB2YXIgYXN0ID0gX3BhcnNlci5wYXJzZXIucGFyc2UoY29udGVudHMpO1xuXG4gICAgLy8gcmVkdWNlIEFTVCB0byBpdHMgc2ltcGxlc3QgZm9ybSwgdGhhdCBpcywgZWl0aGVyIHRvIGEgc2luZ2xlIHZhbHVlXG4gICAgLy8gb3IgYSBzaW1wbGlmaWVkIGNhbGMgZXhwcmVzc2lvblxuICAgIHZhciByZWR1Y2VkQXN0ID0gKDAsIF9yZWR1Y2VyMi5kZWZhdWx0KShhc3QsIHByZWNpc2lvbik7XG5cbiAgICAvLyBzdHJpbmdpZnkgQVNUIGFuZCB3cml0ZSBpdCBiYWNrXG4gICAgbm9kZS50eXBlID0gJ3dvcmQnO1xuICAgIG5vZGUudmFsdWUgPSAoMCwgX3N0cmluZ2lmaWVyMi5kZWZhdWx0KShub2RlLnZhbHVlLCByZWR1Y2VkQXN0LCBwcmVjaXNpb24pO1xuICB9LCB0cnVlKS50b1N0cmluZygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2Nzc1VuaXRDb252ZXJ0ZXIgPSByZXF1aXJlKCdjc3MtdW5pdC1jb252ZXJ0ZXInKTtcblxudmFyIF9jc3NVbml0Q29udmVydGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nzc1VuaXRDb252ZXJ0ZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjb252ZXJ0Tm9kZXMobGVmdCwgcmlnaHQsIHByZWNpc2lvbikge1xuICBzd2l0Y2ggKGxlZnQudHlwZSkge1xuICAgIGNhc2UgJ0xlbmd0aFZhbHVlJzpcbiAgICBjYXNlICdBbmdsZVZhbHVlJzpcbiAgICBjYXNlICdUaW1lVmFsdWUnOlxuICAgIGNhc2UgJ0ZyZXF1ZW5jeVZhbHVlJzpcbiAgICBjYXNlICdSZXNvbHV0aW9uVmFsdWUnOlxuICAgICAgcmV0dXJuIGNvbnZlcnRBYnNvbHV0ZUxlbmd0aChsZWZ0LCByaWdodCwgcHJlY2lzaW9uKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHsgbGVmdDogbGVmdCwgcmlnaHQ6IHJpZ2h0IH07XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydEFic29sdXRlTGVuZ3RoKGxlZnQsIHJpZ2h0LCBwcmVjaXNpb24pIHtcbiAgaWYgKHJpZ2h0LnR5cGUgPT09IGxlZnQudHlwZSkge1xuICAgIHJpZ2h0ID0ge1xuICAgICAgdHlwZTogbGVmdC50eXBlLFxuICAgICAgdmFsdWU6ICgwLCBfY3NzVW5pdENvbnZlcnRlcjIuZGVmYXVsdCkocmlnaHQudmFsdWUsIHJpZ2h0LnVuaXQsIGxlZnQudW5pdCwgcHJlY2lzaW9uKSxcbiAgICAgIHVuaXQ6IGxlZnQudW5pdFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHsgbGVmdDogbGVmdCwgcmlnaHQ6IHJpZ2h0IH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNvbnZlcnROb2Rlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmxpcCA9IGZsaXA7XG5cbnZhciBfY29udmVydCA9IHJlcXVpcmUoJy4vY29udmVydCcpO1xuXG52YXIgX2NvbnZlcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udmVydCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHJlZHVjZShub2RlLCBwcmVjaXNpb24pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gXCJNYXRoRXhwcmVzc2lvblwiKSByZXR1cm4gcmVkdWNlTWF0aEV4cHJlc3Npb24obm9kZSwgcHJlY2lzaW9uKTtcblxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gaXNFcXVhbChsZWZ0LCByaWdodCkge1xuICByZXR1cm4gbGVmdC50eXBlID09PSByaWdodC50eXBlICYmIGxlZnQudmFsdWUgPT09IHJpZ2h0LnZhbHVlO1xufVxuXG5mdW5jdGlvbiBpc1ZhbHVlVHlwZSh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ0xlbmd0aFZhbHVlJzpcbiAgICBjYXNlICdBbmdsZVZhbHVlJzpcbiAgICBjYXNlICdUaW1lVmFsdWUnOlxuICAgIGNhc2UgJ0ZyZXF1ZW5jeVZhbHVlJzpcbiAgICBjYXNlICdSZXNvbHV0aW9uVmFsdWUnOlxuICAgIGNhc2UgJ0VtVmFsdWUnOlxuICAgIGNhc2UgJ0V4VmFsdWUnOlxuICAgIGNhc2UgJ0NoVmFsdWUnOlxuICAgIGNhc2UgJ1JlbVZhbHVlJzpcbiAgICBjYXNlICdWaFZhbHVlJzpcbiAgICBjYXNlICdWd1ZhbHVlJzpcbiAgICBjYXNlICdWbWluVmFsdWUnOlxuICAgIGNhc2UgJ1ZtYXhWYWx1ZSc6XG4gICAgY2FzZSAnUGVyY2VudGFnZVZhbHVlJzpcbiAgICBjYXNlICdWYWx1ZSc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRNYXRoRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pIHtcbiAgdmFyIG5vZGVzID0gKDAsIF9jb252ZXJ0Mi5kZWZhdWx0KShub2RlLmxlZnQsIG5vZGUucmlnaHQsIHByZWNpc2lvbik7XG4gIHZhciBsZWZ0ID0gcmVkdWNlKG5vZGVzLmxlZnQsIHByZWNpc2lvbik7XG4gIHZhciByaWdodCA9IHJlZHVjZShub2Rlcy5yaWdodCwgcHJlY2lzaW9uKTtcblxuICBpZiAobGVmdC50eXBlID09PSBcIk1hdGhFeHByZXNzaW9uXCIgJiYgcmlnaHQudHlwZSA9PT0gXCJNYXRoRXhwcmVzc2lvblwiKSB7XG5cbiAgICBpZiAobGVmdC5vcGVyYXRvciA9PT0gJy8nICYmIHJpZ2h0Lm9wZXJhdG9yID09PSAnKicgfHwgbGVmdC5vcGVyYXRvciA9PT0gJy0nICYmIHJpZ2h0Lm9wZXJhdG9yID09PSAnKycgfHwgbGVmdC5vcGVyYXRvciA9PT0gJyonICYmIHJpZ2h0Lm9wZXJhdG9yID09PSAnLycgfHwgbGVmdC5vcGVyYXRvciA9PT0gJysnICYmIHJpZ2h0Lm9wZXJhdG9yID09PSAnLScpIHtcblxuICAgICAgaWYgKGlzRXF1YWwobGVmdC5yaWdodCwgcmlnaHQucmlnaHQpKSBub2RlcyA9ICgwLCBfY29udmVydDIuZGVmYXVsdCkobGVmdC5sZWZ0LCByaWdodC5sZWZ0LCBwcmVjaXNpb24pO2Vsc2UgaWYgKGlzRXF1YWwobGVmdC5yaWdodCwgcmlnaHQubGVmdCkpIG5vZGVzID0gKDAsIF9jb252ZXJ0Mi5kZWZhdWx0KShsZWZ0LmxlZnQsIHJpZ2h0LnJpZ2h0LCBwcmVjaXNpb24pO1xuXG4gICAgICBsZWZ0ID0gcmVkdWNlKG5vZGVzLmxlZnQsIHByZWNpc2lvbik7XG4gICAgICByaWdodCA9IHJlZHVjZShub2Rlcy5yaWdodCwgcHJlY2lzaW9uKTtcbiAgICB9XG4gIH1cblxuICBub2RlLmxlZnQgPSBsZWZ0O1xuICBub2RlLnJpZ2h0ID0gcmlnaHQ7XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBmbGlwKG9wZXJhdG9yKSB7XG4gIHJldHVybiBvcGVyYXRvciA9PT0gJysnID8gJy0nIDogJysnO1xufVxuXG5mdW5jdGlvbiBmbGlwVmFsdWUobm9kZSkge1xuICBpZiAoaXNWYWx1ZVR5cGUobm9kZS50eXBlKSkgbm9kZS52YWx1ZSA9IC1ub2RlLnZhbHVlO2Vsc2UgaWYgKG5vZGUudHlwZSA9PSAnTWF0aEV4cHJlc3Npb24nKSB7XG4gICAgbm9kZS5sZWZ0ID0gZmxpcFZhbHVlKG5vZGUubGVmdCk7XG4gICAgbm9kZS5yaWdodCA9IGZsaXBWYWx1ZShub2RlLnJpZ2h0KTtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlQWRkU3ViRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pIHtcbiAgdmFyIF9ub2RlID0gbm9kZSxcbiAgICAgIGxlZnQgPSBfbm9kZS5sZWZ0LFxuICAgICAgcmlnaHQgPSBfbm9kZS5yaWdodCxcbiAgICAgIG9wID0gX25vZGUub3BlcmF0b3I7XG5cblxuICBpZiAobGVmdC50eXBlID09PSAnQ3NzVmFyaWFibGUnIHx8IHJpZ2h0LnR5cGUgPT09ICdDc3NWYXJpYWJsZScpIHJldHVybiBub2RlO1xuXG4gIC8vIHNvbWV0aGluZyArIDAgPT4gc29tZXRoaW5nXG4gIC8vIHNvbWV0aGluZyAtIDAgPT4gc29tZXRoaW5nXG4gIGlmIChyaWdodC52YWx1ZSA9PT0gMCkgcmV0dXJuIGxlZnQ7XG5cbiAgLy8gMCArIHNvbWV0aGluZyA9PiBzb21ldGhpbmdcbiAgaWYgKGxlZnQudmFsdWUgPT09IDAgJiYgb3AgPT09IFwiK1wiKSByZXR1cm4gcmlnaHQ7XG5cbiAgLy8gMCAtIHNvbWV0aGluZyA9PiAtc29tZXRoaW5nXG4gIGlmIChsZWZ0LnZhbHVlID09PSAwICYmIG9wID09PSBcIi1cIikgcmV0dXJuIGZsaXBWYWx1ZShyaWdodCk7XG5cbiAgLy8gdmFsdWUgKyB2YWx1ZVxuICAvLyB2YWx1ZSAtIHZhbHVlXG4gIGlmIChsZWZ0LnR5cGUgPT09IHJpZ2h0LnR5cGUgJiYgaXNWYWx1ZVR5cGUobGVmdC50eXBlKSkge1xuICAgIG5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCBsZWZ0KTtcbiAgICBpZiAob3AgPT09IFwiK1wiKSBub2RlLnZhbHVlID0gbGVmdC52YWx1ZSArIHJpZ2h0LnZhbHVlO2Vsc2Ugbm9kZS52YWx1ZSA9IGxlZnQudmFsdWUgLSByaWdodC52YWx1ZTtcbiAgfVxuXG4gIC8vIHZhbHVlIDxvcD4gKGV4cHIpXG4gIGlmIChpc1ZhbHVlVHlwZShsZWZ0LnR5cGUpICYmIChyaWdodC5vcGVyYXRvciA9PT0gJysnIHx8IHJpZ2h0Lm9wZXJhdG9yID09PSAnLScpICYmIHJpZ2h0LnR5cGUgPT09ICdNYXRoRXhwcmVzc2lvbicpIHtcbiAgICAvLyB2YWx1ZSArICh2YWx1ZSArIHNvbWV0aGluZykgPT4gKHZhbHVlICsgdmFsdWUpICsgc29tZXRoaW5nXG4gICAgLy8gdmFsdWUgKyAodmFsdWUgLSBzb21ldGhpbmcpID0+ICh2YWx1ZSArIHZhbHVlKSAtIHNvbWV0aGluZ1xuICAgIC8vIHZhbHVlIC0gKHZhbHVlICsgc29tZXRoaW5nKSA9PiAodmFsdWUgLSB2YWx1ZSkgLSBzb21ldGhpbmdcbiAgICAvLyB2YWx1ZSAtICh2YWx1ZSAtIHNvbWV0aGluZykgPT4gKHZhbHVlIC0gdmFsdWUpICsgc29tZXRoaW5nXG4gICAgaWYgKGxlZnQudHlwZSA9PT0gcmlnaHQubGVmdC50eXBlKSB7XG4gICAgICBub2RlID0gT2JqZWN0LmFzc2lnbih7fSwgbm9kZSk7XG4gICAgICBub2RlLmxlZnQgPSByZWR1Y2Uoe1xuICAgICAgICB0eXBlOiAnTWF0aEV4cHJlc3Npb24nLFxuICAgICAgICBvcGVyYXRvcjogb3AsXG4gICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgIHJpZ2h0OiByaWdodC5sZWZ0XG4gICAgICB9LCBwcmVjaXNpb24pO1xuICAgICAgbm9kZS5yaWdodCA9IHJpZ2h0LnJpZ2h0O1xuICAgICAgbm9kZS5vcGVyYXRvciA9IG9wID09PSAnLScgPyBmbGlwKHJpZ2h0Lm9wZXJhdG9yKSA6IHJpZ2h0Lm9wZXJhdG9yO1xuICAgICAgcmV0dXJuIHJlZHVjZShub2RlLCBwcmVjaXNpb24pO1xuICAgIH1cbiAgICAvLyB2YWx1ZSArIChzb21ldGhpbmcgKyB2YWx1ZSkgPT4gKHZhbHVlICsgdmFsdWUpICsgc29tZXRoaW5nXG4gICAgLy8gdmFsdWUgKyAoc29tZXRoaW5nIC0gdmFsdWUpID0+ICh2YWx1ZSAtIHZhbHVlKSArIHNvbWV0aGluZ1xuICAgIC8vIHZhbHVlIC0gKHNvbWV0aGluZyArIHZhbHVlKSA9PiAodmFsdWUgLSB2YWx1ZSkgLSBzb21ldGhpbmdcbiAgICAvLyB2YWx1ZSAtIChzb21ldGhpbmcgLSB2YWx1ZSkgPT4gKHZhbHVlICsgdmFsdWUpIC0gc29tZXRoaW5nXG4gICAgZWxzZSBpZiAobGVmdC50eXBlID09PSByaWdodC5yaWdodC50eXBlKSB7XG4gICAgICAgIG5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCBub2RlKTtcbiAgICAgICAgbm9kZS5sZWZ0ID0gcmVkdWNlKHtcbiAgICAgICAgICB0eXBlOiAnTWF0aEV4cHJlc3Npb24nLFxuICAgICAgICAgIG9wZXJhdG9yOiBvcCA9PT0gJy0nID8gZmxpcChyaWdodC5vcGVyYXRvcikgOiByaWdodC5vcGVyYXRvcixcbiAgICAgICAgICBsZWZ0OiBsZWZ0LFxuICAgICAgICAgIHJpZ2h0OiByaWdodC5yaWdodFxuICAgICAgICB9LCBwcmVjaXNpb24pO1xuICAgICAgICBub2RlLnJpZ2h0ID0gcmlnaHQubGVmdDtcbiAgICAgICAgcmV0dXJuIHJlZHVjZShub2RlLCBwcmVjaXNpb24pO1xuICAgICAgfVxuICB9XG5cbiAgLy8gKGV4cHIpIDxvcD4gdmFsdWVcbiAgaWYgKGxlZnQudHlwZSA9PT0gJ01hdGhFeHByZXNzaW9uJyAmJiAobGVmdC5vcGVyYXRvciA9PT0gJysnIHx8IGxlZnQub3BlcmF0b3IgPT09ICctJykgJiYgaXNWYWx1ZVR5cGUocmlnaHQudHlwZSkpIHtcbiAgICAvLyAodmFsdWUgKyBzb21ldGhpbmcpICsgdmFsdWUgPT4gKHZhbHVlICsgdmFsdWUpICsgc29tZXRoaW5nXG4gICAgLy8gKHZhbHVlIC0gc29tZXRoaW5nKSArIHZhbHVlID0+ICh2YWx1ZSArIHZhbHVlKSAtIHNvbWV0aGluZ1xuICAgIC8vICh2YWx1ZSArIHNvbWV0aGluZykgLSB2YWx1ZSA9PiAodmFsdWUgLSB2YWx1ZSkgKyBzb21ldGhpbmdcbiAgICAvLyAodmFsdWUgLSBzb21ldGhpbmcpIC0gdmFsdWUgPT4gKHZhbHVlIC0gdmFsdWUpIC0gc29tZXRoaW5nXG4gICAgaWYgKHJpZ2h0LnR5cGUgPT09IGxlZnQubGVmdC50eXBlKSB7XG4gICAgICBub2RlID0gT2JqZWN0LmFzc2lnbih7fSwgbGVmdCk7XG4gICAgICBub2RlLmxlZnQgPSByZWR1Y2Uoe1xuICAgICAgICB0eXBlOiAnTWF0aEV4cHJlc3Npb24nLFxuICAgICAgICBvcGVyYXRvcjogb3AsXG4gICAgICAgIGxlZnQ6IGxlZnQubGVmdCxcbiAgICAgICAgcmlnaHQ6IHJpZ2h0XG4gICAgICB9LCBwcmVjaXNpb24pO1xuICAgICAgcmV0dXJuIHJlZHVjZShub2RlLCBwcmVjaXNpb24pO1xuICAgIH1cbiAgICAvLyAoc29tZXRoaW5nICsgdmFsdWUpICsgdmFsdWUgPT4gc29tZXRoaW5nICsgKHZhbHVlICsgdmFsdWUpXG4gICAgLy8gKHNvbWV0aGluZyAtIHZhbHVlMSkgKyB2YWx1ZTIgPT4gc29tZXRoaW5nIC0gKHZhbHVlMiAtIHZhbHVlMSlcbiAgICAvLyAoc29tZXRoaW5nICsgdmFsdWUpIC0gdmFsdWUgPT4gc29tZXRoaW5nICsgKHZhbHVlIC0gdmFsdWUpXG4gICAgLy8gKHNvbWV0aGluZyAtIHZhbHVlKSAtIHZhbHVlID0+IHNvbWV0aGluZyAtICh2YWx1ZSArIHZhbHVlKVxuICAgIGVsc2UgaWYgKHJpZ2h0LnR5cGUgPT09IGxlZnQucmlnaHQudHlwZSkge1xuICAgICAgICBub2RlID0gT2JqZWN0LmFzc2lnbih7fSwgbGVmdCk7XG4gICAgICAgIGlmIChsZWZ0Lm9wZXJhdG9yID09PSAnLScpIHtcbiAgICAgICAgICBub2RlLnJpZ2h0ID0gcmVkdWNlKHtcbiAgICAgICAgICAgIHR5cGU6ICdNYXRoRXhwcmVzc2lvbicsXG4gICAgICAgICAgICBvcGVyYXRvcjogb3AgPT09ICctJyA/ICcrJyA6ICctJyxcbiAgICAgICAgICAgIGxlZnQ6IHJpZ2h0LFxuICAgICAgICAgICAgcmlnaHQ6IGxlZnQucmlnaHRcbiAgICAgICAgICB9LCBwcmVjaXNpb24pO1xuICAgICAgICAgIG5vZGUub3BlcmF0b3IgPSBvcCA9PT0gJy0nID8gJy0nIDogJysnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUucmlnaHQgPSByZWR1Y2Uoe1xuICAgICAgICAgICAgdHlwZTogJ01hdGhFeHByZXNzaW9uJyxcbiAgICAgICAgICAgIG9wZXJhdG9yOiBvcCxcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQucmlnaHQsXG4gICAgICAgICAgICByaWdodDogcmlnaHRcbiAgICAgICAgICB9LCBwcmVjaXNpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlLnJpZ2h0LnZhbHVlIDwgMCkge1xuICAgICAgICAgIG5vZGUucmlnaHQudmFsdWUgKj0gLTE7XG4gICAgICAgICAgbm9kZS5vcGVyYXRvciA9IG5vZGUub3BlcmF0b3IgPT09ICctJyA/ICcrJyA6ICctJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVkdWNlKG5vZGUsIHByZWNpc2lvbik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmZ1bmN0aW9uIHJlZHVjZURpdmlzaW9uRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pIHtcbiAgaWYgKCFpc1ZhbHVlVHlwZShub2RlLnJpZ2h0LnR5cGUpKSByZXR1cm4gbm9kZTtcblxuICBpZiAobm9kZS5yaWdodC50eXBlICE9PSAnVmFsdWUnKSB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBkaXZpZGUgYnkgXCInICsgbm9kZS5yaWdodC51bml0ICsgJ1wiLCBudW1iZXIgZXhwZWN0ZWQnKTtcblxuICBpZiAobm9kZS5yaWdodC52YWx1ZSA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGl2aWRlIGJ5IHplcm8nKTtcblxuICAvLyAoZXhwcikgLyB2YWx1ZVxuICBpZiAobm9kZS5sZWZ0LnR5cGUgPT09ICdNYXRoRXhwcmVzc2lvbicpIHtcbiAgICBpZiAoaXNWYWx1ZVR5cGUobm9kZS5sZWZ0LmxlZnQudHlwZSkgJiYgaXNWYWx1ZVR5cGUobm9kZS5sZWZ0LnJpZ2h0LnR5cGUpKSB7XG4gICAgICBub2RlLmxlZnQubGVmdC52YWx1ZSAvPSBub2RlLnJpZ2h0LnZhbHVlO1xuICAgICAgbm9kZS5sZWZ0LnJpZ2h0LnZhbHVlIC89IG5vZGUucmlnaHQudmFsdWU7XG4gICAgICByZXR1cm4gcmVkdWNlKG5vZGUubGVmdCwgcHJlY2lzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgLy8gc29tZXRoaW5nIC8gdmFsdWVcbiAgZWxzZSBpZiAoaXNWYWx1ZVR5cGUobm9kZS5sZWZ0LnR5cGUpKSB7XG4gICAgICBub2RlLmxlZnQudmFsdWUgLz0gbm9kZS5yaWdodC52YWx1ZTtcbiAgICAgIHJldHVybiBub2RlLmxlZnQ7XG4gICAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlTXVsdGlwbGljYXRpb25FeHByZXNzaW9uKG5vZGUpIHtcbiAgLy8gKGV4cHIpICogdmFsdWVcbiAgaWYgKG5vZGUubGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG5vZGUucmlnaHQudHlwZSA9PT0gJ1ZhbHVlJykge1xuICAgIGlmIChpc1ZhbHVlVHlwZShub2RlLmxlZnQubGVmdC50eXBlKSAmJiBpc1ZhbHVlVHlwZShub2RlLmxlZnQucmlnaHQudHlwZSkpIHtcbiAgICAgIG5vZGUubGVmdC5sZWZ0LnZhbHVlICo9IG5vZGUucmlnaHQudmFsdWU7XG4gICAgICBub2RlLmxlZnQucmlnaHQudmFsdWUgKj0gbm9kZS5yaWdodC52YWx1ZTtcbiAgICAgIHJldHVybiBub2RlLmxlZnQ7XG4gICAgfVxuICB9XG4gIC8vIHNvbWV0aGluZyAqIHZhbHVlXG4gIGVsc2UgaWYgKGlzVmFsdWVUeXBlKG5vZGUubGVmdC50eXBlKSAmJiBub2RlLnJpZ2h0LnR5cGUgPT09ICdWYWx1ZScpIHtcbiAgICAgIG5vZGUubGVmdC52YWx1ZSAqPSBub2RlLnJpZ2h0LnZhbHVlO1xuICAgICAgcmV0dXJuIG5vZGUubGVmdDtcbiAgICB9XG4gICAgLy8gdmFsdWUgKiAoZXhwcilcbiAgICBlbHNlIGlmIChub2RlLmxlZnQudHlwZSA9PT0gJ1ZhbHVlJyAmJiBub2RlLnJpZ2h0LnR5cGUgPT09ICdNYXRoRXhwcmVzc2lvbicpIHtcbiAgICAgICAgaWYgKGlzVmFsdWVUeXBlKG5vZGUucmlnaHQubGVmdC50eXBlKSAmJiBpc1ZhbHVlVHlwZShub2RlLnJpZ2h0LnJpZ2h0LnR5cGUpKSB7XG4gICAgICAgICAgbm9kZS5yaWdodC5sZWZ0LnZhbHVlICo9IG5vZGUubGVmdC52YWx1ZTtcbiAgICAgICAgICBub2RlLnJpZ2h0LnJpZ2h0LnZhbHVlICo9IG5vZGUubGVmdC52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gbm9kZS5yaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gdmFsdWUgKiBzb21ldGhpbmdcbiAgICAgIGVsc2UgaWYgKG5vZGUubGVmdC50eXBlID09PSAnVmFsdWUnICYmIGlzVmFsdWVUeXBlKG5vZGUucmlnaHQudHlwZSkpIHtcbiAgICAgICAgICBub2RlLnJpZ2h0LnZhbHVlICo9IG5vZGUubGVmdC52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gbm9kZS5yaWdodDtcbiAgICAgICAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuZnVuY3Rpb24gcmVkdWNlTWF0aEV4cHJlc3Npb24obm9kZSwgcHJlY2lzaW9uKSB7XG4gIG5vZGUgPSBjb252ZXJ0TWF0aEV4cHJlc3Npb24obm9kZSwgcHJlY2lzaW9uKTtcblxuICBzd2l0Y2ggKG5vZGUub3BlcmF0b3IpIHtcbiAgICBjYXNlIFwiK1wiOlxuICAgIGNhc2UgXCItXCI6XG4gICAgICByZXR1cm4gcmVkdWNlQWRkU3ViRXhwcmVzc2lvbihub2RlLCBwcmVjaXNpb24pO1xuICAgIGNhc2UgXCIvXCI6XG4gICAgICByZXR1cm4gcmVkdWNlRGl2aXNpb25FeHByZXNzaW9uKG5vZGUsIHByZWNpc2lvbik7XG4gICAgY2FzZSBcIipcIjpcbiAgICAgIHJldHVybiByZWR1Y2VNdWx0aXBsaWNhdGlvbkV4cHJlc3Npb24obm9kZSk7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHJlZHVjZTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKGNhbGMsIG5vZGUsIHByZWNpc2lvbikge1xuICB2YXIgc3RyID0gc3RyaW5naWZ5KG5vZGUsIHByZWNpc2lvbik7XG5cbiAgaWYgKG5vZGUudHlwZSA9PT0gXCJNYXRoRXhwcmVzc2lvblwiKSB7XG4gICAgLy8gaWYgY2FsYyBleHByZXNzaW9uIGNvdWxkbid0IGJlIHJlc29sdmVkIHRvIGEgc2luZ2xlIHZhbHVlLCByZS13cmFwIGl0IGFzXG4gICAgLy8gYSBjYWxjKClcbiAgICBzdHIgPSBjYWxjICsgXCIoXCIgKyBzdHIgKyBcIilcIjtcbiAgfVxuICByZXR1cm4gc3RyO1xufTtcblxudmFyIF9yZWR1Y2VyID0gcmVxdWlyZShcIi4vcmVkdWNlclwiKTtcblxudmFyIG9yZGVyID0ge1xuICBcIipcIjogMCxcbiAgXCIvXCI6IDAsXG4gIFwiK1wiOiAxLFxuICBcIi1cIjogMVxufTtcblxuZnVuY3Rpb24gcm91bmQodmFsdWUsIHByZWMpIHtcbiAgaWYgKHByZWMgIT09IGZhbHNlKSB7XG4gICAgdmFyIHByZWNpc2lvbiA9IE1hdGgucG93KDEwLCBwcmVjKTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgcHJlYykge1xuICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJNYXRoRXhwcmVzc2lvblwiOlxuICAgICAge1xuICAgICAgICB2YXIgbGVmdCA9IG5vZGUubGVmdCxcbiAgICAgICAgICAgIHJpZ2h0ID0gbm9kZS5yaWdodCxcbiAgICAgICAgICAgIG9wID0gbm9kZS5vcGVyYXRvcjtcblxuICAgICAgICB2YXIgc3RyID0gXCJcIjtcblxuICAgICAgICBpZiAobGVmdC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW2xlZnQub3BlcmF0b3JdKSBzdHIgKz0gXCIoXCIgKyBzdHJpbmdpZnkobGVmdCwgcHJlYykgKyBcIilcIjtlbHNlIHN0ciArPSBzdHJpbmdpZnkobGVmdCwgcHJlYyk7XG5cbiAgICAgICAgc3RyICs9IFwiIFwiICsgbm9kZS5vcGVyYXRvciArIFwiIFwiO1xuXG4gICAgICAgIGlmIChyaWdodC50eXBlID09PSAnTWF0aEV4cHJlc3Npb24nICYmIG9yZGVyW29wXSA8IG9yZGVyW3JpZ2h0Lm9wZXJhdG9yXSkgc3RyICs9IFwiKFwiICsgc3RyaW5naWZ5KHJpZ2h0LCBwcmVjKSArIFwiKVwiO2Vsc2UgaWYgKHJpZ2h0LnR5cGUgPT09ICdNYXRoRXhwcmVzc2lvbicgJiYgb3AgPT09IFwiLVwiICYmIFtcIitcIiwgXCItXCJdLmluY2x1ZGVzKHJpZ2h0Lm9wZXJhdG9yKSkge1xuICAgICAgICAgIC8vIGZpeCAjNTIgOiBhLShiK2MpID0gYS1iLWNcbiAgICAgICAgICByaWdodC5vcGVyYXRvciA9ICgwLCBfcmVkdWNlci5mbGlwKShyaWdodC5vcGVyYXRvcik7XG4gICAgICAgICAgc3RyICs9IHN0cmluZ2lmeShyaWdodCwgcHJlYyk7XG4gICAgICAgIH0gZWxzZSBzdHIgKz0gc3RyaW5naWZ5KHJpZ2h0LCBwcmVjKTtcblxuICAgICAgICByZXR1cm4gc3RyO1xuICAgICAgfVxuICAgIGNhc2UgXCJWYWx1ZVwiOlxuICAgICAgcmV0dXJuIHJvdW5kKG5vZGUudmFsdWUsIHByZWMpO1xuICAgIGNhc2UgJ0Nzc1ZhcmlhYmxlJzpcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gcm91bmQobm9kZS52YWx1ZSwgcHJlYykgKyBub2RlLnVuaXQ7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTsiLCJcbi8qIHBhcnNlciBnZW5lcmF0ZWQgYnkgamlzb24gMC42LjEtMjE1ICovXG5cbi8qXG4gKiBSZXR1cm5zIGEgUGFyc2VyIG9iamVjdCBvZiB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbiAqXG4gKiAgUGFyc2VyOiB7XG4gKiAgICB5eToge30gICAgIFRoZSBzby1jYWxsZWQgXCJzaGFyZWQgc3RhdGVcIiBvciByYXRoZXIgdGhlICpzb3VyY2UqIG9mIGl0O1xuICogICAgICAgICAgICAgICB0aGUgcmVhbCBcInNoYXJlZCBzdGF0ZVwiIGB5eWAgcGFzc2VkIGFyb3VuZCB0b1xuICogICAgICAgICAgICAgICB0aGUgcnVsZSBhY3Rpb25zLCBldGMuIGlzIGEgZGVyaXZhdGl2ZS9jb3B5IG9mIHRoaXMgb25lLFxuICogICAgICAgICAgICAgICBub3QgYSBkaXJlY3QgcmVmZXJlbmNlIVxuICogIH1cbiAqXG4gKiAgUGFyc2VyLnByb3RvdHlwZToge1xuICogICAgeXk6IHt9LFxuICogICAgRU9GOiAxLFxuICogICAgVEVSUk9SOiAyLFxuICpcbiAqICAgIHRyYWNlOiBmdW5jdGlvbihlcnJvck1lc3NhZ2UsIC4uLiksXG4gKlxuICogICAgSmlzb25QYXJzZXJFcnJvcjogZnVuY3Rpb24obXNnLCBoYXNoKSxcbiAqXG4gKiAgICBxdW90ZU5hbWU6IGZ1bmN0aW9uKG5hbWUpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24gd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW4gYnkgdXNlciBjb2RlIGxhdGVyIG9uOiBwdXQgc3VpdGFibGVcbiAqICAgICAgICAgICAgICAgcXVvdGVzIGFyb3VuZCBsaXRlcmFsIElEcyBpbiBhIGRlc2NyaXB0aW9uIHN0cmluZy5cbiAqXG4gKiAgICBvcmlnaW5hbFF1b3RlTmFtZTogZnVuY3Rpb24obmFtZSksXG4gKiAgICAgICAgICAgICAgIFRoZSBiYXNpYyBxdW90ZU5hbWUgaGFuZGxlciBwcm92aWRlZCBieSBKSVNPTi5cbiAqICAgICAgICAgICAgICAgYGNsZWFudXBBZnRlclBhcnNlKClgIHdpbGwgY2xlYW4gdXAgYW5kIHJlc2V0IGBxdW90ZU5hbWUoKWAgdG8gcmVmZXJlbmNlIHRoaXMgZnVuY3Rpb25cbiAqICAgICAgICAgICAgICAgYXQgdGhlIGVuZCBvZiB0aGUgYHBhcnNlKClgLlxuICpcbiAqICAgIGRlc2NyaWJlU3ltYm9sOiBmdW5jdGlvbihzeW1ib2wpLFxuICogICAgICAgICAgICAgICBSZXR1cm4gYSBtb3JlLW9yLWxlc3MgaHVtYW4tcmVhZGFibGUgZGVzY3JpcHRpb24gb2YgdGhlIGdpdmVuIHN5bWJvbCwgd2hlblxuICogICAgICAgICAgICAgICBhdmFpbGFibGUsIG9yIHRoZSBzeW1ib2wgaXRzZWxmLCBzZXJ2aW5nIGFzIGl0cyBvd24gJ2Rlc2NyaXB0aW9uJyBmb3IgbGFja1xuICogICAgICAgICAgICAgICBvZiBzb21ldGhpbmcgYmV0dGVyIHRvIHNlcnZlIHVwLlxuICpcbiAqICAgICAgICAgICAgICAgUmV0dXJuIE5VTEwgd2hlbiB0aGUgc3ltYm9sIGlzIHVua25vd24gdG8gdGhlIHBhcnNlci5cbiAqXG4gKiAgICBzeW1ib2xzXzoge2Fzc29jaWF0aXZlIGxpc3Q6IG5hbWUgPT0+IG51bWJlcn0sXG4gKiAgICB0ZXJtaW5hbHNfOiB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBuYW1lfSxcbiAqICAgIG5vbnRlcm1pbmFsczoge2Fzc29jaWF0aXZlIGxpc3Q6IHJ1bGUtbmFtZSA9PT4ge2Fzc29jaWF0aXZlIGxpc3Q6IG51bWJlciA9PT4gcnVsZS1hbHR9fSxcbiAqICAgIHRlcm1pbmFsX2Rlc2NyaXB0aW9uc186IChpZiB0aGVyZSBhcmUgYW55KSB7YXNzb2NpYXRpdmUgbGlzdDogbnVtYmVyID09PiBkZXNjcmlwdGlvbn0sXG4gKiAgICBwcm9kdWN0aW9uc186IFsuLi5dLFxuICpcbiAqICAgIHBlcmZvcm1BY3Rpb246IGZ1bmN0aW9uIHBhcnNlcl9fcGVyZm9ybUFjdGlvbih5eXRleHQsIHl5bGVuZywgeXlsaW5lbm8sIHl5bG9jLCB5eXN0YXRlLCB5eXNwLCB5eXZzdGFjaywgeXlsc3RhY2ssIHl5c3RhY2ssIHl5c3N0YWNrKSxcbiAqXG4gKiAgICAgICAgICAgICAgIFRoZSBmdW5jdGlvbiBwYXJhbWV0ZXJzIGFuZCBgdGhpc2AgaGF2ZSB0aGUgZm9sbG93aW5nIHZhbHVlL21lYW5pbmc6XG4gKiAgICAgICAgICAgICAgIC0gYHRoaXNgICAgIDogcmVmZXJlbmNlIHRvIHRoZSBgeXl2YWxgIGludGVybmFsIG9iamVjdCwgd2hpY2ggaGFzIG1lbWJlcnMgKGAkYCBhbmQgYF8kYClcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzdG9yZS9yZWZlcmVuY2UgdGhlIHJ1bGUgdmFsdWUgYCQkYCBhbmQgbG9jYXRpb24gaW5mbyBgQCRgLlxuICpcbiAqICAgICAgICAgICAgICAgICBPbmUgaW1wb3J0YW50IHRoaW5nIHRvIG5vdGUgYWJvdXQgYHRoaXNgIGEuay5hLiBgeXl2YWxgOiBldmVyeSAqcmVkdWNlKiBhY3Rpb24gZ2V0c1xuICogICAgICAgICAgICAgICAgIHRvIHNlZSB0aGUgc2FtZSBvYmplY3QgdmlhIHRoZSBgdGhpc2AgcmVmZXJlbmNlLCBpLmUuIGlmIHlvdSB3aXNoIHRvIGNhcnJ5IGN1c3RvbVxuICogICAgICAgICAgICAgICAgIGRhdGEgZnJvbSBvbmUgcmVkdWNlIGFjdGlvbiB0aHJvdWdoIHRvIHRoZSBuZXh0IHdpdGhpbiBhIHNpbmdsZSBwYXJzZSBydW4sIHRoZW4geW91XG4gKiAgICAgICAgICAgICAgICAgbWF5IGdldCBuYXN0eSBhbmQgdXNlIGB5eXZhbGAgYS5rLmEuIGB0aGlzYCBmb3Igc3RvcmluZyB5b3Ugb3duIHNlbWktcGVybWFuZW50IGRhdGEuXG4gKlxuICogICAgICAgICAgICAgICAgIGB0aGlzLnl5YCBpcyBhIGRpcmVjdCByZWZlcmVuY2UgdG8gdGhlIGB5eWAgc2hhcmVkIHN0YXRlIG9iamVjdC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgYCVwYXJzZS1wYXJhbWAtc3BlY2lmaWVkIGFkZGl0aW9uYWwgYHBhcnNlKClgIGFyZ3VtZW50cyBoYXZlIGJlZW4gYWRkZWQgdG8gdGhpcyBgeXlgXG4gKiAgICAgICAgICAgICAgICAgb2JqZWN0IGF0IGBwYXJzZSgpYCBzdGFydCBhbmQgYXJlIHRoZXJlZm9yZSBhdmFpbGFibGUgdG8gdGhlIGFjdGlvbiBjb2RlIHZpYSB0aGVcbiAqICAgICAgICAgICAgICAgICBzYW1lIG5hbWVkIGB5eS54eHh4YCBhdHRyaWJ1dGVzICh3aGVyZSBgeHh4eGAgcmVwcmVzZW50cyBhIGlkZW50aWZpZXIgbmFtZSBmcm9tXG4gKiAgICAgICAgICAgICAgICAgdGhlICVwYXJzZS1wYXJhbWAgbGlzdC5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5dGV4dGAgIDogcmVmZXJlbmNlIHRvIHRoZSBsZXhlciB2YWx1ZSB3aGljaCBiZWxvbmdzIHRvIHRoZSBsYXN0IGxleGVyIHRva2VuIHVzZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBtYXRjaCB0aGlzIHJ1bGUuIFRoaXMgaXMgKm5vdCogdGhlIGxvb2stYWhlYWQgdG9rZW4sIGJ1dCB0aGUgbGFzdCB0b2tlblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQncyBhY3R1YWxseSBwYXJ0IG9mIHRoaXMgcnVsZS5cbiAqXG4gKiAgICAgICAgICAgICAgICAgRm9ybXVsYXRlZCBhbm90aGVyIHdheSwgYHl5dGV4dGAgaXMgdGhlIHZhbHVlIG9mIHRoZSB0b2tlbiBpbW1lZGlhdGVseSBwcmVjZWVkaW5nXG4gKiAgICAgICAgICAgICAgICAgdGhlIGN1cnJlbnQgbG9vay1haGVhZCB0b2tlbi5cbiAqICAgICAgICAgICAgICAgICBDYXZlYXRzIGFwcGx5IGZvciBydWxlcyB3aGljaCBkb24ndCByZXF1aXJlIGxvb2stYWhlYWQsIHN1Y2ggYXMgZXBzaWxvbiBydWxlcy5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bGVuZ2AgIDogZGl0dG8gYXMgYHl5dGV4dGAsIG9ubHkgbm93IGZvciB0aGUgbGV4ZXIueXlsZW5nIHZhbHVlLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlsaW5lbm9gOiBkaXR0byBhcyBgeXl0ZXh0YCwgb25seSBub3cgZm9yIHRoZSBsZXhlci55eWxpbmVubyB2YWx1ZS5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bG9jYCAgIDogZGl0dG8gYXMgYHl5dGV4dGAsIG9ubHkgbm93IGZvciB0aGUgbGV4ZXIueXlsbG9jIGxleGVyIHRva2VuIGxvY2F0aW9uIGluZm8uXG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV0FSTklORzogc2luY2Ugamlzb24gMC40LjE4LTE4NiB0aGlzIGVudHJ5IG1heSBiZSBOVUxML1VOREVGSU5FRCBpbnN0ZWFkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhbiBlbXB0eSBvYmplY3Qgd2hlbiBubyBzdWl0YWJsZSBsb2NhdGlvbiBpbmZvIGNhbiBiZSBwcm92aWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5c3RhdGVgIDogdGhlIGN1cnJlbnQgcGFyc2VyIHN0YXRlIG51bWJlciwgdXNlZCBpbnRlcm5hbGx5IGZvciBkaXNwYXRjaGluZyBhbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWN1dGluZyB0aGUgYWN0aW9uIGNvZGUgY2h1bmsgbWF0Y2hpbmcgdGhlIHJ1bGUgY3VycmVudGx5IGJlaW5nIHJlZHVjZWQuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eXNwYCAgICA6IHRoZSBjdXJyZW50IHN0YXRlIHN0YWNrIHBvc2l0aW9uIChhLmsuYS4gJ3N0YWNrIHBvaW50ZXInKVxuICpcbiAqICAgICAgICAgICAgICAgICBUaGlzIG9uZSBjb21lcyBpbiBoYW5keSB3aGVuIHlvdSBhcmUgZ29pbmcgdG8gZG8gYWR2YW5jZWQgdGhpbmdzIHRvIHRoZSBwYXJzZXJcbiAqICAgICAgICAgICAgICAgICBzdGFja3MsIGFsbCBvZiB3aGljaCBhcmUgYWNjZXNzaWJsZSBmcm9tIHlvdXIgYWN0aW9uIGNvZGUgKHNlZSB0aGUgbmV4dCBlbnRyaWVzIGJlbG93KS5cbiAqXG4gKiAgICAgICAgICAgICAgICAgQWxzbyBub3RlIHRoYXQgeW91IGNhbiBhY2Nlc3MgdGhpcyBhbmQgb3RoZXIgc3RhY2sgaW5kZXggdmFsdWVzIHVzaW5nIHRoZSBuZXcgZG91YmxlLWhhc2hcbiAqICAgICAgICAgICAgICAgICBzeW50YXgsIGkuZS4gYCMjJCA9PT0gIyMwID09PSB5eXNwYCwgd2hpbGUgYCMjMWAgaXMgdGhlIHN0YWNrIGluZGV4IGZvciBhbGwgdGhpbmdzXG4gKiAgICAgICAgICAgICAgICAgcmVsYXRlZCB0byB0aGUgZmlyc3QgcnVsZSB0ZXJtLCBqdXN0IGxpa2UgeW91IGhhdmUgYCQxYCwgYEAxYCBhbmQgYCMxYC5cbiAqICAgICAgICAgICAgICAgICBUaGlzIGlzIG1hZGUgYXZhaWxhYmxlIHRvIHdyaXRlIHZlcnkgYWR2YW5jZWQgZ3JhbW1hciBhY3Rpb24gcnVsZXMsIGUuZy4gd2hlbiB5b3Ugd2FudFxuICogICAgICAgICAgICAgICAgIHRvIGludmVzdGlnYXRlIHRoZSBwYXJzZSBzdGF0ZSBzdGFjayBpbiB5b3VyIGFjdGlvbiBjb2RlLCB3aGljaCB3b3VsZCwgZm9yIGV4YW1wbGUsXG4gKiAgICAgICAgICAgICAgICAgYmUgcmVsZXZhbnQgd2hlbiB5b3Ugd2lzaCB0byBpbXBsZW1lbnQgZXJyb3IgZGlhZ25vc3RpY3MgYW5kIHJlcG9ydGluZyBzY2hlbWVzIHNpbWlsYXJcbiAqICAgICAgICAgICAgICAgICB0byB0aGUgd29yayBkZXNjcmliZWQgaGVyZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgKyBQb3R0aWVyLCBGLiwgMjAxNi4gUmVhY2hhYmlsaXR5IGFuZCBlcnJvciBkaWFnbm9zaXMgaW4gTFIoMSkgYXV0b21hdGEuXG4gKiAgICAgICAgICAgICAgICAgICBJbiBKb3VybsOpZXMgRnJhbmNvcGhvbmVzIGRlcyBMYW5ndWFnZXMgQXBwbGljYXRpZnMuXG4gKlxuICogICAgICAgICAgICAgICAgICsgSmVmZmVyeSwgQy5MLiwgMjAwMy4gR2VuZXJhdGluZyBMUiBzeW50YXggZXJyb3IgbWVzc2FnZXMgZnJvbSBleGFtcGxlcy5cbiAqICAgICAgICAgICAgICAgICAgIEFDTSBUcmFuc2FjdGlvbnMgb24gUHJvZ3JhbW1pbmcgTGFuZ3VhZ2VzIGFuZCBTeXN0ZW1zIChUT1BMQVMpLCAyNSg1KSwgcHAuNjMx4oCTNjQwLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlydWxlbGVuZ3RoYDogdGhlIGN1cnJlbnQgcnVsZSdzIHRlcm0gY291bnQsIGkuZS4gdGhlIG51bWJlciBvZiBlbnRyaWVzIG9jY3VwaWVkIG9uIHRoZSBzdGFjay5cbiAqXG4gKiAgICAgICAgICAgICAgICAgVGhpcyBvbmUgY29tZXMgaW4gaGFuZHkgd2hlbiB5b3UgYXJlIGdvaW5nIHRvIGRvIGFkdmFuY2VkIHRoaW5ncyB0byB0aGUgcGFyc2VyXG4gKiAgICAgICAgICAgICAgICAgc3RhY2tzLCBhbGwgb2Ygd2hpY2ggYXJlIGFjY2Vzc2libGUgZnJvbSB5b3VyIGFjdGlvbiBjb2RlIChzZWUgdGhlIG5leHQgZW50cmllcyBiZWxvdykuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eXZzdGFja2A6IHJlZmVyZW5jZSB0byB0aGUgcGFyc2VyIHZhbHVlIHN0YWNrLiBBbHNvIGFjY2Vzc2VkIHZpYSB0aGUgYCQxYCBldGMuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RydWN0cy5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5bHN0YWNrYDogcmVmZXJlbmNlIHRvIHRoZSBwYXJzZXIgdG9rZW4gbG9jYXRpb24gc3RhY2suIEFsc28gYWNjZXNzZWQgdmlhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGBAMWAgZXRjLiBjb25zdHJ1Y3RzLlxuICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXQVJOSU5HOiBzaW5jZSBqaXNvbiAwLjQuMTgtMTg2IHRoaXMgYXJyYXkgTUFZIGNvbnRhaW4gc2xvdHMgd2hpY2ggYXJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVU5ERUZJTkVEIHJhdGhlciB0aGFuIGFuIGVtcHR5IChsb2NhdGlvbikgb2JqZWN0LCB3aGVuIHRoZSBsZXhlci9wYXJzZXJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gY29kZSBkaWQgbm90IHByb3ZpZGUgYSBzdWl0YWJsZSBsb2NhdGlvbiBpbmZvIG9iamVjdCB3aGVuIHN1Y2ggYVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3Qgd2FzIGZpbGxlZCFcbiAqXG4gKiAgICAgICAgICAgICAgIC0gYHl5c3RhY2tgIDogcmVmZXJlbmNlIHRvIHRoZSBwYXJzZXIgdG9rZW4gaWQgc3RhY2suIEFsc28gYWNjZXNzZWQgdmlhIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAjMWAgZXRjLiBjb25zdHJ1Y3RzLlxuICpcbiAqICAgICAgICAgICAgICAgICBOb3RlOiB0aGlzIGlzIGEgYml0IG9mIGEgKip3aGl0ZSBsaWUqKiBhcyB3ZSBjYW4gc3RhdGljYWxseSBkZWNvZGUgYW55IGAjbmAgcmVmZXJlbmNlIHRvXG4gKiAgICAgICAgICAgICAgICAgaXRzIG51bWVyaWMgdG9rZW4gaWQgdmFsdWUsIGhlbmNlIHRoYXQgY29kZSB3b3VsZG4ndCBuZWVkIHRoZSBgeXlzdGFja2AgYnV0ICp5b3UqIG1pZ2h0XG4gKiAgICAgICAgICAgICAgICAgd2FudCBhY2Nlc3MgdGhpcyBhcnJheSBmb3IgeW91ciBvd24gcHVycG9zZXMsIHN1Y2ggYXMgZXJyb3IgYW5hbHlzaXMgYXMgbWVudGlvbmVkIGFib3ZlIVxuICpcbiAqICAgICAgICAgICAgICAgICBOb3RlIHRoYXQgdGhpcyBzdGFjayBzdG9yZXMgdGhlIGN1cnJlbnQgc3RhY2sgb2YgKnRva2VucyosIHRoYXQgaXMgdGhlIHNlcXVlbmNlIG9mXG4gKiAgICAgICAgICAgICAgICAgYWxyZWFkeSBwYXJzZWQ9cmVkdWNlZCAqbm9udGVybWluYWxzKiAodG9rZW5zIHJlcHJlc2VudGluZyBydWxlcykgYW5kICp0ZXJtaW5hbHMqXG4gKiAgICAgICAgICAgICAgICAgKGxleGVyIHRva2VucyAqc2hpZnRlZCogb250byB0aGUgc3RhY2sgdW50aWwgdGhlIHJ1bGUgdGhleSBiZWxvbmcgdG8gaXMgZm91bmQgYW5kXG4gKiAgICAgICAgICAgICAgICAgKnJlZHVjZWQqLlxuICpcbiAqICAgICAgICAgICAgICAgLSBgeXlzc3RhY2tgOiByZWZlcmVuY2UgdG8gdGhlIHBhcnNlciBzdGF0ZSBzdGFjay4gVGhpcyBvbmUgY2FycmllcyB0aGUgaW50ZXJuYWwgcGFyc2VyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKnN0YXRlcyogc3VjaCBhcyB0aGUgb25lIGluIGB5eXN0YXRlYCwgd2hpY2ggYXJlIHVzZWQgdG8gcmVwcmVzZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhcnNlciBzdGF0ZSBtYWNoaW5lIGluIHRoZSAqcGFyc2UgdGFibGUqLiAqVmVyeSogKmludGVybmFsKiBzdHVmZixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0IGNhbiBJIHNheT8gSWYgeW91IGFjY2VzcyB0aGlzIG9uZSwgeW91J3JlIGNsZWFybHkgZG9pbmcgd2lja2VkIHRoaW5nc1xuICpcbiAqICAgICAgICAgICAgICAgLSBgLi4uYCAgICAgOiB0aGUgZXh0cmEgYXJndW1lbnRzIHlvdSBzcGVjaWZpZWQgaW4gdGhlIGAlcGFyc2UtcGFyYW1gIHN0YXRlbWVudCBpbiB5b3VyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbW1hciBkZWZpbml0aW9uIGZpbGUuXG4gKlxuICogICAgdGFibGU6IFsuLi5dLFxuICogICAgICAgICAgICAgICBTdGF0ZSB0cmFuc2l0aW9uIHRhYmxlXG4gKiAgICAgICAgICAgICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAgICAgICAgICAgICAgIGluZGV4IGxldmVscyBhcmU6XG4gKiAgICAgICAgICAgICAgIC0gYHN0YXRlYCAgLS0+IGhhc2ggdGFibGVcbiAqICAgICAgICAgICAgICAgLSBgc3ltYm9sYCAtLT4gYWN0aW9uIChudW1iZXIgb3IgYXJyYXkpXG4gKlxuICogICAgICAgICAgICAgICAgIElmIHRoZSBgYWN0aW9uYCBpcyBhbiBhcnJheSwgdGhlc2UgYXJlIHRoZSBlbGVtZW50cycgbWVhbmluZzpcbiAqICAgICAgICAgICAgICAgICAtIGluZGV4IFswXTogMSA9IHNoaWZ0LCAyID0gcmVkdWNlLCAzID0gYWNjZXB0XG4gKiAgICAgICAgICAgICAgICAgLSBpbmRleCBbMV06IEdPVE8gYHN0YXRlYFxuICpcbiAqICAgICAgICAgICAgICAgICBJZiB0aGUgYGFjdGlvbmAgaXMgYSBudW1iZXIsIGl0IGlzIHRoZSBHT1RPIGBzdGF0ZWBcbiAqXG4gKiAgICBkZWZhdWx0QWN0aW9uczogey4uLn0sXG4gKlxuICogICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcyksXG4gKiAgICB5eUVycm9yOiBmdW5jdGlvbihzdHIsIC4uLiksXG4gKiAgICB5eVJlY292ZXJpbmc6IGZ1bmN0aW9uKCksXG4gKiAgICB5eUVyck9rOiBmdW5jdGlvbigpLFxuICogICAgeXlDbGVhckluOiBmdW5jdGlvbigpLFxuICpcbiAqICAgIGNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvOiBmdW5jdGlvbihlcnJvcl9tZXNzYWdlLCBleGNlcHRpb25fb2JqZWN0LCBleHBlY3RlZF90b2tlbl9zZXQsIGlzX3JlY292ZXJhYmxlKSxcbiAqICAgICAgICAgICAgICAgSGVscGVyIGZ1bmN0aW9uICoqd2hpY2ggd2lsbCBiZSBzZXQgdXAgZHVyaW5nIHRoZSBmaXJzdCBpbnZvY2F0aW9uIG9mIHRoZSBgcGFyc2UoKWAgbWV0aG9kKiouXG4gKiAgICAgICAgICAgICAgIFByb2R1Y2VzIGEgbmV3IGVycm9ySW5mbyAnaGFzaCBvYmplY3QnIHdoaWNoIGNhbiBiZSBwYXNzZWQgaW50byBgcGFyc2VFcnJvcigpYC5cbiAqICAgICAgICAgICAgICAgU2VlIGl0J3MgdXNlIGluIHRoaXMgcGFyc2VyIGtlcm5lbCBpbiBtYW55IHBsYWNlczsgZXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICB2YXIgaW5mb09iaiA9IHBhcnNlci5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbygnZmFpbCEnLCBudWxsLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VyLmNvbGxlY3RfZXhwZWN0ZWRfdG9rZW5fc2V0KHN0YXRlKSwgdHJ1ZSk7XG4gKiAgICAgICAgICAgICAgICAgICB2YXIgcmV0VmFsID0gcGFyc2VyLnBhcnNlRXJyb3IoaW5mb09iai5lcnJTdHIsIGluZm9PYmosIHBhcnNlci5KaXNvblBhcnNlckVycm9yKTtcbiAqXG4gKiAgICBvcmlnaW5hbFBhcnNlRXJyb3I6IGZ1bmN0aW9uKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpLFxuICogICAgICAgICAgICAgICBUaGUgYmFzaWMgYHBhcnNlRXJyb3JgIGhhbmRsZXIgcHJvdmlkZWQgYnkgSklTT04uXG4gKiAgICAgICAgICAgICAgIGBjbGVhbnVwQWZ0ZXJQYXJzZSgpYCB3aWxsIGNsZWFuIHVwIGFuZCByZXNldCBgcGFyc2VFcnJvcigpYCB0byByZWZlcmVuY2UgdGhpcyBmdW5jdGlvblxuICogICAgICAgICAgICAgICBhdCB0aGUgZW5kIG9mIHRoZSBgcGFyc2UoKWAuXG4gKlxuICogICAgb3B0aW9uczogeyAuLi4gcGFyc2VyICVvcHRpb25zIC4uLiB9LFxuICpcbiAqICAgIHBhcnNlOiBmdW5jdGlvbihpbnB1dFssIGFyZ3MuLi5dKSxcbiAqICAgICAgICAgICAgICAgUGFyc2UgdGhlIGdpdmVuIGBpbnB1dGAgYW5kIHJldHVybiB0aGUgcGFyc2VkIHZhbHVlIChvciBgdHJ1ZWAgd2hlbiBub25lIHdhcyBwcm92aWRlZCBieVxuICogICAgICAgICAgICAgICB0aGUgcm9vdCBhY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHBhcnNlciBpcyBhY3RpbmcgYXMgYSAqbWF0Y2hlciopLlxuICogICAgICAgICAgICAgICBZb3UgTUFZIHVzZSB0aGUgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyBhcyBwZXIgYCVwYXJzZS1wYXJhbWAgc3BlYyBvZiB0aGlzIGdyYW1tYXI6XG4gKiAgICAgICAgICAgICAgIHRoZXNlIGV4dHJhIGBhcmdzLi4uYCBhcmUgYWRkZWQgdmVyYmF0aW0gdG8gdGhlIGB5eWAgb2JqZWN0IHJlZmVyZW5jZSBhcyBtZW1iZXIgdmFyaWFibGVzLlxuICpcbiAqICAgICAgICAgICAgICAgV0FSTklORzpcbiAqICAgICAgICAgICAgICAgUGFyc2VyJ3MgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyAodmlhIGAlcGFyc2UtcGFyYW1gKSBNQVkgY29uZmxpY3Qgd2l0aFxuICogICAgICAgICAgICAgICBhbnkgYXR0cmlidXRlcyBhbHJlYWR5IGFkZGVkIHRvIGB5eWAgYnkgdGhlIGppc29uIHJ1bi10aW1lO1xuICogICAgICAgICAgICAgICB3aGVuIHN1Y2ggYSBjb2xsaXNpb24gaXMgZGV0ZWN0ZWQgYW4gZXhjZXB0aW9uIGlzIHRocm93biB0byBwcmV2ZW50IHRoZSBnZW5lcmF0ZWQgcnVuLXRpbWVcbiAqICAgICAgICAgICAgICAgZnJvbSBzaWxlbnRseSBhY2NlcHRpbmcgdGhpcyBjb25mdXNpbmcgYW5kIHBvdGVudGlhbGx5IGhhemFyZG91cyBzaXR1YXRpb24hXG4gKlxuICogICAgICAgICAgICAgICBUaGUgbGV4ZXIgTUFZIGFkZCBpdHMgb3duIHNldCBvZiBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgKHZpYSB0aGUgYCVwYXJzZS1wYXJhbWAgbGluZSBpblxuICogICAgICAgICAgICAgICB0aGUgbGV4ZXIgc2VjdGlvbiBvZiB0aGUgZ3JhbW1hciBzcGVjKTogdGhlc2Ugd2lsbCBiZSBpbnNlcnRlZCBpbiB0aGUgYHl5YCBzaGFyZWQgc3RhdGVcbiAqICAgICAgICAgICAgICAgb2JqZWN0IGFuZCBhbnkgY29sbGlzaW9uIHdpdGggdGhvc2Ugd2lsbCBiZSByZXBvcnRlZCBieSB0aGUgbGV4ZXIgdmlhIGEgdGhyb3duIGV4Y2VwdGlvbi5cbiAqXG4gKiAgICBjbGVhbnVwQWZ0ZXJQYXJzZTogZnVuY3Rpb24ocmVzdWx0VmFsdWUsIGludm9rZV9wb3N0X21ldGhvZHMsIGRvX25vdF9udWtlX2Vycm9yaW5mb3MpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24gKip3aGljaCB3aWxsIGJlIHNldCB1cCBkdXJpbmcgdGhlIGZpcnN0IGludm9jYXRpb24gb2YgdGhlIGBwYXJzZSgpYCBtZXRob2QqKi5cbiAqICAgICAgICAgICAgICAgVGhpcyBoZWxwZXIgQVBJIGlzIGludm9rZWQgYXQgdGhlIGVuZCBvZiB0aGUgYHBhcnNlKClgIGNhbGwsIHVubGVzcyBhbiBleGNlcHRpb24gd2FzIHRocm93blxuICogICAgICAgICAgICAgICBhbmQgYCVvcHRpb25zIG5vLXRyeS1jYXRjaGAgaGFzIGJlZW4gZGVmaW5lZCBmb3IgdGhpcyBncmFtbWFyOiBpbiB0aGF0IGNhc2UgdGhpcyBoZWxwZXIgTUFZXG4gKiAgICAgICAgICAgICAgIGJlIGludm9rZWQgYnkgY2FsbGluZyB1c2VyIGNvZGUgdG8gZW5zdXJlIHRoZSBgcG9zdF9wYXJzZWAgY2FsbGJhY2tzIGFyZSBpbnZva2VkIGFuZFxuICogICAgICAgICAgICAgICB0aGUgaW50ZXJuYWwgcGFyc2VyIGdldHMgcHJvcGVybHkgZ2FyYmFnZSBjb2xsZWN0ZWQgdW5kZXIgdGhlc2UgcGFydGljdWxhciBjaXJjdW1zdGFuY2VzLlxuICpcbiAqICAgIHl5TWVyZ2VMb2NhdGlvbkluZm86IGZ1bmN0aW9uKGZpcnN0X2luZGV4LCBsYXN0X2luZGV4LCBmaXJzdF95eWxsb2MsIGxhc3RfeXlsbG9jLCBkb250X2xvb2tfYmFjayksXG4gKiAgICAgICAgICAgICAgIEhlbHBlciBmdW5jdGlvbiAqKndoaWNoIHdpbGwgYmUgc2V0IHVwIGR1cmluZyB0aGUgZmlyc3QgaW52b2NhdGlvbiBvZiB0aGUgYHBhcnNlKClgIG1ldGhvZCoqLlxuICogICAgICAgICAgICAgICBUaGlzIGhlbHBlciBBUEkgY2FuIGJlIGludm9rZWQgdG8gY2FsY3VsYXRlIGEgc3Bhbm5pbmcgYHl5bGxvY2AgbG9jYXRpb24gaW5mbyBvYmplY3QuXG4gKlxuICogICAgICAgICAgICAgICBOb3RlOiAlZXBzaWxvbiBydWxlcyBNQVkgc3BlY2lmeSBubyBgZmlyc3RfaW5kZXhgIGFuZCBgZmlyc3RfeXlsbG9jYCwgaW4gd2hpY2ggY2FzZVxuICogICAgICAgICAgICAgICB0aGlzIGZ1bmN0aW9uIHdpbGwgYXR0ZW1wdCB0byBvYnRhaW4gYSBzdWl0YWJsZSBsb2NhdGlvbiBtYXJrZXIgYnkgaW5zcGVjdGluZyB0aGUgbG9jYXRpb24gc3RhY2tcbiAqICAgICAgICAgICAgICAgYmFja3dhcmRzLlxuICpcbiAqICAgICAgICAgICAgICAgRm9yIG1vcmUgaW5mbyBzZWUgdGhlIGRvY3VtZW50YXRpb24gY29tbWVudCBmdXJ0aGVyIGJlbG93LCBpbW1lZGlhdGVseSBhYm92ZSB0aGlzIGZ1bmN0aW9uJ3NcbiAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24uXG4gKlxuICogICAgbGV4ZXI6IHtcbiAqICAgICAgICB5eTogey4uLn0sICAgICAgICAgICBBIHJlZmVyZW5jZSB0byB0aGUgc28tY2FsbGVkIFwic2hhcmVkIHN0YXRlXCIgYHl5YCBvbmNlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZWQgdmlhIGEgY2FsbCB0byB0aGUgYC5zZXRJbnB1dChpbnB1dCwgeXkpYCBsZXhlciBBUEkuXG4gKiAgICAgICAgRU9GOiAxLFxuICogICAgICAgIEVSUk9SOiAyLFxuICogICAgICAgIEppc29uTGV4ZXJFcnJvcjogZnVuY3Rpb24obXNnLCBoYXNoKSxcbiAqICAgICAgICBwYXJzZUVycm9yOiBmdW5jdGlvbihzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSxcbiAqICAgICAgICBzZXRJbnB1dDogZnVuY3Rpb24oaW5wdXQsIFt5eV0pLFxuICogICAgICAgIGlucHV0OiBmdW5jdGlvbigpLFxuICogICAgICAgIHVucHV0OiBmdW5jdGlvbihzdHIpLFxuICogICAgICAgIG1vcmU6IGZ1bmN0aW9uKCksXG4gKiAgICAgICAgcmVqZWN0OiBmdW5jdGlvbigpLFxuICogICAgICAgIGxlc3M6IGZ1bmN0aW9uKG4pLFxuICogICAgICAgIHBhc3RJbnB1dDogZnVuY3Rpb24obiksXG4gKiAgICAgICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24obiksXG4gKiAgICAgICAgc2hvd1Bvc2l0aW9uOiBmdW5jdGlvbigpLFxuICogICAgICAgIHRlc3RfbWF0Y2g6IGZ1bmN0aW9uKHJlZ2V4X21hdGNoX2FycmF5LCBydWxlX2luZGV4LCAuLi4pLFxuICogICAgICAgIG5leHQ6IGZ1bmN0aW9uKC4uLiksXG4gKiAgICAgICAgbGV4OiBmdW5jdGlvbiguLi4pLFxuICogICAgICAgIGJlZ2luOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICogICAgICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24oY29uZGl0aW9uKSxcbiAqICAgICAgICBwb3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqICAgICAgICB0b3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqICAgICAgICBfY3VycmVudFJ1bGVzOiBmdW5jdGlvbigpLFxuICogICAgICAgIHN0YXRlU3RhY2tTaXplOiBmdW5jdGlvbigpLFxuICogICAgICAgIGNsZWFudXBBZnRlckxleDogZnVuY3Rpb24oKVxuICpcbiAqICAgICAgICBvcHRpb25zOiB7IC4uLiBsZXhlciAlb3B0aW9ucyAuLi4gfSxcbiAqXG4gKiAgICAgICAgcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24oeXksIHl5XywgJGF2b2lkaW5nX25hbWVfY29sbGlzaW9ucywgWVlfU1RBUlQsIC4uLiksXG4gKiAgICAgICAgcnVsZXM6IFsuLi5dLFxuICogICAgICAgIGNvbmRpdGlvbnM6IHthc3NvY2lhdGl2ZSBsaXN0OiBuYW1lID09PiBzZXR9LFxuICogICAgfVxuICogIH1cbiAqXG4gKlxuICogIHRva2VuIGxvY2F0aW9uIGluZm8gKEAkLCBfJCwgZXRjLik6IHtcbiAqICAgIGZpcnN0X2xpbmU6IG4sXG4gKiAgICBsYXN0X2xpbmU6IG4sXG4gKiAgICBmaXJzdF9jb2x1bW46IG4sXG4gKiAgICBsYXN0X2NvbHVtbjogbixcbiAqICAgIHJhbmdlOiBbc3RhcnRfbnVtYmVyLCBlbmRfbnVtYmVyXVxuICogICAgICAgICAgICAgICAod2hlcmUgdGhlIG51bWJlcnMgYXJlIGluZGV4ZXMgaW50byB0aGUgaW5wdXQgc3RyaW5nLCB6ZXJvLWJhc2VkKVxuICogIH1cbiAqXG4gKiAtLS1cbiAqXG4gKiBUaGUgYHBhcnNlRXJyb3JgIGZ1bmN0aW9uIHJlY2VpdmVzIGEgJ2hhc2gnIG9iamVjdCB3aXRoIHRoZXNlIG1lbWJlcnMgZm9yIGxleGVyIGFuZFxuICogcGFyc2VyIGVycm9yczpcbiAqXG4gKiAge1xuICogICAgdGV4dDogICAgICAgIChtYXRjaGVkIHRleHQpXG4gKiAgICB0b2tlbjogICAgICAgKHRoZSBwcm9kdWNlZCB0ZXJtaW5hbCB0b2tlbiwgaWYgYW55KVxuICogICAgdG9rZW5faWQ6ICAgICh0aGUgcHJvZHVjZWQgdGVybWluYWwgdG9rZW4gbnVtZXJpYyBJRCwgaWYgYW55KVxuICogICAgbGluZTogICAgICAgICh5eWxpbmVubylcbiAqICAgIGxvYzogICAgICAgICAoeXlsbG9jKVxuICogIH1cbiAqXG4gKiBwYXJzZXIgKGdyYW1tYXIpIGVycm9ycyB3aWxsIGFsc28gcHJvdmlkZSB0aGVzZSBhZGRpdGlvbmFsIG1lbWJlcnM6XG4gKlxuICogIHtcbiAqICAgIGV4cGVjdGVkOiAgICAoYXJyYXkgZGVzY3JpYmluZyB0aGUgc2V0IG9mIGV4cGVjdGVkIHRva2VucztcbiAqICAgICAgICAgICAgICAgICAgbWF5IGJlIFVOREVGSU5FRCB3aGVuIHdlIGNhbm5vdCBlYXNpbHkgcHJvZHVjZSBzdWNoIGEgc2V0KVxuICogICAgc3RhdGU6ICAgICAgIChpbnRlZ2VyIChvciBhcnJheSB3aGVuIHRoZSB0YWJsZSBpbmNsdWRlcyBncmFtbWFyIGNvbGxpc2lvbnMpO1xuICogICAgICAgICAgICAgICAgICByZXByZXNlbnRzIHRoZSBjdXJyZW50IGludGVybmFsIHN0YXRlIG9mIHRoZSBwYXJzZXIga2VybmVsLlxuICogICAgICAgICAgICAgICAgICBjYW4sIGZvciBleGFtcGxlLCBiZSB1c2VkIHRvIHBhc3MgdG8gdGhlIGBjb2xsZWN0X2V4cGVjdGVkX3Rva2VuX3NldCgpYFxuICogICAgICAgICAgICAgICAgICBBUEkgdG8gb2J0YWluIHRoZSBleHBlY3RlZCB0b2tlbiBzZXQpXG4gKiAgICBhY3Rpb246ICAgICAgKGludGVnZXI7IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgaW50ZXJuYWwgYWN0aW9uIHdoaWNoIHdpbGwgYmUgZXhlY3V0ZWQpXG4gKiAgICBuZXdfc3RhdGU6ICAgKGludGVnZXI7IHJlcHJlc2VudHMgdGhlIG5leHQvcGxhbm5lZCBpbnRlcm5hbCBzdGF0ZSwgb25jZSB0aGUgY3VycmVudFxuICogICAgICAgICAgICAgICAgICBhY3Rpb24gaGFzIGV4ZWN1dGVkKVxuICogICAgcmVjb3ZlcmFibGU6IChib29sZWFuOiBUUlVFIHdoZW4gdGhlIHBhcnNlciBNQVkgaGF2ZSBhbiBlcnJvciByZWNvdmVyeSBydWxlXG4gKiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVycm9yKVxuICogICAgc3RhdGVfc3RhY2s6IChhcnJheTogdGhlIGN1cnJlbnQgcGFyc2VyIExBTFIvTFIgaW50ZXJuYWwgc3RhdGUgc3RhY2s7IHRoaXMgY2FuIGJlIHVzZWQsXG4gKiAgICAgICAgICAgICAgICAgIGZvciBpbnN0YW5jZSwgZm9yIGFkdmFuY2VkIGVycm9yIGFuYWx5c2lzIGFuZCByZXBvcnRpbmcpXG4gKiAgICB2YWx1ZV9zdGFjazogKGFycmF5OiB0aGUgY3VycmVudCBwYXJzZXIgTEFMUi9MUiBpbnRlcm5hbCBgJCRgIHZhbHVlIHN0YWNrOyB0aGlzIGNhbiBiZSB1c2VkLFxuICogICAgICAgICAgICAgICAgICBmb3IgaW5zdGFuY2UsIGZvciBhZHZhbmNlZCBlcnJvciBhbmFseXNpcyBhbmQgcmVwb3J0aW5nKVxuICogICAgbG9jYXRpb25fc3RhY2s6IChhcnJheTogdGhlIGN1cnJlbnQgcGFyc2VyIExBTFIvTFIgaW50ZXJuYWwgbG9jYXRpb24gc3RhY2s7IHRoaXMgY2FuIGJlIHVzZWQsXG4gKiAgICAgICAgICAgICAgICAgIGZvciBpbnN0YW5jZSwgZm9yIGFkdmFuY2VkIGVycm9yIGFuYWx5c2lzIGFuZCByZXBvcnRpbmcpXG4gKiAgICB5eTogICAgICAgICAgKG9iamVjdDogdGhlIGN1cnJlbnQgcGFyc2VyIGludGVybmFsIFwic2hhcmVkIHN0YXRlXCIgYHl5YFxuICogICAgICAgICAgICAgICAgICBhcyBpcyBhbHNvIGF2YWlsYWJsZSBpbiB0aGUgcnVsZSBhY3Rpb25zOyB0aGlzIGNhbiBiZSB1c2VkLFxuICogICAgICAgICAgICAgICAgICBmb3IgaW5zdGFuY2UsIGZvciBhZHZhbmNlZCBlcnJvciBhbmFseXNpcyBhbmQgcmVwb3J0aW5nKVxuICogICAgbGV4ZXI6ICAgICAgIChyZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgbGV4ZXIgaW5zdGFuY2UgdXNlZCBieSB0aGUgcGFyc2VyKVxuICogICAgcGFyc2VyOiAgICAgIChyZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgcGFyc2VyIGluc3RhbmNlKVxuICogIH1cbiAqXG4gKiB3aGlsZSBgdGhpc2Agd2lsbCByZWZlcmVuY2UgdGhlIGN1cnJlbnQgcGFyc2VyIGluc3RhbmNlLlxuICpcbiAqIFdoZW4gYHBhcnNlRXJyb3JgIGlzIGludm9rZWQgYnkgdGhlIGxleGVyLCBgdGhpc2Agd2lsbCBzdGlsbCByZWZlcmVuY2UgdGhlIHJlbGF0ZWQgKnBhcnNlcipcbiAqIGluc3RhbmNlLCB3aGlsZSB0aGVzZSBhZGRpdGlvbmFsIGBoYXNoYCBmaWVsZHMgd2lsbCBhbHNvIGJlIHByb3ZpZGVkOlxuICpcbiAqICB7XG4gKiAgICBsZXhlcjogICAgICAgKHJlZmVyZW5jZSB0byB0aGUgY3VycmVudCBsZXhlciBpbnN0YW5jZSB3aGljaCByZXBvcnRlZCB0aGUgZXJyb3IpXG4gKiAgfVxuICpcbiAqIFdoZW4gYHBhcnNlRXJyb3JgIGlzIGludm9rZWQgYnkgdGhlIHBhcnNlciBkdWUgdG8gYSAqKkphdmFTY3JpcHQgZXhjZXB0aW9uKiogYmVpbmcgZmlyZWRcbiAqIGZyb20gZWl0aGVyIHRoZSBwYXJzZXIgb3IgbGV4ZXIsIGB0aGlzYCB3aWxsIHN0aWxsIHJlZmVyZW5jZSB0aGUgcmVsYXRlZCAqcGFyc2VyKlxuICogaW5zdGFuY2UsIHdoaWxlIHRoZXNlIGFkZGl0aW9uYWwgYGhhc2hgIGZpZWxkcyB3aWxsIGFsc28gYmUgcHJvdmlkZWQ6XG4gKlxuICogIHtcbiAqICAgIGV4Y2VwdGlvbjogICAocmVmZXJlbmNlIHRvIHRoZSBleGNlcHRpb24gdGhyb3duKVxuICogIH1cbiAqXG4gKiBQbGVhc2UgZG8gbm90ZSB0aGF0IGluIHRoZSBsYXR0ZXIgc2l0dWF0aW9uLCB0aGUgYGV4cGVjdGVkYCBmaWVsZCB3aWxsIGJlIG9taXR0ZWQgYXNcbiAqIHRoaXMgdHlwZSBvZiBmYWlsdXJlIGlzIGFzc3VtZWQgbm90IHRvIGJlIGR1ZSB0byAqcGFyc2UgZXJyb3JzKiBidXQgcmF0aGVyIGR1ZSB0byB1c2VyXG4gKiBhY3Rpb24gY29kZSBpbiBlaXRoZXIgcGFyc2VyIG9yIGxleGVyIGZhaWxpbmcgdW5leHBlY3RlZGx5LlxuICpcbiAqIC0tLVxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSBwYXJzZXIgb3B0aW9ucyBieSBzZXR0aW5nIC8gbW9kaWZ5aW5nIHRoZSBgLnl5YCBvYmplY3Qgb2YgeW91ciBQYXJzZXIgaW5zdGFuY2UuXG4gKiBUaGVzZSBvcHRpb25zIGFyZSBhdmFpbGFibGU6XG4gKlxuICogIyMjIG9wdGlvbnMgd2hpY2ggYXJlIGdsb2JhbCBmb3IgYWxsIHBhcnNlciBpbnN0YW5jZXNcbiAqXG4gKiAgUGFyc2VyLnByZV9wYXJzZTogZnVuY3Rpb24oeXkpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IHlvdSBjYW4gc3BlY2lmeSBhIHByZV9wYXJzZSgpIGZ1bmN0aW9uIGluIHRoZSBjaHVuayBmb2xsb3dpbmdcbiAqICAgICAgICAgICAgICAgICB0aGUgZ3JhbW1hciwgaS5lLiBhZnRlciB0aGUgbGFzdCBgJSVgLlxuICogIFBhcnNlci5wb3N0X3BhcnNlOiBmdW5jdGlvbih5eSwgcmV0dmFsLCBwYXJzZUluZm8pIHsgcmV0dXJuIHJldHZhbDsgfVxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB5b3UgY2FuIHNwZWNpZnkgYSBwb3N0X3BhcnNlKCkgZnVuY3Rpb24gaW4gdGhlIGNodW5rIGZvbGxvd2luZ1xuICogICAgICAgICAgICAgICAgIHRoZSBncmFtbWFyLCBpLmUuIGFmdGVyIHRoZSBsYXN0IGAlJWAuIFdoZW4gaXQgZG9lcyBub3QgcmV0dXJuIGFueSB2YWx1ZSxcbiAqICAgICAgICAgICAgICAgICB0aGUgcGFyc2VyIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbCBgcmV0dmFsYC5cbiAqXG4gKiAjIyMgb3B0aW9ucyB3aGljaCBjYW4gYmUgc2V0IHVwIHBlciBwYXJzZXIgaW5zdGFuY2VcbiAqXG4gKiAgeXk6IHtcbiAqICAgICAgcHJlX3BhcnNlOiAgZnVuY3Rpb24oeXkpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGlzIGludm9rZWQgYmVmb3JlIHRoZSBwYXJzZSBjeWNsZSBzdGFydHMgKGFuZCBiZWZvcmUgdGhlIGZpcnN0XG4gKiAgICAgICAgICAgICAgICAgaW52b2NhdGlvbiBvZiBgbGV4KClgKSBidXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGludm9jYXRpb24gb2ZcbiAqICAgICAgICAgICAgICAgICBgcGFyc2VyLnByZV9wYXJzZSgpYCkuXG4gKiAgICAgIHBvc3RfcGFyc2U6IGZ1bmN0aW9uKHl5LCByZXR2YWwsIHBhcnNlSW5mbykgeyByZXR1cm4gcmV0dmFsOyB9XG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGlzIGludm9rZWQgd2hlbiB0aGUgcGFyc2UgdGVybWluYXRlcyBkdWUgdG8gc3VjY2VzcyAoJ2FjY2VwdCcpXG4gKiAgICAgICAgICAgICAgICAgb3IgZmFpbHVyZSAoZXZlbiB3aGVuIGV4Y2VwdGlvbnMgYXJlIHRocm93bikuXG4gKiAgICAgICAgICAgICAgICAgYHJldHZhbGAgY29udGFpbnMgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBwcm9kdWNlZCBieSBgUGFyc2VyLnBhcnNlKClgO1xuICogICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24gY2FuIG92ZXJyaWRlIHRoZSByZXR1cm4gdmFsdWUgYnkgcmV0dXJuaW5nIGFub3RoZXIuXG4gKiAgICAgICAgICAgICAgICAgV2hlbiBpdCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlLCB0aGUgcGFyc2VyIHdpbGwgcmV0dXJuIHRoZSBvcmlnaW5hbFxuICogICAgICAgICAgICAgICAgIGByZXR2YWxgLlxuICogICAgICAgICAgICAgICAgIFRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCBpbW1lZGlhdGVseSBiZWZvcmUgYHBhcnNlci5wb3N0X3BhcnNlKClgLlxuICpcbiAqICAgICAgcGFyc2VFcnJvcjogZnVuY3Rpb24oc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcylcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBwYXJzZUVycm9yYCBmdW5jdGlvbi5cbiAqICAgICAgcXVvdGVOYW1lOiBmdW5jdGlvbihuYW1lKSxcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGBxdW90ZU5hbWVgIGZ1bmN0aW9uLlxuICogIH1cbiAqXG4gKiAgcGFyc2VyLmxleGVyLm9wdGlvbnM6IHtcbiAqICAgICAgcHJlX2xleDogIGZ1bmN0aW9uKClcbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogaXMgaW52b2tlZCBiZWZvcmUgdGhlIGxleGVyIGlzIGludm9rZWQgdG8gcHJvZHVjZSBhbm90aGVyIHRva2VuLlxuICogICAgICAgICAgICAgICAgIGB0aGlzYCByZWZlcnMgdG8gdGhlIExleGVyIG9iamVjdC5cbiAqICAgICAgcG9zdF9sZXg6IGZ1bmN0aW9uKHRva2VuKSB7IHJldHVybiB0b2tlbjsgfVxuICogICAgICAgICAgICAgICAgIG9wdGlvbmFsOiBpcyBpbnZva2VkIHdoZW4gdGhlIGxleGVyIGhhcyBwcm9kdWNlZCBhIHRva2VuIGB0b2tlbmA7XG4gKiAgICAgICAgICAgICAgICAgdGhpcyBmdW5jdGlvbiBjYW4gb3ZlcnJpZGUgdGhlIHJldHVybmVkIHRva2VuIHZhbHVlIGJ5IHJldHVybmluZyBhbm90aGVyLlxuICogICAgICAgICAgICAgICAgIFdoZW4gaXQgZG9lcyBub3QgcmV0dXJuIGFueSAodHJ1dGh5KSB2YWx1ZSwgdGhlIGxleGVyIHdpbGwgcmV0dXJuXG4gKiAgICAgICAgICAgICAgICAgdGhlIG9yaWdpbmFsIGB0b2tlbmAuXG4gKiAgICAgICAgICAgICAgICAgYHRoaXNgIHJlZmVycyB0byB0aGUgTGV4ZXIgb2JqZWN0LlxuICpcbiAqICAgICAgcmFuZ2VzOiBib29sZWFuXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGB0cnVlYCA9PT4gdG9rZW4gbG9jYXRpb24gaW5mbyB3aWxsIGluY2x1ZGUgYSAucmFuZ2VbXSBtZW1iZXIuXG4gKiAgICAgIGZsZXg6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBmbGV4LWxpa2UgbGV4aW5nIGJlaGF2aW91ciB3aGVyZSB0aGUgcnVsZXMgYXJlIHRlc3RlZFxuICogICAgICAgICAgICAgICAgIGV4aGF1c3RpdmVseSB0byBmaW5kIHRoZSBsb25nZXN0IG1hdGNoLlxuICogICAgICBiYWNrdHJhY2tfbGV4ZXI6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciByZWdleGVzIGFyZSB0ZXN0ZWQgaW4gb3JkZXIgYW5kIGZvciBpbnZva2VkO1xuICogICAgICAgICAgICAgICAgIHRoZSBsZXhlciB0ZXJtaW5hdGVzIHRoZSBzY2FuIHdoZW4gYSB0b2tlbiBpcyByZXR1cm5lZCBieSB0aGUgYWN0aW9uIGNvZGUuXG4gKiAgICAgIHhyZWdleHA6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciBydWxlIHJlZ2V4ZXMgYXJlIFwiZXh0ZW5kZWQgcmVnZXggZm9ybWF0XCIgcmVxdWlyaW5nIHRoZVxuICogICAgICAgICAgICAgICAgIGBYUmVnRXhwYCBsaWJyYXJ5LiBXaGVuIHRoaXMgYCVvcHRpb25gIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgYXQgY29tcGlsZSB0aW1lLCBhbGwgbGV4ZXJcbiAqICAgICAgICAgICAgICAgICBydWxlIHJlZ2V4ZXMgaGF2ZSBiZWVuIHdyaXR0ZW4gYXMgc3RhbmRhcmQgSmF2YVNjcmlwdCBSZWdFeHAgZXhwcmVzc2lvbnMuXG4gKiAgfVxuICovXG5cbiAgICAgICAgXG4gICAgXG4gICAgICAgICAgICB2YXIgcGFyc2VyID0gKGZ1bmN0aW9uICgpIHtcblxuXG4vLyBTZWUgYWxzbzpcbi8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM4MjEwNy93aGF0cy1hLWdvb2Qtd2F5LXRvLWV4dGVuZC1lcnJvci1pbi1qYXZhc2NyaXB0LyMzNTg4MTUwOFxuLy8gYnV0IHdlIGtlZXAgdGhlIHByb3RvdHlwZS5jb25zdHJ1Y3RvciBhbmQgcHJvdG90eXBlLm5hbWUgYXNzaWdubWVudCBsaW5lcyB0b28gZm9yIGNvbXBhdGliaWxpdHlcbi8vIHdpdGggdXNlcmxhbmQgY29kZSB3aGljaCBtaWdodCBhY2Nlc3MgdGhlIGRlcml2ZWQgY2xhc3MgaW4gYSAnY2xhc3NpYycgd2F5LlxuZnVuY3Rpb24gSmlzb25QYXJzZXJFcnJvcihtc2csIGhhc2gpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiAnSmlzb25QYXJzZXJFcnJvcidcbiAgICB9KTtcblxuICAgIGlmIChtc2cgPT0gbnVsbCkgbXNnID0gJz8/Pyc7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IG1zZ1xuICAgIH0pO1xuXG4gICAgdGhpcy5oYXNoID0gaGFzaDtcblxuICAgIHZhciBzdGFja3RyYWNlO1xuICAgIGlmIChoYXNoICYmIGhhc2guZXhjZXB0aW9uIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgdmFyIGV4MiA9IGhhc2guZXhjZXB0aW9uO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBleDIubWVzc2FnZSB8fCBtc2c7XG4gICAgICAgIHN0YWNrdHJhY2UgPSBleDIuc3RhY2s7XG4gICAgfVxuICAgIGlmICghc3RhY2t0cmFjZSkge1xuICAgICAgICBpZiAoRXJyb3IuaGFzT3duUHJvcGVydHkoJ2NhcHR1cmVTdGFja1RyYWNlJykpIHsgICAgICAgIC8vIFY4L0Nocm9tZSBlbmdpbmVcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2t0cmFjZSA9IChuZXcgRXJyb3IobXNnKSkuc3RhY2s7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN0YWNrdHJhY2UpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdGFjaycsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHN0YWNrdHJhY2VcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5pZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihKaXNvblBhcnNlckVycm9yLnByb3RvdHlwZSwgRXJyb3IucHJvdG90eXBlKTtcbn0gZWxzZSB7XG4gICAgSmlzb25QYXJzZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG59XG5KaXNvblBhcnNlckVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEppc29uUGFyc2VyRXJyb3I7XG5KaXNvblBhcnNlckVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0ppc29uUGFyc2VyRXJyb3InO1xuXG5cblxuXG4gICAgICAgIC8vIGhlbHBlcjogcmVjb25zdHJ1Y3QgdGhlIHByb2R1Y3Rpb25zW10gdGFibGVcbiAgICAgICAgZnVuY3Rpb24gYnAocykge1xuICAgICAgICAgICAgdmFyIHJ2ID0gW107XG4gICAgICAgICAgICB2YXIgcCA9IHMucG9wO1xuICAgICAgICAgICAgdmFyIHIgPSBzLnJ1bGU7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHAubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcnYucHVzaChbXG4gICAgICAgICAgICAgICAgICAgIHBbaV0sXG4gICAgICAgICAgICAgICAgICAgIHJbaV1cbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiByZWNvbnN0cnVjdCB0aGUgZGVmYXVsdEFjdGlvbnNbXSB0YWJsZVxuICAgICAgICBmdW5jdGlvbiBiZGEocykge1xuICAgICAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgICAgICB2YXIgZCA9IHMuaWR4O1xuICAgICAgICAgICAgdmFyIGcgPSBzLmdvdG87XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGogPSBkW2ldO1xuICAgICAgICAgICAgICAgIHJ2W2pdID0gZ1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiByZWNvbnN0cnVjdCB0aGUgJ2dvdG8nIHRhYmxlXG4gICAgICAgIGZ1bmN0aW9uIGJ0KHMpIHtcbiAgICAgICAgICAgIHZhciBydiA9IFtdO1xuICAgICAgICAgICAgdmFyIGQgPSBzLmxlbjtcbiAgICAgICAgICAgIHZhciB5ID0gcy5zeW1ib2w7XG4gICAgICAgICAgICB2YXIgdCA9IHMudHlwZTtcbiAgICAgICAgICAgIHZhciBhID0gcy5zdGF0ZTtcbiAgICAgICAgICAgIHZhciBtID0gcy5tb2RlO1xuICAgICAgICAgICAgdmFyIGcgPSBzLmdvdG87XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG4gPSBkW2ldO1xuICAgICAgICAgICAgICAgIHZhciBxID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHogPSB5LnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5zaGlmdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHFbel0gPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcuc2hpZnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHFbel0gPSBhLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHlwZSA9PT0gMTogYWNjZXB0XG4gICAgICAgICAgICAgICAgICAgICAgICBxW3pdID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDNcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcnYucHVzaChxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfVxuICAgIFxuXG5cbiAgICAgICAgLy8gaGVscGVyOiBydW5sZW5ndGggZW5jb2Rpbmcgd2l0aCBpbmNyZW1lbnQgc3RlcDogY29kZSwgbGVuZ3RoOiBzdGVwIChkZWZhdWx0IHN0ZXAgPSAwKVxuICAgICAgICAvLyBgdGhpc2AgcmVmZXJlbmNlcyBhbiBhcnJheVxuICAgICAgICBmdW5jdGlvbiBzKGMsIGwsIGEpIHtcbiAgICAgICAgICAgIGEgPSBhIHx8IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMucHVzaChjKTtcbiAgICAgICAgICAgICAgICBjICs9IGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoZWxwZXI6IGR1cGxpY2F0ZSBzZXF1ZW5jZSBmcm9tICpyZWxhdGl2ZSogb2Zmc2V0IGFuZCBsZW5ndGguXG4gICAgICAgIC8vIGB0aGlzYCByZWZlcmVuY2VzIGFuIGFycmF5XG4gICAgICAgIGZ1bmN0aW9uIGMoaSwgbCkge1xuICAgICAgICAgICAgaSA9IHRoaXMubGVuZ3RoIC0gaTtcbiAgICAgICAgICAgIGZvciAobCArPSBpOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wdXNoKHRoaXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGVscGVyOiB1bnBhY2sgYW4gYXJyYXkgdXNpbmcgaGVscGVycyBhbmQgZGF0YSwgYWxsIHBhc3NlZCBpbiBhbiBhcnJheSBhcmd1bWVudCAnYScuXG4gICAgICAgIGZ1bmN0aW9uIHUoYSkge1xuICAgICAgICAgICAgdmFyIHJ2ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBhW2ldO1xuICAgICAgICAgICAgICAgIC8vIElzIHRoaXMgZW50cnkgYSBoZWxwZXIgZnVuY3Rpb24/XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgZS5hcHBseShydiwgYVtpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcnYucHVzaChlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnY7XG4gICAgICAgIH1cbiAgICBcblxudmFyIHBhcnNlciA9IHtcbiAgICAvLyBDb2RlIEdlbmVyYXRvciBJbmZvcm1hdGlvbiBSZXBvcnRcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvL1xuICAgIC8vIE9wdGlvbnM6XG4gICAgLy9cbiAgICAvLyAgIGRlZmF1bHQgYWN0aW9uIG1vZGU6IC4uLi4uLi4uLi4uLi4gW1wiY2xhc3NpY1wiLFwibWVyZ2VcIl1cbiAgICAvLyAgIHRlc3QtY29tcGlsZSBhY3Rpb24gbW9kZTogLi4uLi4uLi4gXCJwYXJzZXI6KixsZXhlcjoqXCJcbiAgICAvLyAgIHRyeS4uY2F0Y2g6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gdHJ1ZVxuICAgIC8vICAgZGVmYXVsdCByZXNvbHZlIG9uIGNvbmZsaWN0OiAuLi4uLiB0cnVlXG4gICAgLy8gICBvbi1kZW1hbmQgbG9vay1haGVhZDogLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBlcnJvciByZWNvdmVyeSB0b2tlbiBza2lwIG1heGltdW06IDNcbiAgICAvLyAgIHl5ZXJyb3IgaW4gcGFyc2UgYWN0aW9ucyBpczogLi4uLi4gTk9UIHJlY292ZXJhYmxlLFxuICAgIC8vICAgeXllcnJvciBpbiBsZXhlciBhY3Rpb25zIGFuZCBvdGhlciBub24tZmF0YWwgbGV4ZXIgYXJlOlxuICAgIC8vICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiBOT1QgcmVjb3ZlcmFibGUsXG4gICAgLy8gICBkZWJ1ZyBncmFtbWFyL291dHB1dDogLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgcGFydGlhbCBMUiBjb25mbGljdCB1cGdyYWRlOiAgIHRydWVcbiAgICAvLyAgIHJ1ZGltZW50YXJ5IHRva2VuLXN0YWNrIHN1cHBvcnQ6ICAgZmFsc2VcbiAgICAvLyAgIHBhcnNlciB0YWJsZSBjb21wcmVzc2lvbiBtb2RlOiAuLi4gMlxuICAgIC8vICAgZXhwb3J0IGRlYnVnIHRhYmxlczogLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgZXhwb3J0ICphbGwqIHRhYmxlczogLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgbW9kdWxlIHR5cGU6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiBjb21tb25qc1xuICAgIC8vICAgcGFyc2VyIGVuZ2luZSB0eXBlOiAuLi4uLi4uLi4uLi4uLiBsYWxyXG4gICAgLy8gICBvdXRwdXQgbWFpbigpIGluIHRoZSBtb2R1bGU6IC4uLi4uIHRydWVcbiAgICAvLyAgIGhhcyB1c2VyLXNwZWNpZmllZCBtYWluKCk6IC4uLi4uLi4gZmFsc2VcbiAgICAvLyAgIGhhcyB1c2VyLXNwZWNpZmllZCByZXF1aXJlKCkvaW1wb3J0IG1vZHVsZXMgZm9yIG1haW4oKTpcbiAgICAvLyAgIC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2VcbiAgICAvLyAgIG51bWJlciBvZiBleHBlY3RlZCBjb25mbGljdHM6IC4uLi4gMFxuICAgIC8vXG4gICAgLy9cbiAgICAvLyBQYXJzZXIgQW5hbHlzaXMgZmxhZ3M6XG4gICAgLy9cbiAgICAvLyAgIG5vIHNpZ25pZmljYW50IGFjdGlvbnMgKHBhcnNlciBpcyBhIGxhbmd1YWdlIG1hdGNoZXIgb25seSk6XG4gICAgLy8gICAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGVuZzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGluZW5vOiAuLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5dGV4dDogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5bGxvYzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFBhcnNlRXJyb3IgQVBJOiAuLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZRVJST1I6IC4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZUkVDT1ZFUklORzogLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZRVJST0s6IC4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIFlZQ0xFQVJJTjogLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB0cmFja3MgcnVsZSB2YWx1ZXM6IC4uLi4uLi4uLi4uLi4uIHRydWVcbiAgICAvLyAgIGFzc2lnbnMgcnVsZSB2YWx1ZXM6IC4uLi4uLi4uLi4uLi4gdHJ1ZVxuICAgIC8vICAgdXNlcyBsb2NhdGlvbiB0cmFja2luZzogLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgYXNzaWducyBsb2NhdGlvbjogLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXN0YWNrOiAuLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXNzdGFjazogLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuICAgIC8vICAgdXNlcyB5eXNwOiAuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiB0cnVlXG4gICAgLy8gICB1c2VzIHl5cnVsZWxlbmd0aDogLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICB1c2VzIHl5TWVyZ2VMb2NhdGlvbkluZm8gQVBJOiAuLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgZXJyb3IgcmVjb3Zlcnk6IC4uLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy8gICBoYXMgZXJyb3IgcmVwb3J0aW5nOiAuLi4uLi4uLi4uLi4uIGZhbHNlXG4gICAgLy9cbiAgICAvLyAtLS0tLS0tLS0gRU5EIE9GIFJFUE9SVCAtLS0tLS0tLS0tLVxuXG50cmFjZTogZnVuY3Rpb24gbm9fb3BfdHJhY2UoKSB7IH0sXG5KaXNvblBhcnNlckVycm9yOiBKaXNvblBhcnNlckVycm9yLFxueXk6IHt9LFxub3B0aW9uczoge1xuICB0eXBlOiBcImxhbHJcIixcbiAgaGFzUGFydGlhbExyVXBncmFkZU9uQ29uZmxpY3Q6IHRydWUsXG4gIGVycm9yUmVjb3ZlcnlUb2tlbkRpc2NhcmRDb3VudDogM1xufSxcbnN5bWJvbHNfOiB7XG4gIFwiJGFjY2VwdFwiOiAwLFxuICBcIiRlbmRcIjogMSxcbiAgXCJBRERcIjogMyxcbiAgXCJBTkdMRVwiOiAxNCxcbiAgXCJDSFNcIjogMjAsXG4gIFwiQ1NTX1ZBUlwiOiAxMixcbiAgXCJESVZcIjogNixcbiAgXCJFTVNcIjogMTgsXG4gIFwiRU9GXCI6IDEsXG4gIFwiRVhTXCI6IDE5LFxuICBcIkZSRVFcIjogMTYsXG4gIFwiTEVOR1RIXCI6IDEzLFxuICBcIkxQQVJFTlwiOiA3LFxuICBcIk1VTFwiOiA1LFxuICBcIk5FU1RFRF9DQUxDXCI6IDksXG4gIFwiTlVNQkVSXCI6IDExLFxuICBcIlBFUkNFTlRBR0VcIjogMjYsXG4gIFwiUFJFRklYXCI6IDEwLFxuICBcIlJFTVNcIjogMjEsXG4gIFwiUkVTXCI6IDE3LFxuICBcIlJQQVJFTlwiOiA4LFxuICBcIlNVQlwiOiA0LFxuICBcIlRJTUVcIjogMTUsXG4gIFwiVkhTXCI6IDIyLFxuICBcIlZNQVhTXCI6IDI1LFxuICBcIlZNSU5TXCI6IDI0LFxuICBcIlZXU1wiOiAyMyxcbiAgXCJjc3NfdmFsdWVcIjogMzEsXG4gIFwiY3NzX3ZhcmlhYmxlXCI6IDMwLFxuICBcImVycm9yXCI6IDIsXG4gIFwiZXhwcmVzc2lvblwiOiAyNyxcbiAgXCJtYXRoX2V4cHJlc3Npb25cIjogMjgsXG4gIFwidmFsdWVcIjogMjlcbn0sXG50ZXJtaW5hbHNfOiB7XG4gIDE6IFwiRU9GXCIsXG4gIDI6IFwiZXJyb3JcIixcbiAgMzogXCJBRERcIixcbiAgNDogXCJTVUJcIixcbiAgNTogXCJNVUxcIixcbiAgNjogXCJESVZcIixcbiAgNzogXCJMUEFSRU5cIixcbiAgODogXCJSUEFSRU5cIixcbiAgOTogXCJORVNURURfQ0FMQ1wiLFxuICAxMDogXCJQUkVGSVhcIixcbiAgMTE6IFwiTlVNQkVSXCIsXG4gIDEyOiBcIkNTU19WQVJcIixcbiAgMTM6IFwiTEVOR1RIXCIsXG4gIDE0OiBcIkFOR0xFXCIsXG4gIDE1OiBcIlRJTUVcIixcbiAgMTY6IFwiRlJFUVwiLFxuICAxNzogXCJSRVNcIixcbiAgMTg6IFwiRU1TXCIsXG4gIDE5OiBcIkVYU1wiLFxuICAyMDogXCJDSFNcIixcbiAgMjE6IFwiUkVNU1wiLFxuICAyMjogXCJWSFNcIixcbiAgMjM6IFwiVldTXCIsXG4gIDI0OiBcIlZNSU5TXCIsXG4gIDI1OiBcIlZNQVhTXCIsXG4gIDI2OiBcIlBFUkNFTlRBR0VcIlxufSxcblRFUlJPUjogMixcbiAgICBFT0Y6IDEsXG5cbiAgICAvLyBpbnRlcm5hbHM6IGRlZmluZWQgaGVyZSBzbyB0aGUgb2JqZWN0ICpzdHJ1Y3R1cmUqIGRvZXNuJ3QgZ2V0IG1vZGlmaWVkIGJ5IHBhcnNlKCkgZXQgYWwsXG4gICAgLy8gdGh1cyBoZWxwaW5nIEpJVCBjb21waWxlcnMgbGlrZSBDaHJvbWUgVjguXG4gICAgb3JpZ2luYWxRdW90ZU5hbWU6IG51bGwsXG4gICAgb3JpZ2luYWxQYXJzZUVycm9yOiBudWxsLFxuICAgIGNsZWFudXBBZnRlclBhcnNlOiBudWxsLFxuICAgIGNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvOiBudWxsLFxuICAgIHl5TWVyZ2VMb2NhdGlvbkluZm86IG51bGwsXG5cbiAgICBfX3JlZW50cmFudF9jYWxsX2RlcHRoOiAwLCAgICAgIC8vIElOVEVSTkFMIFVTRSBPTkxZXG4gICAgX19lcnJvcl9pbmZvczogW10sICAgICAgICAgICAgICAvLyBJTlRFUk5BTCBVU0UgT05MWTogdGhlIHNldCBvZiBwYXJzZUVycm9ySW5mbyBvYmplY3RzIGNyZWF0ZWQgc2luY2UgdGhlIGxhc3QgY2xlYW51cFxuICAgIF9fZXJyb3JfcmVjb3ZlcnlfaW5mb3M6IFtdLCAgICAgLy8gSU5URVJOQUwgVVNFIE9OTFk6IHRoZSBzZXQgb2YgcGFyc2VFcnJvckluZm8gb2JqZWN0cyBjcmVhdGVkIHNpbmNlIHRoZSBsYXN0IGNsZWFudXBcblxuICAgIC8vIEFQSXMgd2hpY2ggd2lsbCBiZSBzZXQgdXAgZGVwZW5kaW5nIG9uIHVzZXIgYWN0aW9uIGNvZGUgYW5hbHlzaXM6XG4gICAgLy95eVJlY292ZXJpbmc6IDAsXG4gICAgLy95eUVyck9rOiAwLFxuICAgIC8veXlDbGVhckluOiAwLFxuXG4gICAgLy8gSGVscGVyIEFQSXNcbiAgICAvLyAtLS0tLS0tLS0tLVxuXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSBvdmVycmlkZGVuIGJ5IHVzZXIgY29kZSBsYXRlciBvbjogcHV0IHN1aXRhYmxlIHF1b3RlcyBhcm91bmRcbiAgICAvLyBsaXRlcmFsIElEcyBpbiBhIGRlc2NyaXB0aW9uIHN0cmluZy5cbiAgICBxdW90ZU5hbWU6IGZ1bmN0aW9uIHBhcnNlcl9xdW90ZU5hbWUoaWRfc3RyKSB7XG4gICAgICAgIHJldHVybiAnXCInICsgaWRfc3RyICsgJ1wiJztcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIHRoZSBuYW1lIG9mIHRoZSBnaXZlbiBzeW1ib2wgKHRlcm1pbmFsIG9yIG5vbi10ZXJtaW5hbCkgYXMgYSBzdHJpbmcsIHdoZW4gYXZhaWxhYmxlLlxuICAgIC8vXG4gICAgLy8gUmV0dXJuIE5VTEwgd2hlbiB0aGUgc3ltYm9sIGlzIHVua25vd24gdG8gdGhlIHBhcnNlci5cbiAgICBnZXRTeW1ib2xOYW1lOiBmdW5jdGlvbiBwYXJzZXJfZ2V0U3ltYm9sTmFtZShzeW1ib2wpIHtcbiAgICAgICAgaWYgKHRoaXMudGVybWluYWxzX1tzeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXJtaW5hbHNfW3N5bWJvbF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UuLi4gdGhpcyBtaWdodCByZWZlciB0byBhIFJVTEUgdG9rZW4gaS5lLiBhIG5vbi10ZXJtaW5hbDogc2VlIGlmIHdlIGNhbiBkaWcgdGhhdCBvbmUgdXAuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFuIGV4YW1wbGUgb2YgdGhpcyBtYXkgYmUgd2hlcmUgYSBydWxlJ3MgYWN0aW9uIGNvZGUgY29udGFpbnMgYSBjYWxsIGxpa2UgdGhpczpcbiAgICAgICAgLy9cbiAgICAgICAgLy8gICAgICBwYXJzZXIuZ2V0U3ltYm9sTmFtZSgjJClcbiAgICAgICAgLy9cbiAgICAgICAgLy8gdG8gb2J0YWluIGEgaHVtYW4tcmVhZGFibGUgbmFtZSBvZiB0aGUgY3VycmVudCBncmFtbWFyIHJ1bGUuXG4gICAgICAgIHZhciBzID0gdGhpcy5zeW1ib2xzXztcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHMpIHtcbiAgICAgICAgICAgIGlmIChzW2tleV0gPT09IHN5bWJvbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiBhIG1vcmUtb3ItbGVzcyBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgZ2l2ZW4gc3ltYm9sLCB3aGVuIGF2YWlsYWJsZSxcbiAgICAvLyBvciB0aGUgc3ltYm9sIGl0c2VsZiwgc2VydmluZyBhcyBpdHMgb3duICdkZXNjcmlwdGlvbicgZm9yIGxhY2sgb2Ygc29tZXRoaW5nIGJldHRlciB0byBzZXJ2ZSB1cC5cbiAgICAvL1xuICAgIC8vIFJldHVybiBOVUxMIHdoZW4gdGhlIHN5bWJvbCBpcyB1bmtub3duIHRvIHRoZSBwYXJzZXIuXG4gICAgZGVzY3JpYmVTeW1ib2w6IGZ1bmN0aW9uIHBhcnNlcl9kZXNjcmliZVN5bWJvbChzeW1ib2wpIHtcbiAgICAgICAgaWYgKHN5bWJvbCAhPT0gdGhpcy5FT0YgJiYgdGhpcy50ZXJtaW5hbF9kZXNjcmlwdGlvbnNfICYmIHRoaXMudGVybWluYWxfZGVzY3JpcHRpb25zX1tzeW1ib2xdKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy50ZXJtaW5hbF9kZXNjcmlwdGlvbnNfW3N5bWJvbF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3ltYm9sID09PSB0aGlzLkVPRikge1xuICAgICAgICAgICAgcmV0dXJuICdlbmQgb2YgaW5wdXQnO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpZCA9IHRoaXMuZ2V0U3ltYm9sTmFtZShzeW1ib2wpO1xuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1b3RlTmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8vIFByb2R1Y2UgYSAobW9yZSBvciBsZXNzKSBodW1hbi1yZWFkYWJsZSBsaXN0IG9mIGV4cGVjdGVkIHRva2VucyBhdCB0aGUgcG9pbnQgb2YgZmFpbHVyZS5cbiAgICAvL1xuICAgIC8vIFRoZSBwcm9kdWNlZCBsaXN0IG1heSBjb250YWluIHRva2VuIG9yIHRva2VuIHNldCBkZXNjcmlwdGlvbnMgaW5zdGVhZCBvZiB0aGUgdG9rZW5zXG4gICAgLy8gdGhlbXNlbHZlcyB0byBoZWxwIHR1cm5pbmcgdGhpcyBvdXRwdXQgaW50byBzb21ldGhpbmcgdGhhdCBlYXNpZXIgdG8gcmVhZCBieSBodW1hbnNcbiAgICAvLyB1bmxlc3MgYGRvX25vdF9kZXNjcmliZWAgcGFyYW1ldGVyIGlzIHNldCwgaW4gd2hpY2ggY2FzZSBhIGxpc3Qgb2YgdGhlIHJhdywgKm51bWVyaWMqLFxuICAgIC8vIGV4cGVjdGVkIHRlcm1pbmFscyBhbmQgbm9udGVybWluYWxzIGlzIHByb2R1Y2VkLlxuICAgIC8vXG4gICAgLy8gVGhlIHJldHVybmVkIGxpc3QgKGFycmF5KSB3aWxsIG5vdCBjb250YWluIGFueSBkdXBsaWNhdGUgZW50cmllcy5cbiAgICBjb2xsZWN0X2V4cGVjdGVkX3Rva2VuX3NldDogZnVuY3Rpb24gcGFyc2VyX2NvbGxlY3RfZXhwZWN0ZWRfdG9rZW5fc2V0KHN0YXRlLCBkb19ub3RfZGVzY3JpYmUpIHtcbiAgICAgICAgdmFyIFRFUlJPUiA9IHRoaXMuVEVSUk9SO1xuICAgICAgICB2YXIgdG9rZW5zZXQgPSBbXTtcbiAgICAgICAgdmFyIGNoZWNrID0ge307XG4gICAgICAgIC8vIEhhcyB0aGlzIChlcnJvcj8pIHN0YXRlIGJlZW4gb3V0Zml0dGVkIHdpdGggYSBjdXN0b20gZXhwZWN0YXRpb25zIGRlc2NyaXB0aW9uIHRleHQgZm9yIGh1bWFuIGNvbnN1bXB0aW9uP1xuICAgICAgICAvLyBJZiBzbywgdXNlIHRoYXQgb25lIGluc3RlYWQgb2YgdGhlIGxlc3MgcGFsYXRhYmxlIHRva2VuIHNldC5cbiAgICAgICAgaWYgKCFkb19ub3RfZGVzY3JpYmUgJiYgdGhpcy5zdGF0ZV9kZXNjcmlwdGlvbnNfICYmIHRoaXMuc3RhdGVfZGVzY3JpcHRpb25zX1tzdGF0ZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZV9kZXNjcmlwdGlvbnNfW3N0YXRlXVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBwIGluIHRoaXMudGFibGVbc3RhdGVdKSB7XG4gICAgICAgICAgICBwID0gK3A7XG4gICAgICAgICAgICBpZiAocCAhPT0gVEVSUk9SKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBkb19ub3RfZGVzY3JpYmUgPyBwIDogdGhpcy5kZXNjcmliZVN5bWJvbChwKTtcbiAgICAgICAgICAgICAgICBpZiAoZCAmJiAhY2hlY2tbZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5zZXQucHVzaChkKTtcbiAgICAgICAgICAgICAgICAgICAgY2hlY2tbZF0gPSB0cnVlOyAgICAgICAgLy8gTWFyayB0aGlzIHRva2VuIGRlc2NyaXB0aW9uIGFzIGFscmVhZHkgbWVudGlvbmVkIHRvIHByZXZlbnQgb3V0cHV0dGluZyBkdXBsaWNhdGUgZW50cmllcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRva2Vuc2V0O1xuICAgIH0sXG5wcm9kdWN0aW9uc186IGJwKHtcbiAgcG9wOiB1KFtcbiAgMjcsXG4gIHMsXG4gIFsyOCwgMTBdLFxuICAyOSxcbiAgMjksXG4gIDMwLFxuICBzLFxuICBbMzEsIDE1XVxuXSksXG4gIHJ1bGU6IHUoW1xuICAyLFxuICBzLFxuICBbMywgNV0sXG4gIDQsXG4gIDcsXG4gIHMsXG4gIFsxLCA0XSxcbiAgMixcbiAgcyxcbiAgWzEsIDE1XSxcbiAgMlxuXSlcbn0pLFxucGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gcGFyc2VyX19QZXJmb3JtQWN0aW9uKHl5c3RhdGUgLyogYWN0aW9uWzFdICovLCB5eXNwLCB5eXZzdGFjaykge1xuXG4gICAgICAgICAgLyogdGhpcyA9PSB5eXZhbCAqL1xuXG4gICAgICAgICAgLy8gdGhlIEpTIGVuZ2luZSBpdHNlbGYgY2FuIGdvIGFuZCByZW1vdmUgdGhlc2Ugc3RhdGVtZW50cyB3aGVuIGB5eWAgdHVybnMgb3V0IHRvIGJlIHVudXNlZCBpbiBhbnkgYWN0aW9uIGNvZGUhXG4gICAgICAgICAgdmFyIHl5ID0gdGhpcy55eTtcbiAgICAgICAgICB2YXIgeXlwYXJzZXIgPSB5eS5wYXJzZXI7XG4gICAgICAgICAgdmFyIHl5bGV4ZXIgPSB5eS5sZXhlcjtcblxuICAgICAgICAgIFxuXG4gICAgICAgICAgc3dpdGNoICh5eXN0YXRlKSB7XG5jYXNlIDA6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICAkYWNjZXB0IDogZXhwcmVzc2lvbiAkZW5kICovXG5cbiAgICAvLyBkZWZhdWx0IGFjdGlvbiAoZ2VuZXJhdGVkIGJ5IEpJU09OIG1vZGUgY2xhc3NpYy9tZXJnZSA6OiAxLFZULFZBLC0sLSwtLC0sLSwtKTpcbiAgICB0aGlzLiQgPSB5eXZzdGFja1t5eXNwIC0gMV07XG4gICAgLy8gRU5EIG9mIGRlZmF1bHQgYWN0aW9uIChnZW5lcmF0ZWQgYnkgSklTT04gbW9kZSBjbGFzc2ljL21lcmdlIDo6IDEsVlQsVkEsLSwtLC0sLSwtLC0pXG4gICAgYnJlYWs7XG5cbmNhc2UgMTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGV4cHJlc3Npb24gOiBtYXRoX2V4cHJlc3Npb24gRU9GICovXG5cbiAgICAvLyBkZWZhdWx0IGFjdGlvbiAoZ2VuZXJhdGVkIGJ5IEpJU09OIG1vZGUgY2xhc3NpYy9tZXJnZSA6OiAyLFZULFZBLC0sLSwtLC0sLSwtKTpcbiAgICB0aGlzLiQgPSB5eXZzdGFja1t5eXNwIC0gMV07XG4gICAgLy8gRU5EIG9mIGRlZmF1bHQgYWN0aW9uIChnZW5lcmF0ZWQgYnkgSklTT04gbW9kZSBjbGFzc2ljL21lcmdlIDo6IDIsVlQsVkEsLSwtLC0sLSwtLC0pXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIHl5dnN0YWNrW3l5c3AgLSAxXTtcbiAgICBicmVhaztcblxuY2FzZSAyOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogbWF0aF9leHByZXNzaW9uIEFERCBtYXRoX2V4cHJlc3Npb24gKi9cbmNhc2UgMzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIG1hdGhfZXhwcmVzc2lvbiA6IG1hdGhfZXhwcmVzc2lvbiBTVUIgbWF0aF9leHByZXNzaW9uICovXG5jYXNlIDQ6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiBtYXRoX2V4cHJlc3Npb24gTVVMIG1hdGhfZXhwcmVzc2lvbiAqL1xuY2FzZSA1OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogbWF0aF9leHByZXNzaW9uIERJViBtYXRoX2V4cHJlc3Npb24gKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ01hdGhFeHByZXNzaW9uJywgb3BlcmF0b3I6IHl5dnN0YWNrW3l5c3AgLSAxXSwgbGVmdDogeXl2c3RhY2tbeXlzcCAtIDJdLCByaWdodDogeXl2c3RhY2tbeXlzcF0gfTtcbiAgICBicmVhaztcblxuY2FzZSA2OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgbWF0aF9leHByZXNzaW9uIDogTFBBUkVOIG1hdGhfZXhwcmVzc2lvbiBSUEFSRU4gKi9cbmNhc2UgNzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIG1hdGhfZXhwcmVzc2lvbiA6IE5FU1RFRF9DQUxDIExQQVJFTiBtYXRoX2V4cHJlc3Npb24gUlBBUkVOICovXG5jYXNlIDg6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiBTVUIgUFJFRklYIFNVQiBORVNURURfQ0FMQyBMUEFSRU4gbWF0aF9leHByZXNzaW9uIFJQQVJFTiAqL1xuXG4gICAgdGhpcy4kID0geXl2c3RhY2tbeXlzcCAtIDFdO1xuICAgIGJyZWFrO1xuXG5jYXNlIDk6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiBjc3NfdmFyaWFibGUgKi9cbmNhc2UgMTA6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiBjc3NfdmFsdWUgKi9cbmNhc2UgMTE6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBtYXRoX2V4cHJlc3Npb24gOiB2YWx1ZSAqL1xuXG4gICAgdGhpcy4kID0geXl2c3RhY2tbeXlzcF07XG4gICAgYnJlYWs7XG5cbmNhc2UgMTI6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICB2YWx1ZSA6IE5VTUJFUiAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSkgfTtcbiAgICBicmVhaztcblxuY2FzZSAxMzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIHZhbHVlIDogU1VCIE5VTUJFUiAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSkgKiAtMSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE0OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhcmlhYmxlIDogQ1NTX1ZBUiAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnQ3NzVmFyaWFibGUnLCB2YWx1ZTogeXl2c3RhY2tbeXlzcF0gfTtcbiAgICBicmVhaztcblxuY2FzZSAxNTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IExFTkdUSCAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnTGVuZ3RoVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6IC9bYS16XSsvLmV4ZWMoeXl2c3RhY2tbeXlzcF0pWzBdIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMTY6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBBTkdMRSAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnQW5nbGVWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogL1thLXpdKy8uZXhlYyh5eXZzdGFja1t5eXNwXSlbMF0gfTtcbiAgICBicmVhaztcblxuY2FzZSAxNzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFRJTUUgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ1RpbWVWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogL1thLXpdKy8uZXhlYyh5eXZzdGFja1t5eXNwXSlbMF0gfTtcbiAgICBicmVhaztcblxuY2FzZSAxODpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IEZSRVEgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0ZyZXF1ZW5jeVZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAvW2Etel0rLy5leGVjKHl5dnN0YWNrW3l5c3BdKVswXSB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDE5OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogUkVTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdSZXNvbHV0aW9uVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6IC9bYS16XSsvLmV4ZWMoeXl2c3RhY2tbeXlzcF0pWzBdIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjA6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBFTVMgKi9cblxuICAgIHRoaXMuJCA9IHsgdHlwZTogJ0VtVmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICdlbScgfTtcbiAgICBicmVhaztcblxuY2FzZSAyMTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IEVYUyAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnRXhWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogJ2V4JyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDIyOlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogQ0hTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdDaFZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAnY2gnIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjM6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBSRU1TICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdSZW1WYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogJ3JlbScgfTtcbiAgICBicmVhaztcblxuY2FzZSAyNDpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFZIUyAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnVmhWYWx1ZScsIHZhbHVlOiBwYXJzZUZsb2F0KHl5dnN0YWNrW3l5c3BdKSwgdW5pdDogJ3ZoJyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDI1OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogVldTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdWd1ZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAndncnIH07XG4gICAgYnJlYWs7XG5cbmNhc2UgMjY6XG4gICAgLyohIFByb2R1Y3Rpb246OiAgICBjc3NfdmFsdWUgOiBWTUlOUyAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnVm1pblZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAndm1pbicgfTtcbiAgICBicmVhaztcblxuY2FzZSAyNzpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFZNQVhTICovXG5cbiAgICB0aGlzLiQgPSB7IHR5cGU6ICdWbWF4VmFsdWUnLCB2YWx1ZTogcGFyc2VGbG9hdCh5eXZzdGFja1t5eXNwXSksIHVuaXQ6ICd2bWF4JyB9O1xuICAgIGJyZWFrO1xuXG5jYXNlIDI4OlxuICAgIC8qISBQcm9kdWN0aW9uOjogICAgY3NzX3ZhbHVlIDogUEVSQ0VOVEFHRSAqL1xuXG4gICAgdGhpcy4kID0geyB0eXBlOiAnUGVyY2VudGFnZVZhbHVlJywgdmFsdWU6IHBhcnNlRmxvYXQoeXl2c3RhY2tbeXlzcF0pLCB1bml0OiAnJScgfTtcbiAgICBicmVhaztcblxuY2FzZSAyOTpcbiAgICAvKiEgUHJvZHVjdGlvbjo6ICAgIGNzc192YWx1ZSA6IFNVQiBjc3NfdmFsdWUgKi9cblxuICAgIHZhciBwcmV2ID0geXl2c3RhY2tbeXlzcF07IHByZXYudmFsdWUgKj0gLTE7IHRoaXMuJCA9IHByZXY7XG4gICAgYnJlYWs7XG5cbn1cbn0sXG50YWJsZTogYnQoe1xuICBsZW46IHUoW1xuICAyNCxcbiAgMSxcbiAgNSxcbiAgMjMsXG4gIDEsXG4gIDE4LFxuICBzLFxuICBbMCwgMjBdLFxuICBzLFxuICBbMjMsIDRdLFxuICBjLFxuICBbMjgsIDNdLFxuICAwLFxuICAwLFxuICAxNixcbiAgNixcbiAgNixcbiAgcyxcbiAgWzAsIDNdLFxuICA1LFxuICAxLFxuICAwLFxuICAxLFxuICAyMyxcbiAgNSxcbiAgMFxuXSksXG4gIHN5bWJvbDogdShbXG4gIDQsXG4gIDcsXG4gIDksXG4gIHMsXG4gIFsxMSwgMjEsIDFdLFxuICAxLFxuICAxLFxuICBzLFxuICBbMywgNCwgMV0sXG4gIGMsXG4gIFszMCwgMTldLFxuICBjLFxuICBbMjksIDRdLFxuICA3LFxuICA0LFxuICAxMCxcbiAgMTEsXG4gIGMsXG4gIFsyMiwgMTRdLFxuICAzMSxcbiAgYyxcbiAgWzQyLCAyM10sXG4gIGMsXG4gIFsyMywgNjldLFxuICBjLFxuICBbMTM4LCA0XSxcbiAgOCxcbiAgYyxcbiAgWzUxLCAyNF0sXG4gIDQsXG4gIGMsXG4gIFsxMzcsIDE1XSxcbiAgYyxcbiAgWzE4NCwgNV0sXG4gIDgsXG4gIGMsXG4gIFs2LCA2XSxcbiAgYyxcbiAgWzUsIDVdLFxuICA5LFxuICA3LFxuICBjLFxuICBbODcsIDI4XVxuXSksXG4gIHR5cGU6IHUoW1xuICBzLFxuICBbMiwgMTldLFxuICBzLFxuICBbMCwgNV0sXG4gIDEsXG4gIHMsXG4gIFsyLCAyNF0sXG4gIHMsXG4gIFswLCA0XSxcbiAgYyxcbiAgWzIyLCAxOV0sXG4gIGMsXG4gIFs0MiwgNDFdLFxuICBjLFxuICBbMjMsIDcwXSxcbiAgYyxcbiAgWzI4LCAyNV0sXG4gIGMsXG4gIFs0NSwgMjVdLFxuICBjLFxuICBbNTksIDIzXVxuXSksXG4gIHN0YXRlOiB1KFtcbiAgMSxcbiAgMixcbiAgOCxcbiAgNixcbiAgNyxcbiAgMzAsXG4gIGMsXG4gIFs0LCAzXSxcbiAgMzMsXG4gIDM2LFxuICBjLFxuICBbNSwgM10sXG4gIDM3LFxuICBjLFxuICBbNCwgM10sXG4gIDM4LFxuICBjLFxuICBbNCwgM10sXG4gIDM5LFxuICBjLFxuICBbNCwgM10sXG4gIDQxLFxuICBjLFxuICBbMjEsIDRdLFxuICA0NixcbiAgYyxcbiAgWzUsIDNdXG5dKSxcbiAgbW9kZTogdShbXG4gIHMsXG4gIFsxLCAxNzddLFxuICBzLFxuICBbMiwgM10sXG4gIGMsXG4gIFs1LCA1XSxcbiAgYyxcbiAgWzYsIDRdLFxuICBzLFxuICBbMSwgMzFdXG5dKSxcbiAgZ290bzogdShbXG4gIDUsXG4gIDMsXG4gIDQsXG4gIDI0LFxuICBzLFxuICBbOSwgMTUsIDFdLFxuICBzLFxuICBbMjUsIDUsIDFdLFxuICBjLFxuICBbMjQsIDE5XSxcbiAgMzEsXG4gIDM1LFxuICAzMixcbiAgMzQsXG4gIGMsXG4gIFsxOCwgMTRdLFxuICBjLFxuICBbMzcsIDE5XSxcbiAgYyxcbiAgWzE5LCA1N10sXG4gIGMsXG4gIFsxMTcsIDRdLFxuICA0MCxcbiAgYyxcbiAgWzI0LCAxOV0sXG4gIDQyLFxuICAzNSxcbiAgYyxcbiAgWzE2LCAxNF0sXG4gIHMsXG4gIFsyLCAzXSxcbiAgMjgsXG4gIDI5LFxuICAyLFxuICBzLFxuICBbMywgM10sXG4gIDI4LFxuICAyOSxcbiAgMyxcbiAgYyxcbiAgWzUyLCA0XSxcbiAgNDMsXG4gIDQ0LFxuICA0NSxcbiAgYyxcbiAgWzc4LCAyM10sXG4gIDQ3XG5dKVxufSksXG5kZWZhdWx0QWN0aW9uczogYmRhKHtcbiAgaWR4OiB1KFtcbiAgcyxcbiAgWzYsIDIwLCAxXSxcbiAgMzMsXG4gIDM0LFxuICAzOCxcbiAgMzksXG4gIDQwLFxuICA0MyxcbiAgNDdcbl0pLFxuICBnb3RvOiB1KFtcbiAgOSxcbiAgMTAsXG4gIDExLFxuICBzLFxuICBbMTQsIDE1LCAxXSxcbiAgMTIsXG4gIDEsXG4gIDI5LFxuICAxMyxcbiAgcyxcbiAgWzQsIDUsIDFdXG5dKVxufSksXG5wYXJzZUVycm9yOiBmdW5jdGlvbiBwYXJzZUVycm9yKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpIHtcbiAgICBpZiAoaGFzaC5yZWNvdmVyYWJsZSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2Uoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICBoYXNoLmRlc3Ryb3koKTsgICAgICAgICAgICAgLy8gZGVzdHJveS4uLiB3ZWxsLCAqYWxtb3N0KiFcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudHJhY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMudHJhY2Uoc3RyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIUV4Y2VwdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICBFeGNlcHRpb25DbGFzcyA9IHRoaXMuSmlzb25QYXJzZXJFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uQ2xhc3Moc3RyLCBoYXNoKTtcbiAgICB9XG59LFxucGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBzdGFjayA9IG5ldyBBcnJheSgxMjgpOyAgICAgICAgIC8vIHRva2VuIHN0YWNrOiBzdG9yZXMgdG9rZW4gd2hpY2ggbGVhZHMgdG8gc3RhdGUgYXQgdGhlIHNhbWUgaW5kZXggKGNvbHVtbiBzdG9yYWdlKVxuICAgIHZhciBzc3RhY2sgPSBuZXcgQXJyYXkoMTI4KTsgICAgICAgIC8vIHN0YXRlIHN0YWNrOiBzdG9yZXMgc3RhdGVzIChjb2x1bW4gc3RvcmFnZSlcblxuICAgIHZhciB2c3RhY2sgPSBuZXcgQXJyYXkoMTI4KTsgICAgICAgIC8vIHNlbWFudGljIHZhbHVlIHN0YWNrXG5cbiAgICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlO1xuICAgIHZhciBzcCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgIC8vICdzdGFjayBwb2ludGVyJzogaW5kZXggaW50byB0aGUgc3RhY2tzXG5cblxuICAgIFxuXG5cbiAgICB2YXIgc3ltYm9sID0gMDtcblxuXG5cbiAgICB2YXIgVEVSUk9SID0gdGhpcy5URVJST1I7XG4gICAgdmFyIEVPRiA9IHRoaXMuRU9GO1xuICAgIHZhciBFUlJPUl9SRUNPVkVSWV9UT0tFTl9ESVNDQVJEX0NPVU5UID0gKHRoaXMub3B0aW9ucy5lcnJvclJlY292ZXJ5VG9rZW5EaXNjYXJkQ291bnQgfCAwKSB8fCAzO1xuICAgIHZhciBOT19BQ1RJT04gPSBbMCwgNDggLyogPT09IHRhYmxlLmxlbmd0aCA6OiBlbnN1cmVzIHRoYXQgYW55b25lIHVzaW5nIHRoaXMgbmV3IHN0YXRlIHdpbGwgZmFpbCBkcmFtYXRpY2FsbHkhICovXTtcblxuICAgIHZhciBsZXhlcjtcbiAgICBpZiAodGhpcy5fX2xleGVyX18pIHtcbiAgICAgICAgbGV4ZXIgPSB0aGlzLl9fbGV4ZXJfXztcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXhlciA9IHRoaXMuX19sZXhlcl9fID0gT2JqZWN0LmNyZWF0ZSh0aGlzLmxleGVyKTtcbiAgICB9XG5cbiAgICB2YXIgc2hhcmVkU3RhdGVfeXkgPSB7XG4gICAgICAgIHBhcnNlRXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgcXVvdGVOYW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGxleGVyOiB1bmRlZmluZWQsXG4gICAgICAgIHBhcnNlcjogdW5kZWZpbmVkLFxuICAgICAgICBwcmVfcGFyc2U6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9zdF9wYXJzZTogdW5kZWZpbmVkLFxuICAgICAgICBwcmVfbGV4OiB1bmRlZmluZWQsXG4gICAgICAgIHBvc3RfbGV4OiB1bmRlZmluZWQgICAgICAvLyBXQVJOSU5HOiBtdXN0IGJlIHdyaXR0ZW4gdGhpcyB3YXkgZm9yIHRoZSBjb2RlIGV4cGFuZGVycyB0byB3b3JrIGNvcnJlY3RseSBpbiBib3RoIEVTNSBhbmQgRVM2IG1vZGVzIVxuICAgIH07XG5cbiAgICB2YXIgQVNTRVJUO1xuICAgIGlmICh0eXBlb2YgYXNzZXJ0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIEFTU0VSVCA9IGZ1bmN0aW9uIEppc29uQXNzZXJ0KGNvbmQsIG1zZykge1xuICAgICAgICAgICAgaWYgKCFjb25kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhc3NlcnRpb24gZmFpbGVkOiAnICsgKG1zZyB8fCAnKioqJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIEFTU0VSVCA9IGFzc2VydDtcbiAgICB9XG5cbiAgICB0aGlzLnl5R2V0U2hhcmVkU3RhdGUgPSBmdW5jdGlvbiB5eUdldFNoYXJlZFN0YXRlKCkge1xuICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGVfeXk7XG4gICAgfTtcblxuXG5cblxuXG5cblxuXG4gICAgZnVuY3Rpb24gc2hhbGxvd19jb3B5X25vY2xvYmJlcihkc3QsIHNyYykge1xuICAgICAgICBmb3IgKHZhciBrIGluIHNyYykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkc3Rba10gPT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcmMsIGspKSB7XG4gICAgICAgICAgICAgICAgZHN0W2tdID0gc3JjW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gY29weSBzdGF0ZVxuICAgIHNoYWxsb3dfY29weV9ub2Nsb2JiZXIoc2hhcmVkU3RhdGVfeXksIHRoaXMueXkpO1xuXG4gICAgc2hhcmVkU3RhdGVfeXkubGV4ZXIgPSBsZXhlcjtcbiAgICBzaGFyZWRTdGF0ZV95eS5wYXJzZXIgPSB0aGlzO1xuXG5cblxuXG5cblxuICAgIC8vIERvZXMgdGhlIHNoYXJlZCBzdGF0ZSBvdmVycmlkZSB0aGUgZGVmYXVsdCBgcGFyc2VFcnJvcmAgdGhhdCBhbHJlYWR5IGNvbWVzIHdpdGggdGhpcyBpbnN0YW5jZT9cbiAgICBpZiAodHlwZW9mIHNoYXJlZFN0YXRlX3l5LnBhcnNlRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gZnVuY3Rpb24gcGFyc2VFcnJvckFsdChzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICBpZiAoIUV4Y2VwdGlvbkNsYXNzKSB7XG4gICAgICAgICAgICAgICAgRXhjZXB0aW9uQ2xhc3MgPSB0aGlzLkppc29uUGFyc2VyRXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2hhcmVkU3RhdGVfeXkucGFyc2VFcnJvci5jYWxsKHRoaXMsIHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGFyc2VFcnJvciA9IHRoaXMub3JpZ2luYWxQYXJzZUVycm9yO1xuICAgIH1cblxuICAgIC8vIERvZXMgdGhlIHNoYXJlZCBzdGF0ZSBvdmVycmlkZSB0aGUgZGVmYXVsdCBgcXVvdGVOYW1lYCB0aGF0IGFscmVhZHkgY29tZXMgd2l0aCB0aGlzIGluc3RhbmNlP1xuICAgIGlmICh0eXBlb2Ygc2hhcmVkU3RhdGVfeXkucXVvdGVOYW1lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRoaXMucXVvdGVOYW1lID0gZnVuY3Rpb24gcXVvdGVOYW1lQWx0KGlkX3N0cikge1xuICAgICAgICAgICAgcmV0dXJuIHNoYXJlZFN0YXRlX3l5LnF1b3RlTmFtZS5jYWxsKHRoaXMsIGlkX3N0cik7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5xdW90ZU5hbWUgPSB0aGlzLm9yaWdpbmFsUXVvdGVOYW1lO1xuICAgIH1cblxuICAgIC8vIHNldCB1cCB0aGUgY2xlYW51cCBmdW5jdGlvbjsgbWFrZSBpdCBhbiBBUEkgc28gdGhhdCBleHRlcm5hbCBjb2RlIGNhbiByZS11c2UgdGhpcyBvbmUgaW4gY2FzZSBvZlxuICAgIC8vIGNhbGFtaXRpZXMgb3Igd2hlbiB0aGUgYCVvcHRpb25zIG5vLXRyeS1jYXRjaGAgb3B0aW9uIGhhcyBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIGdyYW1tYXIsIGluIHdoaWNoXG4gICAgLy8gY2FzZSB0aGlzIHBhcnNlKCkgQVBJIG1ldGhvZCBkb2Vzbid0IGNvbWUgd2l0aCBhIGBmaW5hbGx5IHsgLi4uIH1gIGJsb2NrIGFueSBtb3JlIVxuICAgIC8vXG4gICAgLy8gTk9URTogYXMgdGhpcyBBUEkgdXNlcyBwYXJzZSgpIGFzIGEgY2xvc3VyZSwgaXQgTVVTVCBiZSBzZXQgYWdhaW4gb24gZXZlcnkgcGFyc2UoKSBpbnZvY2F0aW9uLFxuICAgIC8vICAgICAgIG9yIGVsc2UgeW91ciBgc2hhcmVkU3RhdGVgLCBldGMuIHJlZmVyZW5jZXMgd2lsbCBiZSAqd3JvbmcqIVxuICAgIHRoaXMuY2xlYW51cEFmdGVyUGFyc2UgPSBmdW5jdGlvbiBwYXJzZXJfY2xlYW51cEFmdGVyUGFyc2UocmVzdWx0VmFsdWUsIGludm9rZV9wb3N0X21ldGhvZHMsIGRvX25vdF9udWtlX2Vycm9yaW5mb3MpIHtcbiAgICAgICAgdmFyIHJ2O1xuXG4gICAgICAgIGlmIChpbnZva2VfcG9zdF9tZXRob2RzKSB7XG4gICAgICAgICAgICB2YXIgaGFzaDtcblxuICAgICAgICAgICAgaWYgKHNoYXJlZFN0YXRlX3l5LnBvc3RfcGFyc2UgfHwgdGhpcy5wb3N0X3BhcnNlKSB7XG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGFuIGVycm9yIGhhc2ggaW5mbyBpbnN0YW5jZTogd2UgcmUtdXNlIHRoaXMgQVBJIGluIGEgKipub24tZXJyb3Igc2l0dWF0aW9uKipcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGlzIG9uZSBkZWxpdmVycyBhbGwgcGFyc2VyIGludGVybmFscyByZWFkeSBmb3IgYWNjZXNzIGJ5IHVzZXJsYW5kIGNvZGUuXG4gICAgICAgICAgICAgICAgaGFzaCA9IHRoaXMuY29uc3RydWN0UGFyc2VFcnJvckluZm8obnVsbCAvKiBubyBlcnJvciEgKi8sIG51bGwgLyogbm8gZXhjZXB0aW9uISAqLywgbnVsbCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2hhcmVkU3RhdGVfeXkucG9zdF9wYXJzZSkge1xuICAgICAgICAgICAgICAgIHJ2ID0gc2hhcmVkU3RhdGVfeXkucG9zdF9wYXJzZS5jYWxsKHRoaXMsIHNoYXJlZFN0YXRlX3l5LCByZXN1bHRWYWx1ZSwgaGFzaCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBydiAhPT0gJ3VuZGVmaW5lZCcpIHJlc3VsdFZhbHVlID0gcnY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5wb3N0X3BhcnNlKSB7XG4gICAgICAgICAgICAgICAgcnYgPSB0aGlzLnBvc3RfcGFyc2UuY2FsbCh0aGlzLCBzaGFyZWRTdGF0ZV95eSwgcmVzdWx0VmFsdWUsIGhhc2gpO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcnYgIT09ICd1bmRlZmluZWQnKSByZXN1bHRWYWx1ZSA9IHJ2O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjbGVhbnVwOlxuICAgICAgICAgICAgaWYgKGhhc2ggJiYgaGFzaC5kZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgaGFzaC5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fX3JlZW50cmFudF9jYWxsX2RlcHRoID4gMSkgcmV0dXJuIHJlc3VsdFZhbHVlOyAgICAgICAgLy8gZG8gbm90ICh5ZXQpIGtpbGwgdGhlIHNoYXJlZFN0YXRlIHdoZW4gdGhpcyBpcyBhIHJlZW50cmFudCBydW4uXG5cbiAgICAgICAgLy8gY2xlYW4gdXAgdGhlIGxpbmdlcmluZyBsZXhlciBzdHJ1Y3R1cmVzIGFzIHdlbGw6XG4gICAgICAgIGlmIChsZXhlci5jbGVhbnVwQWZ0ZXJMZXgpIHtcbiAgICAgICAgICAgIGxleGVyLmNsZWFudXBBZnRlckxleChkb19ub3RfbnVrZV9lcnJvcmluZm9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHByZXZlbnQgbGluZ2VyaW5nIGNpcmN1bGFyIHJlZmVyZW5jZXMgZnJvbSBjYXVzaW5nIG1lbW9yeSBsZWFrczpcbiAgICAgICAgaWYgKHNoYXJlZFN0YXRlX3l5KSB7XG4gICAgICAgICAgICBzaGFyZWRTdGF0ZV95eS5sZXhlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHNoYXJlZFN0YXRlX3l5LnBhcnNlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChsZXhlci55eSA9PT0gc2hhcmVkU3RhdGVfeXkpIHtcbiAgICAgICAgICAgICAgICBsZXhlci55eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaGFyZWRTdGF0ZV95eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5wYXJzZUVycm9yID0gdGhpcy5vcmlnaW5hbFBhcnNlRXJyb3I7XG4gICAgICAgIHRoaXMucXVvdGVOYW1lID0gdGhpcy5vcmlnaW5hbFF1b3RlTmFtZTtcblxuICAgICAgICAvLyBudWtlIHRoZSB2c3RhY2tbXSBhcnJheSBhdCBsZWFzdCBhcyB0aGF0IG9uZSB3aWxsIHN0aWxsIHJlZmVyZW5jZSBvYnNvbGV0ZWQgdXNlciB2YWx1ZXMuXG4gICAgICAgIC8vIFRvIGJlIHNhZmUsIHdlIG51a2UgdGhlIG90aGVyIGludGVybmFsIHN0YWNrIGNvbHVtbnMgYXMgd2VsbC4uLlxuICAgICAgICBzdGFjay5sZW5ndGggPSAwOyAgICAgICAgICAgICAgIC8vIGZhc3Rlc3Qgd2F5IHRvIG51a2UgYW4gYXJyYXkgd2l0aG91dCBvdmVybHkgYm90aGVyaW5nIHRoZSBHQ1xuICAgICAgICBzc3RhY2subGVuZ3RoID0gMDtcblxuICAgICAgICB2c3RhY2subGVuZ3RoID0gMDtcbiAgICAgICAgc3AgPSAwO1xuXG4gICAgICAgIC8vIG51a2UgdGhlIGVycm9yIGhhc2ggaW5mbyBpbnN0YW5jZXMgY3JlYXRlZCBkdXJpbmcgdGhpcyBydW4uXG4gICAgICAgIC8vIFVzZXJsYW5kIGNvZGUgbXVzdCBDT1BZIGFueSBkYXRhL3JlZmVyZW5jZXNcbiAgICAgICAgLy8gaW4gdGhlIGVycm9yIGhhc2ggaW5zdGFuY2UocykgaXQgaXMgbW9yZSBwZXJtYW5lbnRseSBpbnRlcmVzdGVkIGluLlxuICAgICAgICBpZiAoIWRvX25vdF9udWtlX2Vycm9yaW5mb3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9fZXJyb3JfaW5mb3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZWwgPSB0aGlzLl9fZXJyb3JfaW5mb3NbaV07XG4gICAgICAgICAgICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbC5kZXN0cm95ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9fZXJyb3JfaW5mb3MubGVuZ3RoID0gMDtcblxuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0VmFsdWU7XG4gICAgfTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgLy8gTk9URTogYXMgdGhpcyBBUEkgdXNlcyBwYXJzZSgpIGFzIGEgY2xvc3VyZSwgaXQgTVVTVCBiZSBzZXQgYWdhaW4gb24gZXZlcnkgcGFyc2UoKSBpbnZvY2F0aW9uLFxuICAgIC8vICAgICAgIG9yIGVsc2UgeW91ciBgbGV4ZXJgLCBgc2hhcmVkU3RhdGVgLCBldGMuIHJlZmVyZW5jZXMgd2lsbCBiZSAqd3JvbmcqIVxuICAgIHRoaXMuY29uc3RydWN0UGFyc2VFcnJvckluZm8gPSBmdW5jdGlvbiBwYXJzZXJfY29uc3RydWN0UGFyc2VFcnJvckluZm8obXNnLCBleCwgZXhwZWN0ZWQsIHJlY292ZXJhYmxlKSB7XG4gICAgICAgIHZhciBwZWkgPSB7XG4gICAgICAgICAgICBlcnJTdHI6IG1zZyxcbiAgICAgICAgICAgIGV4Y2VwdGlvbjogZXgsXG4gICAgICAgICAgICB0ZXh0OiBsZXhlci5tYXRjaCxcbiAgICAgICAgICAgIHZhbHVlOiBsZXhlci55eXRleHQsXG4gICAgICAgICAgICB0b2tlbjogdGhpcy5kZXNjcmliZVN5bWJvbChzeW1ib2wpIHx8IHN5bWJvbCxcbiAgICAgICAgICAgIHRva2VuX2lkOiBzeW1ib2wsXG4gICAgICAgICAgICBsaW5lOiBsZXhlci55eWxpbmVubyxcblxuICAgICAgICAgICAgZXhwZWN0ZWQ6IGV4cGVjdGVkLFxuICAgICAgICAgICAgcmVjb3ZlcmFibGU6IHJlY292ZXJhYmxlLFxuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBuZXdfc3RhdGU6IG5ld1N0YXRlLFxuICAgICAgICAgICAgc3ltYm9sX3N0YWNrOiBzdGFjayxcbiAgICAgICAgICAgIHN0YXRlX3N0YWNrOiBzc3RhY2ssXG4gICAgICAgICAgICB2YWx1ZV9zdGFjazogdnN0YWNrLFxuXG4gICAgICAgICAgICBzdGFja19wb2ludGVyOiBzcCxcbiAgICAgICAgICAgIHl5OiBzaGFyZWRTdGF0ZV95eSxcbiAgICAgICAgICAgIGxleGVyOiBsZXhlcixcbiAgICAgICAgICAgIHBhcnNlcjogdGhpcyxcblxuICAgICAgICAgICAgLy8gYW5kIG1ha2Ugc3VyZSB0aGUgZXJyb3IgaW5mbyBkb2Vzbid0IHN0YXkgZHVlIHRvIHBvdGVudGlhbFxuICAgICAgICAgICAgLy8gcmVmIGN5Y2xlIHZpYSB1c2VybGFuZCBjb2RlIG1hbmlwdWxhdGlvbnMuXG4gICAgICAgICAgICAvLyBUaGVzZSB3b3VsZCBvdGhlcndpc2UgYWxsIGJlIG1lbW9yeSBsZWFrIG9wcG9ydHVuaXRpZXMhXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG9ubHkgYXJyYXkgYW5kIG9iamVjdCByZWZlcmVuY2VzIGFyZSBudWtlZCBhcyB0aG9zZVxuICAgICAgICAgICAgLy8gY29uc3RpdHV0ZSB0aGUgc2V0IG9mIGVsZW1lbnRzIHdoaWNoIGNhbiBwcm9kdWNlIGEgY3ljbGljIHJlZi5cbiAgICAgICAgICAgIC8vIFRoZSByZXN0IG9mIHRoZSBtZW1iZXJzIGlzIGtlcHQgaW50YWN0IGFzIHRoZXkgYXJlIGhhcm1sZXNzLlxuICAgICAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJ1Y3RQYXJzZUVycm9ySW5mbygpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgY3ljbGljIHJlZmVyZW5jZXMgYWRkZWQgdG8gZXJyb3IgaW5mbzpcbiAgICAgICAgICAgICAgICAvLyBpbmZvLnl5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBpbmZvLmxleGVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBpbmZvLnZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyBpbmZvLnZhbHVlX3N0YWNrID0gbnVsbDtcbiAgICAgICAgICAgICAgICAvLyAuLi5cbiAgICAgICAgICAgICAgICB2YXIgcmVjID0gISF0aGlzLnJlY292ZXJhYmxlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KGtleSkgJiYgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnJlY292ZXJhYmxlID0gcmVjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvLyB0cmFjayB0aGlzIGluc3RhbmNlIHNvIHdlIGNhbiBgZGVzdHJveSgpYCBpdCBvbmNlIHdlIGRlZW0gaXQgc3VwZXJmbHVvdXMgYW5kIHJlYWR5IGZvciBnYXJiYWdlIGNvbGxlY3Rpb24hXG4gICAgICAgIHRoaXMuX19lcnJvcl9pbmZvcy5wdXNoKHBlaSk7XG4gICAgICAgIHJldHVybiBwZWk7XG4gICAgfTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuICAgIGZ1bmN0aW9uIGdldE5vblRlcm1pbmFsRnJvbUNvZGUoc3ltYm9sKSB7XG4gICAgICAgIHZhciB0b2tlbk5hbWUgPSBzZWxmLmdldFN5bWJvbE5hbWUoc3ltYm9sKTtcbiAgICAgICAgaWYgKCF0b2tlbk5hbWUpIHtcbiAgICAgICAgICAgIHRva2VuTmFtZSA9IHN5bWJvbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG9rZW5OYW1lO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gc3RkTGV4KCkge1xuICAgICAgICB2YXIgdG9rZW4gPSBsZXhlci5sZXgoKTtcbiAgICAgICAgLy8gaWYgdG9rZW4gaXNuJ3QgaXRzIG51bWVyaWMgdmFsdWUsIGNvbnZlcnRcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9rZW4gfHwgRU9GO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZhc3RMZXgoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IGxleGVyLmZhc3RMZXgoKTtcbiAgICAgICAgLy8gaWYgdG9rZW4gaXNuJ3QgaXRzIG51bWVyaWMgdmFsdWUsIGNvbnZlcnRcbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRva2VuID0gc2VsZi5zeW1ib2xzX1t0b2tlbl0gfHwgdG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9rZW4gfHwgRU9GO1xuICAgIH1cblxuICAgIHZhciBsZXggPSBzdGRMZXg7XG5cblxuICAgIHZhciBzdGF0ZSwgYWN0aW9uLCByLCB0O1xuICAgIHZhciB5eXZhbCA9IHtcbiAgICAgICAgJDogdHJ1ZSxcbiAgICAgICAgXyQ6IHVuZGVmaW5lZCxcbiAgICAgICAgeXk6IHNoYXJlZFN0YXRlX3l5XG4gICAgfTtcbiAgICB2YXIgcDtcbiAgICB2YXIgeXlydWxlbGVuO1xuICAgIHZhciB0aGlzX3Byb2R1Y3Rpb247XG4gICAgdmFyIG5ld1N0YXRlO1xuICAgIHZhciByZXR2YWwgPSBmYWxzZTtcblxuXG4gICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fX3JlZW50cmFudF9jYWxsX2RlcHRoKys7XG5cbiAgICAgICAgbGV4ZXIuc2V0SW5wdXQoaW5wdXQsIHNoYXJlZFN0YXRlX3l5KTtcblxuICAgICAgICAvLyBOT1RFOiB3ZSAqYXNzdW1lKiBubyBsZXhlciBwcmUvcG9zdCBoYW5kbGVycyBhcmUgc2V0IHVwICphZnRlciogXG4gICAgICAgIC8vIHRoaXMgaW5pdGlhbCBgc2V0SW5wdXQoKWAgY2FsbDogaGVuY2Ugd2UgY2FuIG5vdyBjaGVjayBhbmQgZGVjaWRlXG4gICAgICAgIC8vIHdoZXRoZXIgd2UnbGwgZ28gd2l0aCB0aGUgc3RhbmRhcmQsIHNsb3dlciwgbGV4KCkgQVBJIG9yIHRoZVxuICAgICAgICAvLyBgZmFzdF9sZXgoKWAgb25lOlxuICAgICAgICBpZiAodHlwZW9mIGxleGVyLmNhbklVc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBsZXhlckluZm8gPSBsZXhlci5jYW5JVXNlKCk7XG4gICAgICAgICAgICBpZiAobGV4ZXJJbmZvLmZhc3RMZXggJiYgdHlwZW9mIGZhc3RMZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBsZXggPSBmYXN0TGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IFxuXG5cblxuICAgICAgICB2c3RhY2tbc3BdID0gbnVsbDtcbiAgICAgICAgc3N0YWNrW3NwXSA9IDA7XG4gICAgICAgIHN0YWNrW3NwXSA9IDA7XG4gICAgICAgICsrc3A7XG5cblxuXG5cblxuICAgICAgICBpZiAodGhpcy5wcmVfcGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMucHJlX3BhcnNlLmNhbGwodGhpcywgc2hhcmVkU3RhdGVfeXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFyZWRTdGF0ZV95eS5wcmVfcGFyc2UpIHtcbiAgICAgICAgICAgIHNoYXJlZFN0YXRlX3l5LnByZV9wYXJzZS5jYWxsKHRoaXMsIHNoYXJlZFN0YXRlX3l5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1N0YXRlID0gc3N0YWNrW3NwIC0gMV07XG4gICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIC8vIHJldHJpZXZlIHN0YXRlIG51bWJlciBmcm9tIHRvcCBvZiBzdGFja1xuICAgICAgICAgICAgc3RhdGUgPSBuZXdTdGF0ZTsgICAgICAgICAgICAgICAvLyBzc3RhY2tbc3AgLSAxXTtcblxuICAgICAgICAgICAgLy8gdXNlIGRlZmF1bHQgYWN0aW9ucyBpZiBhdmFpbGFibGVcbiAgICAgICAgICAgIGlmICh0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbiA9IDI7XG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0aGlzLmRlZmF1bHRBY3Rpb25zW3N0YXRlXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHNpbmdsZSBgPT1gIGNvbmRpdGlvbiBiZWxvdyBjb3ZlcnMgYm90aCB0aGVzZSBgPT09YCBjb21wYXJpc29ucyBpbiBhIHNpbmdsZVxuICAgICAgICAgICAgICAgIC8vIG9wZXJhdGlvbjpcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vICAgICBpZiAoc3ltYm9sID09PSBudWxsIHx8IHR5cGVvZiBzeW1ib2wgPT09ICd1bmRlZmluZWQnKSAuLi5cbiAgICAgICAgICAgICAgICBpZiAoIXN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICBzeW1ib2wgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gcmVhZCBhY3Rpb24gZm9yIGN1cnJlbnQgc3RhdGUgYW5kIGZpcnN0IGlucHV0XG4gICAgICAgICAgICAgICAgdCA9ICh0YWJsZVtzdGF0ZV0gJiYgdGFibGVbc3RhdGVdW3N5bWJvbF0pIHx8IE5PX0FDVElPTjtcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZSA9IHRbMV07XG4gICAgICAgICAgICAgICAgYWN0aW9uID0gdFswXTtcblxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlIHBhcnNlIGVycm9yXG4gICAgICAgICAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVyclN0cjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVyclN5bWJvbERlc2NyID0gKHRoaXMuZGVzY3JpYmVTeW1ib2woc3ltYm9sKSB8fCBzeW1ib2wpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXhwZWN0ZWQgPSB0aGlzLmNvbGxlY3RfZXhwZWN0ZWRfdG9rZW5fc2V0KHN0YXRlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBSZXBvcnQgZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZXhlci55eWxpbmVubyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciA9ICdQYXJzZSBlcnJvciBvbiBsaW5lICcgKyAobGV4ZXIueXlsaW5lbm8gKyAxKSArICc6ICc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgPSAnUGFyc2UgZXJyb3I6ICc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsZXhlci5zaG93UG9zaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciArPSAnXFxuJyArIGxleGVyLnNob3dQb3NpdGlvbig3OSAtIDEwLCAxMCkgKyAnXFxuJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwZWN0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJTdHIgKz0gJ0V4cGVjdGluZyAnICsgZXhwZWN0ZWQuam9pbignLCAnKSArICcsIGdvdCB1bmV4cGVjdGVkICcgKyBlcnJTeW1ib2xEZXNjcjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyclN0ciArPSAnVW5leHBlY3RlZCAnICsgZXJyU3ltYm9sRGVzY3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgY2Fubm90IHJlY292ZXIgZnJvbSB0aGUgZXJyb3IhXG4gICAgICAgICAgICAgICAgICAgIHAgPSB0aGlzLmNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvKGVyclN0ciwgbnVsbCwgZXhwZWN0ZWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMucGFyc2VFcnJvcihwLmVyclN0ciwgcCwgdGhpcy5KaXNvblBhcnNlckVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dmFsID0gcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfVxuXG5cblxuXG5cblxuXG5cblxuXG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgLy8gY2F0Y2ggbWlzYy4gcGFyc2UgZmFpbHVyZXM6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIHRoaXMgc2hvdWxkbid0IGhhcHBlbiwgdW5sZXNzIHJlc29sdmUgZGVmYXVsdHMgYXJlIG9mZlxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBwID0gdGhpcy5jb25zdHJ1Y3RQYXJzZUVycm9ySW5mbygnUGFyc2UgRXJyb3I6IG11bHRpcGxlIGFjdGlvbnMgcG9zc2libGUgYXQgc3RhdGU6ICcgKyBzdGF0ZSArICcsIHRva2VuOiAnICsgc3ltYm9sLCBudWxsLCBudWxsLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25QYXJzZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEFub3RoZXIgY2FzZSBvZiBiZXR0ZXIgc2FmZSB0aGFuIHNvcnJ5OiBpbiBjYXNlIHN0YXRlIHRyYW5zaXRpb25zIGNvbWUgb3V0IG9mIGFub3RoZXIgZXJyb3IgcmVjb3ZlcnkgcHJvY2Vzc1xuICAgICAgICAgICAgICAgIC8vIG9yIGEgYnVnZ3kgTFVUIChMb29rVXAgVGFibGUpOlxuICAgICAgICAgICAgICAgIHAgPSB0aGlzLmNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvKCdQYXJzaW5nIGhhbHRlZC4gTm8gdmlhYmxlIGVycm9yIHJlY292ZXJ5IGFwcHJvYWNoIGF2YWlsYWJsZSBkdWUgdG8gaW50ZXJuYWwgc3lzdGVtIGZhaWx1cmUuJywgbnVsbCwgbnVsbCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHIgPSB0aGlzLnBhcnNlRXJyb3IocC5lcnJTdHIsIHAsIHRoaXMuSmlzb25QYXJzZXJFcnJvcik7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSByO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgLy8gc2hpZnQ6XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgc3RhY2tbc3BdID0gc3ltYm9sO1xuICAgICAgICAgICAgICAgIHZzdGFja1tzcF0gPSBsZXhlci55eXRleHQ7XG5cbiAgICAgICAgICAgICAgICBzc3RhY2tbc3BdID0gbmV3U3RhdGU7IC8vIHB1c2ggc3RhdGVcblxuICAgICAgICAgICAgICAgICsrc3A7XG4gICAgICAgICAgICAgICAgc3ltYm9sID0gMDtcblxuXG5cblxuICAgICAgICAgICAgICAgIC8vIFBpY2sgdXAgdGhlIGxleGVyIGRldGFpbHMgZm9yIHRoZSBjdXJyZW50IHN5bWJvbCBhcyB0aGF0IG9uZSBpcyBub3QgJ2xvb2stYWhlYWQnIGFueSBtb3JlOlxuXG5cblxuXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIHJlZHVjZTpcbiAgICAgICAgICAgIGNhc2UgMjpcblxuXG5cbiAgICAgICAgICAgICAgICB0aGlzX3Byb2R1Y3Rpb24gPSB0aGlzLnByb2R1Y3Rpb25zX1tuZXdTdGF0ZSAtIDFdOyAgLy8gYHRoaXMucHJvZHVjdGlvbnNfW11gIGlzIHplcm8tYmFzZWQgaW5kZXhlZCB3aGlsZSBzdGF0ZXMgc3RhcnQgZnJvbSAxIHVwd2FyZHMuLi5cbiAgICAgICAgICAgICAgICB5eXJ1bGVsZW4gPSB0aGlzX3Byb2R1Y3Rpb25bMV07XG5cblxuXG5cblxuXG5cblxuXG5cbiAgICAgICAgICAgICAgICByID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoeXl2YWwsIG5ld1N0YXRlLCBzcCAtIDEsIHZzdGFjayk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHZhbCA9IHI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHBvcCBvZmYgc3RhY2tcbiAgICAgICAgICAgICAgICBzcCAtPSB5eXJ1bGVsZW47XG5cbiAgICAgICAgICAgICAgICAvLyBkb24ndCBvdmVyd3JpdGUgdGhlIGBzeW1ib2xgIHZhcmlhYmxlOiB1c2UgYSBsb2NhbCB2YXIgdG8gc3BlZWQgdGhpbmdzIHVwOlxuICAgICAgICAgICAgICAgIHZhciBudHN5bWJvbCA9IHRoaXNfcHJvZHVjdGlvblswXTsgICAgLy8gcHVzaCBub250ZXJtaW5hbCAocmVkdWNlKVxuICAgICAgICAgICAgICAgIHN0YWNrW3NwXSA9IG50c3ltYm9sO1xuICAgICAgICAgICAgICAgIHZzdGFja1tzcF0gPSB5eXZhbC4kO1xuXG4gICAgICAgICAgICAgICAgLy8gZ290byBuZXcgc3RhdGUgPSB0YWJsZVtTVEFURV1bTk9OVEVSTUlOQUxdXG4gICAgICAgICAgICAgICAgbmV3U3RhdGUgPSB0YWJsZVtzc3RhY2tbc3AgLSAxXV1bbnRzeW1ib2xdO1xuICAgICAgICAgICAgICAgIHNzdGFja1tzcF0gPSBuZXdTdGF0ZTtcbiAgICAgICAgICAgICAgICArK3NwO1xuXG5cblxuXG5cblxuXG5cblxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBhY2NlcHQ6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKHNwICE9PSAtMikge1xuICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIGAkYWNjZXB0YCBydWxlJ3MgYCQkYCByZXN1bHQsIGlmIGF2YWlsYWJsZS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gQWxzbyBub3RlIHRoYXQgSklTT04gYWx3YXlzIGFkZHMgdGhpcyB0b3AtbW9zdCBgJGFjY2VwdGAgcnVsZSAod2l0aCBpbXBsaWNpdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCwgYWN0aW9uKTpcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICRhY2NlcHQ6IDxzdGFydFN5bWJvbD4gJGVuZFxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICV7ICQkID0gJDE7IEAkID0gQDE7ICV9XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoaWNoLCBjb21iaW5lZCB3aXRoIHRoZSBwYXJzZSBrZXJuZWwncyBgJGFjY2VwdGAgc3RhdGUgYmVoYXZpb3VyIGNvZGVkIGJlbG93LFxuICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIHByb2R1Y2UgdGhlIGAkJGAgdmFsdWUgb3V0cHV0IG9mIHRoZSA8c3RhcnRTeW1ib2w+IHJ1bGUgYXMgdGhlIHBhcnNlIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgICAgLy8gSUZGIHRoYXQgcmVzdWx0IGlzICpub3QqIGB1bmRlZmluZWRgLiAoU2VlIGFsc28gdGhlIHBhcnNlciBrZXJuZWwgY29kZS4pXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGNvZGU6XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgJXtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgQCQgPSBAMTsgICAgICAgICAgICAvLyBpZiBsb2NhdGlvbiB0cmFja2luZyBzdXBwb3J0IGlzIGluY2x1ZGVkXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgJDEgIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQxO1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsgICAgICAgICAgIC8vIHRoZSBkZWZhdWx0IHBhcnNlIHJlc3VsdCBpZiB0aGUgcnVsZSBhY3Rpb25zIGRvbid0IHByb2R1Y2UgYW55dGhpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAlfVxuICAgICAgICAgICAgICAgICAgICBzcC0tO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHZzdGFja1tzcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR2YWwgPSB2c3RhY2tbc3BdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBicmVhayBvdXQgb2YgbG9vcDogd2UgYWNjZXB0IG9yIGZhaWwgd2l0aCBlcnJvclxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyByZXBvcnQgZXhjZXB0aW9ucyB0aHJvdWdoIHRoZSBwYXJzZUVycm9yIGNhbGxiYWNrIHRvbywgYnV0IGtlZXAgdGhlIGV4Y2VwdGlvbiBpbnRhY3RcbiAgICAgICAgLy8gaWYgaXQgaXMgYSBrbm93biBwYXJzZXIgb3IgbGV4ZXIgZXJyb3Igd2hpY2ggaGFzIGJlZW4gdGhyb3duIGJ5IHBhcnNlRXJyb3IoKSBhbHJlYWR5OlxuICAgICAgICBpZiAoZXggaW5zdGFuY2VvZiB0aGlzLkppc29uUGFyc2VyRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGxleGVyICYmIHR5cGVvZiBsZXhlci5KaXNvbkxleGVyRXJyb3IgPT09ICdmdW5jdGlvbicgJiYgZXggaW5zdGFuY2VvZiBsZXhlci5KaXNvbkxleGVyRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgcCA9IHRoaXMuY29uc3RydWN0UGFyc2VFcnJvckluZm8oJ1BhcnNpbmcgYWJvcnRlZCBkdWUgdG8gZXhjZXB0aW9uLicsIGV4LCBudWxsLCBmYWxzZSk7XG4gICAgICAgIHJldHZhbCA9IGZhbHNlO1xuICAgICAgICByID0gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uUGFyc2VyRXJyb3IpO1xuICAgICAgICBpZiAodHlwZW9mIHIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR2YWwgPSByO1xuICAgICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcmV0dmFsID0gdGhpcy5jbGVhbnVwQWZ0ZXJQYXJzZShyZXR2YWwsIHRydWUsIHRydWUpO1xuICAgICAgICB0aGlzLl9fcmVlbnRyYW50X2NhbGxfZGVwdGgtLTtcbiAgICB9ICAgLy8gL2ZpbmFsbHlcblxuICAgIHJldHVybiByZXR2YWw7XG59XG59O1xucGFyc2VyLm9yaWdpbmFsUGFyc2VFcnJvciA9IHBhcnNlci5wYXJzZUVycm9yO1xucGFyc2VyLm9yaWdpbmFsUXVvdGVOYW1lID0gcGFyc2VyLnF1b3RlTmFtZTtcbi8qIGxleGVyIGdlbmVyYXRlZCBieSBqaXNvbi1sZXggMC42LjEtMjE1ICovXG5cbi8qXG4gKiBSZXR1cm5zIGEgTGV4ZXIgb2JqZWN0IG9mIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICpcbiAqICBMZXhlcjoge1xuICogICAgeXk6IHt9ICAgICBUaGUgc28tY2FsbGVkIFwic2hhcmVkIHN0YXRlXCIgb3IgcmF0aGVyIHRoZSAqc291cmNlKiBvZiBpdDtcbiAqICAgICAgICAgICAgICAgdGhlIHJlYWwgXCJzaGFyZWQgc3RhdGVcIiBgeXlgIHBhc3NlZCBhcm91bmQgdG9cbiAqICAgICAgICAgICAgICAgdGhlIHJ1bGUgYWN0aW9ucywgZXRjLiBpcyBhIGRpcmVjdCByZWZlcmVuY2UhXG4gKlxuICogICAgICAgICAgICAgICBUaGlzIFwic2hhcmVkIGNvbnRleHRcIiBvYmplY3Qgd2FzIHBhc3NlZCB0byB0aGUgbGV4ZXIgYnkgd2F5IG9mIFxuICogICAgICAgICAgICAgICB0aGUgYGxleGVyLnNldElucHV0KHN0ciwgeXkpYCBBUEkgYmVmb3JlIHlvdSBtYXkgdXNlIGl0LlxuICpcbiAqICAgICAgICAgICAgICAgVGhpcyBcInNoYXJlZCBjb250ZXh0XCIgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGUgbGV4ZXIgYWN0aW9uIGNvZGUgaW4gYHBlcmZvcm1BY3Rpb24oKWBcbiAqICAgICAgICAgICAgICAgc28gdXNlcmxhbmQgY29kZSBpbiB0aGUgbGV4ZXIgYWN0aW9ucyBtYXkgY29tbXVuaWNhdGUgd2l0aCB0aGUgb3V0c2lkZSB3b3JsZCBcbiAqICAgICAgICAgICAgICAgYW5kL29yIG90aGVyIGxleGVyIHJ1bGVzJyBhY3Rpb25zIGluIG1vcmUgb3IgbGVzcyBjb21wbGV4IHdheXMuXG4gKlxuICogIH1cbiAqXG4gKiAgTGV4ZXIucHJvdG90eXBlOiB7XG4gKiAgICBFT0Y6IDEsXG4gKiAgICBFUlJPUjogMixcbiAqXG4gKiAgICB5eTogICAgICAgIFRoZSBvdmVyYWxsIFwic2hhcmVkIGNvbnRleHRcIiBvYmplY3QgcmVmZXJlbmNlLlxuICpcbiAqICAgIEppc29uTGV4ZXJFcnJvcjogZnVuY3Rpb24obXNnLCBoYXNoKSxcbiAqXG4gKiAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbiBsZXhlcl9fcGVyZm9ybUFjdGlvbih5eSwgeXlydWxlbnVtYmVyLCBZWV9TVEFSVCksXG4gKlxuICogICAgICAgICAgICAgICBUaGUgZnVuY3Rpb24gcGFyYW1ldGVycyBhbmQgYHRoaXNgIGhhdmUgdGhlIGZvbGxvd2luZyB2YWx1ZS9tZWFuaW5nOlxuICogICAgICAgICAgICAgICAtIGB0aGlzYCAgICA6IHJlZmVyZW5jZSB0byB0aGUgYGxleGVyYCBpbnN0YW5jZS4gXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgeXlfYCBpcyBhbiBhbGlhcyBmb3IgYHRoaXNgIGxleGVyIGluc3RhbmNlIHJlZmVyZW5jZSB1c2VkIGludGVybmFsbHkuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eWAgICAgICA6IGEgcmVmZXJlbmNlIHRvIHRoZSBgeXlgIFwic2hhcmVkIHN0YXRlXCIgb2JqZWN0IHdoaWNoIHdhcyBwYXNzZWQgdG8gdGhlIGxleGVyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgd2F5IG9mIHRoZSBgbGV4ZXIuc2V0SW5wdXQoc3RyLCB5eSlgIEFQSSBiZWZvcmUuXG4gKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGU6XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGV4dHJhIGFyZ3VtZW50cyB5b3Ugc3BlY2lmaWVkIGluIHRoZSBgJXBhcnNlLXBhcmFtYCBzdGF0ZW1lbnQgaW4geW91clxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqcGFyc2VyKiogZ3JhbW1hciBkZWZpbml0aW9uIGZpbGUgYXJlIHBhc3NlZCB0byB0aGUgbGV4ZXIgdmlhIHRoaXMgb2JqZWN0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlIGFzIG1lbWJlciB2YXJpYWJsZXMuXG4gKlxuICogICAgICAgICAgICAgICAtIGB5eXJ1bGVudW1iZXJgICAgOiBpbmRleCBvZiB0aGUgbWF0Y2hlZCBsZXhlciBydWxlIChyZWdleCksIHVzZWQgaW50ZXJuYWxseS5cbiAqXG4gKiAgICAgICAgICAgICAgIC0gYFlZX1NUQVJUYDogdGhlIGN1cnJlbnQgbGV4ZXIgXCJzdGFydCBjb25kaXRpb25cIiBzdGF0ZS5cbiAqXG4gKiAgICBwYXJzZUVycm9yOiBmdW5jdGlvbihzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSxcbiAqXG4gKiAgICBjb25zdHJ1Y3RMZXhFcnJvckluZm86IGZ1bmN0aW9uKGVycm9yX21lc3NhZ2UsIGlzX3JlY292ZXJhYmxlKSxcbiAqICAgICAgICAgICAgICAgSGVscGVyIGZ1bmN0aW9uLlxuICogICAgICAgICAgICAgICBQcm9kdWNlcyBhIG5ldyBlcnJvckluZm8gJ2hhc2ggb2JqZWN0JyB3aGljaCBjYW4gYmUgcGFzc2VkIGludG8gYHBhcnNlRXJyb3IoKWAuXG4gKiAgICAgICAgICAgICAgIFNlZSBpdCdzIHVzZSBpbiB0aGlzIGxleGVyIGtlcm5lbCBpbiBtYW55IHBsYWNlczsgZXhhbXBsZSB1c2FnZTpcbiAqXG4gKiAgICAgICAgICAgICAgICAgICB2YXIgaW5mb09iaiA9IGxleGVyLmNvbnN0cnVjdFBhcnNlRXJyb3JJbmZvKCdmYWlsIScsIHRydWUpO1xuICogICAgICAgICAgICAgICAgICAgdmFyIHJldFZhbCA9IGxleGVyLnBhcnNlRXJyb3IoaW5mb09iai5lcnJTdHIsIGluZm9PYmosIGxleGVyLkppc29uTGV4ZXJFcnJvcik7XG4gKlxuICogICAgb3B0aW9uczogeyAuLi4gbGV4ZXIgJW9wdGlvbnMgLi4uIH0sXG4gKlxuICogICAgbGV4OiBmdW5jdGlvbigpLFxuICogICAgICAgICAgICAgICBQcm9kdWNlIG9uZSB0b2tlbiBvZiBsZXhlZCBpbnB1dCwgd2hpY2ggd2FzIHBhc3NlZCBpbiBlYXJsaWVyIHZpYSB0aGUgYGxleGVyLnNldElucHV0KClgIEFQSS5cbiAqICAgICAgICAgICAgICAgWW91IE1BWSB1c2UgdGhlIGFkZGl0aW9uYWwgYGFyZ3MuLi5gIHBhcmFtZXRlcnMgYXMgcGVyIGAlcGFyc2UtcGFyYW1gIHNwZWMgb2YgdGhlICoqbGV4ZXIqKiBncmFtbWFyOlxuICogICAgICAgICAgICAgICB0aGVzZSBleHRyYSBgYXJncy4uLmAgYXJlIGFkZGVkIHZlcmJhdGltIHRvIHRoZSBgeXlgIG9iamVjdCByZWZlcmVuY2UgYXMgbWVtYmVyIHZhcmlhYmxlcy5cbiAqXG4gKiAgICAgICAgICAgICAgIFdBUk5JTkc6XG4gKiAgICAgICAgICAgICAgIExleGVyJ3MgYWRkaXRpb25hbCBgYXJncy4uLmAgcGFyYW1ldGVycyAodmlhIGxleGVyJ3MgYCVwYXJzZS1wYXJhbWApIE1BWSBjb25mbGljdCB3aXRoXG4gKiAgICAgICAgICAgICAgIGFueSBhdHRyaWJ1dGVzIGFscmVhZHkgYWRkZWQgdG8gYHl5YCBieSB0aGUgKipwYXJzZXIqKiBvciB0aGUgamlzb24gcnVuLXRpbWU7IFxuICogICAgICAgICAgICAgICB3aGVuIHN1Y2ggYSBjb2xsaXNpb24gaXMgZGV0ZWN0ZWQgYW4gZXhjZXB0aW9uIGlzIHRocm93biB0byBwcmV2ZW50IHRoZSBnZW5lcmF0ZWQgcnVuLXRpbWUgXG4gKiAgICAgICAgICAgICAgIGZyb20gc2lsZW50bHkgYWNjZXB0aW5nIHRoaXMgY29uZnVzaW5nIGFuZCBwb3RlbnRpYWxseSBoYXphcmRvdXMgc2l0dWF0aW9uISBcbiAqXG4gKiAgICBjbGVhbnVwQWZ0ZXJMZXg6IGZ1bmN0aW9uKGRvX25vdF9udWtlX2Vycm9yaW5mb3MpLFxuICogICAgICAgICAgICAgICBIZWxwZXIgZnVuY3Rpb24uXG4gKlxuICogICAgICAgICAgICAgICBUaGlzIGhlbHBlciBBUEkgaXMgaW52b2tlZCB3aGVuIHRoZSAqKnBhcnNlIHByb2Nlc3MqKiBoYXMgY29tcGxldGVkOiBpdCBpcyB0aGUgcmVzcG9uc2liaWxpdHlcbiAqICAgICAgICAgICAgICAgb2YgdGhlICoqcGFyc2VyKiogKG9yIHRoZSBjYWxsaW5nIHVzZXJsYW5kIGNvZGUpIHRvIGludm9rZSB0aGlzIG1ldGhvZCBvbmNlIGNsZWFudXAgaXMgZGVzaXJlZC4gXG4gKlxuICogICAgICAgICAgICAgICBUaGlzIGhlbHBlciBtYXkgYmUgaW52b2tlZCBieSB1c2VyIGNvZGUgdG8gZW5zdXJlIHRoZSBpbnRlcm5hbCBsZXhlciBnZXRzIHByb3Blcmx5IGdhcmJhZ2UgY29sbGVjdGVkLlxuICpcbiAqICAgIHNldElucHV0OiBmdW5jdGlvbihpbnB1dCwgW3l5XSksXG4gKlxuICpcbiAqICAgIGlucHV0OiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICB1bnB1dDogZnVuY3Rpb24oc3RyKSxcbiAqXG4gKlxuICogICAgbW9yZTogZnVuY3Rpb24oKSxcbiAqXG4gKlxuICogICAgcmVqZWN0OiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICBsZXNzOiBmdW5jdGlvbihuKSxcbiAqXG4gKlxuICogICAgcGFzdElucHV0OiBmdW5jdGlvbihuKSxcbiAqXG4gKlxuICogICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24obiksXG4gKlxuICpcbiAqICAgIHNob3dQb3NpdGlvbjogZnVuY3Rpb24oKSxcbiAqXG4gKlxuICogICAgdGVzdF9tYXRjaDogZnVuY3Rpb24ocmVnZXhfbWF0Y2hfYXJyYXksIHJ1bGVfaW5kZXgpLFxuICpcbiAqXG4gKiAgICBuZXh0OiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICBiZWdpbjogZnVuY3Rpb24oY29uZGl0aW9uKSxcbiAqXG4gKlxuICogICAgcHVzaFN0YXRlOiBmdW5jdGlvbihjb25kaXRpb24pLFxuICpcbiAqXG4gKiAgICBwb3BTdGF0ZTogZnVuY3Rpb24oKSxcbiAqXG4gKlxuICogICAgdG9wU3RhdGU6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIF9jdXJyZW50UnVsZXM6IGZ1bmN0aW9uKCksXG4gKlxuICpcbiAqICAgIHN0YXRlU3RhY2tTaXplOiBmdW5jdGlvbigpLFxuICpcbiAqXG4gKiAgICBwZXJmb3JtQWN0aW9uOiBmdW5jdGlvbih5eSwgeXlfLCB5eXJ1bGVudW1iZXIsIFlZX1NUQVJUKSxcbiAqXG4gKlxuICogICAgcnVsZXM6IFsuLi5dLFxuICpcbiAqXG4gKiAgICBjb25kaXRpb25zOiB7YXNzb2NpYXRpdmUgbGlzdDogbmFtZSA9PT4gc2V0fSxcbiAqICB9XG4gKlxuICpcbiAqICB0b2tlbiBsb2NhdGlvbiBpbmZvIChgeXlsbG9jYCk6IHtcbiAqICAgIGZpcnN0X2xpbmU6IG4sXG4gKiAgICBsYXN0X2xpbmU6IG4sXG4gKiAgICBmaXJzdF9jb2x1bW46IG4sXG4gKiAgICBsYXN0X2NvbHVtbjogbixcbiAqICAgIHJhbmdlOiBbc3RhcnRfbnVtYmVyLCBlbmRfbnVtYmVyXVxuICogICAgICAgICAgICAgICAod2hlcmUgdGhlIG51bWJlcnMgYXJlIGluZGV4ZXMgaW50byB0aGUgaW5wdXQgc3RyaW5nLCB6ZXJvLWJhc2VkKVxuICogIH1cbiAqXG4gKiAtLS1cbiAqXG4gKiBUaGUgYHBhcnNlRXJyb3JgIGZ1bmN0aW9uIHJlY2VpdmVzIGEgJ2hhc2gnIG9iamVjdCB3aXRoIHRoZXNlIG1lbWJlcnMgZm9yIGxleGVyIGVycm9yczpcbiAqXG4gKiAge1xuICogICAgdGV4dDogICAgICAgIChtYXRjaGVkIHRleHQpXG4gKiAgICB0b2tlbjogICAgICAgKHRoZSBwcm9kdWNlZCB0ZXJtaW5hbCB0b2tlbiwgaWYgYW55KVxuICogICAgdG9rZW5faWQ6ICAgICh0aGUgcHJvZHVjZWQgdGVybWluYWwgdG9rZW4gbnVtZXJpYyBJRCwgaWYgYW55KVxuICogICAgbGluZTogICAgICAgICh5eWxpbmVubylcbiAqICAgIGxvYzogICAgICAgICAoeXlsbG9jKVxuICogICAgcmVjb3ZlcmFibGU6IChib29sZWFuOiBUUlVFIHdoZW4gdGhlIHBhcnNlciBNQVkgaGF2ZSBhbiBlcnJvciByZWNvdmVyeSBydWxlXG4gKiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZSBmb3IgdGhpcyBwYXJ0aWN1bGFyIGVycm9yKVxuICogICAgeXk6ICAgICAgICAgIChvYmplY3Q6IHRoZSBjdXJyZW50IHBhcnNlciBpbnRlcm5hbCBcInNoYXJlZCBzdGF0ZVwiIGB5eWBcbiAqICAgICAgICAgICAgICAgICAgYXMgaXMgYWxzbyBhdmFpbGFibGUgaW4gdGhlIHJ1bGUgYWN0aW9uczsgdGhpcyBjYW4gYmUgdXNlZCxcbiAqICAgICAgICAgICAgICAgICAgZm9yIGluc3RhbmNlLCBmb3IgYWR2YW5jZWQgZXJyb3IgYW5hbHlzaXMgYW5kIHJlcG9ydGluZylcbiAqICAgIGxleGVyOiAgICAgICAocmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGxleGVyIGluc3RhbmNlIHVzZWQgYnkgdGhlIHBhcnNlcilcbiAqICB9XG4gKlxuICogd2hpbGUgYHRoaXNgIHdpbGwgcmVmZXJlbmNlIHRoZSBjdXJyZW50IGxleGVyIGluc3RhbmNlLlxuICpcbiAqIFdoZW4gYHBhcnNlRXJyb3JgIGlzIGludm9rZWQgYnkgdGhlIGxleGVyLCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB3aWxsXG4gKiBhdHRlbXB0IHRvIGludm9rZSBgeXkucGFyc2VyLnBhcnNlRXJyb3IoKWA7IHdoZW4gdGhpcyBjYWxsYmFjayBpcyBub3QgcHJvdmlkZWRcbiAqIGl0IHdpbGwgdHJ5IHRvIGludm9rZSBgeXkucGFyc2VFcnJvcigpYCBpbnN0ZWFkLiBXaGVuIHRoYXQgY2FsbGJhY2sgaXMgYWxzbyBub3RcbiAqIHByb3ZpZGVkLCBhIGBKaXNvbkxleGVyRXJyb3JgIGV4Y2VwdGlvbiB3aWxsIGJlIHRocm93biBjb250YWluaW5nIHRoZSBlcnJvclxuICogbWVzc2FnZSBhbmQgYGhhc2hgLCBhcyBjb25zdHJ1Y3RlZCBieSB0aGUgYGNvbnN0cnVjdExleEVycm9ySW5mbygpYCBBUEkuXG4gKlxuICogTm90ZSB0aGF0IHRoZSBsZXhlcidzIGBKaXNvbkxleGVyRXJyb3JgIGVycm9yIGNsYXNzIGlzIHBhc3NlZCB2aWEgdGhlXG4gKiBgRXhjZXB0aW9uQ2xhc3NgIGFyZ3VtZW50LCB3aGljaCBpcyBpbnZva2VkIHRvIGNvbnN0cnVjdCB0aGUgZXhjZXB0aW9uXG4gKiBpbnN0YW5jZSB0byBiZSB0aHJvd24sIHNvIHRlY2huaWNhbGx5IGBwYXJzZUVycm9yYCB3aWxsIHRocm93IHRoZSBvYmplY3RcbiAqIHByb2R1Y2VkIGJ5IHRoZSBgbmV3IEV4Y2VwdGlvbkNsYXNzKHN0ciwgaGFzaClgIEphdmFTY3JpcHQgZXhwcmVzc2lvbi5cbiAqXG4gKiAtLS1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgbGV4ZXIgb3B0aW9ucyBieSBzZXR0aW5nIC8gbW9kaWZ5aW5nIHRoZSBgLm9wdGlvbnNgIG9iamVjdCBvZiB5b3VyIExleGVyIGluc3RhbmNlLlxuICogVGhlc2Ugb3B0aW9ucyBhcmUgYXZhaWxhYmxlOlxuICpcbiAqIChPcHRpb25zIGFyZSBwZXJtYW5lbnQuKVxuICogIFxuICogIHl5OiB7XG4gKiAgICAgIHBhcnNlRXJyb3I6IGZ1bmN0aW9uKHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IG92ZXJyaWRlcyB0aGUgZGVmYXVsdCBgcGFyc2VFcnJvcmAgZnVuY3Rpb24uXG4gKiAgfVxuICpcbiAqICBsZXhlci5vcHRpb25zOiB7XG4gKiAgICAgIHByZV9sZXg6ICBmdW5jdGlvbigpXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGlzIGludm9rZWQgYmVmb3JlIHRoZSBsZXhlciBpcyBpbnZva2VkIHRvIHByb2R1Y2UgYW5vdGhlciB0b2tlbi5cbiAqICAgICAgICAgICAgICAgICBgdGhpc2AgcmVmZXJzIHRvIHRoZSBMZXhlciBvYmplY3QuXG4gKiAgICAgIHBvc3RfbGV4OiBmdW5jdGlvbih0b2tlbikgeyByZXR1cm4gdG9rZW47IH1cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogaXMgaW52b2tlZCB3aGVuIHRoZSBsZXhlciBoYXMgcHJvZHVjZWQgYSB0b2tlbiBgdG9rZW5gO1xuICogICAgICAgICAgICAgICAgIHRoaXMgZnVuY3Rpb24gY2FuIG92ZXJyaWRlIHRoZSByZXR1cm5lZCB0b2tlbiB2YWx1ZSBieSByZXR1cm5pbmcgYW5vdGhlci5cbiAqICAgICAgICAgICAgICAgICBXaGVuIGl0IGRvZXMgbm90IHJldHVybiBhbnkgKHRydXRoeSkgdmFsdWUsIHRoZSBsZXhlciB3aWxsIHJldHVyblxuICogICAgICAgICAgICAgICAgIHRoZSBvcmlnaW5hbCBgdG9rZW5gLlxuICogICAgICAgICAgICAgICAgIGB0aGlzYCByZWZlcnMgdG8gdGhlIExleGVyIG9iamVjdC5cbiAqXG4gKiBXQVJOSU5HOiB0aGUgbmV4dCBzZXQgb2Ygb3B0aW9ucyBhcmUgbm90IG1lYW50IHRvIGJlIGNoYW5nZWQuIFRoZXkgZWNobyB0aGUgYWJpbGl0aWVzIG9mXG4gKiB0aGUgbGV4ZXIgYXMgcGVyIHdoZW4gaXQgd2FzIGNvbXBpbGVkIVxuICpcbiAqICAgICAgcmFuZ2VzOiBib29sZWFuXG4gKiAgICAgICAgICAgICAgICAgb3B0aW9uYWw6IGB0cnVlYCA9PT4gdG9rZW4gbG9jYXRpb24gaW5mbyB3aWxsIGluY2x1ZGUgYSAucmFuZ2VbXSBtZW1iZXIuXG4gKiAgICAgIGZsZXg6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBmbGV4LWxpa2UgbGV4aW5nIGJlaGF2aW91ciB3aGVyZSB0aGUgcnVsZXMgYXJlIHRlc3RlZFxuICogICAgICAgICAgICAgICAgIGV4aGF1c3RpdmVseSB0byBmaW5kIHRoZSBsb25nZXN0IG1hdGNoLlxuICogICAgICBiYWNrdHJhY2tfbGV4ZXI6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciByZWdleGVzIGFyZSB0ZXN0ZWQgaW4gb3JkZXIgYW5kIGZvciBpbnZva2VkO1xuICogICAgICAgICAgICAgICAgIHRoZSBsZXhlciB0ZXJtaW5hdGVzIHRoZSBzY2FuIHdoZW4gYSB0b2tlbiBpcyByZXR1cm5lZCBieSB0aGUgYWN0aW9uIGNvZGUuXG4gKiAgICAgIHhyZWdleHA6IGJvb2xlYW5cbiAqICAgICAgICAgICAgICAgICBvcHRpb25hbDogYHRydWVgID09PiBsZXhlciBydWxlIHJlZ2V4ZXMgYXJlIFwiZXh0ZW5kZWQgcmVnZXggZm9ybWF0XCIgcmVxdWlyaW5nIHRoZVxuICogICAgICAgICAgICAgICAgIGBYUmVnRXhwYCBsaWJyYXJ5LiBXaGVuIHRoaXMgJW9wdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGF0IGNvbXBpbGUgdGltZSwgYWxsIGxleGVyXG4gKiAgICAgICAgICAgICAgICAgcnVsZSByZWdleGVzIGhhdmUgYmVlbiB3cml0dGVuIGFzIHN0YW5kYXJkIEphdmFTY3JpcHQgUmVnRXhwIGV4cHJlc3Npb25zLlxuICogIH1cbiAqL1xuXG5cbnZhciBsZXhlciA9IGZ1bmN0aW9uKCkge1xuICAvKipcbiAgICogU2VlIGFsc286XG4gICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTM4MjEwNy93aGF0cy1hLWdvb2Qtd2F5LXRvLWV4dGVuZC1lcnJvci1pbi1qYXZhc2NyaXB0LyMzNTg4MTUwOFxuICAgKiBidXQgd2Uga2VlcCB0aGUgcHJvdG90eXBlLmNvbnN0cnVjdG9yIGFuZCBwcm90b3R5cGUubmFtZSBhc3NpZ25tZW50IGxpbmVzIHRvbyBmb3IgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHVzZXJsYW5kIGNvZGUgd2hpY2ggbWlnaHQgYWNjZXNzIHRoZSBkZXJpdmVkIGNsYXNzIGluIGEgJ2NsYXNzaWMnIHdheS5cbiAgICpcbiAgICogQHB1YmxpY1xuICAgKiBAY29uc3RydWN0b3JcbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIGZ1bmN0aW9uIEppc29uTGV4ZXJFcnJvcihtc2csIGhhc2gpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ25hbWUnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiAnSmlzb25MZXhlckVycm9yJ1xuICAgIH0pO1xuXG4gICAgaWYgKG1zZyA9PSBudWxsKVxuICAgICAgbXNnID0gJz8/Pyc7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG1zZ1xuICAgIH0pO1xuXG4gICAgdGhpcy5oYXNoID0gaGFzaDtcbiAgICB2YXIgc3RhY2t0cmFjZTtcblxuICAgIGlmIChoYXNoICYmIGhhc2guZXhjZXB0aW9uIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHZhciBleDIgPSBoYXNoLmV4Y2VwdGlvbjtcbiAgICAgIHRoaXMubWVzc2FnZSA9IGV4Mi5tZXNzYWdlIHx8IG1zZztcbiAgICAgIHN0YWNrdHJhY2UgPSBleDIuc3RhY2s7XG4gICAgfVxuXG4gICAgaWYgKCFzdGFja3RyYWNlKSB7XG4gICAgICBpZiAoRXJyb3IuaGFzT3duUHJvcGVydHkoJ2NhcHR1cmVTdGFja1RyYWNlJykpIHtcbiAgICAgICAgLy8gVjhcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGFja3RyYWNlID0gbmV3IEVycm9yKG1zZykuc3RhY2s7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YWNrdHJhY2UpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RhY2snLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIHZhbHVlOiBzdGFja3RyYWNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIE9iamVjdC5zZXRQcm90b3R5cGVPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihKaXNvbkxleGVyRXJyb3IucHJvdG90eXBlLCBFcnJvci5wcm90b3R5cGUpO1xuICB9IGVsc2Uge1xuICAgIEppc29uTGV4ZXJFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gIH1cblxuICBKaXNvbkxleGVyRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSmlzb25MZXhlckVycm9yO1xuICBKaXNvbkxleGVyRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSmlzb25MZXhlckVycm9yJztcblxuICB2YXIgbGV4ZXIgPSB7XG4gICAgXG4vLyBDb2RlIEdlbmVyYXRvciBJbmZvcm1hdGlvbiBSZXBvcnRcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy9cbi8vIE9wdGlvbnM6XG4vL1xuLy8gICBiYWNrdHJhY2tpbmc6IC4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4vLyAgIGxvY2F0aW9uLnJhbmdlczogLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vICAgbG9jYXRpb24gbGluZStjb2x1bW4gdHJhY2tpbmc6IC4uLiB0cnVlXG4vL1xuLy9cbi8vIEZvcndhcmRlZCBQYXJzZXIgQW5hbHlzaXMgZmxhZ3M6XG4vL1xuLy8gICB1c2VzIHl5bGVuZzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4vLyAgIHVzZXMgeXlsaW5lbm86IC4uLi4uLi4uLi4uLi4uLi4uLi4gZmFsc2Vcbi8vICAgdXNlcyB5eXRleHQ6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuLy8gICB1c2VzIHl5bGxvYzogLi4uLi4uLi4uLi4uLi4uLi4uLi4uIGZhbHNlXG4vLyAgIHVzZXMgbGV4ZXIgdmFsdWVzOiAuLi4uLi4uLi4uLi4uLi4gdHJ1ZSAvIHRydWVcbi8vICAgbG9jYXRpb24gdHJhY2tpbmc6IC4uLi4uLi4uLi4uLi4uLiBmYWxzZVxuLy8gICBsb2NhdGlvbiBhc3NpZ25tZW50OiAuLi4uLi4uLi4uLi4uIGZhbHNlXG4vL1xuLy9cbi8vIExleGVyIEFuYWx5c2lzIGZsYWdzOlxuLy9cbi8vICAgdXNlcyB5eWxlbmc6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyB5eWxpbmVubzogLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyB5eXRleHQ6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyB5eWxsb2M6IC4uLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyBQYXJzZUVycm9yIEFQSTogLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyB5eWVycm9yOiAuLi4uLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyBsb2NhdGlvbiB0cmFja2luZyAmIGVkaXRpbmc6ICA/Pz9cbi8vICAgdXNlcyBtb3JlKCkgQVBJOiAuLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyB1bnB1dCgpIEFQSTogLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyByZWplY3QoKSBBUEk6IC4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyBsZXNzKCkgQVBJOiAuLi4uLi4uLi4uLi4uLi4uLiA/Pz9cbi8vICAgdXNlcyBkaXNwbGF5IEFQSXMgcGFzdElucHV0KCksIHVwY29taW5nSW5wdXQoKSwgc2hvd1Bvc2l0aW9uKCk6XG4vLyAgICAgICAgLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gPz8/XG4vLyAgIHVzZXMgZGVzY3JpYmVZWUxMT0MoKSBBUEk6IC4uLi4uLi4gPz8/XG4vL1xuLy8gLS0tLS0tLS0tIEVORCBPRiBSRVBPUlQgLS0tLS0tLS0tLS1cblxuRU9GOiAxLFxuICAgIEVSUk9SOiAyLFxuXG4gICAgLy8gSmlzb25MZXhlckVycm9yOiBKaXNvbkxleGVyRXJyb3IsICAgICAgICAvLy8gPC0tIGluamVjdGVkIGJ5IHRoZSBjb2RlIGdlbmVyYXRvclxuXG4gICAgLy8gb3B0aW9uczoge30sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gPC0tIGluamVjdGVkIGJ5IHRoZSBjb2RlIGdlbmVyYXRvclxuXG4gICAgLy8geXk6IC4uLiwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gPC0tIGluamVjdGVkIGJ5IHNldElucHV0KClcblxuICAgIF9fY3VycmVudFJ1bGVTZXRfXzogbnVsbCwgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZOiBpbnRlcm5hbCBydWxlIHNldCBjYWNoZSBmb3IgdGhlIGN1cnJlbnQgbGV4ZXIgc3RhdGUgIFxuXG4gICAgX19lcnJvcl9pbmZvczogW10sICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFk6IHRoZSBzZXQgb2YgbGV4RXJyb3JJbmZvIG9iamVjdHMgY3JlYXRlZCBzaW5jZSB0aGUgbGFzdCBjbGVhbnVwICBcbiAgICBfX2RlY29tcHJlc3NlZDogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWTogbWFyayB3aGV0aGVyIHRoZSBsZXhlciBpbnN0YW5jZSBoYXMgYmVlbiAndW5mb2xkZWQnIGNvbXBsZXRlbHkgYW5kIGlzIG5vdyByZWFkeSBmb3IgdXNlICBcbiAgICBkb25lOiBmYWxzZSwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWSAgXG4gICAgX2JhY2t0cmFjazogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFkgIFxuICAgIF9pbnB1dDogJycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZICBcbiAgICBfbW9yZTogZmFsc2UsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBJTlRFUk5BTCBVU0UgT05MWSAgXG4gICAgX3NpZ25hbGVkX2Vycm9yX3Rva2VuOiBmYWxzZSwgICAgICAgICAgICAgICAvLy8gSU5URVJOQUwgVVNFIE9OTFkgIFxuICAgIGNvbmRpdGlvblN0YWNrOiBbXSwgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIElOVEVSTkFMIFVTRSBPTkxZOyBtYW5hZ2VkIHZpYSBgcHVzaFN0YXRlKClgLCBgcG9wU3RhdGUoKWAsIGB0b3BTdGF0ZSgpYCBhbmQgYHN0YXRlU3RhY2tTaXplKClgICBcbiAgICBtYXRjaDogJycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBSRUFELU9OTFkgRVhURVJOQUwgQUNDRVNTIC0gQURWQU5DRUQgVVNFIE9OTFk6IHRyYWNrcyBpbnB1dCB3aGljaCBoYXMgYmVlbiBtYXRjaGVkIHNvIGZhciBmb3IgdGhlIGxleGVyIHRva2VuIHVuZGVyIGNvbnN0cnVjdGlvbi4gYG1hdGNoYCBpcyBpZGVudGljYWwgdG8gYHl5dGV4dGAgZXhjZXB0IHRoYXQgdGhpcyBvbmUgc3RpbGwgY29udGFpbnMgdGhlIG1hdGNoZWQgaW5wdXQgc3RyaW5nIGFmdGVyIGBsZXhlci5wZXJmb3JtQWN0aW9uKClgIGhhcyBiZWVuIGludm9rZWQsIHdoZXJlIHVzZXJsYW5kIGNvZGUgTUFZIGhhdmUgY2hhbmdlZC9yZXBsYWNlZCB0aGUgYHl5dGV4dGAgdmFsdWUgZW50aXJlbHkhICBcbiAgICBtYXRjaGVkOiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBSRUFELU9OTFkgRVhURVJOQUwgQUNDRVNTIC0gQURWQU5DRUQgVVNFIE9OTFk6IHRyYWNrcyBlbnRpcmUgaW5wdXQgd2hpY2ggaGFzIGJlZW4gbWF0Y2hlZCBzbyBmYXIgIFxuICAgIG1hdGNoZXM6IGZhbHNlLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogdHJhY2tzIFJFIG1hdGNoIHJlc3VsdCBmb3IgbGFzdCAoc3VjY2Vzc2Z1bCkgbWF0Y2ggYXR0ZW1wdCAgXG4gICAgeXl0ZXh0OiAnJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gQURWQU5DRUQgVVNFIE9OTFk6IHRyYWNrcyBpbnB1dCB3aGljaCBoYXMgYmVlbiBtYXRjaGVkIHNvIGZhciBmb3IgdGhlIGxleGVyIHRva2VuIHVuZGVyIGNvbnN0cnVjdGlvbjsgdGhpcyB2YWx1ZSBpcyB0cmFuc2ZlcnJlZCB0byB0aGUgcGFyc2VyIGFzIHRoZSAndG9rZW4gdmFsdWUnIHdoZW4gdGhlIHBhcnNlciBjb25zdW1lcyB0aGUgbGV4ZXIgdG9rZW4gcHJvZHVjZWQgdGhyb3VnaCBhIGNhbGwgdG8gdGhlIGBsZXgoKWAgQVBJLiAgXG4gICAgb2Zmc2V0OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLy8gUkVBRC1PTkxZIEVYVEVSTkFMIEFDQ0VTUyAtIEFEVkFOQ0VEIFVTRSBPTkxZOiB0cmFja3MgdGhlICdjdXJzb3IgcG9zaXRpb24nIGluIHRoZSBpbnB1dCBzdHJpbmcsIGkuZS4gdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIG1hdGNoZWQgc28gZmFyICBcbiAgICB5eWxlbmc6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLyBSRUFELU9OTFkgRVhURVJOQUwgQUNDRVNTIC0gQURWQU5DRUQgVVNFIE9OTFk6IGxlbmd0aCBvZiBtYXRjaGVkIGlucHV0IGZvciB0aGUgdG9rZW4gdW5kZXIgY29uc3RydWN0aW9uIChgeXl0ZXh0YCkgIFxuICAgIHl5bGluZW5vOiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogJ2xpbmUgbnVtYmVyJyBhdCB3aGljaCB0aGUgdG9rZW4gdW5kZXIgY29uc3RydWN0aW9uIGlzIGxvY2F0ZWQgIFxuICAgIHl5bGxvYzogbnVsbCwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vIFJFQUQtT05MWSBFWFRFUk5BTCBBQ0NFU1MgLSBBRFZBTkNFRCBVU0UgT05MWTogdHJhY2tzIGxvY2F0aW9uIGluZm8gKGxpbmVzICsgY29sdW1ucykgZm9yIHRoZSB0b2tlbiB1bmRlciBjb25zdHJ1Y3Rpb24gIFxuXG4gICAgLyoqXG4gICAgICogSU5URVJOQUwgVVNFOiBjb25zdHJ1Y3QgYSBzdWl0YWJsZSBlcnJvciBpbmZvIGhhc2ggb2JqZWN0IGluc3RhbmNlIGZvciBgcGFyc2VFcnJvcmAuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RMZXhFcnJvckluZm86IGZ1bmN0aW9uIGxleGVyX2NvbnN0cnVjdExleEVycm9ySW5mbyhtc2csIHJlY292ZXJhYmxlLCBzaG93X2lucHV0X3Bvc2l0aW9uKSB7XG4gICAgICBtc2cgPSAnJyArIG1zZztcblxuICAgICAgLy8gaGV1cmlzdGljIHRvIGRldGVybWluZSBpZiB0aGUgZXJyb3IgbWVzc2FnZSBhbHJlYWR5IGNvbnRhaW5zIGEgKHBhcnRpYWwpIHNvdXJjZSBjb2RlIGR1bXBcbiAgICAgIC8vIGFzIHByb2R1Y2VkIGJ5IGVpdGhlciBgc2hvd1Bvc2l0aW9uKClgIG9yIGBwcmV0dHlQcmludFJhbmdlKClgOlxuICAgICAgaWYgKHNob3dfaW5wdXRfcG9zaXRpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNob3dfaW5wdXRfcG9zaXRpb24gPSAhKG1zZy5pbmRleE9mKCdcXG4nKSA+IDAgJiYgbXNnLmluZGV4T2YoJ14nKSA+IDApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy55eWxsb2MgJiYgc2hvd19pbnB1dF9wb3NpdGlvbikge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJldHR5UHJpbnRSYW5nZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBwcmV0dHlfc3JjID0gdGhpcy5wcmV0dHlQcmludFJhbmdlKHRoaXMueXlsbG9jKTtcblxuICAgICAgICAgIGlmICghL1xcblxccyokLy50ZXN0KG1zZykpIHtcbiAgICAgICAgICAgIG1zZyArPSAnXFxuJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtc2cgKz0gJ1xcbiAgRXJyb25lb3VzIGFyZWE6XFxuJyArIHRoaXMucHJldHR5UHJpbnRSYW5nZSh0aGlzLnl5bGxvYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuc2hvd1Bvc2l0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHBvc19zdHIgPSB0aGlzLnNob3dQb3NpdGlvbigpO1xuXG4gICAgICAgICAgaWYgKHBvc19zdHIpIHtcbiAgICAgICAgICAgIGlmIChtc2cubGVuZ3RoICYmIG1zZ1ttc2cubGVuZ3RoIC0gMV0gIT09ICdcXG4nICYmIHBvc19zdHJbMF0gIT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgIG1zZyArPSAnXFxuJyArIHBvc19zdHI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtc2cgKz0gcG9zX3N0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyoqIEBjb25zdHJ1Y3RvciAqL1xuICAgICAgdmFyIHBlaSA9IHtcbiAgICAgICAgZXJyU3RyOiBtc2csXG4gICAgICAgIHJlY292ZXJhYmxlOiAhIXJlY292ZXJhYmxlLFxuICAgICAgICB0ZXh0OiB0aGlzLm1hdGNoLCAgICAgICAgICAgLy8gVGhpcyBvbmUgTUFZIGJlIGVtcHR5OyB1c2VybGFuZCBjb2RlIHNob3VsZCB1c2UgdGhlIGB1cGNvbWluZ0lucHV0YCBBUEkgdG8gb2J0YWluIG1vcmUgdGV4dCB3aGljaCBmb2xsb3dzIHRoZSAnbGV4ZXIgY3Vyc29yIHBvc2l0aW9uJy4uLiAgXG4gICAgICAgIHRva2VuOiBudWxsLFxuICAgICAgICBsaW5lOiB0aGlzLnl5bGluZW5vLFxuICAgICAgICBsb2M6IHRoaXMueXlsbG9jLFxuICAgICAgICB5eTogdGhpcy55eSxcbiAgICAgICAgbGV4ZXI6IHRoaXMsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFuZCBtYWtlIHN1cmUgdGhlIGVycm9yIGluZm8gZG9lc24ndCBzdGF5IGR1ZSB0byBwb3RlbnRpYWxcbiAgICAgICAgICogcmVmIGN5Y2xlIHZpYSB1c2VybGFuZCBjb2RlIG1hbmlwdWxhdGlvbnMuXG4gICAgICAgICAqIFRoZXNlIHdvdWxkIG90aGVyd2lzZSBhbGwgYmUgbWVtb3J5IGxlYWsgb3Bwb3J0dW5pdGllcyFcbiAgICAgICAgICogXG4gICAgICAgICAqIE5vdGUgdGhhdCBvbmx5IGFycmF5IGFuZCBvYmplY3QgcmVmZXJlbmNlcyBhcmUgbnVrZWQgYXMgdGhvc2VcbiAgICAgICAgICogY29uc3RpdHV0ZSB0aGUgc2V0IG9mIGVsZW1lbnRzIHdoaWNoIGNhbiBwcm9kdWNlIGEgY3ljbGljIHJlZi5cbiAgICAgICAgICogVGhlIHJlc3Qgb2YgdGhlIG1lbWJlcnMgaXMga2VwdCBpbnRhY3QgYXMgdGhleSBhcmUgaGFybWxlc3MuXG4gICAgICAgICAqIFxuICAgICAgICAgKiBAcHVibGljXG4gICAgICAgICAqIEB0aGlzIHtMZXhFcnJvckluZm99XG4gICAgICAgICAqL1xuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cnVjdExleEVycm9ySW5mbygpIHtcbiAgICAgICAgICAvLyByZW1vdmUgY3ljbGljIHJlZmVyZW5jZXMgYWRkZWQgdG8gZXJyb3IgaW5mbzpcbiAgICAgICAgICAvLyBpbmZvLnl5ID0gbnVsbDtcbiAgICAgICAgICAvLyBpbmZvLmxleGVyID0gbnVsbDtcbiAgICAgICAgICAvLyAuLi5cbiAgICAgICAgICB2YXIgcmVjID0gISF0aGlzLnJlY292ZXJhYmxlO1xuXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KGtleSkgJiYgdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgdGhpc1trZXldID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucmVjb3ZlcmFibGUgPSByZWM7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIC8vIHRyYWNrIHRoaXMgaW5zdGFuY2Ugc28gd2UgY2FuIGBkZXN0cm95KClgIGl0IG9uY2Ugd2UgZGVlbSBpdCBzdXBlcmZsdW91cyBhbmQgcmVhZHkgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiFcbiAgICAgIHRoaXMuX19lcnJvcl9pbmZvcy5wdXNoKHBlaSk7XG5cbiAgICAgIHJldHVybiBwZWk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhhbmRsZXIgd2hpY2ggaXMgaW52b2tlZCB3aGVuIGEgbGV4ZXIgZXJyb3Igb2NjdXJzLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgcGFyc2VFcnJvcjogZnVuY3Rpb24gbGV4ZXJfcGFyc2VFcnJvcihzdHIsIGhhc2gsIEV4Y2VwdGlvbkNsYXNzKSB7XG4gICAgICBpZiAoIUV4Y2VwdGlvbkNsYXNzKSB7XG4gICAgICAgIEV4Y2VwdGlvbkNsYXNzID0gdGhpcy5KaXNvbkxleGVyRXJyb3I7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnl5KSB7XG4gICAgICAgIGlmICh0aGlzLnl5LnBhcnNlciAmJiB0eXBlb2YgdGhpcy55eS5wYXJzZXIucGFyc2VFcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnl5LnBhcnNlci5wYXJzZUVycm9yLmNhbGwodGhpcywgc3RyLCBoYXNoLCBFeGNlcHRpb25DbGFzcykgfHwgdGhpcy5FUlJPUjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy55eS5wYXJzZUVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMueXkucGFyc2VFcnJvci5jYWxsKHRoaXMsIHN0ciwgaGFzaCwgRXhjZXB0aW9uQ2xhc3MpIHx8IHRoaXMuRVJST1I7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbkNsYXNzKHN0ciwgaGFzaCk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG1ldGhvZCB3aGljaCBpbXBsZW1lbnRzIGB5eWVycm9yKHN0ciwgLi4uYXJncylgIGZ1bmN0aW9uYWxpdHkgZm9yIHVzZSBpbnNpZGUgbGV4ZXIgYWN0aW9ucy5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHl5ZXJyb3I6IGZ1bmN0aW9uIHl5RXJyb3Ioc3RyIC8qLCAuLi5hcmdzICovKSB7XG4gICAgICB2YXIgbGluZW5vX21zZyA9ICcnO1xuXG4gICAgICBpZiAodGhpcy55eWxsb2MpIHtcbiAgICAgICAgbGluZW5vX21zZyA9ICcgb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHAgPSB0aGlzLmNvbnN0cnVjdExleEVycm9ySW5mbyhcbiAgICAgICAgJ0xleGljYWwgZXJyb3InICsgbGluZW5vX21zZyArICc6ICcgKyBzdHIsXG4gICAgICAgIHRoaXMub3B0aW9ucy5sZXhlckVycm9yc0FyZVJlY292ZXJhYmxlXG4gICAgICApO1xuXG4gICAgICAvLyBBZGQgYW55IGV4dHJhIGFyZ3MgdG8gdGhlIGhhc2ggdW5kZXIgdGhlIG5hbWUgYGV4dHJhX2Vycm9yX2F0dHJpYnV0ZXNgOlxuICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgcC5leHRyYV9lcnJvcl9hdHRyaWJ1dGVzID0gYXJncztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFcnJvcihwLmVyclN0ciwgcCwgdGhpcy5KaXNvbkxleGVyRXJyb3IpIHx8IHRoaXMuRVJST1I7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGZpbmFsIGNsZWFudXAgZnVuY3Rpb24gZm9yIHdoZW4gd2UgaGF2ZSBjb21wbGV0ZWQgbGV4aW5nIHRoZSBpbnB1dDtcbiAgICAgKiBtYWtlIGl0IGFuIEFQSSBzbyB0aGF0IGV4dGVybmFsIGNvZGUgY2FuIHVzZSB0aGlzIG9uZSBvbmNlIHVzZXJsYW5kXG4gICAgICogY29kZSBoYXMgZGVjaWRlZCBpdCdzIHRpbWUgdG8gZGVzdHJveSBhbnkgbGluZ2VyaW5nIGxleGVyIGVycm9yXG4gICAgICogaGFzaCBvYmplY3QgaW5zdGFuY2VzIGFuZCB0aGUgbGlrZTogdGhpcyBmdW5jdGlvbiBoZWxwcyB0byBjbGVhblxuICAgICAqIHVwIHRoZXNlIGNvbnN0cnVjdHMsIHdoaWNoICptYXkqIGNhcnJ5IGN5Y2xpYyByZWZlcmVuY2VzIHdoaWNoIHdvdWxkXG4gICAgICogb3RoZXJ3aXNlIHByZXZlbnQgdGhlIGluc3RhbmNlcyBmcm9tIGJlaW5nIHByb3Blcmx5IGFuZCB0aW1lbHlcbiAgICAgKiBnYXJiYWdlLWNvbGxlY3RlZCwgaS5lLiB0aGlzIGZ1bmN0aW9uIGhlbHBzIHByZXZlbnQgbWVtb3J5IGxlYWtzIVxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgY2xlYW51cEFmdGVyTGV4OiBmdW5jdGlvbiBsZXhlcl9jbGVhbnVwQWZ0ZXJMZXgoZG9fbm90X251a2VfZXJyb3JpbmZvcykge1xuICAgICAgLy8gcHJldmVudCBsaW5nZXJpbmcgY2lyY3VsYXIgcmVmZXJlbmNlcyBmcm9tIGNhdXNpbmcgbWVtb3J5IGxlYWtzOlxuICAgICAgdGhpcy5zZXRJbnB1dCgnJywge30pO1xuXG4gICAgICAvLyBudWtlIHRoZSBlcnJvciBoYXNoIGluZm8gaW5zdGFuY2VzIGNyZWF0ZWQgZHVyaW5nIHRoaXMgcnVuLlxuICAgICAgLy8gVXNlcmxhbmQgY29kZSBtdXN0IENPUFkgYW55IGRhdGEvcmVmZXJlbmNlc1xuICAgICAgLy8gaW4gdGhlIGVycm9yIGhhc2ggaW5zdGFuY2UocykgaXQgaXMgbW9yZSBwZXJtYW5lbnRseSBpbnRlcmVzdGVkIGluLlxuICAgICAgaWYgKCFkb19ub3RfbnVrZV9lcnJvcmluZm9zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9fZXJyb3JfaW5mb3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICB2YXIgZWwgPSB0aGlzLl9fZXJyb3JfaW5mb3NbaV07XG5cbiAgICAgICAgICBpZiAoZWwgJiYgdHlwZW9mIGVsLmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGVsLmRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9fZXJyb3JfaW5mb3MubGVuZ3RoID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNsZWFyIHRoZSBsZXhlciB0b2tlbiBjb250ZXh0OyBpbnRlbmRlZCBmb3IgaW50ZXJuYWwgdXNlIG9ubHlcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGNsZWFyOiBmdW5jdGlvbiBsZXhlcl9jbGVhcigpIHtcbiAgICAgIHRoaXMueXl0ZXh0ID0gJyc7XG4gICAgICB0aGlzLnl5bGVuZyA9IDA7XG4gICAgICB0aGlzLm1hdGNoID0gJyc7XG5cbiAgICAgIC8vIC0gRE8gTk9UIHJlc2V0IGB0aGlzLm1hdGNoZWRgXG4gICAgICB0aGlzLm1hdGNoZXMgPSBmYWxzZTtcblxuICAgICAgdGhpcy5fbW9yZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fYmFja3RyYWNrID0gZmFsc2U7XG4gICAgICB2YXIgY29sID0gKHRoaXMueXlsbG9jID8gdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gOiAwKTtcblxuICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgIGZpcnN0X2xpbmU6IHRoaXMueXlsaW5lbm8gKyAxLFxuICAgICAgICBmaXJzdF9jb2x1bW46IGNvbCxcbiAgICAgICAgbGFzdF9saW5lOiB0aGlzLnl5bGluZW5vICsgMSxcbiAgICAgICAgbGFzdF9jb2x1bW46IGNvbCxcbiAgICAgICAgcmFuZ2U6IFt0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXRdXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXNldHMgdGhlIGxleGVyLCBzZXRzIG5ldyBpbnB1dFxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgc2V0SW5wdXQ6IGZ1bmN0aW9uIGxleGVyX3NldElucHV0KGlucHV0LCB5eSkge1xuICAgICAgdGhpcy55eSA9IHl5IHx8IHRoaXMueXkgfHwge307XG5cbiAgICAgIC8vIGFsc28gY2hlY2sgaWYgd2UndmUgZnVsbHkgaW5pdGlhbGl6ZWQgdGhlIGxleGVyIGluc3RhbmNlLFxuICAgICAgLy8gaW5jbHVkaW5nIGV4cGFuc2lvbiB3b3JrIHRvIGJlIGRvbmUgdG8gZ28gZnJvbSBhIGxvYWRlZFxuICAgICAgLy8gbGV4ZXIgdG8gYSB1c2FibGUgbGV4ZXI6XG4gICAgICBpZiAoIXRoaXMuX19kZWNvbXByZXNzZWQpIHtcbiAgICAgICAgLy8gc3RlcCAxOiBkZWNvbXByZXNzIHRoZSByZWdleCBsaXN0OlxuICAgICAgICB2YXIgcnVsZXMgPSB0aGlzLnJ1bGVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBydWxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIHZhciBydWxlX3JlID0gcnVsZXNbaV07XG5cbiAgICAgICAgICAvLyBjb21wcmVzc2lvbjogaXMgdGhlIFJFIGFuIHhyZWYgdG8gYW5vdGhlciBSRSBzbG90IGluIHRoZSBydWxlc1tdIHRhYmxlP1xuICAgICAgICAgIGlmICh0eXBlb2YgcnVsZV9yZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJ1bGVzW2ldID0gcnVsZXNbcnVsZV9yZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RlcCAyOiB1bmZvbGQgdGhlIGNvbmRpdGlvbnNbXSBzZXQgdG8gbWFrZSB0aGVzZSByZWFkeSBmb3IgdXNlOlxuICAgICAgICB2YXIgY29uZGl0aW9ucyA9IHRoaXMuY29uZGl0aW9ucztcblxuICAgICAgICBmb3IgKHZhciBrIGluIGNvbmRpdGlvbnMpIHtcbiAgICAgICAgICB2YXIgc3BlYyA9IGNvbmRpdGlvbnNba107XG4gICAgICAgICAgdmFyIHJ1bGVfaWRzID0gc3BlYy5ydWxlcztcbiAgICAgICAgICB2YXIgbGVuID0gcnVsZV9pZHMubGVuZ3RoO1xuICAgICAgICAgIHZhciBydWxlX3JlZ2V4ZXMgPSBuZXcgQXJyYXkobGVuICsgMSk7ICAgICAgICAgICAgIC8vIHNsb3QgMCBpcyB1bnVzZWQ7IHdlIHVzZSBhIDEtYmFzZWQgaW5kZXggYXBwcm9hY2ggaGVyZSB0byBrZWVwIHRoZSBob3R0ZXN0IGNvZGUgaW4gYGxleGVyX25leHQoKWAgZmFzdCBhbmQgc2ltcGxlISBcbiAgICAgICAgICB2YXIgcnVsZV9uZXdfaWRzID0gbmV3IEFycmF5KGxlbiArIDEpO1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdmFyIGlkeCA9IHJ1bGVfaWRzW2ldO1xuICAgICAgICAgICAgdmFyIHJ1bGVfcmUgPSBydWxlc1tpZHhdO1xuICAgICAgICAgICAgcnVsZV9yZWdleGVzW2kgKyAxXSA9IHJ1bGVfcmU7XG4gICAgICAgICAgICBydWxlX25ld19pZHNbaSArIDFdID0gaWR4O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwZWMucnVsZXMgPSBydWxlX25ld19pZHM7XG4gICAgICAgICAgc3BlYy5fX3J1bGVfcmVnZXhlcyA9IHJ1bGVfcmVnZXhlcztcbiAgICAgICAgICBzcGVjLl9fcnVsZV9jb3VudCA9IGxlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX19kZWNvbXByZXNzZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pbnB1dCA9IGlucHV0IHx8ICcnO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgdGhpcy5fc2lnbmFsZWRfZXJyb3JfdG9rZW4gPSBmYWxzZTtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy55eWxpbmVubyA9IDA7XG4gICAgICB0aGlzLm1hdGNoZWQgPSAnJztcbiAgICAgIHRoaXMuY29uZGl0aW9uU3RhY2sgPSBbJ0lOSVRJQUwnXTtcbiAgICAgIHRoaXMuX19jdXJyZW50UnVsZVNldF9fID0gbnVsbDtcblxuICAgICAgdGhpcy55eWxsb2MgPSB7XG4gICAgICAgIGZpcnN0X2xpbmU6IDEsXG4gICAgICAgIGZpcnN0X2NvbHVtbjogMCxcbiAgICAgICAgbGFzdF9saW5lOiAxLFxuICAgICAgICBsYXN0X2NvbHVtbjogMCxcbiAgICAgICAgcmFuZ2U6IFswLCAwXVxuICAgICAgfTtcblxuICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVkaXQgdGhlIHJlbWFpbmluZyBpbnB1dCB2aWEgdXNlci1zcGVjaWZpZWQgY2FsbGJhY2suXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBmb3J3YXJkLWFkanVzdCB0aGUgaW5wdXQtdG8tcGFyc2UsIFxuICAgICAqIGUuZy4gaW5zZXJ0aW5nIG1hY3JvIGV4cGFuc2lvbnMgYW5kIGFsaWtlIGluIHRoZVxuICAgICAqIGlucHV0IHdoaWNoIGhhcyB5ZXQgdG8gYmUgbGV4ZWQuXG4gICAgICogVGhlIGJlaGF2aW91ciBvZiB0aGlzIEFQSSBjb250cmFzdHMgdGhlIGB1bnB1dCgpYCBldCBhbFxuICAgICAqIEFQSXMgYXMgdGhvc2UgYWN0IG9uIHRoZSAqY29uc3VtZWQqIGlucHV0LCB3aGlsZSB0aGlzXG4gICAgICogb25lIGFsbG93cyBvbmUgdG8gbWFuaXB1bGF0ZSB0aGUgZnV0dXJlLCB3aXRob3V0IGltcGFjdGluZ1xuICAgICAqIHRoZSBjdXJyZW50IGB5eWxvY2AgY3Vyc29yIGxvY2F0aW9uIG9yIGFueSBoaXN0b3J5LiBcbiAgICAgKiBcbiAgICAgKiBVc2UgdGhpcyBBUEkgdG8gaGVscCBpbXBsZW1lbnQgQy1wcmVwcm9jZXNzb3ItbGlrZVxuICAgICAqIGAjaW5jbHVkZWAgc3RhdGVtZW50cywgZXRjLlxuICAgICAqIFxuICAgICAqIFRoZSBwcm92aWRlZCBjYWxsYmFjayBtdXN0IGJlIHN5bmNocm9ub3VzIGFuZCBpc1xuICAgICAqIGV4cGVjdGVkIHRvIHJldHVybiB0aGUgZWRpdGVkIGlucHV0IChzdHJpbmcpLlxuICAgICAqXG4gICAgICogVGhlIGBjcHNBcmdgIGFyZ3VtZW50IHZhbHVlIGlzIHBhc3NlZCB0byB0aGUgY2FsbGJhY2tcbiAgICAgKiBhcy1pcy5cbiAgICAgKlxuICAgICAqIGBjYWxsYmFja2AgaW50ZXJmYWNlOiBcbiAgICAgKiBgZnVuY3Rpb24gY2FsbGJhY2soaW5wdXQsIGNwc0FyZylgXG4gICAgICogXG4gICAgICogLSBgaW5wdXRgIHdpbGwgY2FycnkgdGhlIHJlbWFpbmluZy1pbnB1dC10by1sZXggc3RyaW5nXG4gICAgICogICBmcm9tIHRoZSBsZXhlci5cbiAgICAgKiAtIGBjcHNBcmdgIGlzIGBjcHNBcmdgIHBhc3NlZCBpbnRvIHRoaXMgQVBJLlxuICAgICAqIFxuICAgICAqIFRoZSBgdGhpc2AgcmVmZXJlbmNlIGZvciB0aGUgY2FsbGJhY2sgd2lsbCBiZSBzZXQgdG9cbiAgICAgKiByZWZlcmVuY2UgdGhpcyBsZXhlciBpbnN0YW5jZSBzbyB0aGF0IHVzZXJsYW5kIGNvZGVcbiAgICAgKiBpbiB0aGUgY2FsbGJhY2sgY2FuIGVhc2lseSBhbmQgcXVpY2tseSBhY2Nlc3MgYW55IGxleGVyXG4gICAgICogQVBJLiBcbiAgICAgKlxuICAgICAqIFdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnMgYSBub24tc3RyaW5nLXR5cGUgZmFsc2V5IHZhbHVlLFxuICAgICAqIHdlIGFzc3VtZSB0aGUgY2FsbGJhY2sgZGlkIG5vdCBlZGl0IHRoZSBpbnB1dCBhbmQgd2VcbiAgICAgKiB3aWxsIHVzaW5nIHRoZSBpbnB1dCBhcy1pcy5cbiAgICAgKlxuICAgICAqIFdoZW4gdGhlIGNhbGxiYWNrIHJldHVybnMgYSBub24tc3RyaW5nLXR5cGUgdmFsdWUsIGl0XG4gICAgICogaXMgY29udmVydGVkIHRvIGEgc3RyaW5nIGZvciBsZXhpbmcgdmlhIHRoZSBgXCJcIiArIHJldHZhbGBcbiAgICAgKiBvcGVyYXRpb24uIChTZWUgYWxzbyB3aHk6IGh0dHA6Ly8yYWxpdHkuY29tLzIwMTIvMDMvY29udmVydGluZy10by1zdHJpbmcuaHRtbCBcbiAgICAgKiAtLSB0aGF0IHdheSBhbnkgcmV0dXJuZWQgb2JqZWN0J3MgYHRvVmFsdWUoKWAgYW5kIGB0b1N0cmluZygpYFxuICAgICAqIG1ldGhvZHMgd2lsbCBiZSBpbnZva2VkIGluIGEgcHJvcGVyL2Rlc2lyYWJsZSBvcmRlci4pXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBlZGl0UmVtYWluaW5nSW5wdXQ6IGZ1bmN0aW9uIGxleGVyX2VkaXRSZW1haW5pbmdJbnB1dChjYWxsYmFjaywgY3BzQXJnKSB7XG4gICAgICB2YXIgcnYgPSBjYWxsYmFjay5jYWxsKHRoaXMsIHRoaXMuX2lucHV0LCBjcHNBcmcpO1xuXG4gICAgICBpZiAodHlwZW9mIHJ2ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAocnYpIHtcbiAgICAgICAgICB0aGlzLl9pbnB1dCA9ICcnICsgcnY7XG4gICAgICAgIH0gXG4gICAgICAgIC8vIGVsc2U6IGtlZXAgYHRoaXMuX2lucHV0YCBhcyBpcy4gIFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faW5wdXQgPSBydjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbnN1bWVzIGFuZCByZXR1cm5zIG9uZSBjaGFyIGZyb20gdGhlIGlucHV0XG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBpbnB1dDogZnVuY3Rpb24gbGV4ZXJfaW5wdXQoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lucHV0KSB7XG4gICAgICAgIC8vdGhpcy5kb25lID0gdHJ1ZTsgICAgLS0gZG9uJ3Qgc2V0IGBkb25lYCBhcyB3ZSB3YW50IHRoZSBsZXgoKS9uZXh0KCkgQVBJIHRvIGJlIGFibGUgdG8gcHJvZHVjZSBvbmUgY3VzdG9tIEVPRiB0b2tlbiBtYXRjaCBhZnRlciB0aGlzIGFueWhvdy4gKGxleGVyIGNhbiBtYXRjaCBzcGVjaWFsIDw8RU9GPj4gdG9rZW5zIGFuZCBwZXJmb3JtIHVzZXIgYWN0aW9uIGNvZGUgZm9yIGEgPDxFT0Y+PiBtYXRjaCwgYnV0IG9ubHkgZG9lcyBzbyAqb25jZSopXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2ggPSB0aGlzLl9pbnB1dFswXTtcbiAgICAgIHRoaXMueXl0ZXh0ICs9IGNoO1xuICAgICAgdGhpcy55eWxlbmcrKztcbiAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICB0aGlzLm1hdGNoICs9IGNoO1xuICAgICAgdGhpcy5tYXRjaGVkICs9IGNoO1xuXG4gICAgICAvLyBDb3VudCB0aGUgbGluZW51bWJlciB1cCB3aGVuIHdlIGhpdCB0aGUgTEYgKG9yIGEgc3RhbmQtYWxvbmUgQ1IpLlxuICAgICAgLy8gT24gQ1JMRiwgdGhlIGxpbmVudW1iZXIgaXMgaW5jcmVtZW50ZWQgd2hlbiB5b3UgZmV0Y2ggdGhlIENSIG9yIHRoZSBDUkxGIGNvbWJvXG4gICAgICAvLyBhbmQgd2UgYWR2YW5jZSBpbW1lZGlhdGVseSBwYXN0IHRoZSBMRiBhcyB3ZWxsLCByZXR1cm5pbmcgYm90aCB0b2dldGhlciBhcyBpZlxuICAgICAgLy8gaXQgd2FzIGFsbCBhIHNpbmdsZSAnY2hhcmFjdGVyJyBvbmx5LlxuICAgICAgdmFyIHNsaWNlX2xlbiA9IDE7XG5cbiAgICAgIHZhciBsaW5lcyA9IGZhbHNlO1xuXG4gICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgIGxpbmVzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXHInKSB7XG4gICAgICAgIGxpbmVzID0gdHJ1ZTtcbiAgICAgICAgdmFyIGNoMiA9IHRoaXMuX2lucHV0WzFdO1xuXG4gICAgICAgIGlmIChjaDIgPT09ICdcXG4nKSB7XG4gICAgICAgICAgc2xpY2VfbGVuKys7XG4gICAgICAgICAgY2ggKz0gY2gyO1xuICAgICAgICAgIHRoaXMueXl0ZXh0ICs9IGNoMjtcbiAgICAgICAgICB0aGlzLnl5bGVuZysrO1xuICAgICAgICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgICAgICAgdGhpcy5tYXRjaCArPSBjaDI7XG4gICAgICAgICAgdGhpcy5tYXRjaGVkICs9IGNoMjtcbiAgICAgICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsaW5lcykge1xuICAgICAgICB0aGlzLnl5bGluZW5vKys7XG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfbGluZSsrO1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbisrO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSsrO1xuICAgICAgdGhpcy5faW5wdXQgPSB0aGlzLl9pbnB1dC5zbGljZShzbGljZV9sZW4pO1xuICAgICAgcmV0dXJuIGNoO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bnNoaWZ0cyBvbmUgY2hhciAob3IgYW4gZW50aXJlIHN0cmluZykgaW50byB0aGUgaW5wdXRcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHVucHV0OiBmdW5jdGlvbiBsZXhlcl91bnB1dChjaCkge1xuICAgICAgdmFyIGxlbiA9IGNoLmxlbmd0aDtcbiAgICAgIHZhciBsaW5lcyA9IGNoLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgICB0aGlzLl9pbnB1dCA9IGNoICsgdGhpcy5faW5wdXQ7XG4gICAgICB0aGlzLnl5dGV4dCA9IHRoaXMueXl0ZXh0LnN1YnN0cigwLCB0aGlzLnl5dGV4dC5sZW5ndGggLSBsZW4pO1xuICAgICAgdGhpcy55eWxlbmcgPSB0aGlzLnl5dGV4dC5sZW5ndGg7XG4gICAgICB0aGlzLm9mZnNldCAtPSBsZW47XG4gICAgICB0aGlzLm1hdGNoID0gdGhpcy5tYXRjaC5zdWJzdHIoMCwgdGhpcy5tYXRjaC5sZW5ndGggLSBsZW4pO1xuICAgICAgdGhpcy5tYXRjaGVkID0gdGhpcy5tYXRjaGVkLnN1YnN0cigwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gbGVuKTtcblxuICAgICAgaWYgKGxpbmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhpcy55eWxpbmVubyAtPSBsaW5lcy5sZW5ndGggLSAxO1xuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2xpbmUgPSB0aGlzLnl5bGluZW5vICsgMTtcblxuICAgICAgICAvLyBHZXQgbGFzdCBlbnRpcmVseSBtYXRjaGVkIGxpbmUgaW50byB0aGUgYHByZV9saW5lc1tdYCBhcnJheSdzXG4gICAgICAgIC8vIGxhc3QgaW5kZXggc2xvdDsgd2UgZG9uJ3QgbWluZCB3aGVuIG90aGVyIHByZXZpb3VzbHkgXG4gICAgICAgIC8vIG1hdGNoZWQgbGluZXMgZW5kIHVwIGluIHRoZSBhcnJheSB0b28uIFxuICAgICAgICB2YXIgcHJlID0gdGhpcy5tYXRjaDtcblxuICAgICAgICB2YXIgcHJlX2xpbmVzID0gcHJlLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG5cbiAgICAgICAgaWYgKHByZV9saW5lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICBwcmUgPSB0aGlzLm1hdGNoZWQ7XG4gICAgICAgICAgcHJlX2xpbmVzID0gcHJlLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnl5bGxvYy5sYXN0X2NvbHVtbiA9IHByZV9saW5lc1twcmVfbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gLT0gbGVuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnl5bGxvYy5yYW5nZVsxXSA9IHRoaXMueXlsbG9jLnJhbmdlWzBdICsgdGhpcy55eWxlbmc7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWNoZSBtYXRjaGVkIHRleHQgYW5kIGFwcGVuZCBpdCBvbiBuZXh0IGFjdGlvblxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgbW9yZTogZnVuY3Rpb24gbGV4ZXJfbW9yZSgpIHtcbiAgICAgIHRoaXMuX21vcmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHNpZ25hbCB0aGUgbGV4ZXIgdGhhdCB0aGlzIHJ1bGUgZmFpbHMgdG8gbWF0Y2ggdGhlIGlucHV0LCBzbyB0aGVcbiAgICAgKiBuZXh0IG1hdGNoaW5nIHJ1bGUgKHJlZ2V4KSBzaG91bGQgYmUgdGVzdGVkIGluc3RlYWQuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICByZWplY3Q6IGZ1bmN0aW9uIGxleGVyX3JlamVjdCgpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgIHRoaXMuX2JhY2t0cmFjayA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB3aGVuIHRoZSBgcGFyc2VFcnJvcigpYCBjYWxsIHJldHVybnMsIHdlIE1VU1QgZW5zdXJlIHRoYXQgdGhlIGVycm9yIGlzIHJlZ2lzdGVyZWQuXG4gICAgICAgIC8vIFdlIGFjY29tcGxpc2ggdGhpcyBieSBzaWduYWxpbmcgYW4gJ2Vycm9yJyB0b2tlbiB0byBiZSBwcm9kdWNlZCBmb3IgdGhlIGN1cnJlbnRcbiAgICAgICAgLy8gYC5sZXgoKWAgcnVuLlxuICAgICAgICB2YXIgbGluZW5vX21zZyA9ICcnO1xuXG4gICAgICAgIGlmICh0aGlzLnl5bGxvYykge1xuICAgICAgICAgIGxpbmVub19tc2cgPSAnIG9uIGxpbmUgJyArICh0aGlzLnl5bGluZW5vICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcCA9IHRoaXMuY29uc3RydWN0TGV4RXJyb3JJbmZvKFxuICAgICAgICAgICdMZXhpY2FsIGVycm9yJyArIGxpbmVub19tc2cgKyAnOiBZb3UgY2FuIG9ubHkgaW52b2tlIHJlamVjdCgpIGluIHRoZSBsZXhlciB3aGVuIHRoZSBsZXhlciBpcyBvZiB0aGUgYmFja3RyYWNraW5nIHBlcnN1YXNpb24gKG9wdGlvbnMuYmFja3RyYWNrX2xleGVyID0gdHJ1ZSkuJyxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX3NpZ25hbGVkX2Vycm9yX3Rva2VuID0gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uTGV4ZXJFcnJvcikgfHwgdGhpcy5FUlJPUjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldGFpbiBmaXJzdCBuIGNoYXJhY3RlcnMgb2YgdGhlIG1hdGNoXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBsZXNzOiBmdW5jdGlvbiBsZXhlcl9sZXNzKG4pIHtcbiAgICAgIHJldHVybiB0aGlzLnVucHV0KHRoaXMubWF0Y2guc2xpY2UobikpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gKHBhcnQgb2YgdGhlKSBhbHJlYWR5IG1hdGNoZWQgaW5wdXQsIGkuZS4gZm9yIGVycm9yXG4gICAgICogbWVzc2FnZXMuXG4gICAgICogXG4gICAgICogTGltaXQgdGhlIHJldHVybmVkIHN0cmluZyBsZW5ndGggdG8gYG1heFNpemVgIChkZWZhdWx0OiAyMCkuXG4gICAgICogXG4gICAgICogTGltaXQgdGhlIHJldHVybmVkIHN0cmluZyB0byB0aGUgYG1heExpbmVzYCBudW1iZXIgb2YgbGluZXMgb2ZcbiAgICAgKiBpbnB1dCAoZGVmYXVsdDogMSkuXG4gICAgICogXG4gICAgICogTmVnYXRpdmUgbGltaXQgdmFsdWVzIGVxdWFsICp1bmxpbWl0ZWQqLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgcGFzdElucHV0OiBmdW5jdGlvbiBsZXhlcl9wYXN0SW5wdXQobWF4U2l6ZSwgbWF4TGluZXMpIHtcbiAgICAgIHZhciBwYXN0ID0gdGhpcy5tYXRjaGVkLnN1YnN0cmluZygwLCB0aGlzLm1hdGNoZWQubGVuZ3RoIC0gdGhpcy5tYXRjaC5sZW5ndGgpO1xuXG4gICAgICBpZiAobWF4U2l6ZSA8IDApXG4gICAgICAgIG1heFNpemUgPSBwYXN0Lmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKCFtYXhTaXplKVxuICAgICAgICBtYXhTaXplID0gMjA7XG5cbiAgICAgIGlmIChtYXhMaW5lcyA8IDApXG4gICAgICAgIG1heExpbmVzID0gcGFzdC5sZW5ndGg7ICAgICAgICAgIC8vIGNhbid0IGV2ZXIgaGF2ZSBtb3JlIGlucHV0IGxpbmVzIHRoYW4gdGhpcyEgXG4gICAgICBlbHNlIGlmICghbWF4TGluZXMpXG4gICAgICAgIG1heExpbmVzID0gMTtcblxuICAgICAgLy8gYHN1YnN0cmAgYW50aWNpcGF0aW9uOiB0cmVhdCBcXHJcXG4gYXMgYSBzaW5nbGUgY2hhcmFjdGVyIGFuZCB0YWtlIGEgbGl0dGxlXG4gICAgICAvLyBtb3JlIHRoYW4gbmVjZXNzYXJ5IHNvIHRoYXQgd2UgY2FuIHN0aWxsIHByb3Blcmx5IGNoZWNrIGFnYWluc3QgbWF4U2l6ZVxuICAgICAgLy8gYWZ0ZXIgd2UndmUgdHJhbnNmb3JtZWQgYW5kIGxpbWl0ZWQgdGhlIG5ld0xpbmVzIGluIGhlcmU6XG4gICAgICBwYXN0ID0gcGFzdC5zdWJzdHIoLW1heFNpemUgKiAyIC0gMik7XG5cbiAgICAgIC8vIG5vdyB0aGF0IHdlIGhhdmUgYSBzaWduaWZpY2FudGx5IHJlZHVjZWQgc3RyaW5nIHRvIHByb2Nlc3MsIHRyYW5zZm9ybSB0aGUgbmV3bGluZXNcbiAgICAgIC8vIGFuZCBjaG9wIHRoZW0sIHRoZW4gbGltaXQgdGhlbTpcbiAgICAgIHZhciBhID0gcGFzdC5yZXBsYWNlKC9cXHJcXG58XFxyL2csICdcXG4nKS5zcGxpdCgnXFxuJyk7XG5cbiAgICAgIGEgPSBhLnNsaWNlKC1tYXhMaW5lcyk7XG4gICAgICBwYXN0ID0gYS5qb2luKCdcXG4nKTtcblxuICAgICAgLy8gV2hlbiwgYWZ0ZXIgbGltaXRpbmcgdG8gbWF4TGluZXMsIHdlIHN0aWxsIGhhdmUgdG9vIG11Y2ggdG8gcmV0dXJuLFxuICAgICAgLy8gZG8gYWRkIGFuIGVsbGlwc2lzIHByZWZpeC4uLlxuICAgICAgaWYgKHBhc3QubGVuZ3RoID4gbWF4U2l6ZSkge1xuICAgICAgICBwYXN0ID0gJy4uLicgKyBwYXN0LnN1YnN0cigtbWF4U2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gKHBhcnQgb2YgdGhlKSB1cGNvbWluZyBpbnB1dCwgaS5lLiBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gICAgICogXG4gICAgICogTGltaXQgdGhlIHJldHVybmVkIHN0cmluZyBsZW5ndGggdG8gYG1heFNpemVgIChkZWZhdWx0OiAyMCkuXG4gICAgICogXG4gICAgICogTGltaXQgdGhlIHJldHVybmVkIHN0cmluZyB0byB0aGUgYG1heExpbmVzYCBudW1iZXIgb2YgbGluZXMgb2YgaW5wdXQgKGRlZmF1bHQ6IDEpLlxuICAgICAqIFxuICAgICAqIE5lZ2F0aXZlIGxpbWl0IHZhbHVlcyBlcXVhbCAqdW5saW1pdGVkKi5cbiAgICAgKlxuICAgICAqID4gIyMjIE5PVEUgIyMjXG4gICAgICogPlxuICAgICAqID4gKlwidXBjb21pbmcgaW5wdXRcIiogaXMgZGVmaW5lZCBhcyB0aGUgd2hvbGUgb2YgdGhlIGJvdGhcbiAgICAgKiA+IHRoZSAqY3VycmVudGx5IGxleGVkKiBpbnB1dCwgdG9nZXRoZXIgd2l0aCBhbnkgcmVtYWluaW5nIGlucHV0XG4gICAgICogPiBmb2xsb3dpbmcgdGhhdC4gKlwiY3VycmVudGx5IGxleGVkXCIqIGlucHV0IGlzIHRoZSBpbnB1dCBcbiAgICAgKiA+IGFscmVhZHkgcmVjb2duaXplZCBieSB0aGUgbGV4ZXIgYnV0IG5vdCB5ZXQgcmV0dXJuZWQgd2l0aFxuICAgICAqID4gdGhlIGxleGVyIHRva2VuLiBUaGlzIGhhcHBlbnMgd2hlbiB5b3UgYXJlIGludm9raW5nIHRoaXMgQVBJXG4gICAgICogPiBmcm9tIGluc2lkZSBhbnkgbGV4ZXIgcnVsZSBhY3Rpb24gY29kZSBibG9jay4gXG4gICAgICogPlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgdXBjb21pbmdJbnB1dDogZnVuY3Rpb24gbGV4ZXJfdXBjb21pbmdJbnB1dChtYXhTaXplLCBtYXhMaW5lcykge1xuICAgICAgdmFyIG5leHQgPSB0aGlzLm1hdGNoO1xuXG4gICAgICBpZiAobWF4U2l6ZSA8IDApXG4gICAgICAgIG1heFNpemUgPSBuZXh0Lmxlbmd0aCArIHRoaXMuX2lucHV0Lmxlbmd0aDtcbiAgICAgIGVsc2UgaWYgKCFtYXhTaXplKVxuICAgICAgICBtYXhTaXplID0gMjA7XG5cbiAgICAgIGlmIChtYXhMaW5lcyA8IDApXG4gICAgICAgIG1heExpbmVzID0gbWF4U2l6ZTsgICAgICAgICAgLy8gY2FuJ3QgZXZlciBoYXZlIG1vcmUgaW5wdXQgbGluZXMgdGhhbiB0aGlzISBcbiAgICAgIGVsc2UgaWYgKCFtYXhMaW5lcylcbiAgICAgICAgbWF4TGluZXMgPSAxO1xuXG4gICAgICAvLyBgc3Vic3RyaW5nYCBhbnRpY2lwYXRpb246IHRyZWF0IFxcclxcbiBhcyBhIHNpbmdsZSBjaGFyYWN0ZXIgYW5kIHRha2UgYSBsaXR0bGVcbiAgICAgIC8vIG1vcmUgdGhhbiBuZWNlc3Nhcnkgc28gdGhhdCB3ZSBjYW4gc3RpbGwgcHJvcGVybHkgY2hlY2sgYWdhaW5zdCBtYXhTaXplXG4gICAgICAvLyBhZnRlciB3ZSd2ZSB0cmFuc2Zvcm1lZCBhbmQgbGltaXRlZCB0aGUgbmV3TGluZXMgaW4gaGVyZTpcbiAgICAgIGlmIChuZXh0Lmxlbmd0aCA8IG1heFNpemUgKiAyICsgMikge1xuICAgICAgICBuZXh0ICs9IHRoaXMuX2lucHV0LnN1YnN0cmluZygwLCBtYXhTaXplICogMiArIDIpOyAgIC8vIHN1YnN0cmluZyBpcyBmYXN0ZXIgb24gQ2hyb21lL1Y4IFxuICAgICAgfVxuXG4gICAgICAvLyBub3cgdGhhdCB3ZSBoYXZlIGEgc2lnbmlmaWNhbnRseSByZWR1Y2VkIHN0cmluZyB0byBwcm9jZXNzLCB0cmFuc2Zvcm0gdGhlIG5ld2xpbmVzXG4gICAgICAvLyBhbmQgY2hvcCB0aGVtLCB0aGVuIGxpbWl0IHRoZW06XG4gICAgICB2YXIgYSA9IG5leHQucmVwbGFjZSgvXFxyXFxufFxcci9nLCAnXFxuJykuc3BsaXQoJ1xcbicpO1xuXG4gICAgICBhID0gYS5zbGljZSgwLCBtYXhMaW5lcyk7XG4gICAgICBuZXh0ID0gYS5qb2luKCdcXG4nKTtcblxuICAgICAgLy8gV2hlbiwgYWZ0ZXIgbGltaXRpbmcgdG8gbWF4TGluZXMsIHdlIHN0aWxsIGhhdmUgdG9vIG11Y2ggdG8gcmV0dXJuLFxuICAgICAgLy8gZG8gYWRkIGFuIGVsbGlwc2lzIHBvc3RmaXguLi5cbiAgICAgIGlmIChuZXh0Lmxlbmd0aCA+IG1heFNpemUpIHtcbiAgICAgICAgbmV4dCA9IG5leHQuc3Vic3RyaW5nKDAsIG1heFNpemUpICsgJy4uLic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gYSBzdHJpbmcgd2hpY2ggZGlzcGxheXMgdGhlIGNoYXJhY3RlciBwb3NpdGlvbiB3aGVyZSB0aGVcbiAgICAgKiBsZXhpbmcgZXJyb3Igb2NjdXJyZWQsIGkuZS4gZm9yIGVycm9yIG1lc3NhZ2VzXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBzaG93UG9zaXRpb246IGZ1bmN0aW9uIGxleGVyX3Nob3dQb3NpdGlvbihtYXhQcmVmaXgsIG1heFBvc3RmaXgpIHtcbiAgICAgIHZhciBwcmUgPSB0aGlzLnBhc3RJbnB1dChtYXhQcmVmaXgpLnJlcGxhY2UoL1xccy9nLCAnICcpO1xuICAgICAgdmFyIGMgPSBuZXcgQXJyYXkocHJlLmxlbmd0aCArIDEpLmpvaW4oJy0nKTtcbiAgICAgIHJldHVybiBwcmUgKyB0aGlzLnVwY29taW5nSW5wdXQobWF4UG9zdGZpeCkucmVwbGFjZSgvXFxzL2csICcgJykgKyAnXFxuJyArIGMgKyAnXic7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiBhbiBZWUxMT0MgaW5mbyBvYmplY3QgZGVyaXZlZCBvZmYgdGhlIGdpdmVuIGNvbnRleHQgKGFjdHVhbCwgcHJlY2VkaW5nLCBmb2xsb3dpbmcsIGN1cnJlbnQpLlxuICAgICAqIFVzZSB0aGlzIG1ldGhvZCB3aGVuIHRoZSBnaXZlbiBgYWN0dWFsYCBsb2NhdGlvbiBpcyBub3QgZ3VhcmFudGVlZCB0byBleGlzdCAoaS5lLiB3aGVuXG4gICAgICogaXQgTUFZIGJlIE5VTEwpIGFuZCB5b3UgTVVTVCBoYXZlIGEgdmFsaWQgbG9jYXRpb24gaW5mbyBvYmplY3QgYW55d2F5OlxuICAgICAqIHRoZW4gd2UgdGFrZSB0aGUgZ2l2ZW4gY29udGV4dCBvZiB0aGUgYHByZWNlZGluZ2AgYW5kIGBmb2xsb3dpbmdgIGxvY2F0aW9ucywgSUZGIHRob3NlIGFyZSBhdmFpbGFibGUsXG4gICAgICogYW5kIHJlY29uc3RydWN0IHRoZSBgYWN0dWFsYCBsb2NhdGlvbiBpbmZvIGZyb20gdGhvc2UuXG4gICAgICogSWYgdGhpcyBmYWlscywgdGhlIGhldXJpc3RpYyBpcyB0byB0YWtlIHRoZSBgY3VycmVudGAgbG9jYXRpb24sIElGRiBhdmFpbGFibGUuXG4gICAgICogSWYgdGhpcyBmYWlscyBhcyB3ZWxsLCB3ZSBhc3N1bWUgdGhlIHNvdWdodCBsb2NhdGlvbiBpcyBhdC9hcm91bmQgdGhlIGN1cnJlbnQgbGV4ZXIgcG9zaXRpb25cbiAgICAgKiBhbmQgdGhlbiBwcm9kdWNlIHRoYXQgb25lIGFzIGEgcmVzcG9uc2UuIERPIE5PVEUgdGhhdCB0aGVzZSBoZXVyaXN0aWMvZGVyaXZlZCBsb2NhdGlvbiBpbmZvXG4gICAgICogdmFsdWVzIE1BWSBiZSBpbmFjY3VyYXRlIVxuICAgICAqXG4gICAgICogTk9URTogYGRlcml2ZUxvY2F0aW9uSW5mbygpYCBBTFdBWVMgcHJvZHVjZXMgYSBsb2NhdGlvbiBpbmZvIG9iamVjdCAqY29weSogb2YgYGFjdHVhbGAsIG5vdCBqdXN0XG4gICAgICogYSAqcmVmZXJlbmNlKiBoZW5jZSBhbGwgaW5wdXQgbG9jYXRpb24gb2JqZWN0cyBjYW4gYmUgYXNzdW1lZCB0byBiZSAnY29uc3RhbnQnIChmdW5jdGlvbiBoYXMgbm8gc2lkZS1lZmZlY3RzKS5cbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIGRlcml2ZUxvY2F0aW9uSW5mbzogZnVuY3Rpb24gbGV4ZXJfZGVyaXZlWVlMTE9DKGFjdHVhbCwgcHJlY2VkaW5nLCBmb2xsb3dpbmcsIGN1cnJlbnQpIHtcbiAgICAgIHZhciBsb2MgPSB7XG4gICAgICAgIGZpcnN0X2xpbmU6IDEsXG4gICAgICAgIGZpcnN0X2NvbHVtbjogMCxcbiAgICAgICAgbGFzdF9saW5lOiAxLFxuICAgICAgICBsYXN0X2NvbHVtbjogMCxcbiAgICAgICAgcmFuZ2U6IFswLCAwXVxuICAgICAgfTtcblxuICAgICAgaWYgKGFjdHVhbCkge1xuICAgICAgICBsb2MuZmlyc3RfbGluZSA9IGFjdHVhbC5maXJzdF9saW5lIHwgMDtcbiAgICAgICAgbG9jLmxhc3RfbGluZSA9IGFjdHVhbC5sYXN0X2xpbmUgfCAwO1xuICAgICAgICBsb2MuZmlyc3RfY29sdW1uID0gYWN0dWFsLmZpcnN0X2NvbHVtbiB8IDA7XG4gICAgICAgIGxvYy5sYXN0X2NvbHVtbiA9IGFjdHVhbC5sYXN0X2NvbHVtbiB8IDA7XG5cbiAgICAgICAgaWYgKGFjdHVhbC5yYW5nZSkge1xuICAgICAgICAgIGxvYy5yYW5nZVswXSA9IGFjdHVhbC5yYW5nZVswXSB8IDA7XG4gICAgICAgICAgbG9jLnJhbmdlWzFdID0gYWN0dWFsLnJhbmdlWzFdIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobG9jLmZpcnN0X2xpbmUgPD0gMCB8fCBsb2MubGFzdF9saW5lIDwgbG9jLmZpcnN0X2xpbmUpIHtcbiAgICAgICAgLy8gcGxhbiBCOiBoZXVyaXN0aWMgdXNpbmcgcHJlY2VkaW5nIGFuZCBmb2xsb3dpbmc6XG4gICAgICAgIGlmIChsb2MuZmlyc3RfbGluZSA8PSAwICYmIHByZWNlZGluZykge1xuICAgICAgICAgIGxvYy5maXJzdF9saW5lID0gcHJlY2VkaW5nLmxhc3RfbGluZSB8IDA7XG4gICAgICAgICAgbG9jLmZpcnN0X2NvbHVtbiA9IHByZWNlZGluZy5sYXN0X2NvbHVtbiB8IDA7XG5cbiAgICAgICAgICBpZiAocHJlY2VkaW5nLnJhbmdlKSB7XG4gICAgICAgICAgICBsb2MucmFuZ2VbMF0gPSBhY3R1YWwucmFuZ2VbMV0gfCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgobG9jLmxhc3RfbGluZSA8PSAwIHx8IGxvYy5sYXN0X2xpbmUgPCBsb2MuZmlyc3RfbGluZSkgJiYgZm9sbG93aW5nKSB7XG4gICAgICAgICAgbG9jLmxhc3RfbGluZSA9IGZvbGxvd2luZy5maXJzdF9saW5lIHwgMDtcbiAgICAgICAgICBsb2MubGFzdF9jb2x1bW4gPSBmb2xsb3dpbmcuZmlyc3RfY29sdW1uIHwgMDtcblxuICAgICAgICAgIGlmIChmb2xsb3dpbmcucmFuZ2UpIHtcbiAgICAgICAgICAgIGxvYy5yYW5nZVsxXSA9IGFjdHVhbC5yYW5nZVswXSB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGxhbiBDPzogc2VlIGlmIHRoZSAnY3VycmVudCcgbG9jYXRpb24gaXMgdXNlZnVsL3NhbmUgdG9vOlxuICAgICAgICBpZiAobG9jLmZpcnN0X2xpbmUgPD0gMCAmJiBjdXJyZW50ICYmIChsb2MubGFzdF9saW5lIDw9IDAgfHwgY3VycmVudC5sYXN0X2xpbmUgPD0gbG9jLmxhc3RfbGluZSkpIHtcbiAgICAgICAgICBsb2MuZmlyc3RfbGluZSA9IGN1cnJlbnQuZmlyc3RfbGluZSB8IDA7XG4gICAgICAgICAgbG9jLmZpcnN0X2NvbHVtbiA9IGN1cnJlbnQuZmlyc3RfY29sdW1uIHwgMDtcblxuICAgICAgICAgIGlmIChjdXJyZW50LnJhbmdlKSB7XG4gICAgICAgICAgICBsb2MucmFuZ2VbMF0gPSBjdXJyZW50LnJhbmdlWzBdIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobG9jLmxhc3RfbGluZSA8PSAwICYmIGN1cnJlbnQgJiYgKGxvYy5maXJzdF9saW5lIDw9IDAgfHwgY3VycmVudC5maXJzdF9saW5lID49IGxvYy5maXJzdF9saW5lKSkge1xuICAgICAgICAgIGxvYy5sYXN0X2xpbmUgPSBjdXJyZW50Lmxhc3RfbGluZSB8IDA7XG4gICAgICAgICAgbG9jLmxhc3RfY29sdW1uID0gY3VycmVudC5sYXN0X2NvbHVtbiB8IDA7XG5cbiAgICAgICAgICBpZiAoY3VycmVudC5yYW5nZSkge1xuICAgICAgICAgICAgbG9jLnJhbmdlWzFdID0gY3VycmVudC5yYW5nZVsxXSB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHNhbml0aXplOiBmaXggbGFzdF9saW5lIEJFRk9SRSB3ZSBmaXggZmlyc3RfbGluZSBhcyB3ZSB1c2UgdGhlICdyYXcnIHZhbHVlIG9mIHRoZSBsYXR0ZXJcbiAgICAgIC8vIG9yIHBsYW4gRCBoZXVyaXN0aWNzIHRvIHByb2R1Y2UgYSAnc2Vuc2libGUnIGxhc3RfbGluZSB2YWx1ZTpcbiAgICAgIGlmIChsb2MubGFzdF9saW5lIDw9IDApIHtcbiAgICAgICAgaWYgKGxvYy5maXJzdF9saW5lIDw9IDApIHtcbiAgICAgICAgICBsb2MuZmlyc3RfbGluZSA9IHRoaXMueXlsbG9jLmZpcnN0X2xpbmU7XG4gICAgICAgICAgbG9jLmxhc3RfbGluZSA9IHRoaXMueXlsbG9jLmxhc3RfbGluZTtcbiAgICAgICAgICBsb2MuZmlyc3RfY29sdW1uID0gdGhpcy55eWxsb2MuZmlyc3RfY29sdW1uO1xuICAgICAgICAgIGxvYy5sYXN0X2NvbHVtbiA9IHRoaXMueXlsbG9jLmxhc3RfY29sdW1uO1xuICAgICAgICAgIGxvYy5yYW5nZVswXSA9IHRoaXMueXlsbG9jLnJhbmdlWzBdO1xuICAgICAgICAgIGxvYy5yYW5nZVsxXSA9IHRoaXMueXlsbG9jLnJhbmdlWzFdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvYy5sYXN0X2xpbmUgPSB0aGlzLnl5bGxvYy5sYXN0X2xpbmU7XG4gICAgICAgICAgbG9jLmxhc3RfY29sdW1uID0gdGhpcy55eWxsb2MubGFzdF9jb2x1bW47XG4gICAgICAgICAgbG9jLnJhbmdlWzFdID0gdGhpcy55eWxsb2MucmFuZ2VbMV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGxvYy5maXJzdF9saW5lIDw9IDApIHtcbiAgICAgICAgbG9jLmZpcnN0X2xpbmUgPSBsb2MubGFzdF9saW5lO1xuICAgICAgICBsb2MuZmlyc3RfY29sdW1uID0gMDsgIC8vIGxvYy5sYXN0X2NvbHVtbjsgXG4gICAgICAgIGxvYy5yYW5nZVsxXSA9IGxvYy5yYW5nZVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxvYy5maXJzdF9jb2x1bW4gPCAwKSB7XG4gICAgICAgIGxvYy5maXJzdF9jb2x1bW4gPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAobG9jLmxhc3RfY29sdW1uIDwgMCkge1xuICAgICAgICBsb2MubGFzdF9jb2x1bW4gPSAobG9jLmZpcnN0X2NvbHVtbiA+IDAgPyBsb2MuZmlyc3RfY29sdW1uIDogODApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbG9jO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gYSBzdHJpbmcgd2hpY2ggZGlzcGxheXMgdGhlIGxpbmVzICYgY29sdW1ucyBvZiBpbnB1dCB3aGljaCBhcmUgcmVmZXJlbmNlZCBcbiAgICAgKiBieSB0aGUgZ2l2ZW4gbG9jYXRpb24gaW5mbyByYW5nZSwgcGx1cyBhIGZldyBsaW5lcyBvZiBjb250ZXh0LlxuICAgICAqIFxuICAgICAqIFRoaXMgZnVuY3Rpb24gcHJldHR5LXByaW50cyB0aGUgaW5kaWNhdGVkIHNlY3Rpb24gb2YgdGhlIGlucHV0LCB3aXRoIGxpbmUgbnVtYmVycyBcbiAgICAgKiBhbmQgZXZlcnl0aGluZyFcbiAgICAgKiBcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHZlcnkgdXNlZnVsIHRvIHByb3ZpZGUgaGlnaGx5IHJlYWRhYmxlIGVycm9yIHJlcG9ydHMsIHdoaWxlXG4gICAgICogdGhlIGxvY2F0aW9uIHJhbmdlIG1heSBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyBmbGV4aWJsZSB3YXlzOlxuICAgICAqIFxuICAgICAqIC0gYGxvY2AgaXMgdGhlIGxvY2F0aW9uIGluZm8gb2JqZWN0IHdoaWNoIHJlZmVyZW5jZXMgdGhlIGFyZWEgd2hpY2ggc2hvdWxkIGJlXG4gICAgICogICBkaXNwbGF5ZWQgYW5kICdtYXJrZWQgdXAnOiB0aGVzZSBsaW5lcyAmIGNvbHVtbnMgb2YgdGV4dCBhcmUgbWFya2VkIHVwIGJ5IGBeYFxuICAgICAqICAgY2hhcmFjdGVycyBiZWxvdyBlYWNoIGNoYXJhY3RlciBpbiB0aGUgZW50aXJlIGlucHV0IHJhbmdlLlxuICAgICAqIFxuICAgICAqIC0gYGNvbnRleHRfbG9jYCBpcyB0aGUgKm9wdGlvbmFsKiBsb2NhdGlvbiBpbmZvIG9iamVjdCB3aGljaCBpbnN0cnVjdHMgdGhpc1xuICAgICAqICAgcHJldHR5LXByaW50ZXIgaG93IG11Y2ggKmxlYWRpbmcqIGNvbnRleHQgc2hvdWxkIGJlIGRpc3BsYXllZCBhbG9uZ3NpZGVcbiAgICAgKiAgIHRoZSBhcmVhIHJlZmVyZW5jZWQgYnkgYGxvY2AuIFRoaXMgY2FuIGhlbHAgcHJvdmlkZSBjb250ZXh0IGZvciB0aGUgZGlzcGxheWVkXG4gICAgICogICBlcnJvciwgZXRjLlxuICAgICAqIFxuICAgICAqICAgV2hlbiB0aGlzIGxvY2F0aW9uIGluZm8gaXMgbm90IHByb3ZpZGVkLCBhIGRlZmF1bHQgY29udGV4dCBvZiAzIGxpbmVzIGlzXG4gICAgICogICB1c2VkLlxuICAgICAqIFxuICAgICAqIC0gYGNvbnRleHRfbG9jMmAgaXMgYW5vdGhlciAqb3B0aW9uYWwqIGxvY2F0aW9uIGluZm8gb2JqZWN0LCB3aGljaCBzZXJ2ZXNcbiAgICAgKiAgIGEgc2ltaWxhciBwdXJwb3NlIHRvIGBjb250ZXh0X2xvY2A6IGl0IHNwZWNpZmllcyB0aGUgYW1vdW50IG9mICp0cmFpbGluZypcbiAgICAgKiAgIGNvbnRleHQgbGluZXMgdG8gZGlzcGxheSBpbiB0aGUgcHJldHR5LXByaW50IG91dHB1dC5cbiAgICAgKiBcbiAgICAgKiAgIFdoZW4gdGhpcyBsb2NhdGlvbiBpbmZvIGlzIG5vdCBwcm92aWRlZCwgYSBkZWZhdWx0IGNvbnRleHQgb2YgMSBsaW5lIG9ubHkgaXNcbiAgICAgKiAgIHVzZWQuXG4gICAgICogXG4gICAgICogU3BlY2lhbCBOb3RlczpcbiAgICAgKiBcbiAgICAgKiAtIHdoZW4gdGhlIGBsb2NgLWluZGljYXRlZCByYW5nZSBpcyB2ZXJ5IGxhcmdlIChhYm91dCA1IGxpbmVzIG9yIG1vcmUpLCB0aGVuXG4gICAgICogICBvbmx5IHRoZSBmaXJzdCBhbmQgbGFzdCBmZXcgbGluZXMgb2YgdGhpcyBibG9jayBhcmUgcHJpbnRlZCB3aGlsZSBhXG4gICAgICogICBgLi4uY29udGludWVkLi4uYCBtZXNzYWdlIHdpbGwgYmUgcHJpbnRlZCBiZXR3ZWVuIHRoZW0uXG4gICAgICogXG4gICAgICogICBUaGlzIHNlcnZlcyB0aGUgcHVycG9zZSBvZiBub3QgcHJpbnRpbmcgYSBodWdlIGFtb3VudCBvZiB0ZXh0IHdoZW4gdGhlIGBsb2NgXG4gICAgICogICByYW5nZSBoYXBwZW5zIHRvIGJlIGh1Z2U6IHRoaXMgd2F5IGEgbWFuYWdlYWJsZSAmIHJlYWRhYmxlIG91dHB1dCByZXN1bHRzXG4gICAgICogICBmb3IgYXJiaXRyYXJ5IGxhcmdlIHJhbmdlcy5cbiAgICAgKiBcbiAgICAgKiAtIHRoaXMgZnVuY3Rpb24gY2FuIGRpc3BsYXkgbGluZXMgb2YgaW5wdXQgd2hpY2ggd2hhdmUgbm90IHlldCBiZWVuIGxleGVkLlxuICAgICAqICAgYHByZXR0eVByaW50UmFuZ2UoKWAgY2FuIGFjY2VzcyB0aGUgZW50aXJlIGlucHV0IVxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgcHJldHR5UHJpbnRSYW5nZTogZnVuY3Rpb24gbGV4ZXJfcHJldHR5UHJpbnRSYW5nZShsb2MsIGNvbnRleHRfbG9jLCBjb250ZXh0X2xvYzIpIHtcbiAgICAgIGxvYyA9IHRoaXMuZGVyaXZlTG9jYXRpb25JbmZvKGxvYywgY29udGV4dF9sb2MsIGNvbnRleHRfbG9jMik7XG4gICAgICBjb25zdCBDT05URVhUID0gMztcbiAgICAgIGNvbnN0IENPTlRFWFRfVEFJTCA9IDE7XG4gICAgICBjb25zdCBNSU5JTVVNX1ZJU0lCTEVfTk9ORU1QVFlfTElORV9DT1VOVCA9IDI7XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLm1hdGNoZWQgKyB0aGlzLl9pbnB1dDtcbiAgICAgIHZhciBsaW5lcyA9IGlucHV0LnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBsMCA9IE1hdGgubWF4KDEsIChjb250ZXh0X2xvYyA/IGNvbnRleHRfbG9jLmZpcnN0X2xpbmUgOiBsb2MuZmlyc3RfbGluZSAtIENPTlRFWFQpKTtcbiAgICAgIHZhciBsMSA9IE1hdGgubWF4KDEsIChjb250ZXh0X2xvYzIgPyBjb250ZXh0X2xvYzIubGFzdF9saW5lIDogbG9jLmxhc3RfbGluZSArIENPTlRFWFRfVEFJTCkpO1xuICAgICAgdmFyIGxpbmVub19kaXNwbGF5X3dpZHRoID0gMSArIE1hdGgubG9nMTAobDEgfCAxKSB8IDA7XG4gICAgICB2YXIgd3NfcHJlZml4ID0gbmV3IEFycmF5KGxpbmVub19kaXNwbGF5X3dpZHRoKS5qb2luKCcgJyk7XG4gICAgICB2YXIgbm9uZW1wdHlfbGluZV9pbmRleGVzID0gW107XG5cbiAgICAgIHZhciBydiA9IGxpbmVzLnNsaWNlKGwwIC0gMSwgbDEgKyAxKS5tYXAoZnVuY3Rpb24gaW5qZWN0TGluZU51bWJlcihsaW5lLCBpbmRleCkge1xuICAgICAgICB2YXIgbG5vID0gaW5kZXggKyBsMDtcbiAgICAgICAgdmFyIGxub19wZnggPSAod3NfcHJlZml4ICsgbG5vKS5zdWJzdHIoLWxpbmVub19kaXNwbGF5X3dpZHRoKTtcbiAgICAgICAgdmFyIHJ2ID0gbG5vX3BmeCArICc6ICcgKyBsaW5lO1xuICAgICAgICB2YXIgZXJycGZ4ID0gbmV3IEFycmF5KGxpbmVub19kaXNwbGF5X3dpZHRoICsgMSkuam9pbignXicpO1xuICAgICAgICB2YXIgb2Zmc2V0ID0gMiArIDE7XG4gICAgICAgIHZhciBsZW4gPSAwO1xuXG4gICAgICAgIGlmIChsbm8gPT09IGxvYy5maXJzdF9saW5lKSB7XG4gICAgICAgICAgb2Zmc2V0ICs9IGxvYy5maXJzdF9jb2x1bW47XG5cbiAgICAgICAgICBsZW4gPSBNYXRoLm1heChcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAoKGxubyA9PT0gbG9jLmxhc3RfbGluZSA/IGxvYy5sYXN0X2NvbHVtbiA6IGxpbmUubGVuZ3RoKSkgLSBsb2MuZmlyc3RfY29sdW1uICsgMVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAobG5vID09PSBsb2MubGFzdF9saW5lKSB7XG4gICAgICAgICAgbGVuID0gTWF0aC5tYXgoMiwgbG9jLmxhc3RfY29sdW1uICsgMSk7XG4gICAgICAgIH0gZWxzZSBpZiAobG5vID4gbG9jLmZpcnN0X2xpbmUgJiYgbG5vIDwgbG9jLmxhc3RfbGluZSkge1xuICAgICAgICAgIGxlbiA9IE1hdGgubWF4KDIsIGxpbmUubGVuZ3RoICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgdmFyIGxlYWQgPSBuZXcgQXJyYXkob2Zmc2V0KS5qb2luKCcuJyk7XG4gICAgICAgICAgdmFyIG1hcmsgPSBuZXcgQXJyYXkobGVuKS5qb2luKCdeJyk7XG4gICAgICAgICAgcnYgKz0gJ1xcbicgKyBlcnJwZnggKyBsZWFkICsgbWFyaztcblxuICAgICAgICAgIGlmIChsaW5lLnRyaW0oKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBub25lbXB0eV9saW5lX2luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnYgPSBydi5yZXBsYWNlKC9cXHQvZywgJyAnKTtcbiAgICAgICAgcmV0dXJuIHJ2O1xuICAgICAgfSk7XG5cbiAgICAgIC8vIG5vdyBtYWtlIHN1cmUgd2UgZG9uJ3QgcHJpbnQgYW4gb3Zlcmx5IGxhcmdlIGFtb3VudCBvZiBlcnJvciBhcmVhOiBsaW1pdCBpdCBcbiAgICAgIC8vIHRvIHRoZSB0b3AgYW5kIGJvdHRvbSBsaW5lIGNvdW50OlxuICAgICAgaWYgKG5vbmVtcHR5X2xpbmVfaW5kZXhlcy5sZW5ndGggPiAyICogTUlOSU1VTV9WSVNJQkxFX05PTkVNUFRZX0xJTkVfQ09VTlQpIHtcbiAgICAgICAgdmFyIGNsaXBfc3RhcnQgPSBub25lbXB0eV9saW5lX2luZGV4ZXNbTUlOSU1VTV9WSVNJQkxFX05PTkVNUFRZX0xJTkVfQ09VTlQgLSAxXSArIDE7XG4gICAgICAgIHZhciBjbGlwX2VuZCA9IG5vbmVtcHR5X2xpbmVfaW5kZXhlc1tub25lbXB0eV9saW5lX2luZGV4ZXMubGVuZ3RoIC0gTUlOSU1VTV9WSVNJQkxFX05PTkVNUFRZX0xJTkVfQ09VTlRdIC0gMTtcbiAgICAgICAgdmFyIGludGVybWVkaWF0ZV9saW5lID0gbmV3IEFycmF5KGxpbmVub19kaXNwbGF5X3dpZHRoICsgMSkuam9pbignICcpICsgJyAgKC4uLmNvbnRpbnVlZC4uLiknO1xuICAgICAgICBpbnRlcm1lZGlhdGVfbGluZSArPSAnXFxuJyArIG5ldyBBcnJheShsaW5lbm9fZGlzcGxheV93aWR0aCArIDEpLmpvaW4oJy0nKSArICcgICgtLS0tLS0tLS0tLS0tLS0pJztcbiAgICAgICAgcnYuc3BsaWNlKGNsaXBfc3RhcnQsIGNsaXBfZW5kIC0gY2xpcF9zdGFydCArIDEsIGludGVybWVkaWF0ZV9saW5lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJ2LmpvaW4oJ1xcbicpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBoZWxwZXIgZnVuY3Rpb24sIHVzZWQgdG8gcHJvZHVjZSBhIGh1bWFuIHJlYWRhYmxlIGRlc2NyaXB0aW9uIGFzIGEgc3RyaW5nLCBnaXZlblxuICAgICAqIHRoZSBpbnB1dCBgeXlsbG9jYCBsb2NhdGlvbiBvYmplY3QuXG4gICAgICogXG4gICAgICogU2V0IGBkaXNwbGF5X3JhbmdlX3Rvb2AgdG8gVFJVRSB0byBpbmNsdWRlIHRoZSBzdHJpbmcgY2hhcmFjdGVyIGluZGV4IHBvc2l0aW9uKHMpXG4gICAgICogaW4gdGhlIGRlc2NyaXB0aW9uIGlmIHRoZSBgeXlsbG9jLnJhbmdlYCBpcyBhdmFpbGFibGUuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBkZXNjcmliZVlZTExPQzogZnVuY3Rpb24gbGV4ZXJfZGVzY3JpYmVfeXlsbG9jKHl5bGxvYywgZGlzcGxheV9yYW5nZV90b28pIHtcbiAgICAgIHZhciBsMSA9IHl5bGxvYy5maXJzdF9saW5lO1xuICAgICAgdmFyIGwyID0geXlsbG9jLmxhc3RfbGluZTtcbiAgICAgIHZhciBjMSA9IHl5bGxvYy5maXJzdF9jb2x1bW47XG4gICAgICB2YXIgYzIgPSB5eWxsb2MubGFzdF9jb2x1bW47XG4gICAgICB2YXIgZGwgPSBsMiAtIGwxO1xuICAgICAgdmFyIGRjID0gYzIgLSBjMTtcbiAgICAgIHZhciBydjtcblxuICAgICAgaWYgKGRsID09PSAwKSB7XG4gICAgICAgIHJ2ID0gJ2xpbmUgJyArIGwxICsgJywgJztcblxuICAgICAgICBpZiAoZGMgPD0gMSkge1xuICAgICAgICAgIHJ2ICs9ICdjb2x1bW4gJyArIGMxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJ2ICs9ICdjb2x1bW5zICcgKyBjMSArICcgLi4gJyArIGMyO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydiA9ICdsaW5lcyAnICsgbDEgKyAnKGNvbHVtbiAnICsgYzEgKyAnKSAuLiAnICsgbDIgKyAnKGNvbHVtbiAnICsgYzIgKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIGlmICh5eWxsb2MucmFuZ2UgJiYgZGlzcGxheV9yYW5nZV90b28pIHtcbiAgICAgICAgdmFyIHIxID0geXlsbG9jLnJhbmdlWzBdO1xuICAgICAgICB2YXIgcjIgPSB5eWxsb2MucmFuZ2VbMV0gLSAxO1xuXG4gICAgICAgIGlmIChyMiA8PSByMSkge1xuICAgICAgICAgIHJ2ICs9ICcge1N0cmluZyBPZmZzZXQ6ICcgKyByMSArICd9JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBydiArPSAnIHtTdHJpbmcgT2Zmc2V0IHJhbmdlOiAnICsgcjEgKyAnIC4uICcgKyByMiArICd9JztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcnY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRlc3QgdGhlIGxleGVkIHRva2VuOiByZXR1cm4gRkFMU0Ugd2hlbiBub3QgYSBtYXRjaCwgb3RoZXJ3aXNlIHJldHVybiB0b2tlbi5cbiAgICAgKiBcbiAgICAgKiBgbWF0Y2hgIGlzIHN1cHBvc2VkIHRvIGJlIGFuIGFycmF5IGNvbWluZyBvdXQgb2YgYSByZWdleCBtYXRjaCwgaS5lLiBgbWF0Y2hbMF1gXG4gICAgICogY29udGFpbnMgdGhlIGFjdHVhbGx5IG1hdGNoZWQgdGV4dCBzdHJpbmcuXG4gICAgICogXG4gICAgICogQWxzbyBtb3ZlIHRoZSBpbnB1dCBjdXJzb3IgZm9yd2FyZCBhbmQgdXBkYXRlIHRoZSBtYXRjaCBjb2xsZWN0b3JzOlxuICAgICAqIFxuICAgICAqIC0gYHl5dGV4dGBcbiAgICAgKiAtIGB5eWxlbmdgXG4gICAgICogLSBgbWF0Y2hgXG4gICAgICogLSBgbWF0Y2hlc2BcbiAgICAgKiAtIGB5eWxsb2NgXG4gICAgICogLSBgb2Zmc2V0YFxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgdGVzdF9tYXRjaDogZnVuY3Rpb24gbGV4ZXJfdGVzdF9tYXRjaChtYXRjaCwgaW5kZXhlZF9ydWxlKSB7XG4gICAgICB2YXIgdG9rZW4sIGxpbmVzLCBiYWNrdXAsIG1hdGNoX3N0ciwgbWF0Y2hfc3RyX2xlbjtcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrdHJhY2tfbGV4ZXIpIHtcbiAgICAgICAgLy8gc2F2ZSBjb250ZXh0XG4gICAgICAgIGJhY2t1cCA9IHtcbiAgICAgICAgICB5eWxpbmVubzogdGhpcy55eWxpbmVubyxcblxuICAgICAgICAgIHl5bGxvYzoge1xuICAgICAgICAgICAgZmlyc3RfbGluZTogdGhpcy55eWxsb2MuZmlyc3RfbGluZSxcbiAgICAgICAgICAgIGxhc3RfbGluZTogdGhpcy55eWxsb2MubGFzdF9saW5lLFxuICAgICAgICAgICAgZmlyc3RfY29sdW1uOiB0aGlzLnl5bGxvYy5maXJzdF9jb2x1bW4sXG4gICAgICAgICAgICBsYXN0X2NvbHVtbjogdGhpcy55eWxsb2MubGFzdF9jb2x1bW4sXG4gICAgICAgICAgICByYW5nZTogdGhpcy55eWxsb2MucmFuZ2Uuc2xpY2UoMClcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgeXl0ZXh0OiB0aGlzLnl5dGV4dCxcbiAgICAgICAgICBtYXRjaDogdGhpcy5tYXRjaCxcbiAgICAgICAgICBtYXRjaGVzOiB0aGlzLm1hdGNoZXMsXG4gICAgICAgICAgbWF0Y2hlZDogdGhpcy5tYXRjaGVkLFxuICAgICAgICAgIHl5bGVuZzogdGhpcy55eWxlbmcsXG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICBfbW9yZTogdGhpcy5fbW9yZSxcbiAgICAgICAgICBfaW5wdXQ6IHRoaXMuX2lucHV0LFxuXG4gICAgICAgICAgLy9fc2lnbmFsZWRfZXJyb3JfdG9rZW46IHRoaXMuX3NpZ25hbGVkX2Vycm9yX3Rva2VuLFxuICAgICAgICAgIHl5OiB0aGlzLnl5LFxuXG4gICAgICAgICAgY29uZGl0aW9uU3RhY2s6IHRoaXMuY29uZGl0aW9uU3RhY2suc2xpY2UoMCksXG4gICAgICAgICAgZG9uZTogdGhpcy5kb25lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG1hdGNoX3N0ciA9IG1hdGNoWzBdO1xuICAgICAgbWF0Y2hfc3RyX2xlbiA9IG1hdGNoX3N0ci5sZW5ndGg7XG5cbiAgICAgIC8vIGlmIChtYXRjaF9zdHIuaW5kZXhPZignXFxuJykgIT09IC0xIHx8IG1hdGNoX3N0ci5pbmRleE9mKCdcXHInKSAhPT0gLTEpIHtcbiAgICAgIGxpbmVzID0gbWF0Y2hfc3RyLnNwbGl0KC8oPzpcXHJcXG4/fFxcbikvZyk7XG5cbiAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRoaXMueXlsaW5lbm8gKz0gbGluZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgdGhpcy55eWxsb2MubGFzdF9saW5lID0gdGhpcy55eWxpbmVubyArIDE7XG4gICAgICAgIHRoaXMueXlsbG9jLmxhc3RfY29sdW1uID0gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy55eWxsb2MubGFzdF9jb2x1bW4gKz0gbWF0Y2hfc3RyX2xlbjtcbiAgICAgIH1cblxuICAgICAgLy8gfVxuICAgICAgdGhpcy55eXRleHQgKz0gbWF0Y2hfc3RyO1xuXG4gICAgICB0aGlzLm1hdGNoICs9IG1hdGNoX3N0cjtcbiAgICAgIHRoaXMubWF0Y2hlZCArPSBtYXRjaF9zdHI7XG4gICAgICB0aGlzLm1hdGNoZXMgPSBtYXRjaDtcbiAgICAgIHRoaXMueXlsZW5nID0gdGhpcy55eXRleHQubGVuZ3RoO1xuICAgICAgdGhpcy55eWxsb2MucmFuZ2VbMV0gKz0gbWF0Y2hfc3RyX2xlbjtcblxuICAgICAgLy8gcHJldmlvdXMgbGV4IHJ1bGVzIE1BWSBoYXZlIGludm9rZWQgdGhlIGBtb3JlKClgIEFQSSByYXRoZXIgdGhhbiBwcm9kdWNpbmcgYSB0b2tlbjpcbiAgICAgIC8vIHRob3NlIHJ1bGVzIHdpbGwgYWxyZWFkeSBoYXZlIG1vdmVkIHRoaXMgYG9mZnNldGAgZm9yd2FyZCBtYXRjaGluZyB0aGVpciBtYXRjaCBsZW5ndGhzLFxuICAgICAgLy8gaGVuY2Ugd2UgbXVzdCBvbmx5IGFkZCBvdXIgb3duIG1hdGNoIGxlbmd0aCBub3c6XG4gICAgICB0aGlzLm9mZnNldCArPSBtYXRjaF9zdHJfbGVuO1xuXG4gICAgICB0aGlzLl9tb3JlID0gZmFsc2U7XG4gICAgICB0aGlzLl9iYWNrdHJhY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2lucHV0ID0gdGhpcy5faW5wdXQuc2xpY2UobWF0Y2hfc3RyX2xlbik7XG5cbiAgICAgIC8vIGNhbGxpbmcgdGhpcyBtZXRob2Q6XG4gICAgICAvL1xuICAgICAgLy8gICBmdW5jdGlvbiBsZXhlcl9fcGVyZm9ybUFjdGlvbih5eSwgeXlydWxlbnVtYmVyLCBZWV9TVEFSVCkgey4uLn1cbiAgICAgIHRva2VuID0gdGhpcy5wZXJmb3JtQWN0aW9uLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHRoaXMueXksXG4gICAgICAgIGluZGV4ZWRfcnVsZSxcbiAgICAgICAgdGhpcy5jb25kaXRpb25TdGFja1t0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDFdIC8qID0gWVlfU1RBUlQgKi9cbiAgICAgICk7XG5cbiAgICAgIC8vIG90aGVyd2lzZSwgd2hlbiB0aGUgYWN0aW9uIGNvZGVzIGFyZSBhbGwgc2ltcGxlIHJldHVybiB0b2tlbiBzdGF0ZW1lbnRzOlxuICAgICAgLy90b2tlbiA9IHRoaXMuc2ltcGxlQ2FzZUFjdGlvbkNsdXN0ZXJzW2luZGV4ZWRfcnVsZV07XG5cbiAgICAgIGlmICh0aGlzLmRvbmUgJiYgdGhpcy5faW5wdXQpIHtcbiAgICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbikge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAvLyByZWNvdmVyIGNvbnRleHRcbiAgICAgICAgZm9yICh2YXIgayBpbiBiYWNrdXApIHtcbiAgICAgICAgICB0aGlzW2tdID0gYmFja3VwW2tdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fX2N1cnJlbnRSdWxlU2V0X18gPSBudWxsO1xuICAgICAgICByZXR1cm4gZmFsc2U7ICAvLyBydWxlIGFjdGlvbiBjYWxsZWQgcmVqZWN0KCkgaW1wbHlpbmcgdGhlIG5leHQgcnVsZSBzaG91bGQgYmUgdGVzdGVkIGluc3RlYWQuIFxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9zaWduYWxlZF9lcnJvcl90b2tlbikge1xuICAgICAgICAvLyBwcm9kdWNlIG9uZSAnZXJyb3InIHRva2VuIGFzIGAucGFyc2VFcnJvcigpYCBpbiBgcmVqZWN0KClgXG4gICAgICAgIC8vIGRpZCBub3QgZ3VhcmFudGVlIGEgZmFpbHVyZSBzaWduYWwgYnkgdGhyb3dpbmcgYW4gZXhjZXB0aW9uIVxuICAgICAgICB0b2tlbiA9IHRoaXMuX3NpZ25hbGVkX2Vycm9yX3Rva2VuO1xuXG4gICAgICAgIHRoaXMuX3NpZ25hbGVkX2Vycm9yX3Rva2VuID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gbmV4dCBtYXRjaCBpbiBpbnB1dFxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgbmV4dDogZnVuY3Rpb24gbGV4ZXJfbmV4dCgpIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgICByZXR1cm4gdGhpcy5FT0Y7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faW5wdXQpIHtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHRva2VuLCBtYXRjaCwgdGVtcE1hdGNoLCBpbmRleDtcblxuICAgICAgaWYgKCF0aGlzLl9tb3JlKSB7XG4gICAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNwZWMgPSB0aGlzLl9fY3VycmVudFJ1bGVTZXRfXztcblxuICAgICAgaWYgKCFzcGVjKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcnVsZXNldCBjYWNoZSBhcyB3ZSBhcHBhcmVudGx5IGVuY291bnRlcmVkIGEgc3RhdGUgY2hhbmdlIG9yIGp1c3Qgc3RhcnRlZCBsZXhpbmcuXG4gICAgICAgIC8vIFRoZSBjYWNoZSBpcyBzZXQgdXAgZm9yIGZhc3QgbG9va3VwIC0tIHdlIGFzc3VtZSBhIGxleGVyIHdpbGwgc3dpdGNoIHN0YXRlcyBtdWNoIGxlc3Mgb2Z0ZW4gdGhhbiBpdCB3aWxsXG4gICAgICAgIC8vIGludm9rZSB0aGUgYGxleCgpYCB0b2tlbi1wcm9kdWNpbmcgQVBJIGFuZCByZWxhdGVkIEFQSXMsIGhlbmNlIGNhY2hpbmcgdGhlIHNldCBmb3IgZGlyZWN0IGFjY2VzcyBoZWxwc1xuICAgICAgICAvLyBzcGVlZCB1cCB0aG9zZSBhY3Rpdml0aWVzIGEgdGlueSBiaXQuXG4gICAgICAgIHNwZWMgPSB0aGlzLl9fY3VycmVudFJ1bGVTZXRfXyA9IHRoaXMuX2N1cnJlbnRSdWxlcygpO1xuXG4gICAgICAgIC8vIENoZWNrIHdoZXRoZXIgYSAqc2FuZSogY29uZGl0aW9uIGhhcyBiZWVuIHB1c2hlZCBiZWZvcmU6IHRoaXMgbWFrZXMgdGhlIGxleGVyIHJvYnVzdCBhZ2FpbnN0XG4gICAgICAgIC8vIHVzZXItcHJvZ3JhbW1lciBidWdzIHN1Y2ggYXMgaHR0cHM6Ly9naXRodWIuY29tL3phYWNoL2ppc29uLWxleC9pc3N1ZXMvMTlcbiAgICAgICAgaWYgKCFzcGVjIHx8ICFzcGVjLnJ1bGVzKSB7XG4gICAgICAgICAgdmFyIGxpbmVub19tc2cgPSAnJztcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tQb3NpdGlvbikge1xuICAgICAgICAgICAgbGluZW5vX21zZyA9ICcgb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcCA9IHRoaXMuY29uc3RydWN0TGV4RXJyb3JJbmZvKFxuICAgICAgICAgICAgJ0ludGVybmFsIGxleGVyIGVuZ2luZSBlcnJvcicgKyBsaW5lbm9fbXNnICsgJzogVGhlIGxleCBncmFtbWFyIHByb2dyYW1tZXIgcHVzaGVkIGEgbm9uLWV4aXN0aW5nIGNvbmRpdGlvbiBuYW1lIFwiJyArIHRoaXMudG9wU3RhdGUoKSArICdcIjsgdGhpcyBpcyBhIGZhdGFsIGVycm9yIGFuZCBzaG91bGQgYmUgcmVwb3J0ZWQgdG8gdGhlIGFwcGxpY2F0aW9uIHByb2dyYW1tZXIgdGVhbSEnLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgLy8gcHJvZHVjZSBvbmUgJ2Vycm9yJyB0b2tlbiB1bnRpbCB0aGlzIHNpdHVhdGlvbiBoYXMgYmVlbiByZXNvbHZlZCwgbW9zdCBwcm9iYWJseSBieSBwYXJzZSB0ZXJtaW5hdGlvbiFcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uTGV4ZXJFcnJvcikgfHwgdGhpcy5FUlJPUjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcnVsZV9pZHMgPSBzcGVjLnJ1bGVzO1xuICAgICAgdmFyIHJlZ2V4ZXMgPSBzcGVjLl9fcnVsZV9yZWdleGVzO1xuICAgICAgdmFyIGxlbiA9IHNwZWMuX19ydWxlX2NvdW50O1xuXG4gICAgICAvLyBOb3RlOiB0aGUgYXJyYXlzIGFyZSAxLWJhc2VkLCB3aGlsZSBgbGVuYCBpdHNlbGYgaXMgYSB2YWxpZCBpbmRleCxcbiAgICAgIC8vIGhlbmNlIHRoZSBub24tc3RhbmRhcmQgbGVzcy1vci1lcXVhbCBjaGVjayBpbiB0aGUgbmV4dCBsb29wIGNvbmRpdGlvbiFcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxlbjsgaSsrKSB7XG4gICAgICAgIHRlbXBNYXRjaCA9IHRoaXMuX2lucHV0Lm1hdGNoKHJlZ2V4ZXNbaV0pO1xuXG4gICAgICAgIGlmICh0ZW1wTWF0Y2ggJiYgKCFtYXRjaCB8fCB0ZW1wTWF0Y2hbMF0ubGVuZ3RoID4gbWF0Y2hbMF0ubGVuZ3RoKSkge1xuICAgICAgICAgIG1hdGNoID0gdGVtcE1hdGNoO1xuICAgICAgICAgIGluZGV4ID0gaTtcblxuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmFja3RyYWNrX2xleGVyKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRoaXMudGVzdF9tYXRjaCh0ZW1wTWF0Y2gsIHJ1bGVfaWRzW2ldKTtcblxuICAgICAgICAgICAgaWYgKHRva2VuICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JhY2t0cmFjaykge1xuICAgICAgICAgICAgICBtYXRjaCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgY29udGludWU7ICAvLyBydWxlIGFjdGlvbiBjYWxsZWQgcmVqZWN0KCkgaW1wbHlpbmcgYSBydWxlIE1JU21hdGNoLiBcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGVsc2U6IHRoaXMgaXMgYSBsZXhlciBydWxlIHdoaWNoIGNvbnN1bWVzIGlucHV0IHdpdGhvdXQgcHJvZHVjaW5nIGEgdG9rZW4gKGUuZy4gd2hpdGVzcGFjZSlcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMub3B0aW9ucy5mbGV4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHRva2VuID0gdGhpcy50ZXN0X21hdGNoKG1hdGNoLCBydWxlX2lkc1tpbmRleF0pO1xuXG4gICAgICAgIGlmICh0b2tlbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbHNlOiB0aGlzIGlzIGEgbGV4ZXIgcnVsZSB3aGljaCBjb25zdW1lcyBpbnB1dCB3aXRob3V0IHByb2R1Y2luZyBhIHRva2VuIChlLmcuIHdoaXRlc3BhY2UpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pbnB1dCkge1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLkVPRjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBsaW5lbm9fbXNnID0gJyc7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1Bvc2l0aW9uKSB7XG4gICAgICAgICAgbGluZW5vX21zZyA9ICcgb24gbGluZSAnICsgKHRoaXMueXlsaW5lbm8gKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwID0gdGhpcy5jb25zdHJ1Y3RMZXhFcnJvckluZm8oXG4gICAgICAgICAgJ0xleGljYWwgZXJyb3InICsgbGluZW5vX21zZyArICc6IFVucmVjb2duaXplZCB0ZXh0LicsXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmxleGVyRXJyb3JzQXJlUmVjb3ZlcmFibGVcbiAgICAgICAgKTtcblxuICAgICAgICB2YXIgcGVuZGluZ0lucHV0ID0gdGhpcy5faW5wdXQ7XG4gICAgICAgIHZhciBhY3RpdmVDb25kaXRpb24gPSB0aGlzLnRvcFN0YXRlKCk7XG4gICAgICAgIHZhciBjb25kaXRpb25TdGFja0RlcHRoID0gdGhpcy5jb25kaXRpb25TdGFjay5sZW5ndGg7XG4gICAgICAgIHRva2VuID0gdGhpcy5wYXJzZUVycm9yKHAuZXJyU3RyLCBwLCB0aGlzLkppc29uTGV4ZXJFcnJvcikgfHwgdGhpcy5FUlJPUjtcblxuICAgICAgICBpZiAodG9rZW4gPT09IHRoaXMuRVJST1IpIHtcbiAgICAgICAgICAvLyB3ZSBjYW4gdHJ5IHRvIHJlY292ZXIgZnJvbSBhIGxleGVyIGVycm9yIHRoYXQgYHBhcnNlRXJyb3IoKWAgZGlkIG5vdCAncmVjb3ZlcicgZm9yIHVzXG4gICAgICAgICAgLy8gYnkgbW92aW5nIGZvcndhcmQgYXQgbGVhc3Qgb25lIGNoYXJhY3RlciBhdCBhIHRpbWUgSUZGIHRoZSAodXNlci1zcGVjaWZpZWQ/KSBgcGFyc2VFcnJvcigpYFxuICAgICAgICAgIC8vIGhhcyBub3QgY29uc3VtZWQvbW9kaWZpZWQgYW55IHBlbmRpbmcgaW5wdXQgb3IgY2hhbmdlZCBzdGF0ZSBpbiB0aGUgZXJyb3IgaGFuZGxlcjpcbiAgICAgICAgICBpZiAoIXRoaXMubWF0Y2hlcyAmJiAvLyBhbmQgbWFrZSBzdXJlIHRoZSBpbnB1dCBoYXMgYmVlbiBtb2RpZmllZC9jb25zdW1lZCAuLi5cbiAgICAgICAgICBwZW5kaW5nSW5wdXQgPT09IHRoaXMuX2lucHV0ICYmIC8vIC4uLm9yIHRoZSBsZXhlciBzdGF0ZSBoYXMgYmVlbiBtb2RpZmllZCBzaWduaWZpY2FudGx5IGVub3VnaFxuICAgICAgICAgIC8vIHRvIG1lcml0IGEgbm9uLWNvbnN1bWluZyBlcnJvciBoYW5kbGluZyBhY3Rpb24gcmlnaHQgbm93LlxuICAgICAgICAgIGFjdGl2ZUNvbmRpdGlvbiA9PT0gdGhpcy50b3BTdGF0ZSgpICYmIGNvbmRpdGlvblN0YWNrRGVwdGggPT09IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gbmV4dCBtYXRjaCB0aGF0IGhhcyBhIHRva2VuXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICBsZXg6IGZ1bmN0aW9uIGxleGVyX2xleCgpIHtcbiAgICAgIHZhciByO1xuXG4gICAgICAvLyBhbGxvdyB0aGUgUFJFL1BPU1QgaGFuZGxlcnMgc2V0L21vZGlmeSB0aGUgcmV0dXJuIHRva2VuIGZvciBtYXhpbXVtIGZsZXhpYmlsaXR5IG9mIHRoZSBnZW5lcmF0ZWQgbGV4ZXI6XG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJlX2xleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByID0gdGhpcy5wcmVfbGV4LmNhbGwodGhpcywgMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnByZV9sZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gKGFsc28gYWNjb3VudCBmb3IgYSB1c2VyZGVmIGZ1bmN0aW9uIHdoaWNoIGRvZXMgbm90IHJldHVybiBhbnkgdmFsdWU6IGtlZXAgdGhlIHRva2VuIGFzIGlzKVxuICAgICAgICByID0gdGhpcy5vcHRpb25zLnByZV9sZXguY2FsbCh0aGlzLCByKSB8fCByO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy55eSAmJiB0eXBlb2YgdGhpcy55eS5wcmVfbGV4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIChhbHNvIGFjY291bnQgZm9yIGEgdXNlcmRlZiBmdW5jdGlvbiB3aGljaCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlOiBrZWVwIHRoZSB0b2tlbiBhcyBpcylcbiAgICAgICAgciA9IHRoaXMueXkucHJlX2xleC5jYWxsKHRoaXMsIHIpIHx8IHI7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICghcikge1xuICAgICAgICByID0gdGhpcy5uZXh0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnl5ICYmIHR5cGVvZiB0aGlzLnl5LnBvc3RfbGV4ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIChhbHNvIGFjY291bnQgZm9yIGEgdXNlcmRlZiBmdW5jdGlvbiB3aGljaCBkb2VzIG5vdCByZXR1cm4gYW55IHZhbHVlOiBrZWVwIHRoZSB0b2tlbiBhcyBpcylcbiAgICAgICAgciA9IHRoaXMueXkucG9zdF9sZXguY2FsbCh0aGlzLCByKSB8fCByO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5wb3N0X2xleCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyAoYWxzbyBhY2NvdW50IGZvciBhIHVzZXJkZWYgZnVuY3Rpb24gd2hpY2ggZG9lcyBub3QgcmV0dXJuIGFueSB2YWx1ZToga2VlcCB0aGUgdG9rZW4gYXMgaXMpXG4gICAgICAgIHIgPSB0aGlzLm9wdGlvbnMucG9zdF9sZXguY2FsbCh0aGlzLCByKSB8fCByO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHRoaXMucG9zdF9sZXggPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gKGFsc28gYWNjb3VudCBmb3IgYSB1c2VyZGVmIGZ1bmN0aW9uIHdoaWNoIGRvZXMgbm90IHJldHVybiBhbnkgdmFsdWU6IGtlZXAgdGhlIHRva2VuIGFzIGlzKVxuICAgICAgICByID0gdGhpcy5wb3N0X2xleC5jYWxsKHRoaXMsIHIpIHx8IHI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gbmV4dCBtYXRjaCB0aGF0IGhhcyBhIHRva2VuLiBJZGVudGljYWwgdG8gdGhlIGBsZXgoKWAgQVBJIGJ1dCBkb2VzIG5vdCBpbnZva2UgYW55IG9mIHRoZSBcbiAgICAgKiBgcHJlX2xleCgpYCBub3IgYW55IG9mIHRoZSBgcG9zdF9sZXgoKWAgY2FsbGJhY2tzLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgZmFzdExleDogZnVuY3Rpb24gbGV4ZXJfZmFzdExleCgpIHtcbiAgICAgIHZhciByO1xuXG4gICAgICB3aGlsZSAoIXIpIHtcbiAgICAgICAgciA9IHRoaXMubmV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIGluZm8gYWJvdXQgdGhlIGxleGVyIHN0YXRlIHRoYXQgY2FuIGhlbHAgYSBwYXJzZXIgb3Igb3RoZXIgbGV4ZXIgQVBJIHVzZXIgdG8gdXNlIHRoZVxuICAgICAqIG1vc3QgZWZmaWNpZW50IG1lYW5zIGF2YWlsYWJsZS4gVGhpcyBBUEkgaXMgcHJvdmlkZWQgdG8gYWlkIHJ1bi10aW1lIHBlcmZvcm1hbmNlIGZvciBsYXJnZXJcbiAgICAgKiBzeXN0ZW1zIHdoaWNoIGVtcGxveSB0aGlzIGxleGVyLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgY2FuSVVzZTogZnVuY3Rpb24gbGV4ZXJfY2FuSVVzZSgpIHtcbiAgICAgIHZhciBydiA9IHtcbiAgICAgICAgZmFzdExleDogISh0eXBlb2YgdGhpcy5wcmVfbGV4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLm9wdGlvbnMucHJlX2xleCA9PT0gJ2Z1bmN0aW9uJyB8fCB0aGlzLnl5ICYmIHR5cGVvZiB0aGlzLnl5LnByZV9sZXggPT09ICdmdW5jdGlvbicgfHwgdGhpcy55eSAmJiB0eXBlb2YgdGhpcy55eS5wb3N0X2xleCA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgdGhpcy5vcHRpb25zLnBvc3RfbGV4ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0aGlzLnBvc3RfbGV4ID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2YgdGhpcy5mYXN0TGV4ID09PSAnZnVuY3Rpb24nXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcnY7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJhY2t3YXJkcyBjb21wYXRpYmxlIGFsaWFzIGZvciBgcHVzaFN0YXRlKClgO1xuICAgICAqIHRoZSBsYXR0ZXIgaXMgc3ltbWV0cmljYWwgd2l0aCBgcG9wU3RhdGUoKWAgYW5kIHdlIGFkdmlzZSB0byB1c2VcbiAgICAgKiB0aG9zZSBBUElzIGluIGFueSBtb2Rlcm4gbGV4ZXIgY29kZSwgcmF0aGVyIHRoYW4gYGJlZ2luKClgLlxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgYmVnaW46IGZ1bmN0aW9uIGxleGVyX2JlZ2luKGNvbmRpdGlvbikge1xuICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YXRlKGNvbmRpdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGFjdGl2YXRlcyBhIG5ldyBsZXhlciBjb25kaXRpb24gc3RhdGUgKHB1c2hlcyB0aGUgbmV3IGxleGVyXG4gICAgICogY29uZGl0aW9uIHN0YXRlIG9udG8gdGhlIGNvbmRpdGlvbiBzdGFjaylcbiAgICAgKiBcbiAgICAgKiBAcHVibGljXG4gICAgICogQHRoaXMge1JlZ0V4cExleGVyfVxuICAgICAqL1xuICAgIHB1c2hTdGF0ZTogZnVuY3Rpb24gbGV4ZXJfcHVzaFN0YXRlKGNvbmRpdGlvbikge1xuICAgICAgdGhpcy5jb25kaXRpb25TdGFjay5wdXNoKGNvbmRpdGlvbik7XG4gICAgICB0aGlzLl9fY3VycmVudFJ1bGVTZXRfXyA9IG51bGw7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcG9wIHRoZSBwcmV2aW91c2x5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGUgb2ZmIHRoZSBjb25kaXRpb25cbiAgICAgKiBzdGFja1xuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgcG9wU3RhdGU6IGZ1bmN0aW9uIGxleGVyX3BvcFN0YXRlKCkge1xuICAgICAgdmFyIG4gPSB0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAtIDE7XG5cbiAgICAgIGlmIChuID4gMCkge1xuICAgICAgICB0aGlzLl9fY3VycmVudFJ1bGVTZXRfXyA9IG51bGw7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbmRpdGlvblN0YWNrLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbMF07XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZXhlciBjb25kaXRpb24gc3RhdGU7IHdoZW4gYW4gaW5kZXhcbiAgICAgKiBhcmd1bWVudCBpcyBwcm92aWRlZCBpdCBwcm9kdWNlcyB0aGUgTi10aCBwcmV2aW91cyBjb25kaXRpb24gc3RhdGUsXG4gICAgICogaWYgYXZhaWxhYmxlXG4gICAgICogXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0aGlzIHtSZWdFeHBMZXhlcn1cbiAgICAgKi9cbiAgICB0b3BTdGF0ZTogZnVuY3Rpb24gbGV4ZXJfdG9wU3RhdGUobikge1xuICAgICAgbiA9IHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMSAtIE1hdGguYWJzKG4gfHwgMCk7XG5cbiAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2tbbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ0lOSVRJQUwnO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiAoaW50ZXJuYWwpIGRldGVybWluZSB0aGUgbGV4ZXIgcnVsZSBzZXQgd2hpY2ggaXMgYWN0aXZlIGZvciB0aGVcbiAgICAgKiBjdXJyZW50bHkgYWN0aXZlIGxleGVyIGNvbmRpdGlvbiBzdGF0ZVxuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgX2N1cnJlbnRSdWxlczogZnVuY3Rpb24gbGV4ZXJfX2N1cnJlbnRSdWxlcygpIHtcbiAgICAgIGlmICh0aGlzLmNvbmRpdGlvblN0YWNrLmxlbmd0aCAmJiB0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1t0aGlzLmNvbmRpdGlvblN0YWNrW3RoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoIC0gMV1dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uc1snSU5JVElBTCddO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIG51bWJlciBvZiBzdGF0ZXMgY3VycmVudGx5IG9uIHRoZSBzdGFja1xuICAgICAqIFxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdGhpcyB7UmVnRXhwTGV4ZXJ9XG4gICAgICovXG4gICAgc3RhdGVTdGFja1NpemU6IGZ1bmN0aW9uIGxleGVyX3N0YXRlU3RhY2tTaXplKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uZGl0aW9uU3RhY2subGVuZ3RoO1xuICAgIH0sXG5cbiAgICBvcHRpb25zOiB7XG4gICAgICB0cmFja1Bvc2l0aW9uOiB0cnVlXG4gICAgfSxcblxuICAgIEppc29uTGV4ZXJFcnJvcjogSmlzb25MZXhlckVycm9yLFxuXG4gICAgcGVyZm9ybUFjdGlvbjogZnVuY3Rpb24gbGV4ZXJfX3BlcmZvcm1BY3Rpb24oeXksIHl5cnVsZW51bWJlciwgWVlfU1RBUlQpIHtcbiAgICAgIHZhciB5eV8gPSB0aGlzO1xuICAgICAgdmFyIFlZU1RBVEUgPSBZWV9TVEFSVDtcblxuICAgICAgc3dpdGNoICh5eXJ1bGVudW1iZXIpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAgIC8qISBSdWxlOjogICAgICAgXFxzKyAqL1xuICAgICAgICAvKiBza2lwIHdoaXRlc3BhY2UgKi9cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLnNpbXBsZUNhc2VBY3Rpb25DbHVzdGVyc1t5eXJ1bGVudW1iZXJdO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBzaW1wbGVDYXNlQWN0aW9uQ2x1c3RlcnM6IHtcbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXCogKi9cbiAgICAgIDE6IDUsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXC8gKi9cbiAgICAgIDI6IDYsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICBcXCsgKi9cbiAgICAgIDM6IDMsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAtICovXG4gICAgICA0OiA0LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcHhcXGIgKi9cbiAgICAgIDU6IDEzLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspY21cXGIgKi9cbiAgICAgIDY6IDEzLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspbW1cXGIgKi9cbiAgICAgIDc6IDEzLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspaW5cXGIgKi9cbiAgICAgIDg6IDEzLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcHRcXGIgKi9cbiAgICAgIDk6IDEzLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcGNcXGIgKi9cbiAgICAgIDEwOiAxMyxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWRlZ1xcYiAqL1xuICAgICAgMTE6IDE0LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZ3JhZFxcYiAqL1xuICAgICAgMTI6IDE0LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspcmFkXFxiICovXG4gICAgICAxMzogMTQsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyl0dXJuXFxiICovXG4gICAgICAxNDogMTQsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylzXFxiICovXG4gICAgICAxNTogMTUsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyltc1xcYiAqL1xuICAgICAgMTY6IDE1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspSHpcXGIgKi9cbiAgICAgIDE3OiAxNixcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWtIelxcYiAqL1xuICAgICAgMTg6IDE2LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZHBpXFxiICovXG4gICAgICAxOTogMTcsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylkcGNtXFxiICovXG4gICAgICAyMDogMTcsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylkcHB4XFxiICovXG4gICAgICAyMTogMTcsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyllbVxcYiAqL1xuICAgICAgMjI6IDE4LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspZXhcXGIgKi9cbiAgICAgIDIzOiAxOSxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKWNoXFxiICovXG4gICAgICAyNDogMjAsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKylyZW1cXGIgKi9cbiAgICAgIDI1OiAyMSxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIChbMC05XSsoXFwuWzAtOV0qKT98XFwuWzAtOV0rKXZ3XFxiICovXG4gICAgICAyNjogMjMsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoWzAtOV0rKFxcLlswLTldKik/fFxcLlswLTldKyl2aFxcYiAqL1xuICAgICAgMjc6IDIyLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspdm1pblxcYiAqL1xuICAgICAgMjg6IDI0LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspdm1heFxcYiAqL1xuICAgICAgMjk6IDI1LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspJSAqL1xuICAgICAgMzA6IDI2LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKFswLTldKyhcXC5bMC05XSopP3xcXC5bMC05XSspXFxiICovXG4gICAgICAzMTogMTEsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoY2FsYykgKi9cbiAgICAgIDMyOiA5LFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgKHZhclxcKFteXFwpXSpcXCkpICovXG4gICAgICAzMzogMTIsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAoW2Etel0rKSAqL1xuICAgICAgMzQ6IDEwLFxuXG4gICAgICAvKiEgQ29uZGl0aW9uczo6IElOSVRJQUwgKi9cbiAgICAgIC8qISBSdWxlOjogICAgICAgXFwoICovXG4gICAgICAzNTogNyxcblxuICAgICAgLyohIENvbmRpdGlvbnM6OiBJTklUSUFMICovXG4gICAgICAvKiEgUnVsZTo6ICAgICAgIFxcKSAqL1xuICAgICAgMzY6IDgsXG5cbiAgICAgIC8qISBDb25kaXRpb25zOjogSU5JVElBTCAqL1xuICAgICAgLyohIFJ1bGU6OiAgICAgICAkICovXG4gICAgICAzNzogMVxuICAgIH0sXG5cbiAgICBydWxlczogW1xuICAgICAgLyogIDA6ICovICAvXig/OlxccyspLyxcbiAgICAgIC8qICAxOiAqLyAgL14oPzpcXCopLyxcbiAgICAgIC8qICAyOiAqLyAgL14oPzpcXC8pLyxcbiAgICAgIC8qICAzOiAqLyAgL14oPzpcXCspLyxcbiAgICAgIC8qICA0OiAqLyAgL14oPzotKS8sXG4gICAgICAvKiAgNTogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspcHhcXGIpLyxcbiAgICAgIC8qICA2OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyljbVxcYikvLFxuICAgICAgLyogIDc6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKW1tXFxiKS8sXG4gICAgICAvKiAgODogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspaW5cXGIpLyxcbiAgICAgIC8qICA5OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylwdFxcYikvLFxuICAgICAgLyogMTA6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXBjXFxiKS8sXG4gICAgICAvKiAxMTogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspZGVnXFxiKS8sXG4gICAgICAvKiAxMjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspZ3JhZFxcYikvLFxuICAgICAgLyogMTM6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXJhZFxcYikvLFxuICAgICAgLyogMTQ6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXR1cm5cXGIpLyxcbiAgICAgIC8qIDE1OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylzXFxiKS8sXG4gICAgICAvKiAxNjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspbXNcXGIpLyxcbiAgICAgIC8qIDE3OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylIelxcYikvLFxuICAgICAgLyogMTg6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWtIelxcYikvLFxuICAgICAgLyogMTk6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWRwaVxcYikvLFxuICAgICAgLyogMjA6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWRwY21cXGIpLyxcbiAgICAgIC8qIDIxOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylkcHB4XFxiKS8sXG4gICAgICAvKiAyMjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspZW1cXGIpLyxcbiAgICAgIC8qIDIzOiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKylleFxcYikvLFxuICAgICAgLyogMjQ6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKWNoXFxiKS8sXG4gICAgICAvKiAyNTogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspcmVtXFxiKS8sXG4gICAgICAvKiAyNjogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspdndcXGIpLyxcbiAgICAgIC8qIDI3OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyl2aFxcYikvLFxuICAgICAgLyogMjg6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKXZtaW5cXGIpLyxcbiAgICAgIC8qIDI5OiAqLyAgL14oPzooXFxkKyhcXC5cXGQqKT98XFwuXFxkKyl2bWF4XFxiKS8sXG4gICAgICAvKiAzMDogKi8gIC9eKD86KFxcZCsoXFwuXFxkKik/fFxcLlxcZCspJSkvLFxuICAgICAgLyogMzE6ICovICAvXig/OihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKVxcYikvLFxuICAgICAgLyogMzI6ICovICAvXig/OihjYWxjKSkvLFxuICAgICAgLyogMzM6ICovICAvXig/Oih2YXJcXChbXildKlxcKSkpLyxcbiAgICAgIC8qIDM0OiAqLyAgL14oPzooW2Etel0rKSkvLFxuICAgICAgLyogMzU6ICovICAvXig/OlxcKCkvLFxuICAgICAgLyogMzY6ICovICAvXig/OlxcKSkvLFxuICAgICAgLyogMzc6ICovICAvXig/OiQpL1xuICAgIF0sXG5cbiAgICBjb25kaXRpb25zOiB7XG4gICAgICAnSU5JVElBTCc6IHtcbiAgICAgICAgcnVsZXM6IFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIDEsXG4gICAgICAgICAgMixcbiAgICAgICAgICAzLFxuICAgICAgICAgIDQsXG4gICAgICAgICAgNSxcbiAgICAgICAgICA2LFxuICAgICAgICAgIDcsXG4gICAgICAgICAgOCxcbiAgICAgICAgICA5LFxuICAgICAgICAgIDEwLFxuICAgICAgICAgIDExLFxuICAgICAgICAgIDEyLFxuICAgICAgICAgIDEzLFxuICAgICAgICAgIDE0LFxuICAgICAgICAgIDE1LFxuICAgICAgICAgIDE2LFxuICAgICAgICAgIDE3LFxuICAgICAgICAgIDE4LFxuICAgICAgICAgIDE5LFxuICAgICAgICAgIDIwLFxuICAgICAgICAgIDIxLFxuICAgICAgICAgIDIyLFxuICAgICAgICAgIDIzLFxuICAgICAgICAgIDI0LFxuICAgICAgICAgIDI1LFxuICAgICAgICAgIDI2LFxuICAgICAgICAgIDI3LFxuICAgICAgICAgIDI4LFxuICAgICAgICAgIDI5LFxuICAgICAgICAgIDMwLFxuICAgICAgICAgIDMxLFxuICAgICAgICAgIDMyLFxuICAgICAgICAgIDMzLFxuICAgICAgICAgIDM0LFxuICAgICAgICAgIDM1LFxuICAgICAgICAgIDM2LFxuICAgICAgICAgIDM3XG4gICAgICAgIF0sXG5cbiAgICAgICAgaW5jbHVzaXZlOiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsZXhlcjtcbn0oKTtcbnBhcnNlci5sZXhlciA9IGxleGVyO1xuXG5cblxuZnVuY3Rpb24gUGFyc2VyKCkge1xuICB0aGlzLnl5ID0ge307XG59XG5QYXJzZXIucHJvdG90eXBlID0gcGFyc2VyO1xucGFyc2VyLlBhcnNlciA9IFBhcnNlcjtcblxucmV0dXJuIG5ldyBQYXJzZXIoKTtcbn0pKCk7XG5cbiAgICAgICAgXG5cblxuaWYgKHR5cGVvZiByZXF1aXJlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgZXhwb3J0cy5wYXJzZXIgPSBwYXJzZXI7XG4gIGV4cG9ydHMuUGFyc2VyID0gcGFyc2VyLlBhcnNlcjtcbiAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlLmFwcGx5KHBhcnNlciwgYXJndW1lbnRzKTtcbiAgfTtcbiAgXG59XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9